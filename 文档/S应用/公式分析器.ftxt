### 节点
地址, 的, 公式分析器, 目录, 的, 的, 规则, 的, 想法, 的, 算式, 的, 等式, 的, 等于, 的, 和式, 的, 测试, 的, 空, 的, 乘式, 的, 特殊表达式, 的, 项, 的, 数字, 的, 测试, 的, 变量, 的, 测试, 的, 括号, 的, 加减, 的, 乘除, 的, 积分式, 的, 下标, 的, 匹配模式, 的, 幂次, 的, 句子相关, 的, 测试, 的, 输出结构, 的, 节点数目统计, 20210606, 的, 的, 星图, 的, 操作, 的, 生成公式结构, 的, 结构修饰, 算式, 等式, 和式, 乘式2, 项, 微分, 括号, 数字, 变量, 20210805, 的, 20210806, 的, 20211120, 的, 的, 分式, 的, 幂次, 的, 写下标, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, LaTeX, 的, LaTeX, 的, LaTeX, 的, LaTeX, 的, LaTeX, 的, 输出类型, 的, 获取输出模板, 的, 描述, 的, 库, 的, 生成公式代码, 的, 匹配模板, 的, 输出模板, 的, Matlab, 的, Matlab, 的, Matlab, 的, Matlab, 的, Matlab, 的, Matlab, 的, LaTeX, 的, P代码, 的, 矩阵输入, 的, 函数输入, 的, 显示LaTeX公式, 的, 匹配模板, 的, 输出模板, 20211122, 的, 的, 网页画板, 20211123, 的, 20211217, 的, 20211219, 的, 词典, 的, 结构转换4, 的, 匹配模板, 的, 输出模板, 的, 结构转换3, 的, 匹配模板, 的, 输出模板, 的, 更新函数入口, 的, 匹配模板, 的, 输出模板, 20211224, 的, 的, 结构变换, 的, 转换公式结构, 的, 结构变换, 20211226, 的, 20211227, 的, 20211228, 的, 的, 表达式, 的, 表达式, 的, 表达式, 的, 表达式, 的, 表达式, 的, 表达式, 20211231, 的, 20220101, 的, 输出模板, 匹配模板, 的, 的, 写入公式3, 的, 20220114, 的, 的, 描述公式, 函数输入, 算式, 等式, 和式, 乘式, 项, 分式, 括号, 数字, 变量, 幂次, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 库, 的, 20220115, 的, 的, P代码, 的, 结构语言, 的, 结构语言, 的, 结构语言, 的, 结构语言, 的, 结构语言, 的, 结构语言, 的, 公式序号, 的, 公式序号, 的, 清空序号, 的, 新名词, 的, 结构语言, 的, 结构转名词, 20220202, 的, 的, 更新公式起点, 20220204, 的, 匹配模板, 输出模板, 的, 的, 结构转换2, 的, 分式, 的, 输出模板, 匹配模板, 的, 的, 结构转换, 的, 的, 公式头, 表达式, Matlab, LaTeX, 的, 的, 的, 矢量, 的, 20220206, 的, 匹配模板, 输出模板, 的, 的, 写入公式, 的, 句子库, 的, 记忆, 20220218, 的, 的, 结构语言2, 20220219, 的, 20220220, 的, 的, 微分积分, 的, 的, 的, 的, 表达式, 的, [1]., 公式, 根式, 的, 20220224, 的, 的, 结构, 偏微分, 微分, 的, 答案, 回答, 的, [1]., LaTeX, Matlab, 表达式, 的, 的, 的, 分式, 的, LaTeX, 表达式, Matlab, 的, 的, 的, 求和式, 的, 偏微分, 偏微分, 偏微分, 矢量, 的, 20220225, 的, 表达式, Matlab, LaTeX, 的, 的, 的, 根式, 的, 20220305, 的, 的, 测试, 的, 保存, 的, 保存2, 20220306, 的, 20220311, 的, 20220313, 的, 20220320, 的, 20220331, 的, 匹配模板, 输出模板, 的, 的, 写入公式2, 的, 20220401, 的, 20220514, 的, 20220613, 的, 20220713, 的, 20220714, 的, 20220723, 的, 的, 算式结构转换, 20220801, 的, 20220804, 的, 20220807, 的, 的, 链式结构, 的, 保存, 的, 保存, 的, 算式, 的, 保存, 的, P代码_LaTeX, 的, 保存, 的, P代码_0, 的, [1]., 手, 表达式, 的, 公式, 的, 保存, 的, 保存, 的, 保存, 的, 保存, 的, 保存, 的, [2]., 手, 表达式, 的, 公式, 的, [3]., 表达式, 的, 公式, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 函数输入, 的, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 的, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 方程组, 的, LaTeX, Matlab, 表达式, 的, 的, 的, 偏微分, 的, 的, 矢量矩阵, 的, 保存, 的, 矢量输入, 的, LaTeX2, 的, 表达式2, 的, Matlab2, Matlab2, 表达式2, LaTeX2, 矩阵输入, 保存, LaTeX, Matlab, 表达式, 的, 的, 的, 的, 的, 的, 的, 的, 方程组, 的, 的, [4]., 的, [5]., 表达式, 的, 公式, 表达式, 的, 公式, 20220808, 的, 20220811, 的, 的, [1]., 表达式, 的, 公式, 的, [2]., 表达式, 的, 公式, 20220812, 的, 20220813, 的, 手, 的, [3]., 表达式, 的, 公式, 的, 匹配测试, 的, [1]., 表达式, 的, 公式, 的, 匹配结构, 表达式, 的, 公式, 的, 公式结构匹配, 的, 库, 的, 局部和式, 算式, 的, 局部乘式, 的, 手, 项内容, 的, 数字, 的, 的, 库, 的, 变量匹配, 等式, 的, 括号, 的, 矩阵, 的, 变量, 的, 函数, 的, 20220814, 的, 手, 手, 的, [2]., 表达式, 的, 公式, 的, 公式结构代入, 的, 操作, 的, 等式, 手, 的, 保存, 的, 保存, 和式, 乘式, 的, 的, 局部项, 项, 的, 的, 保存, 手, 20220816, 的, 积分式, 的, 根式, 的, 20220818, 的, 偏微分, 的, 20220823, 的, 的, 运算测试, 的, [1]., 手, 表达式, 的, 公式, 的, 公式结构加括号, 的, 操作库, 结构描述, 的, [2]., 表达式, 的, 公式, 手, 0, 0, 0, 0, 手, 结构描述, 的, 想法库, 关联同级, 最低关联_右, 的, 的, 结构描述, 的, 合并结构, 的, 操作库, 的, 的, 公式结构提取, 的, 的, 括号, /, +, 括号, -, 答案, 回答, 算式尾部, 的, 结构描述, 操作库, 的, 的, 公式结构拆括号, 的, 的, 相反数, 的, 倒数, 的, 保存, 括号, 括号, 括号, 括号, 括号, 括号, 括号, 括号, 括号, *, 操作库, 加括号, 算式尾部, 的, 的, 结构描述, 的, 的, 公式结构插入, 的, 的, 括号运算, 的, 相反数, 的, 倒数, /, 的, 整理乘式结构, 20220827, 的, 的, 结构描述, 的, 保存, 更新指数, 的, 数字指数, 的, 变量指数, 的, P代码, 的, 搜索乘式, 的, 的, 保存, 的, 公式描述_结构, 的, 想法库, 的, 乘式, 和式, 的, 的, 项, 的, 括号, 变量, 的, 的, 测试公式结构系列操作, 的, 测试整理乘式, 分式, 的, 20220828, 的, 手, 匹配结构, 匹配结构, +, +, 20220902, 的, 的, P代码, 矩阵, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 偏微分, 矩阵, 的, 表达式, Matlab, LaTeX, 保存, 矩阵输入, LaTeX2, 表达式2, Matlab2, 的, 的, 的, 的, 的, 的, 的, 的, 矩阵, 的, 的, LaTeX2, 的, Matlab2, 20220903, 的, 的, LaTeX_序号, 的, Matlab_序号, 的, 表达式_序号, 20220904, 的, 手, 的, 语句操作, 的, 分式演算, 和式, 和式, 的, 结构描述, 的, 库, 的, 左乘右常, 的, 保存, 手, 的, 库, 的, 合并乘式, 移到左边, 的, 整理左边, 的, 手, 拆括号, 的, 移到右边, 的, 除到左边2, 的, 的, P代码, 手, 20220907, 的, 的, 描述公式, 加括号n次方, 的, 左和右和, 的, 整理左边乘式, 的, 的, 公式特征描述, 的, 库, 手, 的, 整理和式结构, 的, 结构描述, 的, 和式整理, 的, 操作库, 的, 合并乘式, 的, 操作, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 1, 变量, 20220908, 的, 的, 整理乘式, 的, 合并乘式, 的, 测试整理和式, 整理乘式, 的, 手, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 变量, 函数, 的, 根式, 的, 的, 处理分式, 的, 移动系数, 的, n次方, 去根式, 的, 加括号, 的, 的, 操作, 除到右边2, 的, 的, 交换左右, 的, P代码, 20220909, 的, 括号n次方, 的, 乘到右边2, 的, 乘到左边2, 的, 的, 剔除分式, 乘到左边, 的, 乘到右边, 的, 除到右边, 的, 除到左边, 的, 手, 变量, 变量, 变量, 的, 库, 的, 更新指数, 的, 结构描述, 的, 操作库, 的, 加括号倍数, 的, 数字倍数, 的, P代码, 的, 倍数, 2, *, 括号, 2, *, 括号, 2, *, 20220911, 的, 的, 数字n次方, 的, P代码, 根式平方, 的, P代码, 的, 数字平方, 倍数, P代码, 的, 数字倍数, 加括号倍数, 的, 的, 的, 操作库, 结构描述, 的, 的, 更新指数, 的, 的, 库, 的, 平方, 的, 操作, 的, 加括号平方, 的, 的, 消除指数, 的, 结构描述, 的, 乘式, 乘式, 的, 结构描述, 的, 20220917, 的, 的, 保存, 20220918, 的, 的, 整体框架, 的, [1]., 表达式, 的, 公式, 的, 结构描述, 的, 输出代码, 的, 库, 的, 保存, 的, 算式, 的, 方程组, 的, 结构描述, 的, 分类, 的, 一类, 的, 库, 的, 生成代码_M, 操作模板, 条件模板, 的, P代码, 的, 去负号, 的, 结构描述, 的, 乘式头, 的, 测试结构, 20220921, 的, 的, 公式分析_代码, 的, P代码, 的, 函数定义, 的, 测试, 的, 测试word_pat_token, 20220922, 的, 手, 内容, 的, 的, 测试文本模板, 的, 结构样本, html, 的, [1]., 表达式, 的, 公式, 的, 测试结构, 的, 算式版本, 的, 结构语言版本, 20220923, 的, 的, 的, 的, 的, 的, 的, 负号, c, *, b, a, *, 20220925, 的, 的, P模板, 的, P模板, else模板_M, else模板_P, 操作模板_M, 操作模板_P, 条件模板_M, 条件模板_P, 的, 的, 的, 的, 的, 的, 生成代码, 的, 20220928, 的, 的, 表达式转结构, 20220930, 的, 20221001, 的, 的, Python, 的, lambda函数2, 20221008, 的, 矢量, 的, 的, LaTeX2, 的, LaTeX2, 的, 表达式2, 20221016, 的, 20221029, 的, 20221106, 的, 20221107, 的, 方程, 的, 结构描述, 的, 方程组2, 的, 20221108, 的, 20221110, 的, 20221111, 的, 20221112, 的, 20221113, 的, 20221118, 的, 的, 保存term_mat_token, 20221126, 的, Matlab, 表达式, LaTeX, 的, 的, 的, 积分式, 的, 的, 保存, 的, P代码, 的, P代码0, lambda函数, 的, 的, 保存, 的, P代码, 的, 保存, 的, P代码, 的, 抽象结构, 的, [1]., 表达式, 的, 公式, 根式, 函数, 分式, 变量, 括号, 项, 和式, 乘式, 的, 的, 的, 的, 的, 的, 的, 的, 想法库, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 公式描述, 的, 公式描述, 的, 在, 在, 在, 在, 在, 在, 的, 结构, 的, 描述抽象结构, 的, P代码, 的, 保存, 在, 在, 分式, 的, 微分, 的, 的, 的, 的, 的, 保存, 的, 函数输入, P代码, 保存, 表达式, Matlab, LaTeX, 的, 的, 的, 的, 的, 乘式, 的, 的, 求和运算, 的, [3]., 表达式, 的, 公式, 的, P代码_函数, 的, 保存, 的, 保存, 的, 保存term_var_token, 的, P代码1, 的, 保存, P代码2, 的, P代码, 的, 的, 保存, 的, 序号, 的, 保存, 的, P代码_序号, 的, 保存, 的, P代码, 的, P代码1, 的, 保存, 的, P代码, 的, 保存, 的, P代码, 的, P代码1, 的, P代码, 的, 保存, 的, 收集矩阵内容, 的, 收集行, 的, P代码, 的, P代码, 的, 保存, 的, P代码, 的, 保存, 的, 保存, 的, P代码, 的, P代码, 手, 的, P代码_负号, 的, 条件参考, 的, 数目参考, 的, 测试, 的, 保存, 的, 删除表达式, 的, 初等化简, 的, 描述结构, 的, 库, 的, 去括号, 的, 化简1, 化简0, 的, 的, 头部, 的, 收集乘式系数, 的, 收集项, 收集乘式, 的, 收集括号内容, 的, 
### 关联
#, 2#0, #, #, 3#2, 2#6, #, 2#8, #, 8#10, #, 8#12, #, 8#14, #, 8#16, #, 16#18, #, 8#20, #, 8#22, #, 8#24, #, 8#26, #, 8#28, #, 28#30, #, 8#32, #, 32#34, #, 8#36, #, 8#38, #, 8#40, #, 8#42, #, 8#44, #, 8#46, #, 8#48, #, 2#50, #, 2#52, #, 52#54, #, 3#56, #, #, 56#57, 2#60, #, 2#62, #, 62#64, #, 64#66, #, #, #, #, #, #, #, #, #, #, #, 56#76, #, 56#78, #, 56#80, 52#83, #, 62#85, #, 62#87, #, 62#75, 62#74, 62#73, 62#72, 62#71, 62#70, 62#69, 62#68, 62#67, 72#98, #, 73#100, #, 85#102, #, 69#104, #, 70#106, #, 8#108, #, 62#110, #, 62#112, #, 112#114, #, 114#116, #, 116#118, #, 116#120, #, 69#122, #, 70#124, #, 72#126, #, 73#128, #, 85#130, #, 87#132, #, 87#134, #, 75#136, #, 8#138, #, 62#140, #, 114#142, #, 142#144, #, 142#146, #, #, 56#147, 2#150, #, #, 56#151, #, 56#153, #, 56#155, #, 114#159, #, 159#161, #, 159#163, #, 114#165, #, 165#167, #, 165#169, #, 114#171, #, 171#173, #, 171#175, #, #, 56#176, 64#179, #, 62#181, #, 181#183, #, #, 56#184, #, 56#186, #, 56#188, 69#191, #, 70#193, #, 72#195, #, 73#197, #, 87#199, #, 85#201, #, #, 56#202, #, 56#204, #, #, 210#206, 210#207, #, 114#210, #, 56#212, 62#215, #, #, #, #, #, #, #, #, #, #, #, #, 238#216, 238#217, 238#218, 238#219, 238#220, 238#221, 238#222, 238#223, 238#224, 238#225, 238#226, #, 215#238, #, 56#240, 225#243, #, 226#245, #, 223#247, #, 222#249, #, 220#251, #, 219#253, #, 216#255, #, 8#257, #, 62#259, #, 62#261, #, 238#263, #, 263#265, #, 238#267, #, #, 56#268, 62#271, #, #, 56#272, #, #, 278#274, 278#275, #, 114#278, #, 8#280, #, #, 286#282, 286#283, #, 114#286, 8#289, #, #, #, #, 296#290, 296#291, 296#292, #, 62#296, #, 56#298, #, #, 304#300, 304#301, #, 114#304, #114, 308#306, 3#, #, 56#309, 216#312, #, #, 56#313, #, 56#315, 2#318, #, 318#323, 318#324, 318#325, 318#326, #, 325#323, #, 325#, #, 8#327, #, 56#329, 318#332, #, 334#, #, 8#334, #, 318#, 318#339, #, #, #, #, 346#340, 346#341, 346#342, #, 62#346, #, #, #, 354#348, 354#349, 354#350, #, 62#354, 359#, 359#, 359#, #, 8#359, #, 56#361, #, #, #, 369#363, 369#364, 369#365, #, 62#369, #, 56#371, 280#374, #, 280#376, #, 280#378, #, #, 56#379, #, 56#381, #, 56#383, #, 56#385, #, 56#387, #, #, 393#389, 393#390, #, 114#393, #, 56#395, #, 56#397, #, 56#399, #, 56#401, #, 56#403, #, 56#405, 62#408, #, #, 56#409, #, 56#411, #, 56#413, 2#416, #, 22#418, #, 183#420, #, 52#422, #, 32#424, #, 75#426, #, 75#428, #, 75#430, #, 416#432, #, #416, #, 432#434, 432#, 40#438, #, 38#440, #, 14#442, #, 36#444, #, 28#446, #, 416#448, #, #416, #, 448#450, 448#, 416#454, #, #, 454#455, 454#, 473#, 473#, 473#, 473#, 473#, 473#, 473#, 473#, 473#, 473#, 473#, 473#, 473#, 473#, 473#, #, 8#473, 482#, 482#, 482#, 482#, 482#, 482#, 482#, #, 8#482, 491#, 491#, 491#, 491#, 491#, 491#, 491#, #, 8#491, #, #, #, 499#493, 499#494, 499#495, #, 62#499, 2#502, #, 296#504, #, 296#506, #, 296#508, #, 296#510, #, 296#512, #, #, #, #, #, #, #, #, #, 529#513, 529#514, 529#515, 529#516, 529#517, 529#518, 529#519, 529#520, #, 62#529, 416#532, #, 416#534, #, #, 532#535, 532#, #, 534#538, 534#, #, 56#541, #, 56#543, 502#546, #, #, 546#547, 546#, 502#551, #, #, 551#552, 551#, #, 56#555, #, 56#557, #566, 502#561, #, #, 561#562, 561#, 2#566, #, 566#568, #, #, 568#569, 568#, 566#573, #, #, 573#574, 573#, 8#578, #, 578#580, #, 580#582, #, #, 580#583, #, 580#585, #566, #, 580#588, #, 580#590, 588#593, #, 593#595, #, #, 580#596, #, 580#598, #, 580#600, #, 580#602, #, 580#604, #, 56#606, #566, #566, 566#611, #, #, 611#612, 611#, 62#616, #, 616#618, #, 566#620, #, #566, 616#623, #, 618#625, #, #, #, 580#627, 580#630, #, #, 580#631, 602#634, #, #566, #, 56#636, #, 580#638, #, 580#640, #, 56#642, #, 580#644, #, 56#646, 2#649, #, 649#651, #, #649, #, 651#653, 651#, 62#657, #, 657#659, #, #, 649#662, #, #, 662#663, 662#, #649, #, #, #, #, #649, #, 674#672, #, #, #, 679#675, 679#676, #, 681#679, #, 683#681, #, 686#674, 686#683, #, 62#686, 657#660, #, #689, #, #, #692, #, 62#, #, 698#696, #, #, 702#698, 702#699, #, 62#702, 659#705, #, 659#707, #, 657#709, #, #, #, #, #, #, #, #, #, #, #718, #, #, #, 725#721, 725#722, #, 728#720, 728#725, #, 62#728, 698#731, #, 699#733, #, 699#735, #, #, 62#738, #, #, 56#739, 738#742, #, 649#744, #, #, 745#747, #, 745#749, #, 747#751, #, 742#753, #, 753#745, 738#756, #, 8#758, #, 758#760, #, 760#762, #, #, 760#763, 760#766, #, 760#768, #, #, 760#769, 649#772, #, 649#774, #, #, 760#775, #, 56#777, #649, #, #, #, #, #, 56#784, 68#787, #, 796#, 796#, 796#, 796#, 796#, 796#, 796#, 796#, #, 8#796, #, #, #, #, #, #, #, #, 814#798, 814#799, 814#800, 814#801, 814#802, 814#803, 814#804, 814#805, #, 62#814, 73#817, #, 73#819, #, #, 56#820, 75#823, #, 75#825, #, 75#827, #, #, 56#828, #649, 649#832, #, 62#834, #, #, #, 834#838, #, 838#840, #, 840#842, #, 834#844, #, #649, 834#847, #, 847#849, #, #, 847#850, #, 840#852, #649, #, 847#855, #, 847#857, #, 847#859, 742#862, #, #649, #, 56#864, 649#867, #, #, 847#868, #, 840#870, #, 847#872, 8#875, #, 875#877, #, #649, 62#880, #, 880#882, #, 882#884, #, 880#886, #, 886#888, #, 888#890, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 56#909, 852#912, #, 852#914, #, 649#916, #, #, 847#917, #649, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 760#940, #, 760#942, 842#945, #, 842#947, #, 847#949, #, #, 847#950, #, 847#952, 868#955, #, #, 847#956, 847#959, #, 959#961, #, #, 56#962, #, 842#964, #, 847#966, #, 847#968, 847#971, #, #, 847#972, #, 847#974, #, 847#976, #, 847#978, #649, #, #, #, 949#985, #, 985#987, #, 987#989, #, 987#991, #, 991#993, #, 991#995, #, 995#997, #, 991#999, #, #, 1000#, #, #, 1003#1002, #, #, 1006#1005, #, 56#1008, 985#1011, #, 1011#1013, #, #, 842#1014, #, 1018#1016, #, #, #, 1022#1020, #, #, 1027#1019, 1027#1022, 1027#1023, #, #, 1031#1027, 1031#1028, #, 1034#1018, 1034#1031, #, 1036#1034, #, 847#1036, #, 1040#1038, #, 847#1040, 991#1043, #, 917#1045, #, 1045#1047, #, #, 1050#1048, #, 872#1050, #, 56#1052, 70#1055, #, #, 56#1056, 2#1059, #, 1059#1061, #, #, 1061#1062, 1061#, 408#1066, #, 1059#1068, #, 408#1070, #, 408#1072, #, 1070#1074, #, 1070#1076, #, 1076#1078, #, 1078#1080, #, 1080#1082, #, 1076#1084, #, 1084#1086, #, #, #, 70#1090, #, 699#1092, #, 1092#1094, #, 1094#1096, #, 699#1098, #, #, 56#1099, 8#1102, #, 1102#1104, #, 1104#1106, #, 1106#1108, #, 1106#1110, #, #, 56#1111, #1119, #, 1106#1114, 1108#1117, #, 1108#1119, #, 1119#, 1119#1122, #, #, 1122#1123, 1122#, 1108#1127, #, 64#1129, #, 10#1131, #, #, 56#1132, 1098#1140, 1098#1141, 1098#1142, 1098#1143, 1098#1144, 1098#1145, 1141#1144, #, 1143#1141, #, #, 1144#1143, #, 56#1146, 529#1149, #, 73#1151, #, #, #, #, #, #, #, 1164#1152, 1164#1153, 1164#1154, 1164#1155, 1164#1156, 1164#1157, #, 1084#1164, #, 56#1166, 62#1169, #, #, 56#1170, #, 56#1172, 85#1175, #, 1070#1177, #, #, 56#1178, #, 580#1180, 499#1183, #, 72#1185, #, 72#1187, #, #, 56#1188, #, 56#1190, #, 56#1192, #, 56#1194, #, 1198#1196, #, 1200#1198, #, 1070#1200, #, 56#1202, #, 56#1204, #, 56#1206, #, 56#1208, #, 56#1210, #, 56#1212, 1106#1215, #, #, 56#1216, #, #, #, 1224#1218, 1224#1219, 1224#1220, #, 62#1224, 72#1227, #, 72#1229, #, 72#1231, #, #, 1070#1232, 499#1235, #, 499#1237, #, 354#1239, #, 354#1241, #, 2#1243, #, 1243#1245, #, #, 1245#1246, 1245#, #, #, #, #, #, #, #, #, 1265#1249, 1265#1250, 1265#1251, 1265#1252, 1265#1253, 1265#1254, 1265#1255, 1265#1256, #, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#, 1515#1265, #, 8#1515, #, #, #, #, #, #, 1243#1524, #, 62#1526, #, 74#1528, #, 775#1530, #, #, #, #, 580#1533, #, 580#1535, 580#836, 580#835, 580#626, 1535#1541, #, 580#1543, #, #, #, #, #, #, 1554#1544, 1554#1545, 1554#1546, 1554#1547, 1554#1548, #, 62#1554, 2#1557, #, 1557#1559, #, #, 1559#1560, 1559#, 75#1564, #, 631#1566, #, 630#1568, #, 1106#1570, #, 1224#1572, #, 1224#1574, #, #, 1224#1575, #, 1224#1577, 1180#1580, #, 580#1582, #, 600#1584, #, 75#1586, #, 85#1588, #, 85#1590, #, 85#1592, #, 369#1594, #, 369#1596, #, 73#1598, #, 73#1600, #, 73#1602, #, 69#1604, #, 69#1606, #, 62#1608, #, 1608#1610, #, 1610#1612, #, 346#1614, #, 346#1616, #, 1232#1618, #, 1232#1620, #, 1177#1622, #, 1177#1624, #, 296#1626, #, #760, 69#1629, #, 1237#1631, #, 1237#1633, #, 1237#1635, #, 1608#1637, #, 62#1639, #, 62#1641, #, 1641#1643, #, 1641#1645, #, 1645#1647, #, 1645#1649, #, #, 1645#1650, 1650#1653, #, 62#1655, #, 1655#1657, #, #, 1660#1658, #, 62#1660, 
### 内容
#0, 17:
文档\S应用\公式分析器.ftxt
## end
#2, 685:
+[返回目录](,公式分析器)
地址::文档\S应用\公式分析器.ftxt

+[修改标题]"操作"(,公式分析动词)
操作:...
+[设置动词](,操作)
想法:...
+[设置名词](,想法)
+[新建阅读窗口](,想法)
+[新建阅读窗口](,操作)

句子相关::文档\S应用\句子相关.txt
+[打开文件](+新窗口,句子相关)
星图::文档\S应用\星图.txt
+[打开文件](+新窗口,星图)
网页画板::文档\S应用\网页画板.ftxt
+[打开文件](+新窗口,网页画板)

Nini, 导入公式分析器的库. Nini, 导入公式结构的库
Nini, 导入网页画板的库
Nini, 导入词典的库. 导入词典
Nini, 导入PPT的库. Nini, 导入图形库的库
Nini, 导入编程语言parser的库

Nini, 打开公式结构(文件)
Nini, 打开编程语言parser(文件)
Nini, 打开JS编译器(文件)
Nini, 打开核心(文件)
Nini, 打开初等数学习题集(文件)
Nini, 打开四则运算(文件)

Nini, 打开mathematica(文件)
FORM::https://github.com/vermaseren/form
(高能物理常用的大型公式推导的工具. 甚至比mathematica快)

规则:...
测试:...
微分积分:...
求和运算:...
矢量矩阵:...
链式结构:...
匹配测试:...
运算测试:...
整体框架:...
抽象结构:...
+[新建阅读窗口](,抽象结构)



## end
#3, 180:
公式分析器:...
创建于 20210529

的(公式结构匹配,库)...
->目录->的(公式分析器,目录)=>和式{[]=>的(公式分析器,和式)=>公式分析器}=>+[有](库,和式)

目录->的(公式分析器,目录)=>和式{[]=>的(公式分析器,和式)=>公式分析器}=>+[显示](,和式)

节点数目统计::
+[设置结构](,节点数目统计)
## end
#6, 482:

算式: 等式
等式: (-)和式 (等于 等式)
和式: 乘式 (加减 和式)
乘式: 特殊表达式|项 (乘除 乘式)
特殊表达式: [分式]| [求和式]| [积分式]| [根式]| [偏微分]| [微分]| [矢量] |[矩阵]
分式: \frac { (-) 和式 } { (-) 和式 }
根式: \sqrt { 和式 }
偏微分:\partial { 函数输入 } { 和式 }
积分式:\int _ { 和式 } ^ { 和式 } { 函数输入 } { 和式 }
微分:\d { 和式 }
矢量:\vec { [变量]| [函数输入] }
矩阵:\mat { [变量]| [矩阵输入] }


项: 数字| 变量| 括号
数字: 数字|特殊数字 (幂次)
变量: 字母 (下标) (\( 函数输入 \)) (幂次)
括号: \( 和式 \) (幂次)
下标: _ (数字| 变量)|({ 数字| 变量 })
幂次: ^ (数字| 变量|({ 和式 })

函数输入: [和式] (, [函数输入])
矩阵输入: [函数输入] (; [矩阵输入])


## end
#8, 1009:
+[返回目录](,公式分析名词)
+[新建阅读窗口](,公式分析名词)


匹配模式:...
输出类型:...

公式头:...

公式分析_代码:...
+[新建阅读窗口](,公式分析_代码)

算式: 等式...
等式: (-)和式 (等于 等式)...
和式: 乘式 (加减 和式)...
乘式: 项|(特殊表达式 ^ [幂次]) (乘除 乘式)...
特殊表达式: [分式]| [求和式]| [积分式]| [根式]| [偏微分]| [微分]| [矢量] |[矩阵] |[方程组]...

分式: \frac { (-) 和式 } { (-) 和式 }...
+[新建阅读窗口](,分式)
根式: \sqrt { 和式 }...

偏微分:\p { 函数输入 } { 和式 }...
积分式:\int _ { 和式 } ^ { 和式 } { 函数输入 } { 和式 }...
求和式:\sum _ { 和式 } ^ { 和式 } { 函数输入 } { 和式 }...
微分:\d { 和式 }( _ { 变量 })...
# 差分:\D { 和式 }...

矢量:\vec { [变量]| [函数输入] }...
矩阵:\mat { [变量]| [矩阵输入] }...
方程组:\eqs { [矩阵输入] }...
将条目"矩阵"复制为条目"方程组"
+[新建阅读窗口](,矢量)

项: 括号|数字|变量|函数...
括号: \( 和式 \) (幂次)...
数字: 数字|特殊数字 (幂次)...
变量: 字母 (下标) (\[ [矩阵输入] \]) (\( [函数输入] \)) (幂次)...
下标: _ 数字|变量|({ 数字|变量 })...
幂次: ^ (数字|变量|({ 和式 })...
+[新建阅读窗口](,变量)

# 函数输入: [和式] (, 函数输入)...
函数输入: [等式] (, 函数输入)...
矩阵输入: [函数输入] (; [矩阵输入])...
将条目"函数输入"复制为条目"矩阵输入"
+[新建阅读窗口](,分式)


空:...
等于:...
加减:...
乘除:...
+[新建阅读窗口](,等于)

公式序号:...

公式结构匹配:...
公式描述:...
公式特征描述:...
公式描述_结构:...
将条目"公式描述"复制为条目"公式描述_结构"




## end
#10, 105:
"""
+[返回目录](,算式)
+[新建阅读窗口](,算式)

结构语言版本:...

"""

+算式(_公式,)->[公式分析_代码](_公式,)->[m_text]([公式分析_代码],+算式)




## end
#12, 181:
"""
+[返回目录](,等式)

"""

+等式(结构,)->[和式](结构,)->的([和式],_和式):
    ->[等于]->[等式](结构,)->的([等式],_等式)...
    ->+等于(_和式,_等式)->+的(结构,+等于)->+的(+等式,_和式)->[m_text]([等于],+等于),

    ->+的(+等式,_和式)



## end
#14, 142:
"""
+[返回目录](,等于)

保存:...

"""

+等于->+模块"等于"->[匹配模式]"[\n\s\t]*(=|<[=<]?|>[=>]?|~|\\l |\\g |\\le |\\ge )"(,+模块)...
->[m_text]([匹配模式],+等于)







## end
#16, 336:
"""
+[返回目录](,和式)

测试:...

"""

+和式(结构,)->+模式"负号"...

->[]{
    []:->[匹配模式]"-"(,+模式)->+的(+模式,+负号),->[]
}...
->[乘式](结构,)->的([乘式],_乘式)->_乘式(,)...

->[]{
    []:->的(+模式,负号)->负号->+负号(_乘式,)->+的(结构,+负号),->[]
}:
    ->[加减]->[和式](结构,)->的([和式],_和式)...
    ->+的(+和式,_乘式)...
    ->+加减(_乘式,_和式)->+的(结构,+加减)->[m_text]([加减],+加减),

    ->+的(+和式,_乘式)



## end
#18, 111:
"""
+[返回目录](,测试)
+[P函数](,测试)

"""

import re

text="1a=2"

a=re.match(r'[\w]+',text)
print('??',a,a.span()[1])

## end
#20, 143:
"""
+[返回目录](,空)

"""

+空(,)...
->记忆->Python_算式(记忆,)...

->[python]"
if len(text[i:])==0:
    state=True
else:
    state=False
"(Python_算式,)




## end
#22, 388:
"""
+[返回目录](,乘式)

保存:...
        

"""

+乘式(结构,)->+项->[]{
    []:->[特殊表达式](结构,)->的([特殊表达式],_表达式)->+的(+项,_表达式)...
    ->[]{
        []:->[幂次](结构,)->的([幂次],_幂项)->+^(_表达式,_幂项)->+的(结构,+^),
        ->[]
    },
    ->[项](结构,)->的([项],_项)->+的(+项,_项)
}->的(+项,_项0):
    ->[乘除]->[乘式](结构,)->的([乘式],_乘式)...
    ->+的(+乘式,_项0)...
    ->+乘除(_项0,_乘式)->[m_text]([乘除],+乘除)->+的(结构,+乘除),

    ->+的(+乘式,_项0)



## end
#24, 479:
"""
+[返回目录](,特殊表达式)

测试:...

"""

+特殊表达式(结构,):
    ->[分式](结构,)->的([分式],_分式)->+的(+特殊表达式,_分式),
    ->[求和式](结构,)->的([求和式],_求和式)->+的(+特殊表达式,_求和式),
    ->[积分式](结构,)->的([积分式],_积分式)->+的(+特殊表达式,_积分式),
    ->[偏微分](结构,)->的([偏微分],_偏微分)->+的(+特殊表达式,_偏微分),
    ->[微分](结构,)->的([微分],_微分)->+的(+特殊表达式,_微分),
    ->[根式](结构,)->的([根式],_根式)->+的(+特殊表达式,_根式),

    ->[矢量](结构,)->的([矢量],_矢量)->+的(+特殊表达式,_矢量),
    ->[矩阵](结构,)->的([矩阵],_矩阵)->+的(+特殊表达式,_矩阵),
    ->[方程组](结构,)->的([方程组],_方程组)->+的(+特殊表达式,_方程组)



## end
#26, 166:
"""
+[返回目录](,项)

测试:...

"""

+项(结构,):
    ->[括号](结构,)->的([括号],_括号)->+的(+项,_括号),
    ->[数字](结构,)->的([数字],_数字)->+的(+项,_数字),
    ->[变量](结构,)->的([变量],_变量)->+的(+项,_变量)



## end
#28, 246:
"""
+[返回目录](,数字)

测试:...
保存:...

"""

+数字(结构,)...

->+模块"数字"->[匹配模式]"[\d\.]+|\\pi|\\infty"(,+模块)...
->[m_text]([匹配模式],+数字)...

->+的(+数字,+数字#0)->[m_text](+数字,+数字#0)->+的(结构,+数字#0):
    ->[幂次](结构,)->的([幂次],_幂项)->+^(+数字#0,_幂项)->+的(结构,+^),
    ->[]



## end
#30, 132:
"""
+[返回目录](,测试)
+[P函数](,测试)

"""

import re

text="\infty a=2"

a=re.match(r'[\d]+|\\pi |\\infty ',text)
print('??',a,a.span()[1])

## end
#32, 579:
"""
+[返回目录](,变量)

测试:...
保存:...

"""

+变量(结构,)->+模块"变量"->[匹配模式]"\\?[a-zA-Z_\d ]*[a-zA-Z_\d]"(,+模块)...

->+的(+变量,+变量#0)->[m_text]([匹配模式],+变量#0)->+的(结构,+变量#0)...

->[]{
    []:->[下标](结构,)->的([下标],_下标)->+下标(+变量#0,_下标)->+的(结构,+下标),->[]
}...

->[]{
    []:->[匹配模式]"\["(,+模块)...
        ->+序号输入(+变量#0,)->+的(结构,+序号输入)->[函数输入](结构,+序号输入)...
        ->[匹配模式]"\]"(,+模块),
    ->[]
}...

->[]{
    []:->[匹配模式]"\("(,+模块)...
        ->+输入(+变量#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
        ->[匹配模式]"\)"(,+模块),
    ->[]
}...

->[]{
    []:->[幂次](结构,)->的([幂次],_幂项)->+^(+变量#0,_幂项)->+的(结构,+^),->[]
}



## end
#34, 117:
"""
+[返回目录](,测试)
+[P函数](,测试)

"""

import re

text="\mu"

a=re.match(r'\\?[a-zA-Z]+',text)
print('??',a,a.span()[1])

## end
#36, 318:
"""
+[返回目录](,括号)

测试:...
保存:...

"""

+括号(结构,)...

->+模块"括号"->[匹配模式]"(\\left)?[\(\[{]"(,+模块)...
->[和式](结构,)->的([和式],_和式)...

->[匹配模式]"(\\right)?[\)\]}]"(,+模块)...
->+的(+括号,+括号#0)->+的(结构,+括号#0)->[m_text]([匹配模式],+括号#0)...
->+的#0(+括号#0,_和式)->+的(结构,+的#0):
    ->[幂次](结构,)->的([幂次],_幂项)->+^(+括号#0,_幂项)->+的(结构,+^),
    ->[]



## end
#38, 104:
"""
+[返回目录](,加减)

保存:...

"""

+加减->+模块"加减"->[匹配模式]"[\n\s\t]*[+-]"(,+模块)...
->[m_text]([匹配模式],+加减)






## end
#40, 123:
"""
+[返回目录](,乘除)

保存:...

"""

+乘除->+模块"乘除"->[匹配模式]"[\n\t\s]*([*/ ]|\\cdot |\\times )"(,+模块)...
->[m_text]([匹配模式],+乘除)





## end
#42, 762:
"""
+[返回目录](,积分式)
+[新建阅读窗口](,积分式)

测试:...


"""

+积分式(结构,)...
->+模块"积分式"->[匹配模式]"\\int"(,+模块)...

->[]{
    []:->[匹配模式]"_{"(,+模块)...
        ->[和式](结构,)->的([和式],_下限)->+下限(+积分式,_下限)...
        ->[匹配模式]"}"(,+模块),
    ->[匹配模式]"}"(,+模块),
    ->[]
}...

->[]{
    []:->[匹配模式]"\^{"(,+模块)...
        ->[等式](结构,)->的([等式],_上限)->+上限(+积分式,_上限)...
        ->[匹配模式]"}"(,+模块),
    ->[匹配模式]"}"(,+模块),
    ->[]
}...

->[匹配模式]"{"(,+模块)...
->+输入(+积分式#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+积分式,+积分式#0)->+的(结构,+积分式#0)...
->+积分式#0(,_和式#1)...

->[]{
    []:->下限(+积分式,_下限)->_下限->+的(结构,+下限)->+下限(+积分式#0,_下限),
        ->[]
}...
->[]{
    []:->上限(+积分式,_上限)->_上限->+的(结构,+上限)->+上限(+积分式#0,_上限),
        ->[]
}




## end
#44, 322:
"""
+[返回目录](,下标)

测试:...

"""

+下标(结构,)->+模块"下标"->[匹配模式]"_"(,+模块):
    ->[数字](结构,)->的([数字],_数字)->+的(+下标,_数字),
    ->[变量](结构,)->的([变量],_变量)->+的(+下标,_变量),

    ->[匹配模式]"{"(,+模块)->[]{
        []:
            ->[数字](结构,)->的([数字],_数字1)->+的(+下标,_数字1),
            ->[变量](结构,)->的([变量],_变量1)->+的(+下标,_变量1)
    }->[匹配模式]"}"(,+模块)


## end
#46, 422:
"""
+[返回目录](,匹配模式)

"""

+匹配模式(,_模块)...
->记忆->Python_算式(记忆,)...
->+[s]"pat"([python],+匹配模式)->+[.]"block"([python],_模块)...
->[python]"
try:
    a=re.match(pat,text[i:])
    if a==None:
        print('Stop in [%s]'%(block))
        state=False
    else:
        di=a.span()[1]
        print('[%s]: '%(block),text[i:i+di])
        ans=text[i:i+di]
        i+=di
        state=True
except:
    state=False
"(Python_算式,+匹配模式)


## end
#48, 249:
"""
+[返回目录](,幂次)

测试:...

"""

+幂次(结构,)->+模块"幂次"->[匹配模式]"\^"(,+模块):
    ->[数字](结构,)->的([数字],_数字)->+的(+幂次,_数字),
    ->[变量](结构,)->的([变量],_变量)->+的(+幂次,_变量),

    ->[匹配模式]"{"(,+模块)...
    ->[和式](结构,)->的([和式],_和式)->+的(+幂次,_和式)...
    ->[匹配模式]"}"(,+模块)



## end
#50, 15:
文档\S应用\句子相关.txt
## end
#52, 1124:
+[返回目录](,测试)

输出结构:...
+[新建阅读窗口](,输出结构)
+[设置结构](,输出结构)
+[删除结构](,输出结构)
+[显示星图](,输出结构)
的(输出结构,变量)->+[显示](,变量)

记住"LaTeX"
+[删除结构](,输出结构)->+[生成公式结构]"(1-\vec{k_0}*\vec{k_0}-\frac{\omega^2}{c^2*k^2}*(1+\kappa_plasma))*\vec{E}=0"(,输出结构)->+[显示星图](,输出结构)
+[删除结构](,输出结构)->+[生成公式结构]"(\vec{A}\dot \vec{C})*\vec{B}-(\vec{A}\dot \vec{B})*\vec{C}"(,输出结构)->+[显示星图](,输出结构)
+[删除结构](,输出结构)->+[生成公式结构]"\mat{A,B+a;C+x^2+(x+y),D}"(,输出结构)->+[显示星图](,输出结构)
+[删除结构](,输出结构)->+[生成公式结构]"\mat{B}"(,输出结构)->+[显示星图](,输出结构)
的(输出结构,_a)->+[算式](_a,+[消息窗口])
[公式头](输出结构,)->是([公式头],_)->+[显示](,_)->+[算式](_,+[消息窗口])
记住"Matlab"
记住"LaTeX"
记住"表达式"
的(输出结构,矢量)->+[矢量](矢量,+[消息窗口])->+[消息窗口]
的(输出结构,矩阵)->+[矩阵](矩阵,+[消息窗口])->+[消息窗口]



+[生成公式结构]"a=b^2+3^4"(,输出结构)
+[生成公式结构]"a=b^2+(\frac{3}{5})^4"(,输出结构)
+[生成公式结构]"a*x_1^2-\omega*x_3-c=0"(,输出结构)
+[生成公式结构]"f(x+c*t,y,z)=a*x^2-\omega*x-c"(,输出结构)
+[生成公式结构]"a=-b"(,输出结构)

+[生成公式结构]"n(x,t)=\frac{n_0*(t-x/c)}{1-(1-exp(-\sigma*\int(x,0,\Delta_0(x_1))))*exp(-2*\sigma*c*\int(t-x/c,-\infty,n_0(t_1)))}"(,输出结构)


算式::
+[del](,算式)
的(输出结构,0)->+[描述公式](0,+[算式])->+[显示](,+[算式])


的(输出结构,括号)->的(括号,_)->+[显示](,的)

是([动词库],动词)->+[打开文件](+新窗口,动词)
## end
#54, 331:
+[返回目录](,输出结构)
+[显示星图](,输出结构)
+[设置结构](,输出结构)

\times 

[]=>输入=>+[显示](,输入)
+[项](b,+[显示])
+[写下标](a,+[显示])
+[项](括号,+[显示])
+[算式](c,+[显示])
+[算式](f,+[显示])
+[算式](x,+[修改内容])->+[修改内容](,代码)
*(b,x)->+[乘式](x,+[显示])

+[显示](,n)

代码::
+[消息窗口](,代码)
代码的类型是什么
代码的类型是"LaTeX". 代码的结构是n. 
生成算式到代码

输出结构的代码是什么
. 代码显示为LaTeX公式

+[显示](,记忆)
[==]"Matlab"(,记忆)
## end
#57, 2:
91
## end
#60, 13:
文档\S应用\星图.txt
## end
#62, 1070:
+[返回目录](,公式分析动词)
+[复制结构](,公式分析动词)

删除表达式:...

初等化简:...
收集矩阵内容:...
收集括号内容:...
收集乘式系数:...
将条目"收集括号内容"复制为条目"收集乘式系数"
+[新建阅读窗口](,收集矩阵内容)

转换公式结构:...
生成公式结构:...

获取输出模板:...
更新公式起点:...
表达式转结构:...

算式结构转换:...

公式序号:...
清空序号:...

算式: 等式...
等式: (-)和式 (等于 等式)...
和式: 乘式 (加减 和式)...
乘式: 项 [幂次] (乘除 乘式)...
项: 括号|数字|变量|分式|求和式|积分式|求和式|矩阵|矢量...
分式: \frac { (-) 和式 } { (-) 和式 }...
根式: \sqrt { 和式 }...
+[新建阅读窗口](,乘式)
+[新建阅读窗口](,和式)
+[新建阅读窗口](,分式)

积分式:...
求和式:...
+[新建阅读窗口](,积分式)
将条目"积分式"复制为条目"求和式"
将'求和式'的"积分"替换为"求和"

偏微分:...
微分:...
+[新建阅读窗口](,偏微分)
将'偏微分'的"微分"替换为"偏微分"


矩阵:...
矢量:...
方程组:...
将条目"矩阵"复制为条目"方程组"

括号: \( 和式 \)...
数字: 数字|特殊数字...
变量: 字母 (下标)...

函数输入:...
函数输入的"等式"替换为"函数输入"
写下标: _ 数字|变量|({ 数字|变量 })...
下标的"幂次"替换为"下标"
幂次: ^ (数字|变量|({ 和式 })...
+[新建阅读窗口](,幂次)

乘式2:...
将条目"乘式"复制为条目"乘式2"



描述公式:...
+[粘贴](,公式匹配)
+[修改标题]"描述公式"(,公式匹配)

公式结构代入:...
公式结构提取:...
公式结构插入:...
公式结构加括号:...
公式结构拆括号:...
将条目"公式结构插入"复制为条目"公式结构拆括号"
+[新建阅读窗口](,公式结构提取)

整理乘式结构:...
整理和式结构:...
分式演算:...
+[新建阅读窗口](,分式演算)

描述:...

是([动词库],动词)->+[打开文件](+新窗口,动词)
的(描述公式,词典)=>的(词典,_词条)=>+[有](公式分析动词,_词条)

描述抽象结构:...



## end
#64, 465:
"""
+[返回目录](,生成公式结构)

结构修饰:...
结构变换:...
(没有使用)

算式版本:...

"""

+生成公式结构(_公式,_输出结构)...
->的(生成公式结构,结构修饰)->的(生成公式结构,结构变换)...

->[]{
    []:->_公式->[公式分析_代码](_公式,)->+[导入节点](,_输出结构)...
        ->[m_text]([公式分析_代码],+[导入节点])...
    ->+[做](,_输出结构)->+[code](+[做],结构修饰)...
    ->+[del](,+生成公式结构),

    ->[公式分析_代码](+生成公式结构,)->+[导入节点](,_输出结构)...
        ->[m_text]([公式分析_代码],+[导入节点])...
    ->+[做](,_输出结构)->+[code](+[做],结构修饰)...
    ->+[del](,+生成公式结构)
}...

->+[转换公式结构](,_输出结构)


## end
#66, 501:
"""
+[返回目录](,结构修饰)

"""

+结构修饰(,_结构)->+[del](,+结构修饰)...
=>的(_结构,_节点)->_节点:
    ->[is](_节点,等于)=>+[修改标题]#0"="(,等于),
    ->[is](_节点,加减)->加减=>[]{
        []:->[==]"-"(,加减)->+[修改标题]#11"-"(,加减),
        ->+[修改标题]#12"+"(,加减)
    },
    ->[is](_节点,乘除)->乘除=>[]{
        []:->[==]"/"(,乘除)->+[修改标题]#21"/"(,乘除),
        ->+[修改标题]#22"*"(,乘除)
    },
    ->[is](_节点,数字)=>+[修改内容](数字,+[修改标题]#3)->+[修改标题]#3(,数字),
    ->[is](_节点,括号)->括号"]"=>+[修改内容]"绝对值"(,括号),
    ->[is](_节点,变量)=>+[修改内容](变量,+[修改标题]#4)->+[修改标题]#4(,变量)



## end
#67, 163:
"""
+[返回目录](,算式)
+[修改标题]"算式"(,算式1)

"""

+算式(_节点,_文本)->+[del](,+算式):
    ->[==](,+算式)->+[等式](_节点,_文本),
    ->+[修改内容](,记忆)->[m_text](+算式,+[修改内容])->+[等式](_节点,_文本)



## end
#68, 546:
"""
+[返回目录](,等式)

P代码:...
+[新建阅读窗口](,P代码)

"""

+等式(_节点,_文本)->+[del](,+等式)...
->的(等式,P代码)...

->记忆->+[和式](_节点,_文本)...
->[]{
    []:->=(_节点,_节点1)->_节点1(,)...
        ->+[等式](_节点1,+[临时文本])...
        ->+[python](Python,+[增加内容])->+[code](+[python],P代码)...
        ->+[.]"eq_op"(+[python],=)->+[增加内容](+[临时文本],_文本)...
        ->+[s]"type_op"(+[python],记忆)->[]{
            []:->判断(_文本,)->+[s]"type_eq"(+[python],+[临时文本]#2)...
                ->+[临时文本]#2"判断",
            ->+[s]"type_eq"(+[python],+[临时文本]#3)->+[临时文本]#3"赋值"
        },

    ->[]
}






## end
#69, 856:
"""
+[返回目录](,和式)

LaTeX::%[运算]%[项]
Matlab::%[运算]%[项]
表达式::%[运算]%[项]
P代码:...
P代码_负号:...

保存:...

"""

+和式(_节点,_和式)->+[del](,+和式)...
->的(和式,P代码)->的(和式,P代码_负号)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],和式)->+[del](,+动词)...

->记忆->[]{
    []:->负号(_节点,)...
        ->+[python](Python,+[临时文本])->+[code](+[python],P代码_负号)...
        ->+[.]"op_text"(+[python],负号)->+[s]"type_name"(+[python],记忆)...
        ->+[增加内容](+[临时文本],_和式),
    ->[]
}...

->+[乘式](_节点,+[临时文本]#0)...
->[]{
    []=>_re"[+-]"(_节点,_节点1)->_节点1(,)...
    =>+[和式](_节点1,+[临时文本])->[m_text](+和式,+[和式])->+[标题](_re,)...

        ->+[python](Python,+[临时文本]#0)->+[code](+[python],P代码)...
        ->+[s]"a"(+[python],+[临时文本]#0)->+[s]"b"(+[python],+[临时文本])...
        ->+[.]"op_name"(+[python],+[标题])->+[.]"op_text"(+[python],_re)...
        ->+[s]"type_name"(+[python],记忆)

}->+[增加内容](+[临时文本]#0,_和式)





## end
#70, 275:
"""
+[返回目录](,乘式2)

LaTeX::%[运算]%[项]
表达式::%[运算]%[项]
Matlab::.%[运算]%[项]

P代码:...
P代码的"type_eq"替换为"type_eq0"
保存:...
+[新建阅读窗口](,P代码)

"""

+乘式2(_节点,_乘式2)->+[del](,+乘式2)...
->的(乘式2,P代码)...

->记忆(,)...
->+[项](_节点,+[临时文本]#0)->+[幂次](_节点,+[临时文本]#0)...
->+[增加内容](+[临时文本]#0,_乘式2)







## end
#71, 1016:
"""
+[返回目录](,项)
括号|数字|变量|分式|求和式|积分式...
!

"""

+项(_节点,_项)->+[del](,+项):
    ->[is](_节点,分式)->+[分式](_节点,+分式)->+[修改内容](+分式,_项)->+[del](,+分式),
    ->[is](_节点,根式)->+[根式](_节点,+根式)->+[修改内容](+根式,_项)->+[del](,+根式),

    ->[is](_节点,微分)->+[微分](_节点,+微分)->+[修改内容](+微分,_项)->+[del](,+微分),
    ->[is](_节点,积分式)->+[积分式](_节点,+积分式)...
        ->+[修改内容](+积分式,_项)->+[del](,+积分式),
    ->[is](_节点,求和式)->+[求和式](_节点,+求和式)...
        ->+[修改内容](+求和式,_项)->+[del](,+求和式),
    ->[is](_节点,偏微分)->+[偏微分](_节点,+偏微分)...
        ->+[修改内容](+偏微分,_项)->+[del](,+偏微分),

    ->[is](_节点,矢量)->+[矢量](_节点,+矢量)...
        ->+[修改内容](+矢量,_项)->+[del](,+矢量),
    ->[is](_节点,矩阵)->+[矩阵](_节点,+矩阵)...
        ->+[修改内容](+矩阵,_项)->+[del](,+矩阵),
    ->[is](_节点,方程组)->+[方程组](_节点,+方程组)...
        ->+[修改内容](+方程组,_项)->+[del](,+方程组),

    ->[is](_节点,括号)->+[括号](_节点,+括号)->+[修改内容](+括号,_项)->+[del](,+括号),
    ->[is](_节点,_re)->_re"^-?[0-9]+.?[0-9]*|\\pi|\\infty|\\C$"...
        ->+[数字](_节点,+数字)->+[修改内容](+数字,_项)->+[del](,+数字),
    ->+[变量](_节点,+变量)->+[修改内容](+变量,_项)->+[del](,+变量)






## end
#72, 1026:
"""
+[返回目录](,微分)

LaTeX::d%[和式]
LaTeX2::\frac{d}{d%变量}\left(%[和式]\right)
表达式::\d{%[和式]}
表达式2::\d{%[和式]}_{%变量}
Matlab::d%[和式]

P代码:...
P代码0:...

保存:...

"""

+微分(_节点,_微分)->+[del](,+微分)...
->的(微分,P代码0)->的(微分,P代码)...

->记忆->_节点(,_和式)->+[和式](_和式,+和式#1)...

->+[python]"list_var=[]"(Python,)...
->[]{
    []=>输入(_节点,)->的(输入,_变量)=>+[和式](_变量,+变量#1)...
        ->+[python]"list_var.append(text_var)"(Python,)...
        ->+[s]"text_var"(+[python],+变量#1)->+[del](,+变量#1)
}...

->+[python](Python,_微分)->+[del](,+和式#1)...
->+[.]"text_type"(+[python],记忆)->+[s]"text_func"(+[python],+和式#1)...
->[]{
    []:->_re"[\*\^\+\-/]|负号"(_和式,)...
        ->+[临时文本]"算式"->+[s]"func_type"(+[python],+[临时文本]),
    ->[is](_和式,_re#1)->_re#1"分式|微分|偏微分|积分式"...
        ->+[临时文本]"算式"->+[s]"func_type"(+[python],+[临时文本]),
    ->[is](_和式,_re#2)->_re#2"括号"...
        ->+[临时文本]"括号"->+[s]"func_type"(+[python],+[临时文本]),
    ->+[临时文本]"变量"->+[s]"func_type"(+[python],+[临时文本])
}...
->[]{
    []:->输入(_节点,)->+[code](+[python],P代码),
    ->+[code](+[python],P代码0)
}



## end
#73, 476:
"""
+[返回目录](,括号)
\( 和式 \)...

LaTeX::\left(%和式\right)
LaTeX2::\left|%和式\right|
表达式::(%和式)
Matlab::(%和式)
Matlab2::abs(%和式)
P模板:...

P代码1:...
P代码:...

保存:...

"""

+括号(_节点,_括号)->+[del](,+括号)...
->的(括号,P代码)->的(括号,P代码1)...

->的(_节点,_和式)->+[和式](_和式,+[临时文本])...

->+[python](Python,_括号)...
->+[s]"type_out"(+[python],记忆)->+[s]"text_f"(+[python],+[临时文本])...
->+[s]"var_type"(+[python],_和式)...

->[]{
    []:->[==]"绝对值"(,_节点)->+[code](+[python],P代码1),
    ->+[code](+[python],P代码)
}


## end
#74, 229:
"""
+[返回目录](,数字)
数字|特殊数字 (幂次)...
P代码:...

"""
+数字(_节点,_数字)->+[del](,+数字)...
->的(数字,P代码)...

->+[标题](_节点,)...
->+[python](Python,_数字)->+[code](+[python],P代码)...
->+[s]"num_type"(+[python],记忆)->+[s]"text_num"(+[python],+[标题])






## end
#75, 1048:
"""
+[返回目录](,变量)
字母 (下标) (幂次)...

P代码:...
P代码_LaTeX:...
P代码_0:...

P代码_序号:...
P代码_函数:...
+[新建阅读窗口](,P代码_函数)

LaTeX_序号::\ _{%序号}
Matlab_序号::(%序号)
表达式_序号::[%序号]

保存:...
幂次

->+[写下标](_节点,_变量)...

"""


+变量(_节点,_变量)->+[del](,+变量)...
->的(变量,P代码)->的(变量,P代码_LaTeX)->的(变量,P代码_0)...
->的(变量,P代码_函数)->的(变量,P代码_序号)...
->的(变量,LaTeX_序号)->的(变量,Matlab_序号)->的(变量,表达式_序号)...

->记忆->+[标题](_节点,)...
->+[python](Python,_变量)->+[s]"txt"(+[python],+[标题])...
->+[s]"type_out"(+[python],记忆)...
->[]{
    []:->输入(_节点,)->+[code](+[python],P代码),
    ->+[code](+[python],P代码_0)
}...

->[]{
    []:->序号输入(_节点,)->+[函数输入](序号输入,+[临时文本])...
        ->+[python](Python,_变量)->+[code](+[python],P代码_序号)...
        ->+[s]"type_out"(+[python],记忆)->+[s]"func_name"(+[python],_变量)...
        ->+[s]"input_vars"(+[python],+[临时文本]),
    ->[]
}...

->[]{
    []:->输入(_节点,)->+[函数输入](输入,+[临时文本])...
        ->+[python](Python,_变量)->+[code](+[python],P代码_函数)...
        ->+[s]"type_out"(+[python],记忆)->+[s]"func_name"(+[python],_变量)...
        ->+[s]"input_vars"(+[python],+[临时文本]),
    ->[]
}



## end
#76, 2:
91
## end
#78, 2:
93
## end
#80, 3:
166
## end
#83, 23:
\frac{数字^{变量}}{变量_{变量}}
## end
#85, 511:
"""
+[返回目录](,幂次)

LaTeX::^{%[临时文本]}
表达式::^{%[临时文本]}
Matlab::.^(%[临时文本])
Python::**(%[临时文本])

P代码:...
P代码1:...
+[新建阅读窗口](,P代码)

保存:...

"""

+幂次(_节点,_文本)->+[del](,+幂次)...
->的(幂次,P代码)->的(幂次,P代码1)...

->+[标题](_节点,)->^(_节点,_幂次)->+[和式](_幂次,+[临时文本])...
->+[python](Python,_文本)...
->+[s]"text_n"(+[python],+[临时文本])->+[s]"text_f"(+[python],_文本)...
->+[s]"text_type"(+[python],记忆)->+[s]"var_type"(+[python],+[标题])...

->[]{
    []:->_re"[\+\-/\*/\^]|负号"(_幂次,)->+[code](+[python],P代码1),
    ->+[code](+[python],P代码)
}




## end
#87, 289:
"""
+[返回目录](,写下标)
+[修改标题]"写下标"(,下标)

LaTeX::_{%[标题]}
表达式::_{%[标题]}
Matlab::_%[标题]

"""

+写下标(_节点,_文本)->+[del](,+写下标)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],写下标#0)->+[del](,+动词)...

->下标(_节点,_下标)->+[标题](_下标,)...
->+[模板文本](+[临时文本]#m,+[增加内容])->+[.](+[模板文本],+[标题])...
->+[增加内容](,_文本)




## end
#98, 6:
d%[和式]
## end
#100, 16:
\left(%和式\right)
## end
#102, 10:
^{%[临时文本]}
## end
#104, 9:
%[运算]%[项]
## end
#106, 9:
%[运算]%[项]
## end
#108, 109:
"""
+[返回目录](,输出类型)

"""
+输出类型(_结构,)->结构(,_结构)->的(_算式,结构)...
->的(_算式,类型)->+是(+输出类型,类型)->[m_text](类型,+输出类型)




## end
#110, 537:
"""
+[返回目录](,获取输出模板)

"""

+获取输出模板(_节点,_模板)->+[del](,+获取输出模板)...
->动词(+获取输出模板,_和式):

->[]{
    记忆:
    ->[==]"LaTeX"(,记忆)->的(_和式,LaTeX)->LaTeX->+[修改内容](LaTeX,_模板),
    ->[==]"Matlab"(,记忆)->的(_和式,Matlab)->Matlab->+[修改内容](Matlab,_模板),
    ->[==]"matlab"(,记忆)->的(_和式,Matlab)->Matlab->+[修改内容](Matlab,_模板),
    ->[==]"Python"(,记忆)->的(_和式,Python)->Python->+[修改内容](Python,_模板),
    ->[==]"python"(,记忆)->的(_和式,Python)->Python->+[修改内容](Python,_模板),
    ->[==]"表达式"(,记忆)->的(_和式,表达式)->表达式->+[修改内容](表达式,_模板)
},

->的(_和式,LaTeX)->+[修改内容](LaTeX,_模板)



## end
#112, 493:
"""
+[返回目录](,描述)
库:...
将库(节点)记作句子库
+[新建阅读窗口](,库)

"""
+描述(_句子,_结构)->+[del](,+描述)...
->的(描述,库)...
->的(库,_模板)->的(_模板,匹配模板)->[模式匹配](匹配模板,_句子)...
->+[临时文本]->[]{
    []:->的(_模板,转述)->+[做](_句子,+[临时文本])->+[code](+[做],转述)...
    ->+匹配模板(+[做],匹配模板)->+[del](,+匹配模板),
    ->的(_模板,输出模板)->+[显示]"开始转述..."->+[转述](_句子,+[临时文本])...
    ->+匹配模板(+[转述],匹配模板)->+[del](,+匹配模板)...
    ->+输出模板(+[转述],输出模板)->+[del](,+输出模板)
}...

->+[复制内容](,+[临时文本])->+[修改内容](+[临时文本],+[显示]):
    ->_结构->+[修改内容](+[临时文本],_结构),
    ->[]





## end
#114, 458:
+[返回目录](,库)

生成公式代码:生成算式到%[算式]...
显示LaTeX公式:%[公式]显示为LaTeX公式...

更新函数入口:更新%[函数]的公式起点...

结构转换:%[起始]\(原式\)转换为%[算式]\(结构\)...
结构转换2:%[算式]\(结构\)转换为%[方程式]\(%[LaTeX]\)...
结构转换3:%[算式]\(表达式\)转换为%[方程式]\(%[LaTeX]\)...
结构转换4:"%[句子]"\(表达式\)转换为%[算式]\(结构\)...
+[复制结构](,结构转换)->+[粘贴](,库)->+[修改标题]"结构转换4"(,结构转换)

写入公式:将%[算式]\(结构\)写入%[节点]\(%[LaTeX]\)...
写入公式2:将\(%[序号]\)式写入%[节点]\(%[LaTeX]\)...
写入公式3:将网页的(21)式写入报告(Matlab)...
+[复制结构](,写入公式2)->+[粘贴](,库)->+[修改标题]"写入公式3"(,写入公式2)


## end
#116, 124:


匹配模板::生成算式到%[算式]
输出模板::的(%[算式],类型)->+[修改内容](类型,记忆)...
->的(%[算式],结构)->结构(,_a)...
->+[算式](_a,+[修改内容]#0)->+[修改内容]#0(,%[算式])


## end
#118, 10:
生成算式到%[算式]
## end
#120, 97:
的(%[算式],类型)->+[修改内容](类型,记忆)...
->的(%[算式],结构)->结构(,_a)...
->+[算式](_a,+[修改内容]#0)->+[修改内容]#0(,%[算式])
## end
#122, 9:
%[运算]%[项]
## end
#124, 10:
.%[运算]%[项]
## end
#126, 6:
d%[和式]
## end
#128, 5:
(%和式)
## end
#130, 11:
.^(%[临时文本])
## end
#132, 6:
_%[标题]
## end
#134, 8:
_{%[标题]}
## end
#136, 505:
"""
记住"Python"
print(input_vars=='y')

"""

if type_out=="LaTeX":
    i=txt.find('_')
    if i>0 and i<len(txt)-1:
        ans=txt[0:i+1]+'{'+txt[i+1:]+'}'
    else:
        ans=txt
elif type_out=="表达式":
    ans=txt
else:
    if txt[0]=='\\':
        txt1=txt[1:]
    else:
        txt1=txt
    txt1=txt1.replace('\\','')
    ans=txt1.replace(' ','_')

    if ans=="ln":
        ans="log"
    if type_out=="Python":
        ans="np.%s"%(ans)
    elif type_out=="Javascript":
        ans="Math.%s"%(ans)



## end
#138, 278:
"""
+[返回目录](,矩阵输入)

+矩阵输入(结构,输入)->+模式"矩阵输入"...
->[函数输入](结构,输入)->的([函数输入],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]";"(,+模式)->[矩阵输入](结构,输入),
    ->[]

"""

+矩阵输入(结构,输入)->+模式"矩阵输入"...
->[函数输入](结构,输入):
    ->[匹配模式]";\s*"(,+模式)->+输入(输入,)->+的(结构,+输入)->[矩阵输入](结构,+输入),
    ->[]



## end
#140, 353:
"""
+[返回目录](,函数输入)

+[python]"print(txt122[0:-1])"(Python,)

"""

+函数输入(_输入,_文本)->+[del](,+函数输入)...
->+[临时文本]#0->[]{
    []=>的(_输入,_节点1)->_节点1(,)...
    =>+[和式](_节点1,+[临时文本])->+[增加内容]",%s"(+[临时文本]#0,+[临时文本])...
    ->+[修改内容](+[临时文本],+[临时文本]#0)
}...
->+[增加内容](+[临时文本]#0,_文本)...
->+[python]"ans=txt122[0:-1]"(Python,_文本)->+[s]"txt122"(+[python],_文本)






## end
#142, 105:


匹配模板::%[公式]显示为LaTeX公式
输出模板::+[模板文本]"$$%公式$$"(,+[临时文本])->+[.]"公式"(+[模板文本],%[公式])...
->+[H函数](,+[临时文本])


## end
#144, 15:
%[公式]显示为LaTeX公式
## end
#146, 73:
+[模板文本]"$$%公式$$"(,+[临时文本])->+[.]"公式"(+[模板文本],%[公式])...
->+[H函数](,+[临时文本])
## end
#147, 3:
169
## end
#150, 16:
文档\S应用\网页画板.ftxt
## end
#151, 3:
162
## end
#153, 3:
163
## end
#155, 3:
200
## end
#159, 128:


匹配模板::^"%[句子]"\(表达式\)转换为%[算式]\(结构\)$
输出模板::+[删除结构](,%[算式])->+[临时文本]"%[句子]"...
->+[生成公式结构](+[临时文本],%[算式])->+[更新公式起点](,%[算式])



## end
#161, 30:
^"%[句子]"\(表达式\)转换为%[算式]\(结构\)$
## end
#163, 80:
+[删除结构](,%[算式])->+[临时文本]"%[句子]"...
->+[生成公式结构](+[临时文本],%[算式])->+[更新公式起点](,%[算式])
## end
#165, 290:


匹配模板::^%[算式]\(表达式\)转换为%[方程式]\(%[LaTeX]\)$
输出模板::+[删除结构](,%[算式])->+[生成公式结构](%[算式],%[算式]);
%[算式]:->的(%[算式],起点),->+的(%[算式],+起点);
[公式头](%[算式],)->是([公式头],_c)->的(%[算式],起点)->+[右连](起点,_c);
+[修改内容]"%[LaTeX]"(,记忆)->的(%[算式],起点)->起点(,_c)...
->+[算式](_c,+[临时文本]#0)->+[增加内容]#0"%s
"(+[临时文本]#0,%[方程式]);



## end
#167, 35:
^%[算式]\(表达式\)转换为%[方程式]\(%[LaTeX]\)$
## end
#169, 228:
+[删除结构](,%[算式])->+[生成公式结构](%[算式],%[算式]);
%[算式]:->的(%[算式],起点),->+的(%[算式],+起点);
[公式头](%[算式],)->是([公式头],_c)->的(%[算式],起点)->+[右连](起点,_c);
+[修改内容]"%[LaTeX]"(,记忆)->的(%[算式],起点)->起点(,_c)...
->+[算式](_c,+[修改内容]#0)->+[增加内容]#0"%s
"(,%[方程式]);
## end
#171, 122:


匹配模板::^更新%[函数]的公式起点$
输出模板::%[函数]:->的(%[函数],起点),->+的(%[函数],+起点);
[公式头](%[函数],)->是([公式头],_c)->的(%[函数],起点)->+[右连](起点,_c)



## end
#173, 14:
^更新%[函数]的公式起点$
## end
#175, 90:
%[函数]:->的(%[函数],起点),->+的(%[函数],+起点);
[公式头](%[函数],)->是([公式头],_c)->的(%[函数],起点)->+[右连](起点,_c)
## end
#176, 3:
194
## end
#179, 77:

结构=>的(结构,_re)->_re"[\\*]"(_a,)->_a{[]=>_re"[\\*]"(,_a)}...
=>+[显示](,_a)





## end
#181, 223:
"""
+[返回目录](,转换公式结构)

结构变换:...
+[新建阅读窗口](,结构变换)

"""


+转换公式结构(,_输出结构)->+[del](,+转换公式结构)...
->的(转换公式结构,结构变换)...

->+[structure](compiler,+场景)->+[code](+[structure],结构变换)...
->+[.]"结构"(+[structure],_输出结构)->+[del](,+场景)






## end
#183, 456:
"""
保存:...
(把链式的和与乘变成并列式)

"""

结构=>的(结构,矢量)->输入(矢量,变量)=>+[右连](矢量,变量)->+[python]"
ans=text_var[0:-1]
"(Python,变量)->+[s]"text_var"(+[python],变量)...
->+[修改内容](变量,+[修改标题])->+[修改标题](,变量);

结构=>的(结构,矢量)->输入(矢量,)->的(输入,_变量)->[]{
    []=>的#1(输入,)=>[is](的,的#1)
}=>+[del](,的)->+[右连](矢量,_变量)->+[右连](输入,_变量);



结构=>的(结构,矩阵)->输入(矩阵,变量)=>+[右连](矩阵,变量)->+[python]"
ans=text_var[0:-1]
"(Python,变量)->+[s]"text_var"(+[python],变量)...
->+[修改内容](变量,+[修改标题])->+[修改标题](,变量);




## end
#184, 3:
195
## end
#186, 3:
197
## end
#188, 3:
211
## end
#191, 9:
%[运算]%[项]
## end
#193, 9:
%[运算]%[项]
## end
#195, 9:
\d{%[和式]}
## end
#197, 5:
(%和式)
## end
#199, 8:
_{%[标题]}
## end
#201, 10:
^{%[临时文本]}
## end
#202, 3:
213
## end
#204, 3:
221
## end
#206, 328:
web->读取(web,_网页)->的(_网页,[%[序号]].)...
->的([%[序号]].,表达式#2)...
->+[删除结构](,表达式#2)->+[生成公式结构](表达式#2,表达式#2)...
->+[转换公式结构](,表达式#2)->+[更新公式起点](,表达式#2);

web->读取(web,_网页)->的(_网页,[%[序号]].)...
->+[修改内容]"%[LaTeX]"(,记忆)->的([%[序号]].,表达式#2)...
->的(表达式#2,起点)->起点(,_c)...
->+[算式](_c,+[临时文本])->+[修改内容]"%s;
"(+[临时文本],+[插入文本]#0)->+[插入文本]#0(,%[节点])
## end
#207, 35:
^将网页的\(%[序号]\)式写入%[节点]\(%[LaTeX]\)$
## end
#210, 394:
Nini, 打开动词(库)

匹配模板::^将网页的\(%[序号]\)式写入%[节点]\(%[LaTeX]\)$
输出模板::web->读取(web,_网页)->的(_网页,[%[序号]].)...
->的([%[序号]].,表达式#2)...
->+[删除结构](,表达式#2)->+[生成公式结构](表达式#2,表达式#2)...
->+[转换公式结构](,表达式#2)->+[更新公式起点](,表达式#2);

web->读取(web,_网页)->的(_网页,[%[序号]].)...
->+[修改内容]"%[LaTeX]"(,记忆)->的([%[序号]].,表达式#2)...
->的(表达式#2,起点)->起点(,_c)...
->+[算式](_c,+[临时文本])->+[修改内容]"%s;
"(+[临时文本],+[插入文本]#0)->+[插入文本]#0(,%[节点])



## end
#212, 3:
286
## end
#215, 138:
"""
库:...
+[新建阅读窗口](,库)

"""

+描述公式(,做)...
->的(描述公式,库)->的(库,_段落)...
->[标题](_段落,)->[==](+描述公式,[标题])...
    ->+code(做,_段落)->+[del](,+描述公式)


## end
#216, 762:
"""
+[返回目录](,函数输入)

结构语言::...
    ->的(%c,%a)%[临时文本]
结构语言2::->%c(%b,)


"""

+函数输入(输入,_文本)->+[del](,+函数输入)...
->的(函数输入,结构语言)->的(函数输入,结构语言2)...

->输入(_节点,)->_节点(,)...

->+[临时文本]#0(,)...
->+[标题]#b(_节点,)->+[公式序号](_节点,+[增加内容]#b)->+[增加内容]#b(,+[标题]#b)...
->+[标题]#c(输入,)->+[公式序号](_输入,+[增加内容]#c)->+[增加内容]#c(,+[标题]#c)...
    ->+[模板文本](结构语言2,+[临时文本]#0)...
    ->+[.]"b"(+[模板文本],+[标题]#b)->+[.]"c"(+[模板文本],+[标题]#c)...

->[]{
    []=>的(输入,_节点1)->_节点1(,)...
    =>+[标题](_节点1,)->+[公式序号](_节点1,+[增加内容]#a)->+[增加内容]#a(,+[标题])...
        ->+[描述公式]"和式"(,+[做]#0)->+[做]#0(_节点1,+[临时文本])...
        ->+[模板文本](结构语言,+[增加内容]#1)...
        ->+[.](+[模板文本],+[临时文本])->+[.]"a"(+[模板文本],+[标题])...
        ->+[.]"c"(+[模板文本],+[标题]#c)...
    ->+[增加内容]#1(,+[临时文本]#0)
}...
->+[增加内容](+[临时文本]#0,_文本)






## end
#217, 108:
"""
+[返回目录](,算式)
+[修改标题]"算式"(,算式1)


"""

+算式(_节点,_文本)->+[del](,+算式)...
->+[描述公式]"等式"(,+[做])->+[做](_节点,_文本)

## end
#218, 325:
"""
+[返回目录](,等式)

结构语言::

"""

+等式(_节点,_文本)->+[del](,+等式)...

->+[公式序号](_节点,)...
->+[描述公式]"和式"(,+[做]#0)->+[做]#0(_节点,_文本)...
->[]{
    []:->=(_节点,_节点1)->_节点1(,)...
        ->+[公式序号](_节点1,)...
        ->+[描述公式]"等式"(,+[做])->+[做](_节点1,+[临时文本])...
        ->+[清空序号](,_节点1)->+[增加内容]"="(+[临时文本],_文本),
    ->[]
}->+[清空序号](,_节点)






## end
#219, 727:
"""
+[返回目录](,和式)

结构语言::...
->%[运算](%a0,%a1)%[项]

"""

+和式(_节点,_和式)->+[del](,+和式)...
->的(和式,结构语言)...

->[]{
    []:->负号(_节点,)->+[增加内容]"-"(,_和式),->[]
}...

->+[标题]#0(_节点,)...
    ->+[公式序号](_节点,+[增加内容]#0)->+[增加内容]#0(,+[标题]#0)...

->+[描述公式]"乘式"(,+[做]#0)->+[做]#0(_节点,+[临时文本]#0)...
->[]{
    []=>_re"[+-]"(_节点,_节点1)->_节点1(,)...
    =>+[标题]#1(_节点1,)...
        ->+[公式序号](_节点1,+[增加内容]#1)->+[增加内容]#1(,+[标题]#1)...
    ->+[描述公式]"和式"(,+[做])->+[做](_节点1,+[临时文本])...
        ->[m_text](+和式,+[做])->+[标题](_re,)...
    ->+[清空序号](,_节点1)...

    ->+[模板文本](结构语言,+[增加内容])->+[增加内容](,+[临时文本]#0)...
    ->+[.]"[运算]"(+[模板文本],+[标题])->+[.]"[项]"(+[模板文本],+[临时文本])...
    ->+[.]"a0"(+[模板文本],+[标题]#0)->+[.]"a1"(+[模板文本],+[标题]#1)
}->+[增加内容](+[临时文本]#0,_和式)





## end
#220, 649:
"""
+[返回目录](,乘式)

结构语言::->%[运算](%a0,%a1)

"""

+乘式(_节点,_乘式)->+[del](,+乘式)...
->的(乘式,结构语言)...

->+[描述公式]"项"(,+[做]#0)->+[做]#0(_节点,+[临时文本]#0)...
->+[临时文本]#0{
    []=>_re"[*/]"(_节点,_节点1)->_节点1(,)...
    =>+[标题]#0(_节点,)...
        ->+[公式序号](_节点,+[增加内容]#0)->+[增加内容]#0(,+[标题]#0)...
    ->+[标题]#1(_节点1,)...
        ->+[公式序号](_节点1,+[增加内容]#1)->+[增加内容]#1(,+[标题]#1)...
    ->+[描述公式]"乘式"(,+[做])->+[做](_节点1,+[临时文本])->+[标题](_re,)...
    ->+[清空序号](,_节点1)...

    ->+[模板文本](结构语言,+[增加内容])->+[增加内容](,+[临时文本]#0)...
    ->+[.]"[运算]"(+[模板文本],+[标题])->+[.]"[项]"(+[模板文本],+[临时文本])...
    ->+[.]"a0"(+[模板文本],+[标题]#0)->+[.]"a1"(+[模板文本],+[标题]#1)
}->+[增加内容](+[临时文本]#0,_乘式)







## end
#221, 517:
"""
+[返回目录](,项)
括号|数字|变量|分式|求和式|积分式...

"""

+项(_节点,_项)->+[del](,+项):
    ->[is](_节点,分式)->+[描述公式]"分式"(,+[做]#0)->+[做]#0(_节点,+分式)...
        ->+[修改内容](+分式,_项)->+[del](,+分式),
    ->[is](_节点,括号)->+[描述公式]"括号"(,+[做]#1)->+[做]#1(_节点,+括号)...
        ->+[修改内容](+括号,_项)->+[del](,+括号),
    ->[is](_节点,_re)->_re"^[0-9]+.?[0-9]*|\\pi|\\infty$"...
        ->+[描述公式]"数字"(,+[做]#2)->+[做]#2(_节点,+数字)...
        ->+[修改内容](+数字,_项)->+[del](,+数字),
    ->+[描述公式]"变量"(,+[做]#3)->+[做]#3(_节点,+变量)...
        ->+[修改内容](+变量,_项)->+[del](,+变量)






## end
#222, 773:
"""
+[返回目录](,分式)
\frac { (-) 和式 } { (-) 和式 }...

结构语言::...
    ->的(分式%n,分子%n)->分子%n(,%a)%[分子]...
    ->的(分式%n,分母%n)->分母%n(,%b)%[分母]

"""

+分式(_节点,_分式)->+[del](,+分式)...
->的(分式,结构语言)...

->+[公式序号](_节点,+[临时文本]#n)...

->的(_节点,分子)->分子(,_分子)...
->+[标题]#a(_分子,)...
    ->+[公式序号](_分子,+[增加内容]#a)->+[增加内容]#a(,+[标题]#a)...
->+[描述公式]"和式"(,+[做]#0)->+[做]#0(_分子,+和式#1)...
->+[修改内容](+和式#1,+[分子])->+[del](,+和式#1)...

->的(_节点,分母)->分母(,_分母)...
->+[标题]#b(_分母,)...
    ->+[公式序号](_分母,+[增加内容]#b)->+[增加内容]#b(,+[标题]#b)...
->+[描述公式]"和式"(,+[做]#1)->+[做]#1(_分母,+和式#2)...
->+[修改内容](+和式#2,+[分母])->+[del](,+和式#2)...

->+[清空序号](,_分子)->+[清空序号](,_分母)...
->+[模板文本](结构语言,_分式)...
->+[.](+[模板文本],+[分子])->+[.](+[模板文本],+[分母])...
->+[.]"n"(+[模板文本],+[临时文本]#n)...
->+[.]"a"(+[模板文本],+[标题]#a)->+[.]"b"(+[模板文本],+[标题]#b)


## end
#223, 449:
"""
+[返回目录](,括号)
\( 和式 \)...

结构语言::...
    ->的(括号%n,%a)%和式


"""

+括号(_节点,_括号)->+[del](,+括号)...
->的(括号,结构语言)...

->+[公式序号](_节点,+[临时文本]#n)...

->的(_节点,_和式)...
->+[标题](_和式,)...
    ->+[公式序号](_和式,+[增加内容])->+[增加内容](,+[标题])...
->+[描述公式]"和式"(,+[做]#0)->+[做]#0(_和式,+和式#1)...

->+[清空序号](,_和式)...
->+[模板文本](结构语言,_括号)...
->+[.]"a"(+[模板文本],+[标题])->+[.]"n"(+[模板文本],+[临时文本]#n)...
->+[.](+[模板文本],+和式#1)->+[del](,+和式#1)...

->+[描述公式]"幂次"(,+[做]#1)->+[做]#1(_节点,_括号)

## end
#224, 151:
"""
+[返回目录](,数字)
数字|特殊数字 (幂次)...

->+[标题](_节点,)->+[修改内容](+[标题],_数字)...

"""
+数字(_节点,_数字)->+[del](,+数字)...
->+[描述公式]"幂次"(,+[做]#0)->+[做]#0(_节点,_数字)






## end
#225, 227:
"""
+[返回目录](,变量)
字母 (下标) (幂次)...

P代码:...


"""


+变量(_节点,_变量)->+[del](,+变量)...
->的(变量,P代码)...

->[]{
    []:->输入(_节点,)...
    ->+[描述公式]"函数输入"(,+[做]#0)->+[做]#0(输入,_变量),
    ->[]
}...
->+[描述公式]"幂次"(,+[做]#1)->+[做]#1(_节点,_变量)





## end
#226, 451:
"""
+[返回目录](,幂次)

结构语言::->^(%a0,%a1)%[临时文本]

"""

+幂次(_节点,_文本)->+[del](,+幂次)...
->的(幂次,结构语言)...

->^(_节点,_幂次)...
->+[标题]#0(_节点,)...
    ->+[公式序号](_节点,+[增加内容]#0)->+[增加内容]#0(,+[标题]#0)...
->+[标题]#1(_幂次,)...
    ->+[公式序号](_幂次,+[增加内容]#1)->+[增加内容]#1(,+[标题]#1)...
->+[描述公式]"和式"(,+[做]#0)->+[做]#0(_幂次,+[临时文本])...

->+[清空序号](,_幂次)...
->+[模板文本](结构语言,+[增加内容])->+[.](+[模板文本],+[临时文本])...
->+[.]"a0"(+[模板文本],+[标题]#0)->+[.]"a1"(+[模板文本],+[标题]#1)...
->+[增加内容](,_文本)




## end
#238, 305:
+[设置结构](,库)

结构转名词:...
新名词:...


算式: 等式...
等式: (-)和式 (等于 等式)...
和式: 乘式 (加减 和式)...
乘式: 项 (乘除 乘式)...
项: 括号|数字|变量|分式|求和式|积分式...
分式: \frac { (-) 和式 } { (-) 和式 }...
+[修改内容](数字,分式)

括号: \( 和式 \)...
数字: 数字|特殊数字 (幂次)...
变量: 字母 (下标) (幂次)...

函数输入:...
函数输入的"等式"替换为"函数输入"
幂次: ^ (数字|变量|({ 和式 })...
+[新建阅读窗口](,函数输入)



## end
#240, 3:
275
## end
#243, 87:
"""
+[P函数](,P代码)

"""

if txt[0]=='\\':
    ans=txt[1:]
else:
    ans=txt
print(ans)



## end
#245, 19:
->^(%a0,%a1)%[临时文本]
## end
#247, 23:
...
    ->的(括号%n,%a)%和式
## end
#249, 76:
...
    ->的(分式%n,分子%n)->分子%n(,%a)%[分子]...
    ->的(分式%n,分母%n)->分母%n(,%b)%[分母]
## end
#251, 20:
->%[运算](%a0,%a1)%[项]
## end
#253, 24:
...
->%[运算](%a0,%a1)%[项]
## end
#255, 25:
...
    ->的(%c,%a)%[临时文本]
## end
#257, 222:
"""
记住"Matlab"
n=1
sprintf('#%d',n)
+[修改标题]"公式序号"(,公式设置序号)

"""

+公式序号(_节点,_序号):
    ->序号(_节点,)->[m_text](序号,_序号),
    ->+序号(_节点,)->[matlab]"n=n+1;ans=sprintf('#%d',n);state=1;"(Matlab,+序号)...
        ->[m_text](+序号,_序号)


## end
#259, 180:
"""


"""

+公式序号(_节点,_序号)->+[del](,+公式序号):
    ->序号(_节点,)->+[修改内容](序号,_序号),
    ->+序号(_节点,)->[matlab]"n=n+1;ans=sprintf('#%d',n);state=1;"(Matlab,+序号)...
        ->+[修改内容](+序号,_序号)
## end
#261, 67:
"""


"""

+清空序号(,_节点)->+[del](,+清空序号)...
->序号(_节点,)->+[del](,序号)


## end
#263, 408:
"""
结构语言::+%名词(%a,)%[临时文本]...

=>[那](_,)=>[]:->[is](_,%a),->[is](_,+%名词),
->+的(+%名词,_)

"""

+新名词(_节点,_名词)->+[del](,+新名词)...
->的(新名词,结构语言)...

->+[标题]#0(_名词,)...
->+[标题]#1(_节点,)...
    ->+[公式序号](_节点,+[增加内容]#1)->+[增加内容]#1(,+[标题]#1)...
->+[描述公式]"算式"(,+[做]#0)->+[做]#0(_节点,+[临时文本])...

->+[清空序号](,_节点)...
->+[模板文本](结构语言,_名词)...
->+[.]"名词"(+[模板文本],+[标题]#0)->+[.]"a"(+[模板文本],+[标题]#1)...
->+[.](+[模板文本],+[临时文本])




## end
#265, 76:
+%名词(%a,)%[临时文本]...

=>[那](_,)=>[]:->[is](_,%a),->[is](_,+%名词),
->+的(+%名词,_)
## end
#267, 142:
"""
结构语言::+%名词(%a,)%[临时文本]

"""

+结构转名词(_结构,_名词)->+[del](,+结构转名词)...

->[公式头](_结构,)->是([公式头],_起点)...
->+[描述公式]"新名词"(,+[做])->+[做](_起点,_名词)





## end
#268, 3:
276
## end
#271, 137:
"""


"""

+更新公式起点(,_结构)->+[del](,+更新公式起点)...
->[公式头](_结构,)->是([公式头],_c):
    ->的(_结构,起点)->+[右连](起点,_c),
    ->+的(_结构,+起点)->+起点(,_c);




## end
#272, 3:
304
## end
#274, 34:
^%[算式]\(结构\)转换为%[方程式]\(%[LaTeX]\)$
## end
#275, 93:
+[修改内容]"%[LaTeX]"(,记忆)...
->的(%[算式],起点)->起点(,_c)...
->+[算式](_c,+[修改内容]#0)->+[修改内容]#0(,%[方程式])
## end
#278, 145:


匹配模板::^%[算式]\(结构\)转换为%[方程式]\(%[LaTeX]\)$
输出模板::+[修改内容]"%[LaTeX]"(,记忆)...
->的(%[算式],起点)->起点(,_c)...
->+[算式](_c,+[修改内容]#0)->+[修改内容]#0(,%[方程式])



## end
#280, 393:
"""
+[返回目录](,分式)
+[新建阅读窗口](,分式)

测试:...
保存:...
保存2:...

"""

+分式(结构,)...

->+模块"分式"->[匹配模式]"\\frac{"(,+模块)...
->[和式](结构,)->的([和式],_和式#1)...

->+模块#2"分子"->[匹配模式]"}{"(,+模块#2)...
->[和式](结构,)->的([和式],_和式#2)...

->+模块#3"分母"->[匹配模式]"}"(,+模块#3)...

->+的(+分式,+分式#0)->+的(结构,+分式#0)...
->+的#1(+分式#0,+分子)->+分子(,_和式#1)->+的(结构,+的#1)->+的(结构,+分子)...
->+的#2(+分式#0,+分母)->+分母(,_和式#2)->+的(结构,+的#2)->+的(结构,+分母)




## end
#282, 62:
+[删除结构](,%[算式])->+[生成公式结构](%[起始],%[算式])...
->+[更新公式起点](,%[算式])
## end
#283, 27:
^%[起始]\(原式\)转换为%[算式]\(结构\)$
## end
#286, 107:


匹配模板::^%[起始]\(原式\)转换为%[算式]\(结构\)$
输出模板::+[删除结构](,%[算式])->+[生成公式结构](%[起始],%[算式])...
->+[更新公式起点](,%[算式])



## end
#289, 530:
"""


"""

+公式头(_算式结构,)->的(_算式结构,_re)...
->_re"\\?[\w_\d.]+"->+是(+公式头,_re){
    []&:=>[is](_re,的#1)->的#1,
        =>[is](_re,负号)->负号,
        =>[is](_re,输入)->输入,
        =>[is](_re,序号输入)->序号输入,
        =>[is](_re,\times )->\times ,
        =>[is](_re,\cdot )->\cdot ,
        =>[is](_re,_re#v)->_re#v"上限|下限",

        =>_re#0"[\^=<>]|\\le|\\ge|下标"(,_re),
        =>_re#2"[/\-+*]"(,_re),
        =>_re#2"\\cdot |\\times "(,_re),
        =>_re#3"分子|分母|根式|上限|下限|积分式|求和式|偏微分|微分|矢量|矩阵"(,_re),
        =>的(_re#1,_re)->_re#1"括号|输入|分式"
}

## end
#290, 9:
\vec{%变量}
## end
#291, 5:
[%变量]
## end
#292, 35:
\begin{pmatrix}
%变量
\end{pmatrix}


## end
#296, 753:
"""
保存:...
LaTeX:...
LaTeX2:...
表达式:...
表达式2:...
Matlab:...
Matlab2:...

P代码:...
+[新建阅读窗口](,P代码)

矢量输入:...
矩阵输入的"矩阵"替换为"矢量"

"""

+矢量(_节点,_矢量)->+[del](,+矢量)...
->的(矢量,矢量输入)->的(矢量,P代码)...
->的(矢量,LaTeX)->的(矢量,LaTeX2)...
->的(矢量,表达式)->的(矢量,表达式2)...
->的(矢量,Matlab)->的(矢量,Matlab2)...

->Python->记忆->_节点(,_名字):
->_名字->+[变量](_名字,+[临时文本]#v)...
    ->+[python](Python,_矢量)->+[code](+[python],P代码)...
    ->+[.]"vec_name"(+[python],+[临时文本]#v)...
    ->+[.]"vec_type"(+[python],_节点)->+[.]"type_txt"(+[python],记忆),

->输入(_节点,)->+[做](输入,+[临时文本])->+[code](+[做],矢量输入)...
    ->+[模板文本](,_矢量)->+[.]"变量"(+[模板文本],+[临时文本])->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX),
        ->[==]"表达式"(,记忆)->+[code](+[模板文本],表达式),
        ->+[code](+[模板文本],Matlab)
    }




## end
#298, 3:
312
## end
#300, 33:
^将%[算式]\(结构\)写入%[节点]\(%[LaTeX]\)$
## end
#301, 124:
+[修改内容]"%[LaTeX]"(,记忆)...
->的(%[算式],起点)->起点(,_c)...
->+[算式](_c,+[临时文本])->+[修改内容]"
%s;"(+[临时文本],+[插入文本]#0)->+[插入文本]#0(,%[节点])
## end
#304, 175:


匹配模板::^将%[算式]\(结构\)写入%[节点]\(%[LaTeX]\)$
输出模板::+[修改内容]"%[LaTeX]"(,记忆)...
->的(%[算式],起点)->起点(,_c)...
->+[算式](_c,+[临时文本])->+[修改内容]"
%s;"(+[临时文本],+[插入文本]#0)->+[插入文本]#0(,%[节点])



## end
#309, 3:
320
## end
#312, 9:
->%c(%b,)
## end
#313, 3:
321
## end
#315, 3:
323
## end
#318, 511:
<!--
+[H函数](,微分积分)

结构:...
+[新建阅读窗口](,结构)
"\partial{x,t,t_2}{y}"(表达式)转换为结构(结构)
"\int_{0}^{1}{x,z,t}{y}"(表达式)转换为结构(结构)
"\d{x}"(表达式)转换为结构(结构)
+[显示星图](,结构)
结构->[公式头](结构,)->是([公式头],_起点)->+[显示](,_起点)
的(结构,积分式)->[is](积分式,_re)->_re"\\?[\w_\d.]+"


将"\int_{0}^{1}{x,z,t}{y}"记作(1)式

Nini, 打开公式结构的句子库(节点)
Nini, 打开公式分析器的句子库(节点)
-->

%[1].
$$
\frac{\partial^2 f}{\partial x\ \partial y}
$$

<!--
+[H函数](,微分积分)
[1].:
将"1+1=2"记作(1)式
将结构记作(1)式

将"\p{x}{\vec{f}}"记作为式(1)

\int_{0}^{1}{x,y,z}{f(x)}
\d{f(x)}
\partial{x,y}{f}
-->
## end
#323, 20:
\partial{x,t,t_2}{y}
## end
#325, 59:
\frac{\partial^3 y}{\partial t_2\ \partial t\ \partial x\ }
## end
#327, 198:
"""
+[返回目录](,根式)
+[新建阅读窗口](,根式)

测试:...

"""

+根式(结构,)...
->+模块"根式"->[匹配模式]"\\sqrt{"(,+模块)...
->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+根式,+根式#0)->+的(结构,+根式#0)...
->+根式#0(,_和式#1)




## end
#329, 3:
376
## end
#332, 72:
+[显示星图](,结构)

起点
+[显示](,输入)
+[设置结构](,输入)

记住"LaTeX"
+[偏微分](偏微分,+[消息窗口])

## end
#333, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#334, 195:
"""
+[返回目录](,微分)
+[新建阅读窗口](,微分)

测试:...

"""

+微分(结构,)...
->+模块"微分"->[匹配模式]"\\d{"(,+模块)...
->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+微分,+微分#0)->+的(结构,+微分#0)...
->+微分#0(,_和式#1)




## end
#337, 26:
"\int{x}{y}"(表达式)转换为结构(结构)
## end
#340, 19:
\frac{%[分子]}{%[分母]}
## end
#341, 16:
(%[分子])./(%[分母])
## end
#342, 19:
\frac{%[分子]}{%[分母]}
## end
#346, 469:
"""
+[返回目录](,分式)
\frac { (-) 和式 } { (-) 和式 }...

LaTeX::\frac{%[分子]}{%[分母]}
表达式::\frac{%[分子]}{%[分母]}
Matlab::(%[分子])./(%[分母])

P代码:...
保存:...

"""

+分式(_节点,_分式)->+[del](,+分式)...
->的(分式,P代码)...

->的(_节点,分子)->分子(,_分子)->+[和式](_分子,+和式#1)...
->的(_节点,分母)->分母(,_分母)->+[和式](_分母,+和式#2)...

->+[python](Python,_分式)->+[code](+[python],P代码)...
->+[s]"type_out"(+[python],记忆)...
->+[s]"text_up"(+[python],+和式#1)->+[s]"text_dwn"(+[python],+和式#2)...
->+[del](,+和式#1)->+[del](,+和式#2)


## end
#348, 28:
\sum_{%求和变量%下限}^{%上限}{%求和函数}
## end
#349, 30:
\sum_{%下限}^{%上限}{%求和变量}{%求和函数}
## end
#350, 16:
(%[分子])./(%[分母])
## end
#354, 820:
"""
+[返回目录](,求和式)
\frac { (-) 和式 } { (-) 和式 }...

LaTeX::\sum_{%求和变量%下限}^{%上限}{%求和函数}
表达式::\sum_{%下限}^{%上限}{%求和变量}{%求和函数}

P代码:...
+[新建阅读窗口](,P代码)

保存:...

"""

+求和式(_节点,_求和式)->+[del](,+求和式)...
->的(求和式,P代码)...

->_节点(,_求和函数)->+[和式](_求和函数,+求和函数)...

->+[python]"list_var=[]"(Python,)...
->[]{
    []=>输入(_节点,)->的(输入,_变量)=>+[和式](_变量,+变量#1)...
        ->+[python]"list_var.append(text_var)"(Python,)...
        ->+[s]"text_var"(+[python],+变量#1)->+[del](,+变量#1)
}...

->+上限{
    []:->上限(_节点,_上限)->_上限->+[和式](_上限,+上限),
    ->[]
}...
->+下限{
    []:->下限(_节点,_下限)->_下限->+[和式](_下限,+下限),
    ->[]
}...

->+[python](Python,_求和式)->+[code](+[python],P代码)...
->+[.]"text_type"(+[python],记忆)...
->+[.]"sum_func"(+[python],+求和函数)...
->+[s]"i_e"(+[python],+上限)->+[s]"i_s"(+[python],+下限)...
->+[del](,+求和函数)->+[del](,+上限)->+[del](,+下限)



## end
#356, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#357, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#358, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#359, 310:
"""
+[返回目录](,矢量)
+[新建阅读窗口](,矢量)

测试:...


"""

+矢量(结构,)...
->+模块"矢量"->[匹配模式]"\\vec{"(,+模块)...
->+的(+矢量,+矢量#0)->+的(结构,+矢量#0):

->[匹配模式]"\\?[a-zA-Z_\d]+}"(,+模块)...
    ->+输入(+矢量#0,+变量)->+的(结构,+输入)->+的(结构,+变量)...
    ->[m_text]([匹配模式],+变量),

->+输入(+矢量#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
    ->[匹配模式]"}"(,+模块)





## end
#361, 3:
380
## end
#363, 12:
\sqrt{%[和式]}
## end
#364, 11:
sqrt(%[和式])
## end
#365, 12:
\sqrt{%[和式]}
## end
#369, 297:
"""
+[返回目录](,根式)

LaTeX::\sqrt{%[和式]}
表达式::\sqrt{%[和式]}
Matlab::sqrt(%[和式])

P代码:...
保存:...

"""

+根式(_节点,_根式)->+[del](,+根式)...
->的(根式,P代码)...

->_节点(,_和式)->+[和式](_和式,+[临时文本])...

->+[python](Python,_根式)->+[code](+[python],P代码)...
->+[s]"type_out"(+[python],记忆)->+[s]"text_f"(+[python],+[临时文本])



## end
#371, 3:
386
## end
#376, 1061:
"""
+[返回目录](,分式)
+[新建阅读窗口](,分式)

测试:...
保存:...
保存2:...

"""

+分式(结构,)...

->[python]"
try:
    a=re.match(r'\\frac{',text[i:])
    if a==None:
        print('Stop in [分式]')
        state=False
    else:
        di=a.span()[1]
        print('[分式]: ',text[i:i+di])
        i+=di
        state=True
except:
    state=False
"(Python,)...

->[和式](结构,)->的([和式],_和式#1)...


->[python]"
try:
    a=re.match(r'}{',text[i:])
    if a==None:
        print('Stop in [分子]')
        state=False
    else:
        di=a.span()[1]
        print('[分子]: ',text[i:i+di])
        i+=di
        state=True
except:
    state=False
"(Python,)...

->[和式](结构,)->的([和式],_和式#2)...


->[python]"
try:
    a=re.match(r'}',text[i:])
    if a==None:
        print('Stop in [分母]')
        state=False
    else:
        di=a.span()[1]
        print('[分母]: ',text[i:i+di])
        i+=di
        state=True
except:
    state=False
"(Python,)...

->+的(+分式,+分式#0)->+的(结构,+分式#0)...
->+的#1(+分式#0,+分子)->+分子(,_和式#1)->+的(结构,+的#1)->+的(结构,+分子)...
->+的#2(+分式#0,+分母)->+分母(,_和式#2)->+的(结构,+的#2)->+的(结构,+分母)




## end
#378, 394:
"""
+[返回目录](,分式)
+[新建阅读窗口](,分式)

测试:...
保存:...
保存2:...

"""

+分式(结构,)...

->+模块"分式"->[匹配模式]"\\frac{"(,+模块)...
->[和式](结构,)->的([和式],_和式#1)...


->+模块#2"分子"->[匹配模式]"}{"(,+模块#2)...
->[和式](结构,)->的([和式],_和式#2)...

->+模块#3"分母"->[匹配模式]"}"(,+模块#3)...

->+的(+分式,+分式#0)->+的(结构,+分式#0)...
->+的#1(+分式#0,+分子)->+分子(,_和式#1)->+的(结构,+的#1)->+的(结构,+分子)...
->+的#2(+分式#0,+分母)->+分母(,_和式#2)->+的(结构,+的#2)->+的(结构,+分母)




## end
#379, 3:
387
## end
#381, 3:
389
## end
#383, 3:
391
## end
#385, 3:
393
## end
#387, 3:
401
## end
#389, 32:
^将\(%[序号]\)式写入%[节点]\(%[LaTeX]\)$
## end
#390, 250:
的([%[序号]].,表达式#2)...
->+[删除结构](,表达式#2)->+[生成公式结构](表达式#2,表达式#2)...
->+[转换公式结构](,表达式#2)->+[更新公式起点](,表达式#2);

+[修改内容]"%[LaTeX]"(,记忆)->的([%[序号]].,表达式#2)...
->的(表达式#2,起点)->起点(,_c)...
->+[算式](_c,+[临时文本])->+[修改内容]"%s;
"(+[临时文本],+[插入文本]#0)->+[插入文本]#0(,%[节点])
## end
#393, 313:
Nini, 打开动词(库)

匹配模板::^将\(%[序号]\)式写入%[节点]\(%[LaTeX]\)$
输出模板::的([%[序号]].,表达式#2)...
->+[删除结构](,表达式#2)->+[生成公式结构](表达式#2,表达式#2)...
->+[转换公式结构](,表达式#2)->+[更新公式起点](,表达式#2);

+[修改内容]"%[LaTeX]"(,记忆)->的([%[序号]].,表达式#2)...
->的(表达式#2,起点)->起点(,_c)...
->+[算式](_c,+[临时文本])->+[修改内容]"%s;
"(+[临时文本],+[插入文本]#0)->+[插入文本]#0(,%[节点])



## end
#395, 3:
405
## end
#397, 3:
405
## end
#399, 3:
407
## end
#401, 3:
409
## end
#403, 3:
414
## end
#405, 3:
415
## end
#408, 559:
"""
结构描述:...
库:...
+[新建阅读窗口](,库)
保存:...

"""

+算式结构转换(_结构,_输出)->+[del](,+算式结构转换)...
->的(算式结构转换,结构描述)->的(算式结构转换,库)...

->[]{
    []:->的(_结构,起点)->起点(,_c)->+起点(_结构,_c)->+[del](,+起点),
    ->+起点(_结构,_结构)->+[del](,+起点)
}...
->起点(_结构,_c)...
->+[code]([想],结构描述)->[想](+算式结构转换,_c)...

->+[修改内容](,记忆)->[m_text](+算式结构转换,+[修改内容])...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作=>[说](,_操作)->[]:
        ->[is](_操作,_操作1)...
            ->的(库,_条目)->_条目->[eq](_操作,_条目)...
            ->+[做](_c,_输出)->+[code](+[做],_条目)...
            ->+场景(+[做],_结构)->+[del](,+场景),
        ->[]
}




## end
#409, 3:
422
## end
#411, 3:
419
## end
#413, 3:
558
## end
#416, 304:
<!--
+[H函数](,链式结构)
-->

%[1].
%[2].
%[3].

%[4].
%[5].

<!--
[5].:
+[H函数](,链式结构)
将"\frac{\d{x}}{\d{t}}=\partial{x}{f(x,y)}"记作为式(2)
将"x=\int_{t_000}^{t}{\tau}{\partial{x}{f(x,y)}}"记作为式(3)

将"\mat{T}=\mat{cos(\theta),sin(\theta);-sin(\theta),cos(\theta)}"记作为式(4)
将"a*\vec{v_1}=\mat{T}*\vec{v_2}"记作为式(5)
-->
## end
#418, 293:
"""
+[返回目录](,乘式)

保存:

"""

+乘式(结构,)->+项->[]{
    []:->[特殊表达式](结构,)->的([特殊表达式],_表达式)->+的(+项,_表达式),
    ->[项](结构,)->的([项],_项)->+的(+项,_项)
}->的(+项,_项0):
    ->[乘除]->[乘式](结构,)->的([乘式],_乘式)...
    ->+的(+乘式,_项0)...
    ->+乘除(_项0,_乘式)->[m_text]([乘除],+乘除)->+的(结构,+乘除)->[说](,+乘除),

    ->+的(+乘式,_项0)



## end
#420, 434:
"""
保存:...

"""

结构=>的(结构,_re)->_re"[\-+]"(_a,)->_a{[]=>_re"[\-+]"(_b,_a)->_b}...
=>+和式(,_a)->+的(+和式,_a)...
=>的(+和式,_项)->_re"[\-+]"(_项,_项0)->_项0(,)...
=>+的(+和式,_项0)->+[左连](_re,_a);

结构=>的(结构,_re)->_re"[/*]"(_a,)->_a{[]=>_re"[/*]"(,_a)}...
=>+乘式(,_a)->+的(+乘式,_a)...
=>的(+乘式,_项)->_re"[/*]"(_项,_项0)->_项0(,)...
=>+的(+乘式,_项0)->+[左连](_re,_a)

自己=>的(自己,和式)->和式(,_a)=>+[倒序](,_a)->+[del](,和式);
自己=>的(自己,乘式)->乘式(,_a)=>+[倒序](,_a)->+[del](,乘式);


## end
#424, 331:

->[python]"
try:
    a=re.match(r'\\?[a-zA-Z]+',text[i:])
    if a==None:
        print('Stop in [变量]',text[i:])
        state=False
    else:
        di=a.span()[1]
        print('[变量]: ',text[i:i+di])
        ans=text[i:i+di]
        i+=di
        state=True
except:
    state=False
"(Python,+变量)...

->+的#1(输入,_和式)->+的(结构,+的#1)
## end
#426, 140:
"""
+[P函数](,P代码_LaTeX)
记住"Python"

"""

i=txt.find('_')

if i>0 and i<len(txt)-1:
    ans=txt[0:i+1]+'{'+txt[i+1:]+'}'
else:
    ans=txt




## end
#428, 1190:
"""
+[返回目录](,变量)
字母 (下标) (幂次)...

P代码:...
P代码_LaTeX:...
P代码_0:...

P代码_函数:...
+[新建阅读窗口](,P代码_函数)

LaTeX_序号::\ _{%序号}
Matlab_序号::(%序号)
表达式_序号::[%序号]

保存:...
幂次

"""


+变量(_节点,_变量)->+[del](,+变量)...
->的(变量,P代码)->的(变量,P代码_LaTeX)->的(变量,P代码_0)...
->的(变量,P代码_函数)...
->的(变量,LaTeX_序号)->的(变量,Matlab_序号)->的(变量,表达式_序号)...

->+[标题](_节点,)...
    ->+[python](Python,_变量)->+[.]"txt"(+[python],+[标题])...
->记忆->[]{
    []:->[==]"Matlab"(,记忆)->+[code](+[python],P代码),
    ->[==]"Python"(,记忆)->+[code](+[python],P代码),
    ->[==]"LaTeX"(,记忆)->+[code](+[python],P代码_LaTeX),
    ->+[code](+[python],P代码_0)
}...

->+[写下标](_节点,_变量)...
->[]{
    []:->序号输入(_节点,)->+[函数输入](序号输入,+序号)...
        ->+[模板文本](,+[增加内容])->+[增加内容](,_变量)...
        ->+[.](+[模板文本],+序号)->+[del](,+序号)...
        ->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX_序号),
            ->[==]"Matlab"(,记忆)->+[code](+[模板文本],Matlab_序号),
            ->+[code](+[模板文本],表达式_序号)
        },
    ->[]
}...

->[]{
    []:->输入(_节点,)->+[函数输入](输入,+[临时文本])...
        ->+[python](Python,_变量)->+[code](+[python],P代码_函数)...
        ->+[s]"type_out"(+[python],记忆)->+[s]"func_name"(+[python],_变量)...
        ->+[s]"input_vars"(+[python],+[临时文本]),
    ->[]
}



## end
#430, 354:
"""
记住"Python"
print(input_vars=='y')

"""

if type_out=="LaTeX":
    i=txt.find('_')
    if i>0 and i<len(txt)-1:
        ans=txt[0:i+1]+'{'+txt[i+1:]+'}'
    else:
        ans=txt
elif type_out=="表达式":
    ans=txt
else:
    if txt[0]=='\\':
        txt1=txt[1:]
    else:
        txt1=txt
    txt1=txt1.replace('\\','')
    ans=txt1.replace(' ','_')



## end
#432, 53:
\frac{x_{01}+x_{02}}{D_{x1}\ y_{02}-D_{y2}\ x_{02}}=0
## end
#434, 39:
\frac{x_01+x_02}{D_x1*y_02-D_y2*x_02}=0
## end
#438, 358:
"""
+[返回目录](,乘除)

保存:...

"""

+乘除->[python]"
try:
    a=re.match(r'[\n\t\s]*[*/ ]',text[i:])
    if a==None:
        print('Stop in [乘除]')
        state=False
    else:
        di=a.span()[1]
        print('[乘除]: ',text[i:i+di])
        # ans=text[i:i+di]
        ans=text[i+di-1]
        i+=di
        state=True
except:
    state=False
"(Python,+乘除)






## end
#440, 354:
"""
+[返回目录](,加减)

保存:

"""

+加减->[python]"
try:
    a=re.match(r'[\n\s\t]*[+-]',text[i:])
    if a==None:
        print('Stop in [加减]')
        state=False
    else:
        di=a.span()[1]
        print('[加减]: ',text[i:i+di])
        # ans=text[i:i+di]
        ans=text[i+di-1]
        i+=di
        state=True
except:
    state=False
"(Python,+加减)






## end
#442, 301:
"""
+[返回目录](,等于)

保存:...

"""

+等于->[python]"
try:
    a=re.match(r'[\n\s\t]*[=]',text[i:])
    if a==None:
        print('Stop in [等于]')
        state=False
    else:
        di=a.span()[1]
        print('[等于]: ',text[i:i+di])
        i+=di
        state=True
except:
    state=False
"(Python,)






## end
#444, 746:
"""
+[返回目录](,括号)

测试:...

"""

+括号(结构,)...

->[python]"
try:
    a=re.match(r'(\\left)?[\(\[{]',text[i:])
    if a==None:
        print('Stop in [括号]')
        state=False
    else:
        di=a.span()[1]
        print('[括号]: ',text[i:i+di])
        i+=di
        state=True
except:
    state=False
"(Python,)...

->[和式](结构,)->的([和式],_和式)...

->[python]"
try:
    a=re.match(r'(\\right)?[\)\]}]',text[i:])
    if a==None:
        print('Stop in [括号]')
        state=False
    else:
        di=a.span()[1]
        print('[括号]: ',text[i:i+di])
        i+=di
        state=True
except:
    state=False
"(Python,)...

->+的(+括号,+括号#0)->+的(结构,+括号#0)...
->+的#0(+括号#0,_和式)->+的(结构,+的#0):
    ->[幂次](结构,)->的([幂次],_幂项)->+^(+括号#0,_幂项)->+的(结构,+^),
    ->[]



## end
#446, 472:
"""
+[返回目录](,数字)

测试:...
保存:...

"""

+数字(结构,)...

->[python]"
try:
    a=re.match(r'[\d\.]+|\\pi|\\infty',text[i:])
    if a==None:
        print('Stop in [数字]')
        state=False
    else:
        di=a.span()[1]
        print('[数字]: ',text[i:i+di])
        ans=text[i:i+di]
        i+=di
        state=True
except:
    state=False
"(Python,+数字)...

->+的(+数字,+数字#0)->[m_text](+数字,+数字#0)->+的(结构,+数字#0):
    ->[幂次](结构,)->的([幂次],_幂项)->+^(+数字#0,_幂项)->+的(结构,+^),
    ->[]



## end
#448, 52:
\frac{dx}{dt}=\frac{\partial^1 f(x,y)}{\partial x\ }
## end
#450, 39:
\frac{\d{x}}{\d{t}}=\partial{x}{f(x,y)}
## end
#454, 69:
x=\int_{t_{000}}^{t}{d\tau\ }{\frac{\partial^1 f(x,y)}{\partial x\ }}
## end
#455, 45:
x=\int_{t_000}^{t}{\tau}{\partial{x}{f(x,y)}}
## end
#458, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#459, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#460, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#461, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#462, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#463, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#464, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#465, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#466, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#467, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#468, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#469, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#470, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#471, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#472, 129:
+函数输入(结构,输入)->+模式"函数输入"...
->[和式](结构,)->的([和式],_和式)->+的#1(输入,_和式)->+的(结构,+的#1):
    ->[匹配模式]","(,+模式)->[函数输入](结构,输入),
    ->[]



## end
#473, 160:
"""
+[返回目录](,函数输入)

"""

+函数输入(结构,_输入)->+模式"函数输入"...
->[等式](结构,)->的([等式],_等式)->+的#1(_输入,_等式)->+的(结构,+的#1):
    ->[匹配模式]",\s*"(,+模式)->[函数输入](结构,_输入),
    ->[]



## end
#475, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#476, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#477, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#478, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#479, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#480, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#481, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#482, 272:
"""
+[返回目录](,偏微分)
+[新建阅读窗口](,偏微分)

测试:...

"""

+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\p{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)




## end
#484, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#485, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#486, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#487, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#488, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#489, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#490, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#491, 206:
"""
+[返回目录](,方程组)
+[新建阅读窗口](,方程组)

测试:...

"""

+方程组(结构,)...
->+模块"方程组"->[匹配模式]"\\eqs{"(,+模块)...
->+的(+方程组,+方程组#0)->+的(结构,+方程组#0)...

->+输入(+方程组#0,)->+的(结构,+输入)->[矩阵输入](结构,+输入)...
    ->[匹配模式]"}"(,+模块)





## end
#493, 31:
\frac{\partial^%n %微分函数}{%微分变量}
## end
#494, 16:
(%[分子])./(%[分母])
## end
#495, 16:
\p{%微分变量}{%微分函数}
## end
#499, 1244:
"""
+[返回目录](,偏偏微分)
\frac { (-) 和式 } { (-) 和式 }...

LaTeX::\frac{\partial^%n %微分函数}{%微分变量}
LaTeX2::\frac{\partial %微分函数}{%微分变量}
LaTeX2::\frac{\partial}{%微分变量} (%微分函数)
表达式::\p{%微分变量}{%微分函数}

P代码:...
+[新建阅读窗口](,P代码)

保存:...

"""

+偏微分(_节点,_偏微分)->+[del](,+偏微分)...
->的(偏微分,P代码)...

->记忆->_节点(,_和式0)->+和式#1{
    []:->_和式0->+[和式](_和式0,+和式#1),
    ->[]
}...

->+[python]"list_var=[]
list_cond=[]"(Python,)...
->[]{
    []=>输入(_节点,)->的(输入,_变量)=>+[和式](_变量,+变量#1)...
        ->+[python]"list_var.append(text_var)"(Python,)...
        ->+[s]"text_var"(+[python],+变量#1)->+[del](,+变量#1)
}...
->[]{
    []=>输入#0(_节点,)->输入(输入#0,)->的(输入,_变量)=>+[等式](_变量,+变量#1)...
        ->+[python]"list_cond.append(text_var)"(Python,)...
        ->+[s]"text_var"(+[python],+变量#1)->+[del](,+变量#1)
}...

->+[python](Python,_偏微分)->+[code](+[python],P代码)...
->+[del](,+和式#1)...
->+[.]"text_type"(+[python],记忆)->+[s]"text_func"(+[python],+和式#1)...
->[]{
    []:->[is](_节点,_节点1)->_节点1(,_和式)->[]{
        []:->_re"[\*\^\+\-/]|负号|输入"(_和式,)...
            ->+[临时文本]"算式"->+[s]"func_type"(+[python],+[临时文本]),
        ->[is](_和式,_re#1)->_re#1"分式|微分|偏微分|积分式"...
            ->+[临时文本]"算式"->+[s]"func_type"(+[python],+[临时文本])
    },
    ->+[临时文本]"变量"->+[s]"func_type"(+[python],+[临时文本])
}



## end
#502, 253:
<!--
+[H函数](,矢量矩阵)
Nini, 打开相对论双折射(文件)
-->

$$
\begin{pmatrix}
 0, & -B_z, & \frac{B_y}{2}
\end{pmatrix}
$$$$
\mathbf{A}
$$

%[1].
%[2].
%[3].


<!--
[3].:
将"A=B+C"记作为式(3)
+[H函数](,矢量矩阵)

的([3].,表达式)->的(表达式,A)->+[描述公式]"结构转名词"(,+[做])->+[做](表达式,+[消息窗口])
-->
## end
#504, 758:
"""
保存:...
LaTeX:...
LaTeX2:...
表达式:...
表达式2:...
Matlab:...
Matlab2:...

矢量输入:...
矩阵输入的"矩阵"替换为"矢量"

"""

+矢量(_节点,_矢量)->+[del](,+矢量)...
->的(矢量,矢量输入)->的(矢量,P代码)...
->的(矢量,LaTeX)->的(矢量,LaTeX2)...
->的(矢量,表达式)->的(矢量,表达式2)...
->的(矢量,Matlab)->的(矢量,Matlab2)...

->Python->记忆->_节点(,_名字):
->_名字->+[变量](_名字,+[临时文本]#v)...
    ->+[模板文本](,_矢量)->+[.](+[模板文本],+[临时文本]#v)->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX2),
        ->[==]"表达式"(,记忆)->+[code](+[模板文本],表达式2),
        ->+[code](+[模板文本],Matlab2)
    },

->输入(_节点,)->+[做](输入,+[临时文本])->+[code](+[做],矢量输入)...
    ->+[模板文本](,_矢量)->+[.]"变量"(+[模板文本],+[临时文本])->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX),
        ->[==]"表达式"(,记忆)->+[code](+[模板文本],表达式),
        ->+[code](+[模板文本],Matlab)
    }




## end
#506, 381:
"""


"""
+矢量输入(输入,_内容)->+[del](,+矢量输入)...
->矢量输入(,)...

->记忆->+[临时文本]->[]{
    []=>的(输入,_变量)->_变量(,)...
    =>+[和式](_变量,+[临时文本]#a)->+[临时文本]#a->[]{
        []:->[==]"LaTeX"(,记忆)->+[增加内容2]"%s,&"(+[临时文本]#a,+[临时文本]),
        ->+[增加内容2]"%s, "(+[临时文本]#a,+[临时文本])
    }
}...
->+[python]"ans=text_in[0:-2]"(Python,+[临时文本])->+[s]"text_in"(+[python],+[临时文本])...

->+[修改内容](+[临时文本],_内容)





## end
#508, 13:
\vec{%[临时文本]}
## end
#510, 13:
\vec{%[临时文本]}
## end
#512, 7:
%[临时文本]
## end
#513, 5:
%[标题]
## end
#514, 11:
\eqs{%[标题]}
## end
#515, 14:
\mathbf{%[标题]}
## end
#516, 640:
"""


"""
+矩阵输入(输入,_内容)->+[del](,+矩阵输入)...
->矩阵输入(,)...

->记忆->+[临时文本]->[]{
    []=>的(输入,_变量)->_变量(,)...
    =>+[等式](_变量,+[临时文本]#a)->+[临时文本]#a->[]{
        []:->[==]"LaTeX"(,记忆)->+[增加内容2]"%s, & "(+[临时文本]#a,+[临时文本]),
        ->+[增加内容2]"%s,   "(+[临时文本]#a,+[临时文本])
    }
}...
->+[python]"ans=text_in[0:-4]"(Python,+[临时文本])->+[s]"text_in"(+[python],+[临时文本])...

->[]{
    []:->输入#1(输入,)->+[做](输入#1,+[临时文本]#L)->+[code](+[做],矩阵输入)->[]{
        []:->[==]"LaTeX"(,记忆)->+[增加内容]"\\ "(+[临时文本]#L,+[临时文本]),
        ->[==]"Python"(,记忆)->+[增加内容]"
"(+[临时文本]#L,+[临时文本]),
        ->+[增加内容]";
"(+[临时文本]#L,+[临时文本])
    },
    ->[]
}->+[修改内容](+[临时文本],_内容)






## end
#517, 653:
"""
+[返回目录](,矩阵)
\frac { (-) 和式 } { (-) 和式 }...

保存:...
LaTeX::\frac{\partial^%n %微分函数}{%微分变量}
表达式::\partial{%微分变量}{%微分函数}


"""

+矩阵(_节点,_矩阵)->+[del](,+矩阵)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],矩阵)->+[del](,+动词)...

->_节点(,_微分函数)->+[和式](_微分函数,+微分函数)...

->+n"0"->+微分变量{
    输入(_节点,):
        ->记忆"表达式"->+[函数输入](输入,+微分变量),
    
        =>的(输入,_变量)->_变量(,)...
        =>+[和式](_变量,+[临时文本])->+[增加内容]"\partial %s\ "(+[临时文本],+微分变量)...
        ->+[python]"n=int(n[0]+1)"(Python,)->+[o](+[python],+n)
}...

->+[模板文本](+[临时文本]#m,_矩阵)...
->+[.](+[模板文本],+微分变量)->+[.](+[模板文本],+微分函数)...
->+[.](+[模板文本],+n)...

->+[del](,+微分变量)->+[del](,+微分函数)...
->+[del](,+n)
## end
#518, 31:
\begin{cases}
%变量
\end{cases}


## end
#519, 6:
%变量;


## end
#520, 9:
\eqs{%变量}
## end
#529, 792:
"""
保存:...
LaTeX:...
LaTeX2:...
表达式:...
表达式2:...
Matlab:...
Matlab2:...
P模板:...

矩阵输入:...

"""

+方程组(_节点,_方程组)->+[del](,+方程组)...
->的(方程组,矩阵输入)->的(方程组,LaTeX)->的(方程组,LaTeX2)...
->的(方程组,表达式)->的(方程组,表达式2)...
->的(方程组,Matlab)->的(方程组,Matlab2)...
->的(方程组,P模板)...

->记忆->_节点(,_名字):
->_名字->+[标题](_名字,)...
    ->+[模板文本](,_方程组)->+[.](+[模板文本],+[标题])->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX2),
        ->[==]"表达式"(,记忆)->+[code](+[模板文本],表达式2),
        ->+[code](+[模板文本],Matlab2)
    },

->输入(_节点,)->+[做](输入,+[临时文本])->+[code](+[做],矩阵输入)...
    ->+[模板文本](,_方程组)->+[.]"变量"(+[模板文本],+[临时文本])->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX),
        ->[==]"表达式"(,记忆)->+[code](+[模板文本],表达式),
        ->[==]"Python"(,记忆)->+[code](+[模板文本],P模板),
        ->+[code](+[模板文本],Matlab)
    }




## end
#532, 93:
\mathbf{T}=\begin{pmatrix}
cos(\theta)&sin(\theta)\\ -sin(\theta)&cos(\theta)
\end{pmatrix}


## end
#534, 34:
a\ \vec{v_1}=\mathbf{T}\ \vec{v_2}
## end
#535, 62:
\mat{T}=\mat{cos(\theta),sin(\theta);-sin(\theta),cos(\theta)}
## end
#538, 29:
a*\vec{v_1}=\mat{T}*\vec{v_2}
## end
#541, 3:
547
## end
#543, 3:
560
## end
#546, 21:
\vec{A}\times \vec{B}
## end
#547, 22:
\vec{A}\times \vec{B}=
## end
#551, 134:
\left(\vec{A}\times \vec{B}\right)\times \vec{C}=\left(\vec{A}\cdot \vec{C}\right)\ \vec{B}-\left(\vec{A}\cdot \vec{B}\right)\ \vec{C}
## end
#552, 99:
(\vec{A}\times \vec{B})\times \vec{C}=(\vec{A}\cdot \vec{C})*\vec{B}-(\vec{A}\cdot \vec{B})*\vec{C}
## end
#555, 3:
559
## end
#557, 3:
619
## end
#561, 5:
A=B+C
## end
#562, 5:
A=B+C
## end
#566, 498:
<!--
+[H函数](,匹配测试)
-->
%[1].
%[2].
%匹配结构

<!--
匹配结构:
[1].:
将"\mat{M}"记作为式(1)
将"\int{t}{cos(t)}"记作为式(1)
将"\int{t}{cos(t)}=-sin(t)"记作为匹配结构
将式(1)记作为式(2)

的(匹配结构,表达式#0)->的(表达式#0,起点#0)->起点#0(,_括号#0)...
->的([1].,表达式#1)->的(表达式#1,起点#1)->起点#1(,_括号#1)...
->+[模板结构]([公式结构匹配],_括号#0)->[公式结构匹配](_括号#1,+[显示])
式(2)转换为"表达式"

等式::((A+B)^2)*(D)=1
+[删除结构](,等式)
+[公式结构代入](等式,[2].)
+[删除结构](,等式)

将"((A+B)^2)*(D)=1"代入到式(2)
将式(2)记作为式(1)
将式(1)代入到式(2)

的([1].,表达式)->+[显示星图](,表达式)
的(匹配结构,表达式)->+[显示星图](,表达式)
+[H函数](,匹配测试)
-->
## end
#568, 10:
\mathbf{M}
## end
#569, 7:
\mat{M}
## end
#573, 32:
\int_{}^{}{dt\ }{cos(t)}=-sin(t)
## end
#574, 23:
\int{t}{cos(t)}=-sin(t)
## end
#578, 465:
"""
库:...
+[新建阅读窗口](,库)
Nini, 打开动词(库)

"""

+公式结构匹配(_A,_输出)...
->的(公式结构匹配,库)...
->的(库,局部和式)->的(库,局部乘式)->的(库,局部项)...

->模板结构(+公式结构匹配,_B)->+主体(_输出,)->[]{
    []:->.(+公式结构匹配,_类型)->_类型->的(库,_条目)->_条目->[eq](_类型,_条目)...
        ->+类型(+公式结构匹配,_条目),
    ->_re"[\-+]"(_B,)->+类型(+公式结构匹配,局部和式)->+类型"和式"(_输出,),
    ->_re"[/*]"(_B,)->+类型(+公式结构匹配,局部乘式)->+类型"乘式"(_输出,),
    ->+类型(+公式结构匹配,局部项)->+类型"项"(_输出,)
}...

->类型(+公式结构匹配,_项)...
->+[code]([想],_项)->+模板结构([想],_B)->[想](_A,_输出)


## end
#580, 694:
+[设置结构](,库)

算式: 等式...
等式: (-)和式 (等于 等式)...
和式: 乘式 (加减 和式)...
乘式: 项 (乘除 乘式)...
项: 项内容 (^ 幂次)...
项的"变量"替换为"项"

局部和式:...
局部乘式:...
局部项:...

将条目"项"复制为条目"局部项"
+[新建阅读窗口](,乘式)

项内容: 括号|函数|数字|变量|分式|求和式|积分式...
+[新建阅读窗口](,项内容)
在选择区域, 将'项内容'的"#3"替换为"#3a"

变量: 变量...
数字: 数字...
括号: \( 和式 \)...
函数: 变量 \( 输入 \)...
序号:...
+[新建阅读窗口](,序号)

分式: \frac { (-) 和式 } { (-) 和式 }...
根式: \sqrt { (-) 和式 }...
将条目"分式"复制为条目"根式"
将'根式'的"_B"替换为"根式#B"

矢量:...
矩阵:...
+[新建阅读窗口](,矢量)

微分:...
偏微分:...
积分式:...
将条目"微分"复制为条目"偏微分"
将'微分'的"偏微分"替换为"微分"
+[新建阅读窗口](,微分)



分式: \frac { (-) 和式 } { (-) 和式 }...
+[修改内容](数字,分式)


括号: \( 和式 \)...
数字: 数字|特殊数字 (幂次)...
变量: 字母 (下标) (幂次)...

函数输入:...
幂次: ^ (数字|变量|({ 和式 })...
+[新建阅读窗口](,函数输入)







## end
#582, 414:
"""
局部和式: 乘式 (加减 局部和式)...

"""
+局部和式(_A,_输出)...
->局部和式->的(库,局部和式)->的(库,乘式)...

->主体(_输出,)->模板结构(+局部和式,_B)...
    ->+[code]([想],乘式)->+模板结构([想],_B)->[想](_A,_输出)...

->+是(_B,_A)->+的(_输出,_A)->+的(主体,_A)->[]{_re"[\-+]"(_B,_B1)}:
    ->_re"[\-+]"(_B,_B1)->_re"[\-+]"(_A,_A1)...
        ->+的(_输出,_re)...
        ->+[code]([想]#1,局部和式)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>+结尾(_输出,_A)=>_re"[\-+]"(_A,)=>+结尾(_输出,_re)




## end
#583, 117:
"""


"""
+算式(_A,_输出)...
->算式->的(库,算式)->的(库,等式)...

->模板结构(+算式,_B)->+[code]([想],等式)...
->[想](_A,_输出)->+模板结构([想],_B)


## end
#585, 483:
"""
局部乘式: 项 (乘除 局部乘式)...

"""
+局部乘式(_A,_输出)->[说](,+局部乘式)...
->局部乘式->的(库,局部乘式)->的(库,项)...

->+主体(_输出,)->模板结构(+局部乘式,_B)...
    ->+[code]([想],项)->+模板结构([想],_B)->[想](_A,_输出)...

->+是(_B,_A)->+的(_输出,_A)->+的(+主体,_A)->[]{_re"[/*]|\\times |\\cdot"(_B,)}:
    ->_re"[/*]|\\times |\\cdot"(_B,_B1)->_re"[/*]|\\times |\\cdot "(_A,_A1)...
        ->+的(_输出,_re)...
        ->+[code]([想]#1,局部乘式)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>+结尾(_输出,_A)=>_re"[/*]|\\times |\\cdot"(_A,)=>+结尾(_输出,_re)



## end
#588, 1548:
"""
项内容: 括号|数字|变量|分式|求和式|积分式...
库:...
分式

"""
+项内容(_A,_输出)...
->项内容->的(库#0,项内容)->的(项内容,库)...

->模板结构(+项内容,_B)->[]{
    []:->[is](_B,_re#0)->_re#0"^_"->+是(_B,_A)->+的(_输出,_A),

    ->[is](_B,分式#1)->分式#1->的(库#0,分式)->分式(,)...
        ->+[code]([想]#3,分式)->+模板结构([想]#3,_B)->[想]#3(_A,_输出),
    ->[is](_B,根式#1)->根式#1->的(库#0,根式)->根式(,)...
        ->+[code]([想]#3a,根式)->+模板结构([想]#3a,_B)->[想]#3a(_A,_输出),

    ->[is](_B,矢量#1)->矢量#1->的(库#0,矢量)->矢量(,)...
        ->+[code]([想]#4,矢量)->+模板结构([想]#4,_B)->[想]#4(_A,_输出),
    ->[is](_B,矩阵#1)->矩阵#1->的(库#0,矩阵)->矩阵(,)...
        ->+[code]([想]#5,矩阵)->+模板结构([想]#5,_B)->[想]#5(_A,_输出),

    ->[is](_B,微分#1)->微分#1->的(库#0,微分)->微分(,)...
        ->+[code]([想]#5A,微分)->+模板结构([想]#5A,_B)->[想]#5A(_A,_输出),
    ->[is](_B,偏微分#1)->偏微分#1->的(库#0,偏微分)->偏微分(,)...
        ->+[code]([想]#5B,偏微分)->+模板结构([想]#5B,_B)->[想]#5B(_A,_输出),
    ->[is](_B,积分式#1)->积分式#1->的(库#0,积分式)->积分式(,)...
        ->+[code]([想]#5C,积分式)->+模板结构([想]#5C,_B)->[想]#5C(_A,_输出),

    ->[is](_B,括号#1)->括号#1->的(库#0,括号)->括号(,)...
        ->+[code]([想]#2A,括号)->+模板结构([想]#2A,_B)->[想]#2A(_A,_输出),

    ->[]{
        []{输入(_B,)}:
        ->[]{[]=>[is](_B,_re)->_re"矢量|积分式|矩阵|微分|偏微分"}...
            ->的(库#0,函数)->函数(,)...
            ->+[code]([想]#2B,函数)->+模板结构([想]#2B,_B)->[想]#2B(_A,_输出),
    
        ->>[is](_B,_re#1)->_re#1"[\d\.]+|\\pi|\\infty"->的(库#0,数字)->数字(,)...
            ->+[code]([想]#1,数字)->+模板结构([想]#1,_B)->[想]#1(_A,_输出),
        ->>[is](_B,_re#2)->_re#2"\\?[a-zA-Z_\d]+"->的(库#0,变量)->变量(,)...
            ->+[code]([想]#0,变量)->+模板结构([想]#0,_B)->[想]#0(_A,_输出)
    }
}


## end
#590, 286:
"""
数字: (-)和式 (等于 数字)...

->[]{^(_B,)}:
    ->^(_B,_B1)->^(_A,_A1)...
        ->+的(_输出,^)...
        ->+[code]([想]#1,项)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>[]=>^(_A,)

"""
+数字(_A,_输出)->[说](,+数字)...
->数字->的(库,数字)->的(库,项)...

->模板结构(+数字,_B)->[eq](_B,_A)...
->+是(_B,_A)->+的(_输出,_A)


## end
#593, 33:


变量匹配:...
将条目"变量匹配"复制为条目"数字匹配"


## end
#595, 39:
"""


"""

+变量匹配(_A,_输出)->[说](,+变量匹配)


## end
#596, 256:
"""
等式: (-)和式 (等于 等式)...

"""
+等式(_A,_输出)...
->等式->的(库,等式)->的(库,和式)...

->模板结构(+等式,_B)...
    ->+[code]([想],和式)->+模板结构([想],_B)->[想](_A,_输出)...
->+是(_B,_A)->+的(_输出,_A)...
=>=(_B,_B1)...
    =>=(_A,_A1)->+[code]([想]#1,等式)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出)



## end
#598, 245:
"""
括号: (-)和式 (等于 括号)...

"""
+括号(_A,_输出)->[说](,+括号)...
->括号->的(库,括号)->的(库,和式)...

->模板结构(+括号,_B)->[eq](_B,_A)...
->的(_B,_B0)->的(_A,_A0)...
    ->+的(_输出,的)...
    ->+[code]([想]#0,和式)->+模板结构([想]#0,_B0)->[想]#0(_A0,_输出)...

->+是(_B,_A)->+的(_输出,_A)

## end
#600, 250:
"""
矩阵: (-)和式 (等于 矩阵)...
保存:...

"""
+矩阵(矩阵#A,_输出)->[说](,+矩阵)...
->矩阵->的(库,矩阵)->的(库,项)->的(库,和式)...

->模板结构(+矩阵,矩阵#B)...
->矩阵#B(,_B)->输入(矩阵#B,_B)->矩阵#A(,_A)->输入(矩阵#A,_A)->[eq](_B,_A)...
    ->+的(_输出,输入)->+的(_输出,_A)...

->+是(矩阵#B,矩阵#A)->+的(_输出,矩阵#A)



## end
#602, 145:
"""
变量: (-)和式 (等于 变量)...
保存:...

"""
+变量(_A,_输出)->[说](,+变量)...
->变量->的(库,变量)->的(库,项)...

->模板结构(+变量,_B)->[eq](_B,_A)...
->+是(_B,_A)->+的(_输出,_A)


## end
#604, 614:
"""
函数: (-)和式 (等于 函数)...

"""
+函数(_A,_输出)->[说](,+函数)...
->函数->的(库,函数)->的(库,项)->的(库,和式)->的(库,序号)...

->_A(,_函数){[]=>_函数}...
->模板结构(+函数,_B)->[eq](_B,_A)...
->输入#B(_B,)->输入#A(_A,)...
    ->+的(_输出,输入#A)...
->[]{
    []=>的(输入#B,_B2)->_B2=>的(输入#A,_A2)->_A2->[]{[]=>是(,_A2)}...
    ->[]{
        []:->未知量(_B2,)->+是(_B2,_A2),
        ->+的(_输出,的)->[eq](_A2,_B2)...
            ->+[code]([想]#1,和式)->+模板结构([想]#1,_B2)->[想]#1(_A2,_输出)
    }
}...
->[]{
    []{序号输入(_B,)}:
        ->序号输入#A(_A,)->序号输入#B(_B,)->+[code]([想]#1,序号)...
            ->+模板结构([想]#1,序号输入#B)->[想]#1(序号输入#A,_输出),
        ->>[]
}...

->+是(_B,_A)->+的(_输出,_A)


## end
#606, 3:
648
## end
#611, 20:
\left(B+C\right)=B+C
## end
#612, 9:
(B+C)=B+C
## end
#616, 338:
"""
操作:...
保存:...
+[新建阅读窗口](,操作)

"""

+公式结构代入(_等式,_式子)->+[del](,+公式结构代入)...
->的(公式结构代入,操作)...

->的(_式子,表达式)->的(表达式,起点#0)->[]{
    []:->的(_等式,起点)->起点(,_A),
    ->+[生成公式结构](_等式,_等式)->+[更新公式起点](,_等式)
}...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"等式"(+[structure],_等式)->+[.]"式子"(+[structure],_式子)...
->+[del](,+场景)


## end
#618, 727:
"""
保存:...

"""


式子->的(式子,表达式)...
->的(等式,=)->=(_变量,_代入式)->_变量->_代入式{[]=>=(,_变量)}...

->+[修改内容]"表达式"(,记忆)->+[算式](_代入式,+代入式)...

->的(表达式,_代入变量)->[eq](_代入变量,_变量)...
->+[模板结构]([公式结构匹配],_变量)->[公式结构匹配](_代入变量,+公式结构)...
->[]{
    []=>的(+公式结构,_节点)->[]{[]=>[is](_节点,_代入变量)}=>+[del](,_节点)
}->[]{
    []=>结尾(+公式结构,_结尾)=>+[左连](_结尾,_代入变量)
}->+[del](,+公式结构)->+[修改标题]"括号"(,_代入变量)...
    ->+代入(+代入式,_代入变量)->+[生成公式结构](+代入式,+代入);



的(式子,表达式)->代入式(,)...
=>代入(代入式,括号)...
=>[公式头](代入,)->是([公式头],_a)...
    ->+的#1(括号,_a)->+的(表达式,+的#1)->+[del](,代入)...
    ->+[公式结构拆括号](表达式,括号)...
    =>的(代入,_节点)=>+的(表达式,_节点);



的(式子,表达式)->代入式->+[del](,代入式)...
->+[算式结构转换]"表达式"(表达式,+[修改内容]#0)->+[修改内容]#0(,表达式)...
->+[算式结构转换]"LaTeX"(表达式,+[修改内容]#1)->+[修改内容]#1(,式子);



## end
#620, 15:
((A+B)^2)*(D)=1
## end
#623, 222:
"""
操作:...
保存:

"""

+公式结构代入(_等式,_式子)->+[del](,+公式结构代入)...
->的(公式结构代入,操作)...

->的(_式子,表达式)->的(表达式,起点#0)->[]{
    []:->的(_等式,起点)->起点(,_A),
    ->+[生成公式结构](_等式,_等式)->+[更新公式起点](,_等式)
}...

->+[做](_等式,_式子)->+[code](+[做],操作)



## end
#625, 350:
"""
保存:

"""

+操作(_等式,_式子)->+[del](,+操作)...

->的(_式子,表达式)...
->的(_等式,=)->=(_变量,_代入式)->_变量->_代入式{[]=>=(,_变量)}...

->+[修改内容]"表达式"(,记忆)->+[算式](_代入式,+[消息窗口]#0)...

->的(表达式,_re)->_re"\\?[a-zA-Z_\d]+"...
->+[模板结构]([公式结构匹配],_变量)->[公式结构匹配](_re,+公式结构)...
->[]{
    []=>的(+公式结构,_节点)->[]{[]=>[is](_节点,_re)}=>+[del](,_节点)
}->+[del](,+公式结构)->+[修改标题]"括号"(,_re)




## end
#626, 439:
"""
和式: 乘式 (加减 和式)...

"""
+和式(_A,_输出)...
->和式->的(库,和式)->的(库,乘式)...

->模板结构(+和式,_B)...
    ->+[code]([想],乘式)->+模板结构([想],_B)->[想](_A,_输出)...

->+是(_B,_A)->+的(_输出,_A)->[]{_re"[\-+]"(_B,_B1)}:
    ->_re"[\-+]"(_B,_B1)->_re"[\-+]"(_A,_A1)...
        ->+的(_输出,_re)...
        ->+[code]([想]#1,和式)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>[]{
        []:->[is](_B,_re#0)->_re#0"^_"=>_re"[\-+]"(_A,)=>+结尾(_B,_re),
        =>_re"[\-+]"(_A,)
    }

## end
#627, 563:
"""
乘式: 项 (乘除 乘式)...

[]=>_re"[/*]|\\times |\\cdot "(_A,)

"""
+乘式(_A,_输出)->[说](,+乘式)...
->乘式->的(库,乘式)->的(库,项)...

->模板结构(+乘式,_B)...
    ->+[code]([想],项)->+模板结构([想],_B)->[想](_A,_输出)...

->+是(_B,_A)->+的(_输出,_A)->[]{_re"[/*]|\\times |\\cdot"(_B,)}:
    ->_re"[/*]|\\times |\\cdot"(_B,_B1)->_re"[/*]|\\times |\\cdot "(_A,_A1)...
        ->+的(_输出,_re)...
        ->+[code]([想]#1,乘式)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>[]{
        []:->[is](_B,_re#0)->_re#0"^_"=>_re"[/*]|\\times |\\cdot "(_A,)=>+结尾(_B,_re),
        =>_re"[/*]|\\times |\\cdot "(_A,)
    }





## end
#630, 396:
"""
局部项: 局部项内容 (^ 幂次)...
保存:...

"""
+局部项(_A,_输出)->[说](,+局部项)...
->局部项->的(库,局部项)->的(库,项内容)->的(库,项)...

->模板结构(+局部项,_B)->[]{
    []:->未知量(_B,)->+是(未知量,_A)->+[o](_输出,+是),
    ->+[code]([想],项内容)->+模板结构([想],_B)->[想](_A,_输出)
}...

->[]{^(_B,)}:
    ->^(_B,_B1)->^(_A,_A1)...
        ->+的(_输出,^)...
        ->+[code]([想]#1,项)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>+结尾(_输出,_A)=>^(_A,)=>+结尾(_输出,^)



## end
#631, 370:
"""
项: 项内容 (^ 幂次)...

保存:...

"""
+项(_A,_输出)->[说](,+项)...
->项->的(库,项)->的(库,项内容)...

->模板结构(+项,_B)->[]{
    []:->未知量(_B,)->+是(未知量,_A)->+[o](_输出,+是),
    ->+[code]([想],项内容)->+模板结构([想],_B)->[想](_A,_输出)
}...

->[]{^(_B,)}:
    ->^(_B,_B1)->^(_A,_A1)...
        ->+的(_输出,^)...
        ->+[code]([想]#1,项)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>未知量(_B,),
    ->>[]=>^(_A,)


## end
#634, 289:
"""
变量: (-)和式 (等于 变量)...
保存:.

"""
+变量(_A,_输出)->[说](,+变量)...
->变量->的(库,变量)->的(库,项)...

->模板结构(+变量,_B)->[eq](_B,_A)...
->+是(_B,_A)->+的(_输出,_A)->[]{^(_B,)}:
    ->^(_B,_B1)->^(_A,_A1)...
        ->+的(_输出,^)...
        ->+[code]([想]#1,项)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>[]=>^(_A,)


## end
#636, 3:
653
## end
#638, 341:
"""
积分式: (-)和式 (等于 积分式)...

"""
+积分式(积分式#A,_输出)...
->积分式->的(库,积分式)->的(库,项)->的(库,和式)...

->模板结构(+积分式,积分式#B)...

->积分式#B(,_式B)->输入(积分式#B,)->的(输入,_B)...
->积分式#A(,_式A)->输入(积分式#A,)->的(输入,_A)->[eq](_B,_A)...
    ->+的(_输出,的)->+的(_输出,输入)->+的(_输出,_A)...
    ->+[code]([想]#1,和式)->+模板结构([想]#1,_式B)->[想]#1(_式A,_输出)...

->+是(积分式#B,积分式#A)->+的(_输出,积分式#A)


## end
#640, 251:
"""
根式: (-)和式 (等于 根式)...
->[eq](根式#B,根式#A)

"""
+根式(根式#A,_输出)->[说](,+根式)...
->根式->的(库,根式)->的(库,项)->的(库,和式)...

->模板结构(+根式,根式#B)...
->根式#B(,_B1)->根式#A(,_A1)...
    ->+[code]([想]#1,和式)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出)...

->+是(根式#B,根式#A)->+的(_输出,根式#A)

## end
#642, 3:
648
## end
#644, 465:
"""
偏微分: (-)和式 (等于 偏微分)...

"""
+偏微分(偏微分#A,_输出)->[说](,+偏微分)...
->偏微分->的(库,偏微分)->的(库,项)->的(库,和式)...

->模板结构(+偏微分,偏微分#B)...
->偏微分#B(,_式B)->输入#B(偏微分#B,)...
->偏微分#A(,_式A)->输入#A(偏微分#A,)->+的(_输出,输入#A)...
    ->+[code]([想]#1,和式)->+模板结构([想]#1,_式B)->[想]#1(_式A,_输出)...

->[]{
    []=>的(输入#B,_B2)->_B2=>的(输入#A,_A2)->_A2->[]{[]=>是(_B2,_A2)}...
        ->+的(_输出,的)->+的(_输出,_A2)...
    ->+[code]([想]#2,和式)->+模板结构([想]#2,_B2)->[想]#2(_A2,_输出)
}...

->+是(偏微分#B,偏微分#A)->+的(_输出,偏微分#A)

## end
#646, 3:
755
## end
#649, 296:
<!--
+[修改天使]
+[H函数](,运算测试)

保存:...
(有公式结构系列操作的用法)
测试公式结构系列操作:...
测试整理乘式:...
测试整理和式:...
语句操作:...
描述公式:...
+[新建阅读窗口](,语句操作)
-->

%[1].
%[2].


<!--
[1].:
式(1)转换为"表达式"
更新式(1)
将"a*b*(-x)"记作为式(1)
将"x=-c"代入到式(1)


的([1].,表达式)->的(表达式,括号)->+[公式结构拆括号](表达式,括号)

的([1].,表达式)->+[显示星图](,表达式)
+[H函数](,运算测试)
-->
## end
#651, 21:
a\ b\ \left(-x\right)
## end
#653, 8:
a*b*(-x)
## end
#657, 491:
"""
结构描述:...
操作库:...
+[新建阅读窗口](,结构描述)
保存:...

"""
+公式结构加括号(_表达式,_a)->+[del](,+公式结构加括号)...
->的(公式结构加括号,操作库)->的(公式结构加括号,结构描述)...

->+[code]([想],结构描述)->[想](+公式结构加括号,_a)...
->+的(_表达式,+括号)->+的#0(+括号,_a)->+的(_表达式,+的#0)...
->[]{
    []&:=>上级关联_左([想],_关联1)->_关联1=>+[右连](_关联1,+括号),
    =>上级关联_右([想],_关联2)->_关联2=>+[左连](_关联2,+括号)
}:

->[==]"和式"(,+公式结构加括号)->-(,_a)...
    ->+[做](,_a)->的(操作库,相反数)->+[code](+[做],相反数),
->[==]"乘式"(,+公式结构加括号)->/(,_a)...
    ->+[做](,_a)->的(操作库,倒数)->+[code](+[做],倒数),
->[]




## end
#659, 38:

相反数:...
倒数:...
在倒数中, 将"相反数"替换为"倒数"



## end
#660, 583:
"""


"""

+结构描述(_结构,_a)->_结构->_a->[]{
    []:->[==]"和式"(,_结构)->[]{
        []&:=>_re"[+\-=]|起点"(,_a)=>+上级关联_左(+结构描述,_re),
        =>的(括号,_a)->括号=>+上级关联_左(+结构描述,的),
        =>_re"[=]"(_a,)=>+上级关联_右(+结构描述,_re)
    },

    ->[==]"乘式"(,_结构)->[]{
        []&:=>_re"[=+\-*/]|起点"(,_a)=>+上级关联_左(+结构描述,_re),
        =>的(括号,_a)->括号=>+上级关联_左(+结构描述,的),
        =>_re"[=+\-]"(_a,)=>+上级关联_右(+结构描述,_re)
    },

    ->[==]"项"(,_结构)->[]{
        []&:=>_re"[=+\-*/\^]|起点"(,_a)=>+上级关联_左(+结构描述,_re),
        =>的(括号,_a)->括号=>+上级关联_左(+结构描述,的),
        =>_re"[=+\-*/]"(_a,)=>+上级关联_右(+结构描述,_re)
    }
}




## end
#662, 6:
f(x)=x
## end
#663, 6:
f(x)=x
## end
#672, 861:
"""


"""

+结构描述(_结构,_a)...

->[]{
    []:->[==]"和式"(,_结构)->[]{
        []&:=>_re"[+\-=]|起点|分子|分母"(,_a)=>+上级关联_左(+结构描述,_re),
        =>的(括号,_a)->括号=>+上级关联_左(+结构描述,的),
        =>的(输入,_a)->输入=>+上级关联_左(+结构描述,的),
        =>_re"[=]"(_a,)=>+上级关联_右(+结构描述,_re)
    },

    ->[==]"乘式"(,_结构)->[]{
        []&:=>_re"[=+\-*/]|起点|分子|分母|\\cdot |\\times "(,_a)=>+上级关联_左(+结构描述,_re),
        =>的(括号,_a)->括号=>+上级关联_左(+结构描述,的),
        =>的(输入,_a)->输入=>+上级关联_左(+结构描述,的),
        =>_re"[=+\-]"(_a,)=>+上级关联_右(+结构描述,_re)
    },

    ->[==]"项"(,_结构)->[]{
        []&:=>_re"[=+\-*/\^]|起点|分子|分母|\\cdot |\\times "(,_a)=>+上级关联_左(+结构描述,_re),
        =>的(括号,_a)->括号=>+上级关联_左(+结构描述,的),
        =>的(输入,_a)->输入=>+上级关联_左(+结构描述,的),
        =>_re"[=+\-*/]|\\cdot |\\times "(_a,)=>+上级关联_右(+结构描述,_re)
    }...
    ->[]{
        []:->_re"[*/]"(,_a),
        ->/(_a,)->+替换"1"(+结构描述,), ->[]
    }
}




## end
#674, 13:

结构描述:...




## end
#675, 260:
"""


"""

+关联同级(_关联1,_关联2)...
->[]{
    []:->[is](_关联1,_re#11)->_re#11"[*/]"->[is](_关联2,_re#21)->_re#21"[*/]",
    ->[is](_关联1,_re#12)->_re#12"[+\-]"->[is](_关联2,_re#22)->_re#22"[+\-]",
    ->[is](_关联1,_re#13)->_re#13"[=]"->[is](_关联2,_re#23)->_re#23"[=]"
}




## end
#676, 186:
"""


"""

+最低关联_右(,0)...
->[]{
    []:->_re"[*/]"(0,)->+是(+最低关联_右,_re),
    ->_re"[+\-]"(0,)->+是(+最低关联_右,_re),
    ->_re"[=]"(0,)->+是(+最低关联_右,_re),
    ->+是(+最低关联_右,+无关联)->+无关联(0,)
}



## end
#679, 359:
"""
最低关联_右:...
关联同级:...
+[新建阅读窗口](,最低关联_右)

"""

+结构描述(,0)...
->的(结构描述,最低关联_右)->的(结构描述,关联同级)...

->+[code]([想]#1,最低关联_右)->[想]#1(,0)->是([想]#1,_关联)...
    ->_关联(0,_b)...
->[]{
    []:->[is](_关联,无关联)->无关联->+替代节点(+结构描述,+无节点)->+无节点,
    ->_re"[=+\-*/]"(_a,0)->_a(,)...
        ->+[code]([想]#2,关联同级)->[想]#2(_关联,_re)->+替代节点(+结构描述,_a),
    ->_b->+替代节点(+结构描述,_b)
}




## end
#681, 481:
"""
结构描述:...

"""

+合并结构(,0)->+[del](,+合并结构)...
->的(合并结构,结构描述)...

->+[code]([想],结构描述)->[想](,0)->替代节点([想],_节点):
    ->[is](_节点,无节点)->_re"[=+\-*/]"(,0)->+[del](,_re)->+[del](,0),
    ->[]{
        []&:=>_re"[=+\-*/]"(0,)=>+[左连](_re,_节点),
        =>_re"[=+\-*/]|起点|分子|分母"(,0)=>+[右连](_re,_节点),
        =>的(括号,0)->括号=>+[右连](的,_节点),
        =>的(输入,0)->输入=>+[右连](的,_节点),

        =>_re"[=+\-*/]"(0,_节点)=>+[del](,_re),
        =>_re"[=+\-*/]"(_节点,0)=>+[del](,_re)
    }->+[del](,0)
    


## end
#683, 13:


合并结构:...



## end
#686, 423:
"""
想法库:...
操作库:...
+[新建阅读窗口](,想法库)
Nini, 打开词典的条目(节点)

"""
+公式结构提取(_表达式,_a)->+[del](,+公式结构提取)...
->的(公式结构提取,操作库)->的(公式结构提取,想法库)...

->的(想法库,结构描述)->+[code]([想],结构描述)->[想](+公式结构提取,_a)...
->+的(_表达式,+0)->+0->[]{
    []&:=>上级关联_左([想],_关联1)->_关联1=>+[右连](_关联1,+0),
    =>上级关联_右([想],_关联2)->_关联2=>+[左连](_关联2,+0)
}...

->[]{
    []:->替换([想],)->+[修改标题](,+0)->[m_text](替换,+[修改标题]),
    ->+[做](,+0)->的(操作库,合并结构)->+[code](+[做],合并结构)
}



## end
#695, 26:
将条目"公式结构加括号"复制为条目"公式结构加括号"
## end
#696, 670:
"""


"""

+算式尾部(_运算,_d)->算式尾部(,):

->[==]"="(,_运算)->[]{
    []:->=(_d,_d1)->_d1->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"+"(,_运算)->[]{
    []:->_re"[+\-]"(_d,_d1)->_d1->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"-"(,_运算)->[]{
    []:->_re"[+\-]"(_d,_d1)->_d1->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"*"(,_运算)->[]{
    []:->_re"[*/]"(_d,_d1)->_d1->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"/"(,_运算)->[]{
    []:->_re"[*/]"(_d,_d1)->_d1->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"^"(,_运算)->[]{
    []:->^(_d,_d1)->_d1->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
}



## end
#698, 1085:
"""
括号运算:...
算式尾部:...
+[新建阅读窗口](,算式尾部)
+[del](,加括号)

"""

+结构描述(,括号)...
->的(结构描述,括号运算)->的(结构描述,算式尾部)...

->+[code]([想],括号运算)->[想](,括号)->运算([想],)...
    ->的(括号,_d)->+.(+结构描述,运算)...

->[]{[]=>^(括号,)}...
->[]{
    []:->[==]"+"(,运算)->[]{
        []:->_re"[+\-]"(括号,)->+尾部(+结构描述,_re)...
            ->+[code]([想]#0,算式尾部)->[想]#0(运算,_d)...
            ->是(运算,_de)->_de->+节点(+尾部,_de),
        ->[]
    },
    
    ->[==]"-"(,运算)->[]{
        []:->_re"[+\-]"(括号,)->+尾部(+结构描述,_re)...
            ->+[code]([想]#0,算式尾部)->[想]#0(运算,_d)...
            ->是(运算,_de)->_de->+节点(+尾部,_de),
        ->[]
    },
    
    ->[==]"*"(,运算)->[]{[]=>_re"[+\-]"(_d,)}->[]{
        []:->_re"[*/]|\\cdot |\\times "(括号,)->+尾部(+结构描述,_re)...
            ->+[code]([想]#0,算式尾部)->[想]#0(运算,_d)...
            ->是(运算,_de)->_de->+节点(+尾部,_de),
        ->[]
    },
    
    ->[==]"/"(,运算)->[]{[]=>_re"[+\-]"(_d,)}->[]{
        []:->_re"[*/]|\\cdot |\\times "(括号,)->+尾部(+结构描述,_re)...
            ->+[code]([想]#0,算式尾部)->[想]#0(运算,_d)...
            ->是(运算,_de)->_de->+节点(+尾部,_de),
        ->[]
    },
    
    ->+非法插入(+结构描述,)
}




## end
#699, 154:


相反数:...
倒数:...
在倒数中, 将"相反数"替换为"倒数"

去负号:...
+[新建阅读窗口](,去负号)

测试结构:...
的(测试结构,c)->负号(c,)->+[做](负号,c)->+[code](+[做],去负号)
+[新建阅读窗口](,测试结构)

+[显示星图](,测试结构)

## end
#702, 665:
"""
结构描述:...
操作库:...
+[新建阅读窗口](,结构描述)

"""
+公式结构拆括号(_表达式,括号)->+[del](,+公式结构拆括号)...
->的(公式结构拆括号,操作库)->的(公式结构拆括号,结构描述)...

->+[code]([想],结构描述)->[想](,括号)->.([想],运算)...

->的(括号,_d)->+[del](,的)...
    ->+的(_表达式,+运算)->+运算(括号,)->+[修改标题](,+运算)...
    ->[m_text](运算,+[修改标题])...
->[]{
    +[右连](+运算,_d)->[]{
        []:->尾部([想],_运算)->_运算->节点(尾部,_节点)->+[左连](_运算,_节点),
        ->[]
    }...
    ->+[公式结构提取](_表达式,括号)->[m_text]"项"(,+[公式结构提取])
}...

->[]{
    []:->负号(_d,)...
        ->+[做](负号,_d)->的(操作库,去负号)->+[code](+[做],去负号),
    ->[]
}:

->[==]"-"(,运算)...
    ->+[做](,_d)->的(操作库,相反数)->+[code](+[做],相反数),
->[==]"/"(,运算)...
    ->+[做](,_d)->的(操作库,倒数)->+[code](+[做],倒数),
->[]



## end
#705, 207:
"""


"""

+相反数(,_a)->+[del](,+相反数)...
->相反数(,)...

->[]:
    ->-(_a,_b1)->_b1->+[修改标题]"+"(,-)->+[做](,_b1)->+[code](+[做],相反数),
    ->+(_a,_b2)->_b2->+[修改标题]"-"(,+)->+[做](,_b2)->+[code](+[做],相反数),
    ->[]



## end
#707, 202:
"""


"""

+倒数(,_a)->+[del](,+倒数)...
->倒数(,)...

->[]:
    ->/(_a,_b1)->_b1->+[修改标题]"*"(,/)->+[做](,_b1)->+[code](+[做],倒数),
    ->*(_a,_b2)->_b2->+[修改标题]"/"(,*)->+[做](,_b2)->+[code](+[做],倒数),
    ->[]



## end
#709, 469:
"""
结构描述:...
操作库:...
+[新建阅读窗口](,结构描述)
保存:

"""
+公式结构加括号(_表达式,_a)->+[del](,+公式结构加括号)...
->的(公式结构加括号,操作库)->的(公式结构加括号,结构描述)...

->+[code]([想],结构描述)->[想](+公式结构加括号,_a)...
->+的(_表达式,+括号)->+的(+括号,_a)->[]{
    []&:=>上级关联_左([想],_关联1)->_关联1=>+[右连](_关联1,+括号),
    =>上级关联_右([想],_关联2)->_关联2=>+[左连](_关联2,+括号)
}:

->[==]"和式"(,+公式结构加括号)->-(,_a)...
    ->+[做](,+括号)->的(操作库,相反数)->+[code](+[做],相反数),
->[==]"乘式"(,+公式结构加括号)->/(,_a)...
    ->+[做](,+括号)->的(操作库,倒数)->+[code](+[做],倒数),
->[]




## end
#720, 43:


合并结构:...
+[删除结构](,合并结构)->+[del](,合并结构)



## end
#721, 281:
"""


"""

+加括号(_运算,_d)->.(+加括号,结构描述)...

->[]{
    []:->[==]"-"(,_运算)->_re"[+\-]"(_d,)->+加括号(结构描述,_d),
    ->[==]"*"(,_运算)->_re"[+\-]"(_d,)->+加括号(结构描述,_d),
    ->[==]"/"(,_运算)->_re"[+\-*/]"(_d,)->+加括号(结构描述,_d),
    ->[==]"^"(,_运算)->_re"[+\-*/]"(_d,)->+加括号(结构描述,_d),
    ->[]
}




## end
#722, 640:
"""


"""

+算式尾部(_运算,_d)->算式尾部(,):

->[==]"="(,_运算)->[]{
    []:->=(_d,_d1)->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"+"(,_运算)->[]{
    []:->_re"[+\-]"(_d,_d1)->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"-"(,_运算)->[]{
    []:->_re"[+\-]"(_d,_d1)->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"*"(,_运算)->[]{
    []:->_re"[*/]"(_d,_d1)->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"/"(,_运算)->[]{
    []:->_re"[*/]"(_d,_d1)->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
},

->[==]"^"(,_运算)->[]{
    []:->^(_d,_d1)->+[code]([想],算式尾部)->[想](_运算,_d1),
    ->+是(_运算,_d)
}



## end
#725, 1555:
"""
加括号:...
算式尾部:...
+[新建阅读窗口](,算式尾部)

"""

+结构描述(_d,_a)->.(+结构描述,_运算)...
->的(结构描述,加括号)->的(结构描述,算式尾部)...

->[]{
    []:->[==]"="(,_运算)->[]{[]=>_re"[+\-*/\^]"(,_a)}->[]{
        []:->=(_a,)->+尾部(+结构描述,=)...
            ->+[code]([想]#0,算式尾部)->[想]#0(_运算,_d)->是(_运算,_de)->+节点(+尾部,_de),
        ->[]
    },
    
    ->[==]"+"(,_运算)->[]{[]=>_re"[*/\^]"(,_a)}->[]{
        []:->_re"[+\-]"(_a,)->+尾部(+结构描述,_re)...
            ->+[code]([想]#0,算式尾部)->[想]#0(_运算,_d)->是(_运算,_de)->+节点(+尾部,_de),
        ->[]
    },
    
    ->[==]"-"(,_运算)->[]{[]=>_re"[*/\^]"(,_a)}->[]{
        []:->_re"[+\-]"(_a,)->+尾部(+结构描述,_re)...
            ->+[code]([想],加括号)->+[.]([想],+结构描述)->[想](_运算,_d)...
            ->+[code]([想]#0,算式尾部)->[想]#0(_运算,_d)->是(_运算,_de)->+节点(+尾部,_de),
        ->[]
    },
    
    ->[==]"*"(,_运算)->[]{[]=>_re"[\^]"(,_a)}->[]{
        []:->_re"[*/]"(_a,)->+尾部(+结构描述,_re)...
            ->+[code]([想],加括号)->+[.]([想],+结构描述)->[想](_运算,_d)...
            ->+[code]([想]#0,算式尾部)->[想]#0(_运算,_d)->是(_运算,_de)->+节点(+尾部,_de),
        ->[]
    },
    
    ->[==]"/"(,_运算)->[]{[]=>_re"[\^]"(,_a)}->[]{
        []:->_re"[*/]"(_a,)->+尾部(+结构描述,_re)...
            ->+[code]([想],加括号)->+[.]([想],+结构描述)->[想](_运算,_d)...
            ->+[code]([想]#0,算式尾部)->[想]#0(_运算,_d)->是(_运算,_de)->+节点(+尾部,_de),
        ->[]
    },
    
    ->[==]"^"(,_运算)->[]{
        []:->_re"[\"]"(_a,)->+尾部(+结构描述,_re)...
            ->+[code]([想],加括号)->+[.]([想],+结构描述)->[想](_运算,_d)...
            ->+[code]([想]#0,算式尾部)->[想]#0(_运算,_d)->是(_运算,_de)->+节点(+尾部,_de),
        ->[]
    },
    
    ->+非法插入(+结构描述,)
}




## end
#728, 515:
"""
结构描述:...
操作库:...
+[新建阅读窗口](,结构描述)

"""
+公式结构插入(_d,_a)->+[del](,+公式结构插入)...
->的(公式结构插入,操作库)->的(公式结构插入,结构描述)...

->场景(+公式结构插入,_表达式)...
->+[code]([想],结构描述)->+[.]([想],+公式结构插入)->[想](_d,_a)...

->+运算(_a,)->+[修改标题](,+运算)->[m_text](+公式结构插入,+[修改标题])...
    ->+的(_表达式,+运算)...
->[]{
    []:->加括号([想],)->+的(+括号,_d)->+[右连](+运算,+括号)...
    ->[]{
        []:->尾部([想],_运算)->_运算->+[左连](_运算,+括号),
        ->[]
    },
    
    ->+[右连](+运算,_d)->[]{
        []:->尾部([想],_运算)->_运算->节点(尾部,_节点)->+[左连](_运算,_节点),
        ->[]
    }
}



## end
#731, 300:
"""


"""
+括号运算(,括号)->+运算"+"(+括号运算,)...

->[]{
    []:->*(,括号)->[m_text]"*"(,+运算),
    ->/(,括号)->[m_text]"/"(,+运算),
    ->_re"[*/]|\\\\cdot |\\\\cross "(括号,)->[m_text]"*"(,+运算),
    ->-(,括号)->[m_text]"-"(,+运算),
    ->+(,括号)->[m_text]"+"(,+运算),
    ->_re"[+\-]"(括号,)->[m_text]"+"(,+运算),
    ->[]
}




## end
#733, 207:
"""


"""

+相反数(,_a)->+[del](,+相反数)...
->相反数(,)...

->[]:
    ->-(_a,_b1)->_b1->+[修改标题]"+"(,-)->+[做](,_b1)->+[code](+[做],相反数),
    ->+(_a,_b2)->_b2->+[修改标题]"-"(,+)->+[做](,_b2)->+[code](+[做],相反数),
    ->[]



## end
#735, 202:
"""


"""

+倒数(,_a)->+[del](,+倒数)...
->倒数(,)...

->[]:
    ->/(_a,_b1)->_b1->+[修改标题]"*"(,/)->+[做](,_b1)->+[code](+[做],倒数),
    ->*(_a,_b2)->_b2->+[修改标题]"/"(,*)->+[做](,_b2)->+[code](+[做],倒数),
    ->[]



## end
#738, 1535:
"""
结构描述:...
+[新建阅读窗口](,结构描述)

保存:...

"""

+整理乘式结构(_变量,_乘式)->+[del](,+整理乘式结构)...
->的(整理乘式结构,结构描述)...

->场景(+整理乘式结构,_表达式)...

->+[code]([想],结构描述)->[想](_变量,_乘式)...
->操作(_变量,)->指数(_变量,)->是(_变量,_a0)->_a0(,)...
->[]{
    []:->的(操作,产生)->产生(,数字)...
        ->+[.](数字,+数字)->+的(_表达式,+数字)...
        ->[]{
            []:->负号(数字,)->+负号(+数字,)->+的(_表达式,+负号),
            ->[]
        }...
        ->+[修改标题](,+数字)->[m_text](数字,+数字)->[m_text](数字,+[修改标题])...
        ->[]{
            []:->加(数字,^#1)->^#1(,_a)->++(+数字,_a)->+的(_表达式,++),
            ->减(数字,^#2)->^#2(,_b)->+-(+数字,_b)->+的(_表达式,+-),
            ->[]
        },
    ->[]
}...
->[]{
    []=>的(操作,_操作)=>[]:
        ->[is](_操作,加)->加(^#1,^#2)->^#1(,_a1)->^#2(,_a2)...
            ->+[del](,^#1)->+[del](,^#2)->++(_a1,_a2)->+的(_表达式,++),
        ->[is](_操作,减)->减(^#3,^#4)->^#3(,_b1)->^#4(,_b2)...
            ->+[del](,^#3)->+[del](,^#4)->+-(_b1,_b2)->+的(_表达式,+-),
        ->[is](_操作,剔除)->剔除(,_b)->+[公式结构提取]"项"(_表达式,_b),
        ->[is](_操作,加括号)->加括号(,_头部)...
            ->+的#括号(+括号,)->+的#1(_表达式,+的#括号)->+的#2(_表达式,+括号)...
            ->+[.](指数,+括号)...
            ->[]{
                []:->[is](_头部,数字)->数字->.(数字,数字#1)->+[右连](+的#括号,数字#1),
                ->[is](_头部,^#5)->^#5(,_c)->+[右连](+的#括号,_c)},
        ->[]
}...

->[]{
    []:->^(_a0,)->+[del](,^),->[]
}...
->[]{
    []:->/(,_a0)->+[修改标题]"*"(,/),->[]
}...

->[]{
    []:->.(指数,括号)->括号->+^(_a0,括号)->+的(_表达式,+^),
    ->.(指数,^)->^(,_b)->+^#2(_a0,_b)->+的(_表达式,+^#2),
    ->.(指数,数字)->数字->.(数字,_1)->+^#3(_a0,_1)->+的(_表达式,+^#3),
    ->[]
}



## end
#739, 3:
801
## end
#742, 1103:
"""
搜索乘式:...
在搜索乘式, 将"结构描述"替换为"搜索乘式"
P代码:...
+[新建阅读窗口](,P代码)

"""

+结构描述(_变量,_乘式)...
->的(结构描述,搜索乘式)->的(结构描述,P代码)...

->+变量(_变量,)->+数字"0"(_变量,)->+操作(_变量,)...
->+[code]([想],搜索乘式)->[想](_变量,_乘式)...
->是(_变量,_a0)...

->+指数(_变量,)->[]{
    []:->[==]"0"(,+数字),->+的(+指数,+数字)
}...

->[]{
    []:->加上(+变量,^)->^->+头部(,^)->+的(+指数,+头部)->[]{
        []:->减去(+变量,^#1)->^#1->加上(+变量,^#2)->^#2->[]{[]=>加(^#2,)}...
            ->+减(^#2,^#1)->+的(+操作,+减),
        ->[]
    },
    ->减去(+变量,^#3)->^#3->+头部(,^#3)->+的(+指数,+头部)->+负号(,+头部),
    ->[]
}...

->[]{
    []:->的(+指数,头部)->头部(,^)->[]{
        []:->的(+指数,数字)->数字(,)...
            ->+产生(,数字)->+的(+操作,+产生)->+加括号(,数字)->+的(+操作,+加括号)...
            ->[]{
                []:->负号(头部,)->+减(数字,^)->+的(+操作,+减),
                ->+加(数字,^)->+的(+操作,+加)},
        ->_re"加|减"(^,)->+加括号(,^)->+的(+操作,+加括号),
        ->+[.](+指数,^)},
    ->的(+指数,数字)->数字->[]{
        []:->[==]"1"(,数字),
        ->+[.](+指数,数字)->+产生(,数字)->+的(+操作,+产生)
    },
    ->+剔除(,_a0)->+的(+操作,+剔除)
}...

->[]{
    []:->+[.]"n"([python],+数字)->+[code]([python],P代码)->[python](Python,+数字)...
        ->+负号(+数字,),
    ->[]
}


## end
#744, 569:
<!--
+[修改天使]
+[H函数](,运算测试)

保存:...
-->

%[1].
%[2].


<!--
[2].:
式(1)转换为"表达式"
将"a/b/c/d-e=0"记作为式(1)
将"a/(b*c/d)-e=0"记作为式(1)
将"d*x^3+e*x^4"记作为式(2)
式(1)转换为"表达式"
更新式(1)
a*x^{2}+x+c=0

的([1].,表达式)->的(表达式,b)->+[公式结构提取]"和式"(表达式,b)
的([1].,表达式)->的(表达式,b)->的([2].,表达式#2)->的(表达式#2,d)...
->+[公式结构插入]"/"(d,b)->+场景(+[公式结构插入],表达式)->+[del](,+场景)

的([1].,表达式)->的(表达式,a)->+[公式结构加括号]"和式"(表达式,a)
的([1].,表达式)->的(表达式,c)->+[公式结构加括号]"乘式"(表达式,c)

的([1].,表达式)->的(表达式,括号)->+[公式结构拆括号](表达式,括号)

的([1].,表达式)->的(表达式,起点)->起点(,_b)->+[算式]"LaTeX"(_b,+[消息窗口])
的([1].,表达式)->+[显示星图](,表达式)
+[H函数](,运算测试)
-->
## end
#745, 354:
"""
数字指数:...
变量指数:...
+[新建阅读窗口](,数字指数)
在变量指数, 将"数字"替换为"变量"

"""

+更新指数(_变量,_乘式)...
->的(更新指数,数字指数)->的(更新指数,变量指数)...

->[]{
    []:->^(_乘式,_re#指数)->_re#指数"^[\d\.]+$"->[]{[]=>^(_re#指数,)}...
        ->+[code]([想]#0,数字指数)->[想]#0(_变量,_乘式),
    ->^(_乘式,_b)->_b(,)...
        ->+[code]([想]#1,变量指数)->[想]#1(_变量,_乘式),
    ->+[code]([想]#2,数字指数)->[想]#2(_变量,_乘式)
}




## end
#747, 497:
"""
P代码:...

"""

+数字指数(_变量,_乘式)...
->数字指数#0->的(数字指数#0,P代码)...

->数字(_变量,)...

->+[code]([python],P代码)...
->+[.]([python],+n_p)->+n_p"0"->+[.]([python],+n_m)->+n_m"0"...
->[]{
    []:->/(,_乘式)...
        ->[]{[]:->^(_乘式,_n)->_n->[m_text](_n,+n_m),->[m_text]"1"(,+n_m)},
    ->[]{[]:->^(_乘式,_n)->_n->[m_text](_n,+n_p),->[m_text]"1"(,+n_p)}
}...

->+[.]"n_s"([python],+符号)->+符号"1"...
->[]{
    []:->^(_乘式,_n)->_n->负号(_n,)->[m_text]"-1"(,+符号),->[]
}...

->+[o]"n0"([python],数字)->[python](Python,)




## end
#749, 360:
"""


"""

+变量指数(_变量,_乘式)...

->变量(_变量,)->操作(_变量,)...
->[]{[]:->第一个(变量,),->+第一个(变量,)}...

->[]{
    []:->/(,_乘式)->^(_乘式,)->[]{
        []:->减去(变量,^#1)->^#1->[]{[]=>减(^#1,)}->+减(^#1,^)->+的(操作,+减),
        ->[]
    }->+减去(变量,^),

    ->*(,_乘式)->^(_乘式,)->[]{
        []:->加上(变量,^#1)->^#1->[]{[]=>加(^#1,)}->+加(^#1,^)->+的(操作,+加),
        ->[]
    }->+加上(变量,^)
}




## end
#751, 131:
"""
n0=n0[0]+n_p[0]-n_m[0]
记住"Python"
print(n0)

"""

n0=n0[0]+n_s[0]*(n_p[0]-n_m[0])
if n0.is_integer():
    n0=int(n0)
state=True
## end
#753, 320:
"""
更新指数:...

"""

+搜索乘式(_变量,_乘式)...
->的(搜索乘式,更新指数)...
->操作(_变量,)...

->[]{
    []:->[eq](_变量,_乘式)->[]{
            []:->是(_变量,)->+剔除(_变量,_乘式)->+的(操作,+剔除),
            ->+是(_变量,_乘式)}...
        ->+[code]([想]#1,更新指数)->[想]#1(_变量,_乘式),
    ->[]
}...

->[]:->_re"[*/]"(_乘式,_乘式2)->+[code]([想],搜索乘式)->[想](_变量,_乘式2),
    ->[]


## end
#756, 1308:
"""
结构描述:...
+[新建阅读窗口](,结构描述)

保存:...

"""

+整理乘式结构(_变量,_乘式)->+[del](,+整理乘式结构)...
->的(整理乘式结构,结构描述)...

->场景(+整理乘式结构,_表达式)...

->+[code]([想],结构描述)->[想](_变量,_乘式)...
->操作(_变量,)->指数(_变量,)->是(_变量,_a0)...
->[]{
    []:->的(操作,产生)->产生(,数字)...
        ->+[.](数字,+数字)->+的(_表达式,+数字)...
        ->+[修改标题](,+数字)->[m_text](数字,+数字)->[m_text](数字,+[修改标题])...
        ->[]{
            []:->加(数字,^#1)->^#1(,_a)->++(+数字,_a)->+的(_表达式,++),
            ->减(数字,^#2)->^#2(,_b)->+-(+数字,_b)->+的(_表达式,+-),
            ->[]
        },
    ->[]
}...
->[]{
    []=>的(操作,_操作)=>[说](,_操作):
        ->[is](_操作,加)->加(^#1,^#2)->^#1(,_a1)->^#2(,_a2)...
            ->+[del](,^#1)->+[del](,^#2)->++(_a1,_a2)->+的(_表达式,++),
        ->[is](_操作,减)->减(^#3,^#4)->^#3(,_b1)->^#4(,_b2)...
            ->+[del](,^#3)->+[del](,^#4)->+-(_b1,_b2)->+的(_表达式,+-),
        ->[is](_操作,剔除),
        ->[is](_操作,加括号)->加括号(,_头部)...
            ->+的#括号(+括号,)->+的#1(_表达式,+的#括号)->+的#2(_表达式,+括号)...
            ->+[.](指数,+括号)...
            ->[]{
                []:->[is](_头部,数字)->数字->.(数字,数字#1)->+[右连](+的#括号,数字#1),
                ->[is](_头部,^#5)->^#5(,_c)->+[右连](+的#括号,_c)},
        ->[]
}...

->[]{
    []:->.(指数,括号)->括号->+^(_a0,括号)->+的(_表达式,+^),
    ->.(指数,^)->^(,_b)->+^#2(_a0,_b)->+的(_表达式,+^#2),
    ->.(指数,数字)->.(数字,_1)->+^#3(_a0,_1)->+的(_表达式,+^#3),
    ->[]
}



## end
#758, 270:
"""
想法库:...
+[新建阅读窗口](,想法库)

"""

+公式描述_结构(_入口,_变量)...
->的(公式描述_结构,想法库)...

->."结构"(+公式描述_结构,_结构)->."类型"(+公式描述_结构,_类型)...
->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]"结构"([想],_结构)->+[.]"类型"([想],_类型)->+[code]([想],_条目)...
    ->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述_结构,_描述)


## end
#760, 262:
和式有什么

和式:...
乘式:...
项:...
在选择区域中, 将'项'的"\.\]"替换为".]\"类型\""
+[新建阅读窗口](,乘式)

变量:...
括号:...
将'变量'的"公式描述"替换为"公式描述_结构"
在选择区域中, 将'括号'的"和式"替换为"括号"
+[新建阅读窗口](,变量)

函数:...
根式:...
分式:...
在选择区域中, 将'分式'的"和式"替换为"分式"
将'根式'的"公式描述"替换为"公式描述_结构"
将条目"根式"复制为条目"分式"
+[新建阅读窗口](,分式)


## end
#762, 835:
"""


"""

+乘式(_式,_x)...

->."结构"(+乘式,_结构)->."类型"(+乘式,乘式#0)...
    ->+项(乘式#0,)...
->+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+项)...
    ->[公式描述_结构](_式,_x)...
->o([公式描述_结构],_变量类型)->_变量类型(,)...

->[]{
    []:->_re"[*/]"(_式,_式2)->_式2(,)...
        ->+[.]"结构"([公式描述_结构]#2,_结构)->+[.]"类型"([公式描述_结构]#2,乘式#0)...
            ->[公式描述_结构]#2(_式2,_x),
    ->+结尾(乘式#0,_变量类型)->+的(_结构,+结尾)
}...
->+的#0(乘式#0,_变量类型)->+[o](+乘式,_变量类型)...

->[]{
    []:->/(,_式)->+分母(乘式#0,_式)->+的(_结构,+分母),
    ->+分子(乘式#0,_式)->+的(_结构,+分子)
}...

->[]{
    []:->fx(乘式#0,),
    ->[is](_变量类型,fx#0)->fx#0->+fx(乘式#0,)->+x(乘式#0,)...
        ->+因为(fx#0,+fx)->+的(_结构,+因为)->+的(_结构,+fx)...
        ->+因为(fx#0,+x)->+的(_结构,+因为)->+的(_结构,+x),
    ->[]
}...
->[]{
    []:->x(乘式#0,),
    ->[is](_变量类型,x#0)->x#0->+x(乘式#0,)...
        ->+因为(x#0,+x)->+的(_结构,+因为)->+的(_结构,+x),
    ->[]
}




## end
#763, 776:
"""


"""

+和式(_式,_x)...

->."结构"(+和式,_结构)->."类型"(+和式,和式#0)...
->+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+乘式)...
    ->[公式描述_结构](_式,_x)...
->o([公式描述_结构],_变量类型)->_变量类型(,)...
    ->+入口(+乘式,_变量类型)->+的(_结构,+入口)->+的(_结构,+乘式)...

->[]{
    []:->_re"[+\-]"(_式,_式2)->_式2(,)...
        ->+[.]"结构"([公式描述_结构]#2,_结构)->+[.]"类型"([公式描述_结构]#2,和式#0)...
            ->[公式描述_结构]#2(_式2,_x),
    ->+结尾(和式#0,+乘式)->+的(_结构,+结尾)
}...
->+的#0(和式#0,+乘式)->+[o](+和式,_变量类型)...
    ->+的(_结构,+的#0)...

->[]{
    []:->fx(和式#0,), 
    ->fx#0(+乘式,)->+fx(和式#0,)->+x(和式#0,)...
        ->+因为(fx#0,+fx)->+的(_结构,+因为)->+的(_结构,+fx)...
        ->+因为(fx#0,+x)->+的(_结构,+因为)->+的(_结构,+x),
    ->[]
}...
->[]{
    []:->x(和式#0,),
    ->x#0(+乘式,)->+x(和式#0,)...
        ->+因为(x#0,+x)->+的(_结构,+因为)->+的(_结构,+x),
    ->[]
}




## end
#766, 1117:
"""
+[全部关联](,项)->+[显示](,+[全部关联])

"""

+项(_式,_x)...

->."结构"(+项,_结构)->."类型"(+项,项#0)->项#0(乘式,)...
->[]{
    []:->[is](_式,分式)->分式(,)...
        ->+分式(乘式,)->+的(_结构,+分式)...
    ->+[.]"结构"([公式描述_结构]#2C,_结构)->+[.]"类型"([公式描述_结构]#2C,+分式)...
        ->[公式描述_结构]#2C(_式,_x)...
        ->o([公式描述_结构]#2C,_变量类型2C)->+[o](+项,_变量类型2C),

    ->[is](_式,根式)->根式(,)...
        ->+根式(乘式,)->+的(_结构,+根式)...
    ->+[.]"结构"([公式描述_结构]#2A,_结构)->+[.]"类型"([公式描述_结构]#2A,+根式)...
        ->[公式描述_结构]#2A(_式,_x)...
        ->o([公式描述_结构]#2A,_变量类型2A)->+[o](+项,_变量类型2A),

    ->[is](_式,括号)->括号(,)...
        ->+括号(乘式,)->+的(_结构,+括号)...
    ->+[.]"结构"([公式描述_结构]#2B,_结构)->+[.]"类型"([公式描述_结构]#2B,+括号)...
        ->[公式描述_结构]#2B(_式,_x)...
        ->o([公式描述_结构]#2B,_变量类型2B)->+[o](+项,_变量类型2B),
    
    ->输入(_式,)...
        ->+函数(乘式,)->+的(_结构,+函数)...
    ->+[.]"结构"([公式描述_结构]#1,_结构)->+[.]"类型"([公式描述_结构]#1,+函数)...
        ->[公式描述_结构]#1(_式,_x)...
        ->o([公式描述_结构]#1,_变量类型1)->+[o](+项,_变量类型1),

    ->+变量(乘式,)->+的(_结构,+变量)...
    ->+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+变量)...
        ->[公式描述_结构](_式,_x)...
        ->o([公式描述_结构],_变量类型)->+[o](+项,_变量类型)
}



## end
#768, 843:
"""


"""

+括号(_式,_x)...

->."结构"(+括号,_结构)->."类型"(+括号,括号#0)...
->的(_式,_式2)...
->+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+和式)...
    ->[公式描述_结构](_式2,_x)...
->+的(_结构,+和式)...

->[]{
    []:->^(_式,_和式)->_和式(,)...
    ->+[.]"结构"([公式描述_结构]#2,_结构)->+[.]"类型"([公式描述_结构]#2,+和式#2)...
        ->[公式描述_结构]#2(_和式,_x)...
    ->+的(_结构,+和式#2)->[]{
        []:->x(+和式#2,)->+fx(括号#0,_式)->+因为(x,+fx)->+[o](+括号,+fx)...
            ->+^(括号#0,+和式#2)->+内容(括号#0,+和式)...
            ->+的(_结构,+fx)->+的(_结构,+^)->+的(_结构,+内容)->+的(_结构,+因为),
        ->[]
    }, ->[]
}...

->[]{
    []:->o(+括号,),
    ->fx(+和式,)->+fx(括号#0,_式)->+[o](+括号,+fx)->+内容(+fx,+和式)...
        ->+的(_结构,+fx)->+的(_结构,+内容),
    ->x(+和式,)->+x(括号#0,_式)->+[o](+括号,+x)->+内容(+x,+和式)...
        ->+的(_结构,+x)->+的(_结构,+内容),
    ->+C(括号#0,_式)->+[o](+括号,+C)->+内容(+C,+和式)...
        ->+的(_结构,+C)->+的(_结构,+内容)
}


## end
#769, 535:
"""


"""

+变量(_式,_x)...

->."结构"(+变量,_结构)->."类型"(+变量,变量#0)...
->[]{
    []:->^(_式,_和式)->_和式(,)...
        ->+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+和式)...
            ->[公式描述_结构](_和式,_x)...
        ->+^(变量#0,+和式)->+的(_结构,+和式)->+的(_结构,+^)->[]{
            []:->x(+和式,)->+fx(变量#0,_式)->+[o](+变量,+fx)...
                ->+因为(x,+fx)->+的(_结构,+因为)->+的(_结构,+fx),
            ->[]
        },
    ->[]
}...

->[]{
    []:->o(+变量,),
    ->[eq](_式,_x)->+x(变量#0,_式)->+[o](+变量,+x)->+的(_结构,+x),
    ->+C(变量#0,_式)->+[o](+变量,+C)->+的(_结构,+C)
}



## end
#772, 569:
<!--
+[修改天使]
+[H函数](,运算测试)

保存:...
-->

%[1].
%[2].


<!--
[2].:
式(1)转换为"表达式"
将"a/b/c/d-e=0"记作为式(1)
将"a/(b*c/d)-e=0"记作为式(1)
将"d*x^3+e*x^4"记作为式(2)
式(1)转换为"表达式"
更新式(1)
a*x^{2}+x+c=0

的([1].,表达式)->的(表达式,b)->+[公式结构提取]"和式"(表达式,b)
的([1].,表达式)->的(表达式,b)->的([2].,表达式#2)->的(表达式#2,d)...
->+[公式结构插入]"/"(d,b)->+场景(+[公式结构插入],表达式)->+[del](,+场景)

的([1].,表达式)->的(表达式,a)->+[公式结构加括号]"和式"(表达式,a)
的([1].,表达式)->的(表达式,c)->+[公式结构加括号]"乘式"(表达式,c)

的([1].,表达式)->的(表达式,括号)->+[公式结构拆括号](表达式,括号)

的([1].,表达式)->的(表达式,起点)->起点(,_b)->+[算式]"LaTeX"(_b,+[消息窗口])
的([1].,表达式)->+[显示星图](,表达式)
+[H函数](,运算测试)
-->
## end
#774, 415:
<!--
+[修改天使]
+[H函数](,运算测试)

保存:...
(有公式结构系列操作的用法)
测试公式结构系列操作:...
测试整理乘式:...
-->

%[1].
%[2].


<!--
[1].:
式(1)转换为"表达式"
将"a^{a+b}"记作为式(1)
将"b/c/d*a/a^{(a+b)}-e=0"记作为式(1)
将"f(x)=x"记作为式(2)
式(1)转换为"表达式"
更新式(1)
a*x^{2}+x+c=0


的([1].,表达式)->的(表达式,a)->+[整理乘式结构](+a,a)->+[del](,+a)...
->+场景(+[整理乘式结构],表达式)->+[del](,+场景)

的([1].,表达式)->的(表达式,起点)->起点(,_b)->+[算式]"LaTeX"(_b,+[消息窗口])
的([2].,表达式)->+[显示星图](,表达式)
+[H函数](,运算测试)
-->
## end
#775, 1280:
"""

保存:...

"""

+分式(_式,_x)...

->."结构"(+分式,_结构)->."类型"(+分式,分式#0)...
->[is](_式,分式)...
->的(分式,分子)->分子(,_和式1)...
    ->+[.]"结构"([公式描述_结构]#1,_结构)->+[.]"类型"([公式描述_结构]#1,+和式#1)...
    ->[公式描述_结构]#1(_和式1,_x)->+的(_结构,+和式#1)...
->的(分式,分母)->分母(,_和式2)...
    ->+[.]"结构"([公式描述_结构]#2,_结构)->+[.]"类型"([公式描述_结构]#2,+和式#2)...
    ->[公式描述_结构]#2(_和式2,_x)->+的(_结构,+和式#2)...

->[]{
    []:->^(_式,_和式)->_和式(,)...
    ->+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+和式)...
        ->[公式描述_结构](_和式,_x)...
    ->+的(_结构,+和式)->[]{
        []:->x(+和式,)->+fx(分式#0,_式)->+因为(x,+fx)->+[o](+分式,+fx)...
            ->+^(分式#0,+和式)...
            ->+的(_结构,+fx)->+的(_结构,+^)->+的(_结构,+因为),
        ->[]
    }, ->[]
}...

->+分子(分式#0,+和式#1)->+的(_结构,+分子)...
->[]{
    []:->o(+分式,),
    ->fx(+和式#1,)->+fx(分式#0,_式)->+[o](+分式,+fx)...
        ->+因为(fx,+fx)->+的(_结构,+因为)->+的(_结构,+fx),
    ->[]
}...

->+分母(分式#0,+和式#2)->+的(_结构,+分母)...
->[]{
    []:->o(+分式,),
    ->fx(+和式#2,)->+fx(分式#0,_式)->+[o](+分式,+fx)...
        ->+因为(fx,+fx)->+的(_结构,+因为)->+的(_结构,+fx),
    ->x(+和式#2,)->+x(分式#0,_式)->+[o](+分式,+x)...
        ->+因为(x,+x)->+的(_结构,+因为)->+的(_结构,+x),
    ->x(+和式#1,)->+x(分式#0,_式)->+[o](+分式,+x)...
        ->+因为(x,+x)->+的(_结构,+因为)->+的(_结构,+x),
    ->[]
}...

->[]{
    []:->o(+分式,),
    ->+C(分式#0,_式)->+[o](+分式,+C)->+的(_结构,+C)
}



## end
#777, 3:
836
## end
#784, 3:
835
## end
#787, 859:
"""
记住"Python"
ne

"""

if eq_op=='\\l ':
    if type_op=='LaTeX':
        ans="< "
    else:
        ans="<"
elif eq_op=='\\g ':
    ans=">"
elif eq_op=='>=':
    ans="\\ge "
elif eq_op=='<=':
    ans="\\le "
elif eq_op=='<<':
    ans="\\ll "
elif eq_op=='>>':
    ans="\\gg "
elif eq_op=='~':
    if type_op=='LaTeX':
        ans="\\approx "
    else:
        ans="~"
elif eq_op=='!=':
    if type_op=='LaTeX':
        ans="\\ne "
    else:
        ans="!="
elif eq_op=='<' and type_op=='LaTeX':
    ans="< "
else:
    ans=eq_op

if type_op=='Python' or type_op=='Matlab':
    if eq_op=='>=' or eq_op=='\\ge ':
        ans=">="
    elif eq_op=='<=' or eq_op=='\\le ':
        ans="<="
    elif eq_op=='<<':
        ans="<"
    elif eq_op=='>>':
        ans=">"
    elif eq_op=='~':
        ans="="

if type_eq=='判断':
    if ans=='=':
        ans='=='
    


## end
#788, 263:
+矩阵(结构,)...
->+模块"矩阵"->[匹配模式]"\\mat{"(,+模块)...
->+的(+矩阵,+矩阵#0)->+的(结构,+矩阵#0):

->[匹配模式]"\\?[a-zA-Z_\d]+}"(,+模块)...
    ->+输入(+矩阵#0,+变量)->+的(结构,+输入)->+的(结构,+变量)...
    ->[m_text]([匹配模式],+变量),

->+输入(+矩阵#0,)->+的(结构,+输入)->[矩阵输入](结构,+输入)...
    ->[匹配模式]"}"(,+模块)





## end
#789, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#790, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#791, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#792, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#793, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#794, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#795, 226:
+偏微分(结构,)...
->+模块"偏微分"->[匹配模式]"\\partial{"(,+模块)...
->+输入(+偏微分#0,)->+的(结构,+输入)->[函数输入](结构,+输入)...
->[匹配模式]"}{"(,+模块)...

->[和式](结构,)->的([和式],_和式#1)...
->[匹配模式]"}"(,+模块)...

->+的(+偏微分,+偏微分#0)->+的(结构,+偏微分#0)...
->+偏微分#0(,_和式#1)
## end
#796, 309:
"""
+[返回目录](,矩阵)
+[新建阅读窗口](,矩阵)

测试:...

"""

+矩阵(结构,)...
->+模块"矩阵"->[匹配模式]"\\mat{"(,+模块)...
->+的(+矩阵,+矩阵#0)->+的(结构,+矩阵#0):

->[匹配模式]"\\?[a-zA-Z_\d]+}"(,+模块)...
    ->+输入(+矩阵#0,+变量)->+的(结构,+输入)->+的(结构,+变量)...
    ->[m_text]([匹配模式],+变量),

->+输入(+矩阵#0,)->+的(结构,+输入)->[矩阵输入](结构,+输入)...
    ->[匹配模式]"}"(,+模块)





## end
#798, 9:
\mat{%变量}
## end
#799, 5:
[%变量]
## end
#800, 35:
\begin{pmatrix}
%变量
\end{pmatrix}


## end
#801, 705:
"""
保存:...
LaTeX:...
LaTeX2:...
表达式:...
表达式2:...
Matlab:...
Matlab2:...

矩阵输入:...

"""

+矩阵(_节点,_矩阵)->+[del](,+矩阵)...
->的(矩阵,矩阵输入)->的(矩阵,LaTeX)->的(矩阵,LaTeX2)...
->的(矩阵,表达式)->的(矩阵,表达式2)...
->的(矩阵,Matlab)->的(矩阵,Matlab2)...

->记忆->_节点(,_名字):
->_名字->+[标题](_名字,)...
    ->+[模板文本](,_矩阵)->+[.](+[模板文本],+[标题])->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX2),
        ->[==]"表达式"(,记忆)->+[code](+[模板文本],表达式2),
        ->+[code](+[模板文本],Matlab2)
    },

->输入(_节点,)->+[做](输入,+[临时文本])->+[code](+[做],矩阵输入)...
    ->+[模板文本](,_矩阵)->+[.]"变量"(+[模板文本],+[临时文本])->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX),
        ->[==]"表达式"(,记忆)->+[code](+[模板文本],表达式),
        ->+[code](+[模板文本],Matlab)
    }




## end
#802, 573:
"""


"""
+矩阵输入(输入,_内容)->+[del](,+矩阵输入)...
->矩阵输入(,)...

->记忆->+[临时文本]->[]{
    []=>的(输入,_变量)->_变量(,)...
    =>+[和式](_变量,+[临时文本]#a)->+[临时文本]#a->[]{
        []:->[==]"LaTeX"(,记忆)->+[增加内容2]"%s&"(+[临时文本]#a,+[临时文本]),
        ->+[增加内容2]"%s,"(+[临时文本]#a,+[临时文本])
    }
}...
->+[python]"ans=text_in[0:-1]"(Python,+[临时文本])->+[s]"text_in"(+[python],+[临时文本])...

->[]{
    []:->输入#1(输入,)->+[做](输入#1,+[临时文本]#L)->+[code](+[做],矩阵输入)->[]{
        []:->[==]"LaTeX"(,记忆)->+[增加内容]"\\ "(+[临时文本]#L,+[临时文本]),
        ->+[增加内容]";"(+[临时文本]#L,+[临时文本])
    },
    ->[]
}->+[修改内容](+[临时文本],_内容)






## end
#803, 16:
\mathbf{%[临时文本]}
## end
#804, 11:
\mat{%[标题]}
## end
#805, 5:
%[标题]
## end
#814, 764:
"""
保存:...
LaTeX:...
LaTeX2:...
表达式:...
表达式2:...
Matlab:...
Matlab2:...

矩阵输入:...

"""

+矩阵(_节点,_矩阵)->+[del](,+矩阵)...
->的(矩阵,矩阵输入)->的(矩阵,LaTeX)->的(矩阵,LaTeX2)...
->的(矩阵,表达式)->的(矩阵,表达式2)...
->的(矩阵,Matlab)->的(矩阵,Matlab2)...

->记忆->_节点(,_名字):
->_名字->+[标题](_名字,)->+[变量](_名字,+[临时文本]#var)...
    ->+[模板文本](,_矩阵)->+[.](+[模板文本],+[标题])->+[.](+[模板文本],+[临时文本]#var)...
    ->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX2),
        ->[==]"表达式"(,记忆)->+[code](+[模板文本],表达式2),
        ->+[code](+[模板文本],Matlab2)
    },

->输入(_节点,)->+[做](输入,+[临时文本])->+[code](+[做],矩阵输入)...
    ->+[模板文本](,_矩阵)->+[.]"变量"(+[模板文本],+[临时文本])->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX),
        ->[==]"表达式"(,记忆)->+[code](+[模板文本],表达式),
        ->+[code](+[模板文本],Matlab)
    }




## end
#817, 16:
\left|%和式\right|
## end
#819, 8:
abs(%和式)
## end
#820, 3:
829
## end
#823, 8:
\ _{%序号}
## end
#825, 5:
(%序号)
## end
#827, 5:
[%序号]
## end
#828, 3:
890
## end
#832, 666:
<!--
+[修改天使]
+[H函数](,运算测试)

保存:...
(有公式结构系列操作的用法)
测试公式结构系列操作:...
测试整理乘式:...
语句操作:...
-->

%[1].
%[2].


<!--
[1].:
式(1)转换为"表达式"
将"a^{a+b}+x*d+y=0"记作为式(1)
将"b/c/d*a/a^{(a+b)}-e=0"记作为式(1)
将"f(x)=x"记作为式(2)
式(1)转换为"表达式"
更新式(1)
a*x^{2}+x+c=0

从式(1)中, 提取项"(z^3/d)"的括号
在式(1)中, 乘式"x"除以式子"z^3"
在式(1)中, 和式"x"加上括号
将"y=\int{x}{exp(-x^2)}"代入到式(1)

的([2].,表达式)->的(表达式,起点)->起点(,_b)...
->+[.]([公式描述],+和式)->[公式描述](_b,+a)->+[del](,+a)->+[del](,+和式)...
=>的(+和式,_x)=>_x(,_y)->+[消息窗口](,_y)

的([2].,表达式)->的(表达式,起点)->起点(,_b)...
->+[.]([公式描述],+[和式])->[公式描述](_b,+[a])->+[显示](,_b)->C(,_b)

的([1].,表达式)->的(表达式,起点)->起点(,_b)->+[算式]"LaTeX"(_b,+[消息窗口])
的([1].,表达式)->+[显示星图](,表达式)
+[H函数](,运算测试)
-->
## end
#834, 514:
"""
结构描述:...
库:...
+[新建阅读窗口](,库)

+[修改天使]
保存:...

"""

+分式演算(_公式,_变量)->+[del](,+分式演算)...
->的(分式演算,结构描述)->的(分式演算,库)...

->场景(+分式演算,_场景)...
->+操作([想],)->+[del](,+操作)...
    ->+[code]([想],结构描述)->[想](_公式,_变量)...

->[]{
    []=>的(+操作,_操作)->_操作=>[说](,_操作)->[]:
        ->[is](_操作,_操作1)->_操作1(_主语,_宾语)->_主语->_宾语(,)...
            ->的(库,_条目)->_条目->[eq](_操作,_条目)...
            ->+[做](_主语,_宾语)->+[code](+[做],_条目)...
            ->+场景(+[做],_场景)->+[del](,+场景)...
            ->+未知数(+[做],_变量)->+[del](,+未知数),
        ->[]
}



## end
#838, 806:
"""
库:...
+[新建阅读窗口](,库)

"""

+结构描述(_公式,_变量)...
->的(结构描述,库)...
->的(库,左和右和)->的(库,左乘右常)->的(库,整理左边)...

->操作(+结构描述,)->=(_公式,_右边)...
->+[.]([公式描述]#1,+和式#1)->[公式描述]#1(_公式,_变量)->+入口(+和式#1,_公式)...
->+[.]([公式描述]#2,+和式#2)->[公式描述]#2(_右边,_变量)->+入口(+和式#2,_右边):

->[]{[]=>的(+和式#1,乘式)->乘式=>结尾(+和式#1,乘式)}->[]{[]=>x(+和式#2,)}...
    ->+操作([想]#1,操作)->+[code]([想]#1,左乘右常)->[想]#1(+和式#1,+和式#2),
->[]{[]&:=>的(+和式#1,乘式)->乘式=>结尾(+和式#1,乘式),
        =>的(+和式#2,乘式#2)->乘式#2=>结尾(+和式#2,乘式#2)}...
    ->+操作([想]#1A,操作)->+[code]([想]#1A,左乘右常)->[想]#1A(+和式#1,+和式#2),

->x(+和式#2,)...
    ->+操作([想]#2,操作)->+[code]([想]#2,左和右和)->[想]#2(+和式#1,+和式#2),
->[]{的(+和式#1,乘式)->乘式=>x(乘式,)}...
    ->+操作([想]#3,操作)->+[code]([想]#3,左和右和)->[想]#3(+和式#1,+和式#2),
->[]{的(+和式#1,乘式)->乘式}...
    ->+操作([想]#4,操作)->+[code]([想]#4,整理左边)->[想]#4(+和式#1,+和式#2),

->[说]"未知情况"



## end
#840, 52:


左和右和:...
左乘右常:...
整理左边:...
将条目"左和右和"复制为条目"整理左边"



## end
#842, 752:
"""
移动系数:...
根式平方:...
处理分式:...
括号n次方:...
(暂时n=3)
将条目"根式平方"复制为条目"括号n次方"

"""

+左乘右常(_左边,_右边)...
->的(左乘右常,根式平方)->的(左乘右常,移动系数)...
->[说]"左乘右常情况"...

->操作(+左乘右常,_操作)...
->入口(_左边,_x1)->入口(_右边,_x2)...
->[]{
    []:->[]{[]&:=>x(_左边,),->x(_右边,)}...
        ->+交换左右(_x1,_x2)->+的(_操作,+交换左右),
    ->[]{的(_左边,乘式):->的(乘式,x)->x(,分式#1),->的(乘式,fx)->fx(,分式#2)}...
        ->+操作([想]#1A,_操作)->+[code]([想]#1A,处理分式)->[想]#1A(_左边,_右边),
    ->[]{的(_左边,乘式):->的(乘式,x)->x(,根式#1),->的(乘式,fx)->fx(,根式#2)}...
        ->+操作([想]#1,_操作)->+[code]([想]#1,根式平方)->[想]#1(_左边,_右边),
    ->[]{的(_左边,乘式):
            ->的(乘式,_re)->_re"x|fx"(,括号)->^(括号,1)->/(1,3)=>_r(3,)}...
        ->+操作([想]#1B,_操作)->+[code]([想]#1B,括号n次方)->[想]#1B(_左边,_右边),
    ->+操作([想],_操作)->+[code]([想],移动系数)->[想](_左边,_右边)
}



## end
#844, 637:
"""
结构描述:...

保存:...

"""

+分式演算(_公式,_变量)->+[del](,+分式演算)...
->的(分式演算,结构描述)...

->场景(+分式演算,_场景)...
->+操作([想],)->+[del](,+操作)...
    ->+[code]([想],结构描述)->[想](_公式,_变量)...

->[]{
    []=>的(+操作,_操作)->_操作=>[说](,_操作)->[]:
        ->[is](_操作,提取)->提取(,_项1)->_项1->+[公式结构提取]"乘式"(_场景,_项1),
        ->[]
}...

->[]{
    []=>的(+操作,_操作)->_操作=>[说](,_操作)->[]:
        ->[is](_操作,移到)->移到(_位置,_项2)->_位置->_项2->[]{
            []:->-(,_项2)->+[公式结构插入]"+"(_位置,_项2)...
                ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
            ->+[公式结构插入]"-"(_项2,_位置)->+[消息窗口](,_位置)->+[消息窗口](,_项2)...
                ->+场景(+[公式结构插入],_场景)->+[del](,+场景)
        },->[]
}



## end
#847, 284:


移到左边:...
移到右边:...

乘到左边:...
乘到右边:...
除到左边:...
除到右边:...
将条目"除到左边"复制为条目"除到左边2"

乘到左边2:...
乘到右边2:...
除到左边2:...
除到右边2:...

交换左右:...

剔除分式:...
加括号:...
拆括号:...
整理左边乘式:...
整理乘式:...
合并乘式:...
将条目"整理乘式"复制为条目"合并乘式"

去根式:...
平方:...
加括号平方:...
将条目"加括号平方"复制为条目"加括号n次方"

n次方:...
加括号n次方:...
(暂时n=3)

## end
#849, 133:
"""


"""

+合并乘式(,_位置)->+[del](,+合并乘式)...

->场景(+合并乘式,_场景)->未知数(+合并乘式,_项)...

->+[整理和式结构](_项,_位置)->+场景(+[整理和式结构],_场景)->+[del](,+场景)


## end
#850, 271:
"""


"""

+移到左边(=,_项)->+[del](,+移到左边)...

->场景(+移到左边,_场景)->=(_位置,)...

->+[公式结构提取]"乘式"(_场景,_项):
    ->[is](_项,0),
    ->-(,_项)->+[公式结构插入]"+"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"-"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#852, 401:
"""
整理乘式:...
合并乘式:...

"""

+整理左边(_左边,_右边)...
->的(整理左边,整理乘式)->的(整理左边,合并乘式)...
->[说]"整理左边情况"...

->操作(+整理左边,_操作):
->[]{
    的(_左边,乘式)->乘式->[]{
        []:->的(乘式,x)->x(,括号)->括号,
        ->的(乘式,x#1)->的(乘式,x#2)=>[is](x#1,x#2)
    }->+操作([想],_操作)->+[code]([想],整理乘式)->[想](_左边,_右边)
},
->[]{
    的(_左边,乘式#1)->x(乘式#1,)->的(_左边,乘式#2)->x(乘式#2,)...
        ->入口(_左边,_项)...
    ->+合并乘式(+未知数,_项)->+的(_操作,+合并乘式)
}




## end
#855, 101:
"""
Nini, 打开词典的条目(节点)

"""

+拆括号(,_项)->+[del](,+拆括号)...

->场景(+拆括号,_场景)...
    ->+[公式结构拆括号](_场景,_项)


## end
#857, 271:
"""


"""

+移到右边(=,_项)->+[del](,+移到右边)...

->场景(+移到右边,_场景)->=(,_位置)...

->+[公式结构提取]"乘式"(_场景,_项):
    ->[is](_项,0),
    ->-(,_项)->+[公式结构插入]"+"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"-"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#859, 321:
"""


"""

+除到左边2(=,_项)->+[del](,+除到左边2)...

->场景(+除到左边2,_场景)->=(_位置,)...
->+[公式结构提取]"和式"(_场景,_项)...

->+的#0(+括号,)->+的(_场景,+的#0)->+的(_场景,+括号)...
->+[右连](+的#0,_项):
    ->/(,_项)->+[公式结构插入]"/"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"*"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#862, 180:
"""
记住"Python"

"""

if n[0]<0:
    state=True
    n=-n[0]
    if n.is_integer():
        n=int(n)
else:
    n=n[0]
    if n.is_integer():
        n=int(n)
    state=False

ans=n


## end
#864, 3:
929
## end
#867, 638:
<!--
+[修改天使]
+[H函数](,运算测试)

保存:...
(有公式结构系列操作的用法)
测试公式结构系列操作:...
测试整理乘式:...
语句操作:...
描述公式:...
+[新建阅读窗口](,语句操作)
-->

%[1].
%[2].


<!--
[1].:
式(1)转换为"表达式"
更新式(1)
将"\frac{c+d}{b}*a+a=0"记作为式(1)
将"C*x*x^2/x^4/D=A+B"记作为式(1)
将"a*x*x+x*b*x=0"记作为式(1)
从式(1)中, 提取和式"_x+a"

根据变量"x", 整理一下式(1)

的([1].,表达式)->的(表达式,起点)->起点(,_b)->+[分式演算](_b,+x)->+[del](,+x)...
->+场景(+[分式演算],表达式)->+[del](,+场景)

的([1].,表达式)->的(表达式,=)->=(_b,)...
->+[.]([公式描述],+和式)->[公式描述](_b,+[x])->+[del](,+和式)...
=>的(+和式,乘式)->入口(乘式,_x)=>[说](,_x)


的([1].,表达式)->的(表达式,起点)->起点(,_b)->+[算式]"LaTeX"(_b,+[消息窗口])
的([1].,表达式)->的(表达式,负号)->+[显示](,负号)
的([1].,表达式)->+[显示星图](,表达式)
+[H函数](,运算测试)
-->
## end
#868, 343:
"""
操作:...

"""

+加括号n次方(,_项)->+[del](,+加括号n次方)...
->的(加括号n次方,操作)...

->场景(+加括号n次方,_场景)...
->+[structure](compiler,+场景)->+[del](,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_场景)...
->+[.](+[structure],+入口)->+入口(,_项)->+[del](,+入口):

    ->.(+加括号n次方,)->+[.]"类型"(+[structure],.),
    ->+[.](+[structure],+类型)->+类型"和式"->+[del](,+类型)

## end
#870, 440:
"""


"""

+左和右和(_左边,_右边)...
->[说]"左和右和情况"...

->操作(+左和右和,_操作)...
->入口(_左边,_x1)->入口(_右边,_x2)->=(_x1,)...
->[]{
    []=>的(_左边,乘式)->乘式=>入口(乘式,_类型)->_类型(,_项)->_项->[]:
        ->x(乘式,)->[is](_项,括号)->括号->内容(_类型,和式)...
            ->+拆括号(+占位,_项)->+的(_操作,+拆括号),
        ->x(乘式,),
        ->+移到右边(=,_项)->+的(_操作,+移到右边)
}...

->[]{
    []=>的(_右边,乘式)->乘式=>入口(乘式,_类型)->_类型(,_项)->_项->[]:
        ->x(乘式,)->+移到左边(=,_项)->+的(_操作,+移到左边),
        ->[]
}





## end
#872, 324:
"""
结构描述:...

"""

+整理左边乘式(=,_项)->+[del](,+整理左边乘式)...
->的(整理左边乘式,结构描述)...

->场景(+整理左边乘式,_场景)->=(_位置,)...

->+操作([想],)->+[del](,+操作)...
    ->+[code]([想],结构描述)->[想](,_位置)...
->[]{
    []=>的(+操作,消除系数)->消除系数(,_a)->_a(,)...
    =>+[公式结构提取]"项"(_场景,_a)->+[del](,_a)
}...

->+[整理乘式结构](_项,_位置)->+场景(+[整理乘式结构],_场景)->+[del](,+场景)





## end
#875, 106:
"""
库:...

"""
+公式特征描述(_类型,_项)->的(公式特征描述,库)...

->的(库,_条目)->[eq](_条目,_类型)...
->+[code]([想],_条目)->[想](,_项)

## end
#880, 642:
"""
结构描述:...
操作库:...


"""
+整理和式结构(_变量,_和式)->+[del](,+整理和式结构)...
->的(整理和式结构,结构描述)...
->的(整理和式结构,操作库)->的(操作库,合并乘式)...

->场景(+整理和式结构,_表达式)...
->+操作([想],)->+[code]([想],结构描述)->[想](_变量,_和式)...
    ->+[del](,+操作)...

->[]{
    []=>的(+操作,系数1)->系数1(_x,)->_x(,)...
    =>+[公式结构插入]"*"(+1,_x)->+场景(+[公式结构插入],_表达式)->+[del](,+场景)...
        ->+[有](_表达式,+1)
}...

->[]{
    []=>的(+操作,合并)->合并(_项0,_x)->_项0->_x(,)...
        =>+[做](_项0,_x)->+[code](+[做],合并乘式)->+[.](+[做],_表达式)...
        ->+包括(+[做],)->+变量(+[做],)->[]{
            []&:=>包括(合并,_y)->_y=>+的(+包括,_y)->+[del](,+的),
            =>变量(合并,_y2)->_y2=>+的(+变量,_y2)->+[del](,+的)
        }->+[del](,+包括)
}

## end
#882, 395:
"""
和式整理:...
+[新建阅读窗口](,和式整理)

"""
+结构描述(_变量,_和式)...
->的(结构描述,和式整理)...

->操作(+结构描述,)...
->+[.]([公式描述],+和式)->[公式描述](_和式,_变量)->+入口(+和式,_和式)...
->+操作([想],操作)->+[code]([想],和式整理)->[想](,+和式)...

->分类(+和式,)...
    =>类别(分类,_x)=>起点(类别,乘式#0)->入口(乘式#0,_类型0)->_类型0(,_项0)...
    ->+合并(_项0,_x)->+的(操作,+合并)&:
        =>包括(类别,乘式#1)=>入口(乘式#1,_类型1)->_类型1(,_项1)->+包括(+合并,_项1),
        =>变量(类别,_x2)=>+变量(+合并,_x2)



## end
#884, 379:
"""

        

"""

+和式整理(,和式)...

->操作(+和式整理,_操作)->+分类(和式,)...
=>的(和式,乘式)=>[]:
->[]{
    的(乘式,x)->x(,_x)...
    ->[]{
        []{[]=>的(乘式,_项)->_项=>结尾(乘式,_项)}:->+系数1(_x,)->+的(_操作,+系数1),->>[]
    }...
    ->[]:
        ->类别(+分类,_x0)->_x0->+模板结构([公式结构匹配],_x0)->+[.]([公式结构匹配],+项)...
            ->[公式结构匹配](_x,+输出)->+包括(类别,乘式)->+变量(类别,_x),
        ->+类别(+分类,_x)->+起点(+类别,乘式)
},->[]


## end
#886, 13:

合并乘式:...




## end
#888, 443:
"""
操作:...
Nini, 打开词典的条目(节点)
+[新建阅读窗口](,操作)

"""

+合并乘式(_项0,_x)->+[del](,+合并乘式)...
->的(合并乘式,操作)...

->包括(+合并乘式,)->变量(+合并乘式,)...
->.(+合并乘式,_式子)...

->的(包括,)...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_式子)...
->+[.](+[structure],包括)->+[.](+[structure],变量)...
->+[.](+[structure],+入口)->+入口(,_项0)->+[del](,+入口)...
->+[.](+[structure],+变量0)->+变量0(,_x)->+[del](,+变量0)...
    ->+[删除结构](,+场景)->+[del](,+场景)


## end
#890, 542:
"""


"""

入口(,_项0)->+[公式结构加括号]"乘式"(式子,_项0);
入口(,_项0)->的(括号,_项0)->+括号(,括号);

式子->包括=>的(包括,_a)...
=>+[公式结构提取]"乘式"(式子,_a):
    ->-(,_a)->+负号(_a,),
    ->+(,_a)->+正号(_a,), ->[];

入口(,_项0)->式子->包括=>的(包括,_a)...
=>+[公式结构插入]"+"(_a,_项0)->+场景(+[公式结构插入],式子)->+[del](,+场景):
    ->负号(_a,)->+[del](,负号)->[m_text]"-"(,+[公式结构插入]),
    ->正号(_a,)->+[del](,正号)->[m_text]"+"(,+[公式结构插入]), ->[];

式子->变量=>的(变量,_a)...
=>+[公式结构提取]"项"(式子,_a);

式子->变量0(,_x)->+[公式结构提取]"项"(式子,_x);

式子->变量0(,_x)->括号#0(,括号)...
->+[公式结构插入]"*"(_x,括号)->+场景(+[公式结构插入],式子)->+[del](,+场景);




## end
#909, 3:
974
## end
#912, 434:
"""


"""

+整理乘式(_左边,_右边)...

->操作(+整理乘式,_操作)...
->入口(_左边,_x1)...
->[]{
    []=>的(_左边,乘式)->乘式=>入口(乘式,_类型)->_类型(,_项)->_项(,)...
    ->[]{
        []:->[is](_项,括号)->括号->内容(_类型,和式)...
            ->+拆括号(+占位,_项)->+的(_操作,+拆括号),
        ->[]}...
    =>的(乘式,x)->x(,括号)=>+拆括号(+占位,括号)->+的(_操作,+拆括号)
}...

->[]{
    []=>的(_左边,乘式)->乘式=>[]:
        ->的(乘式,x)->入口(乘式,_入口)->_入口(,_位置)...
            ->+整理乘式(+未知数,_位置)->+的(_操作,+整理乘式),
        ->[]
}


## end
#914, 48:
"""


"""

+合并乘式(_左边,_右边)...

->操作(+合并乘式,_操作)



## end
#916, 532:
<!--
+[修改天使]
+[H函数](,运算测试)

保存:...
(有公式结构系列操作的用法)
测试公式结构系列操作:...
测试整理乘式:...
测试整理和式:...
语句操作:...
描述公式:...
+[新建阅读窗口](,语句操作)
-->

%[1].
%[2].


<!--
[1].:
式(1)转换为"表达式"
更新式(1)
将"\frac{c+d}{b}*a+a=0"记作为式(1)
将"C*x*x^2/x^4/D=A+B"记作为式(1)
将"-x^2+b*x^2=0"记作为式(1)
从式(1)中, 提取和式"_x+a"

根据变量"x", 整理一下式(1)


的([1].,表达式)->的(表达式,起点)->起点(,_x)->+[整理和式结构](+x,_x)->+[del](,+x)...
->+场景(+[整理和式结构],表达式)->+[del](,+场景)

的([1].,表达式)->的(表达式,起点)->起点(,_b)->+[算式]"LaTeX"(_b,+[消息窗口])
的([1].,表达式)->的(表达式,负号)->+[显示](,负号)
的([1].,表达式)->+[显示星图](,表达式)
+[H函数](,运算测试)
-->
## end
#917, 334:
"""
结构描述:...
+[复制结构](,结构描述)

"""

+整理乘式(,_位置)->+[del](,+整理乘式)...
->的(整理乘式,结构描述)...

->场景(+整理乘式,_场景)->未知数(+整理乘式,_项)...

->+操作([想],)->+[del](,+操作)...
    ->+[code]([想],结构描述)->[想](,_位置)...
->[]{
    []=>的(+操作,消除系数)->消除系数(,_a)->_a(,)...
    =>+[公式结构提取]"项"(_场景,_a)->+[del](,_a)
}...

->+[整理乘式结构](_项,_位置)->+场景(+[整理乘式结构],_场景)->+[del](,+场景)


## end
#940, 906:
"""


"""

+函数(_式,_x)...

->."结构"(+函数,_结构)->."类型"(+函数,函数#0)...
->[]{
    []:->^(_式,_和式)->_和式(,)...
        ->+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+和式)...
        ->[公式描述_结构](_和式,_x)...
    ->+的(_结构,+和式)->[]{
        []:->x(+和式,)->+fx(函数#0,_式)->+因为(x,+fx)->+[o](+函数,+fx)...
            ->+^(函数#0,+和式)...
            ->+的(_结构,+fx)->+的(_结构,+^)->+的(_结构,+因为),
        ->[]
    }, ->[]
}...

->输入(_式,)->[]{
    []=>的(输入,_变量)->_变量(,)...
        =>+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+和式)...
        ->[公式描述_结构](_变量,_x)...
    ->+输入(函数#0,+和式)->+的(_结构,+输入)->+的(_结构,+和式)->[]{
        []:->o(+函数,),
        ->x(+和式,)->+fx(函数#0,_式)->+[o](+函数,+fx)...
            ->+因为(x,+fx)->+的(_结构,+因为)->+的(_结构,+fx),
        ->fx(+和式,)->+fx(函数#0,_式)->+[o](+函数,+fx)...
            ->+因为(fx,+fx)->+的(_结构,+因为)->+的(_结构,+fx),
        ->[]
    }
}...

->[]{
    []:->o(+函数,),
    ->+C(函数#0,_式)->+[o](+函数,+C)->+的(_结构,+C)
}



## end
#942, 935:
"""


"""

+根式(_式,_x)...

->."结构"(+根式,_结构)->."类型"(+根式,根式#0)...
->[is](_式,根式)->根式(,_和式0)...
->+[.]"结构"([公式描述_结构]#0,_结构)->+[.]"类型"([公式描述_结构]#0,+和式)...
->[公式描述_结构]#0(_和式0,_x)...
->+的(_结构,+和式)->[]{
    []:->^(_式,_和式)->_和式(,)...
        ->+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+和式#1)...
        ->[公式描述_结构](_和式,_x)...
    ->+的(_结构,+和式#1)->[]{
        []:->x(+和式#1,)->+fx(根式#0,_式)->+因为(x,+fx)->+[o](+根式,+fx)...
            ->+内容(根式#0,+和式)->+^(根式#0,+和式#1)...
            ->+的(_结构,+fx)->+的(_结构,+内容)->+的(_结构,+^)->+的(_结构,+因为),
        ->[]
    }, ->[]
}...

->[]{
    []:->o(+根式,),
    ->x(+和式,)->+x(,_式)->+[o](+根式,+x)->+内容(根式#0,+和式)...
        ->+因为(x,+x)->+的(_结构,+因为)->+的(_结构,+x)->+的(_结构,+内容),
    ->fx(+和式,)->+fx(,_式)->+[o](+根式,+fx)->+内容(根式#0,+和式)...
        ->+因为(fx,+fx)->+的(_结构,+因为)->+的(_结构,+fx)->+的(_结构,+内容),
    ->[]
}...

->[]{
    []:->o(+根式,),
    ->+C(,_式)->+[o](+根式,+C)->+内容(根式#0,+和式)...
        ->+的(_结构,+C)->+的(_结构,+内容)
}



## end
#945, 1433:
"""


"""
+处理分式(_左边,_右边)...
->[说]"处理一下分式"...
->处理分式->的(左乘右常,处理分式)->的(左乘右常,移动系数)...

->操作(+处理分式,_操作)...
->入口(_左边,_x1)->入口(_右边,_x2)->=(_x1,)...

->[]{
    的(_左边,乘式)->乘式=>的(乘式,_re)->_re"x|fx"(,分式)...
    =>+剔除分式(+占位,分式)->+的(_操作,+剔除分式)...

    ->分母(_re,和式#1)->入口(和式#1,_n1)->[]{
        []{x(和式#1,)}:
        ->[]{
            []{[]=>的(和式#1,乘式#1)->乘式#1=>结尾(和式#1,乘式#1)}:
            ->的(和式#1,乘式#1)=>的(乘式#1,_C)->_C(,_项)=>[]{
                []:->[is](_C,C)->C->+除到右边(=,_项)->+的(_操作,+除到右边),
                ->+乘到左边(=,_项)->+的(_操作,+乘到左边)
            },
            ->>+乘到左边2(=,_n1)->+的(_操作,+乘到左边2)
            
        },
        ->>[]{
            []{[]=>的(和式#1,乘式#1)->乘式#1->的(乘式#1,_m1)...
                    =>结尾(和式#1,乘式#1)->结尾(乘式#1,_m1)}:
            ->+除到右边(=,_n1)->+的(_操作,+除到右边),
            ->>+除到右边2(=,_n1)->+的(_操作,+除到右边2)
        }
    }...

    ->分子(_re,和式#2)->入口(和式#2,_n2)->[]{
        []{x(和式#2,)}:
        ->[]{
            []{[]=>的(和式#2,乘式#2)->乘式#2=>结尾(和式#2,乘式#2)}:
            ->的(和式#2,乘式#2)=>的(乘式#2,_C)->_C(,_项)=>[]{
                []:->[is](_C,C)->C->+乘到右边(=,_项)->+的(_操作,+乘到右边),
                ->+除到左边(=,_项)->+的(_操作,+除到左边)
            },
            ->>+除到左边2(=,_n2)->+的(_操作,+除到左边2)
        },
        ->>[]{
            []{[]=>的(和式#2,乘式#2)->乘式#2->的(乘式#2,_m2)...
                    =>结尾(和式#2,乘式#2)->结尾(乘式#2,_m2)}:
            ->+乘到右边(=,_n2)->+的(_操作,+乘到右边),
            ->>+乘到右边2(=,_n2)->+的(_操作,+乘到右边2)
        }
    }
}





## end
#947, 718:
"""


"""
+移动系数(_左边,_右边)...

->操作(+移动系数,_操作)...
->入口(_左边,_x1)->入口(_右边,_x2)->=(_x1,)...


->[]{
    []:->[]{的(_左边,乘式)->乘式->的(乘式,x#1)->的(乘式,x#2)=>[is](x#1,x#2)}...
        ->+整理左边乘式(=,_x1)->+的(_操作,+整理左边乘式),
    ->[]
}...

->[]{
    []->的(_左边,乘式)->乘式=>的(乘式,x)->x(,_项)->_项(,)=>[]:
        ->[is](_项,括号)->括号(,)...
        ->[]{
            []:->[]{内容(x,和式)->和式=>的(和式,_项1)=>结尾(和式,_项1)}...
                ->+拆括号(+占位,括号)->+的(_操作,+拆括号),
            ->[]
        }, ->[]
}...

->[]{
    []=>的(_左边,乘式)->乘式->的(乘式,C)->C(,_项)->_项(,)...
        =>+乘到右边(=,_项)->+的(_操作,+乘到右边)
}...

->[]{
    []:->[]{[]&:->的(_右边,乘式)->乘式=>结尾(_右边,乘式),
                ->的(_左边,乘式#2)->乘式#2->的(乘式#2,C)}...
        ->+加括号(+占位,_x2)->+的(_操作,+加括号),
    ->[]
}

## end
#949, 672:
"""
库:...
+[新建阅读窗口](,库)

"""

+n次方(,_项)->+[del](,+n次方)...
->n次方->的(库#0,n次方)->的(n次方,库)...
->的(库#0,加括号n次方)...

->场景(+n次方,_场景)...
->[]{
    []:->[is](_项,分式)->分式(,)...
        ->+[做](,_项)->+[code](+[做],加括号n次方)...
        ->+场景(+[做],_场景)->+[del](,+场景)->+[.]"项"(+[做],),
    ->[is](_项,根式)->根式(,)...
        ->+[做](,_项)->+[code](+[做],加括号n次方)...
        ->+场景(+[做],_场景)->+[del](,+场景)->+[.]"项"(+[做],),
    ->[is](_项,0)->0,
    ->[is](_项,1)->1,

    ->^(_项,)->的(库,更新指数)->更新指数(,)...
        ->+[做](_场景,_项)->+[code](+[做],更新指数),
    ->[is](_项,_re)->_re"^[0-9\.]+$"->的(库,数字n次方)->数字n次方(,)...
        ->+[做](_场景,_项)->+[code](+[做],数字n次方),

    ->+^(_项,+3)->+3"3"->+的(_场景,+^)->+的(_场景,+3)
}


## end
#950, 186:
"""


"""

+去根式(,根式)->+[del](,+去根式)...

->场景(+去根式,_场景)...
->根式(,_x)->+[修改标题]"括号"(,根式)->+[右连](根式,)...
    ->+的#1(根式,_x)->+的(_场景,+的#1)...
->[]{
    []:->负号(根式,)->+[del](,负号),
    ->[]
}



## end
#952, 105:
"""
Nini, 打开词典的条目(节点)

"""

+加括号(,_项)->+[del](,+加括号)...

->场景(+加括号,_场景)...
    ->+[公式结构加括号]"和式"(_场景,_项)


## end
#955, 151:
"""


"""


入口(,_项)->_项->+[公式结构加括号](式子,_项)...
    ->[m_text](类型,+[公式结构加括号]);

入口(,_项)->_项->的(括号,_项)...
    ->+^(括号,+3)->+3"3"->+的(式子,+^)->+的(式子,+3)




## end
#956, 321:
"""


"""

+除到右边2(=,_项)->+[del](,+除到右边2)...

->场景(+除到右边2,_场景)->=(,_位置)...
->+[公式结构提取]"和式"(_场景,_项)...

->+的#0(+括号,)->+的(_场景,+的#0)->+的(_场景,+括号)...
->+[右连](+的#0,_项):
    ->/(,_项)->+[公式结构插入]"/"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"*"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#959, 249:
"""
P代码:...

"""

+交换左右(_左边,_右边)->+[del](,+交换左右)...
->的(交换左右,P代码)...

->=(_左边,_右边)->+[左连](=,_右边)->+[右连](=,_左边)...
->[]{
    []:->起点(,_左边)->+[右连](起点,_右边),
    ->[]
}...

->+[python](Python,)->+[code](+[python],P代码)...
    ->+[o]"eq_op"(+[python],=)


## end
#961, 357:
"""


"""


if eq_op=='\\l ':
    eq_op='\\g '
elif eq_op=='\\g ':
    eq_op='\\l '
elif eq_op=='\\le ':
    eq_op='\\ge '
elif eq_op=='\\ge ':
    eq_op='\\le '
elif eq_op=='<':
    eq_op='>'
elif eq_op=='>':
    eq_op='<'
elif eq_op=='<=':
    eq_op='>='
elif eq_op=='>=':
    eq_op='<='
elif eq_op=='<<':
    eq_op='>>'
elif eq_op=='>>':
    eq_op='<<'


## end
#962, 4:
1032
## end
#964, 584:
"""


"""
+括号n次方(_左边,_右边)...

->操作(+括号n次方,_操作)...
->入口(_左边,_x1)->入口(_右边,_x2)->=(_x1,)...


->[]{
    []:->[]{的(_左边,乘式)->乘式->的(乘式,x#1)->的(乘式,x#2)=>[is](x#1,x#2)}...
        ->+整理左边乘式(=,_x1)->+的(_操作,+整理左边乘式),
    ->[]
}...

->[]{
    []->的(_左边,乘式)->乘式=>的(乘式,_类型)->_类型(,_项)->_项(,)...
    =>+n次方(+占位,_项)->+的(_操作,+n次方):
        ->[is](_类型,C)->+乘到右边(=,_项)->+的(_操作,+乘到右边),
        ->[]
}...

->[]{
    []:->[]{[]&:->的(_右边,乘式)->乘式=>结尾(_右边,乘式)}...
        ->+加括号n次方(+占位,_x2)->+的(_操作,+加括号n次方),
    ->的(_右边,乘式)->乘式=>的(乘式,_C)->_C(,_项)->_项(,)...
        =>+n次方(+占位#2,_项)->+的(_操作,+n次方),
    ->[]
}

## end
#966, 503:
"""


"""

+乘到右边2(=,_项)->+[del](,+乘到右边2)...

->场景(+乘到右边2,_场景)->=(,_位置)...
->+[公式结构提取]"和式"(_场景,_项)...

->+的#0(+括号,)->+的(_场景,+的#0)->+的(_场景,+括号)...
->+[右连](+的#0,_项):
    ->/(,_项)->+[公式结构插入]"*"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->[is](_项,分式)->的(分式,分子)->分子(,_分子)...
        ->的(分式,分母)->分母(,_分母)->+[右连](分子,_分母)->+[右连](分母,_分子)...
        ->+[公式结构插入]"*"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"/"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#968, 503:
"""


"""

+乘到左边2(=,_项)->+[del](,+乘到左边2)...

->场景(+乘到左边2,_场景)->=(_位置,)...
->+[公式结构提取]"和式"(_场景,_项)...

->+的#0(+括号,)->+的(_场景,+的#0)->+的(_场景,+括号)...
->+[右连](+的#0,_项):
    ->/(,_项)->+[公式结构插入]"*"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->[is](_项,分式)->的(分式,分子)->分子(,_分子)...
        ->的(分式,分母)->分母(,_分母)->+[右连](分子,_分母)->+[右连](分母,_分子)...
        ->+[公式结构插入]"*"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"/"(+括号,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#971, 141:
"""


"""

+剔除分式(,分式)->+[del](,+剔除分式)...

->场景(+剔除分式,_场景)...

->+[公式结构提取]"项"(_场景,分式)...
->的(分式,分子)->的(分式,分母)->+[删除结构](,分式)->+[del](,分式)






## end
#972, 463:
"""


"""

+乘到左边(=,_项)->+[del](,+乘到左边)...

->场景(+乘到左边,_场景)->=(_位置,)...

->+[公式结构提取]"项"(_场景,_项):
    ->[is](_项,1)->+[del](,1),
    ->/(,_项)->+[公式结构插入]"*"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->[is](_项,分式)->的(分式,分子)->分子(,_分子)...
        ->的(分式,分母)->分母(,_分母)->+[右连](分子,_分母)->+[右连](分母,_分子)...
        ->+[公式结构插入]"*"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"/"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#974, 463:
"""


"""

+乘到右边(=,_项)->+[del](,+乘到右边)...

->场景(+乘到右边,_场景)->=(,_位置)...

->+[公式结构提取]"项"(_场景,_项):
    ->[is](_项,1)->+[del](,1),
    ->/(,_项)->+[公式结构插入]"*"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->[is](_项,分式)->的(分式,分子)->分子(,_分子)...
        ->的(分式,分母)->分母(,_分母)->+[右连](分子,_分母)->+[右连](分母,_分子)...
        ->+[公式结构插入]"*"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"/"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#976, 282:
"""


"""

+除到右边(=,_项)->+[del](,+除到右边)...

->场景(+除到右边,_场景)->=(,_位置)...

->+[公式结构提取]"项"(_场景,_项):
    ->[is](_项,1)->+[del](,1),
    ->/(,_项)->+[公式结构插入]"/"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"*"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#978, 282:
"""


"""

+除到左边(=,_项)->+[del](,+除到左边)...

->场景(+除到左边,_场景)->=(_位置,)...

->+[公式结构提取]"项"(_场景,_项):
    ->[is](_项,1)->+[del](,1),
    ->/(,_项)->+[公式结构插入]"/"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景),
    ->+[公式结构插入]"*"(_项,_位置)...
        ->+场景(+[公式结构插入],_场景)->+[del](,+场景)


## end
#985, 44:

更新指数:...
数字n次方:...
+[修改标题]"数字n次方"(,数字平方)



## end
#987, 501:
"""
结构描述:...
操作库:...
+[新建阅读窗口](,结构描述)

"""

+更新指数(_式子,_项)->+[del](,+更新指数)...
->的(更新指数,结构描述)->的(更新指数,操作库)...

->^(_项,_指数)...
->+操作([想],)->+[del](,+操作)...
    ->+[code]([想],结构描述)->[想](_项,_指数)...

->[]{
    []=>的(+操作,_操作)->_操作=>[说](,_操作)->[]:
        ->[is](_操作,_操作1)->_操作1(_主语,_宾语)->_主语->_宾语(,)...
            ->的(操作库,_条目)->_条目->[eq](_操作,_条目)...
            ->+[做](_主语,_宾语)->+[code](+[做],_条目)...
            ->+场景(+[做],_式子)->+[del](,+场景)...
            ->+未知数(+[做],_变量)->+[del](,+未知数),
        ->[]
}



## end
#989, 324:
"""


"""

+结构描述(_项,_指数)...

->操作(+结构描述,)->[]{
    []:->[]{_re"[+\-]"(_指数,)}...
        ->+加括号倍数(_项,_指数)->+的(操作,+加括号倍数),
    ->[]{[is](_指数,1)->/(1,3)=>_re"[*/]"(3,)}...
        ->+消除指数(_项,_指数)->+的(操作,+消除指数),
    ->[]{[is](_指数,_re)->_re"-?[\d\.]+"}...
        ->+数字倍数(_项,_指数)->+的(操作,+数字倍数),
    ->+倍数(_项,_指数)->+的(操作,+倍数)
}



## end
#991, 39:


加括号倍数:...
数字倍数:...
倍数:...
消除指数:...



## end
#993, 190:
"""


"""

+加括号倍数(_项,_指数)->+[del](,+加括号倍数)...

->场景(+加括号倍数,_式子)...
->^(_项,_指数)->+*(+3,+括号)->+3"3"->+的#0(+括号,_指数)...
    ->+的(_式子,+*)->+的(_式子,+3)->+的(_式子,+括号)->+的(_式子,+的#0)...
->+[右连](^,+3)


## end
#995, 214:
"""
P代码:...

"""

+数字倍数(_项,_指数)->+[del](,+数字倍数)...
->的(数字倍数,P代码)...

->+[标题](_指数,)...
->+[python](Python,+[修改标题])->+[修改标题](,_指数)...
->+[code](+[python],P代码)...
->+[.]"n"(+[python],+[标题])->+[o]"n2"(+[python],_指数)



## end
#997, 64:
"""


"""

n=3*n[0]
if n.is_integer():
    n=int(n)
ans=n
n2=n


## end
#999, 136:
"""


"""

+倍数(_项,_指数)->+[del](,+倍数)...

->场景(+倍数,_式子)...
->^(_项,_指数)->+*(+3,_指数)->+3"3"->+[右连](^,+3)...
    ->+的(_式子,+*)->+的(_式子,+3)



## end
#1008, 4:
1067
## end
#1011, 185:
"""
P代码:...

"""

+数字n次方(,_项)->+[del](,+数字n次方)...
->的(数字n次方,P代码)...

->+[标题](_项,)...
->+[python](Python,+[修改标题])->+[修改标题](,_项)...
->+[code](+[python],P代码)...
->+[.]"n"(+[python],+[标题])

## end
#1013, 79:
"""
记住"Python"

"""

n=n[0]
if n.is_integer() and n<6:
    n=int(n**3)
ans=n



## end
#1014, 879:
"""


"""
+根式平方(_左边,_右边)...

->操作(+根式平方,_操作)...
->入口(_左边,_x1)->入口(_右边,_x2)->=(_x1,)...


->[]{
    []:->[]{的(_左边,乘式)->乘式->的(乘式,x#1)->的(乘式,x#2)=>[is](x#1,x#2)}...
        ->+整理左边乘式(=,_x1)->+的(_操作,+整理左边乘式),
    ->[]
}...

->[]{
    []->的(_左边,乘式)->乘式=>的(乘式,x)->x(,_项)->_项(,)=>[]:
        ->[is](_项,根式)->根式(,)...
            ->[]{
                []:->[]{内容(x,和式)->和式=>的(和式,_项1)=>结尾(和式,_项1)}...
                    ->+拆括号(+占位,根式)->+的(_操作,+拆括号),
                ->[]
            }->+去根式(+占位,_项)->+的(_操作,+去根式),
        ->+平方(+占位#2,_项)->+的(_操作,+平方)
}...

->[]{
    []->的(_左边,乘式)->乘式=>的(乘式,C)->C(,_项)->_项(,)...
        =>+平方(+占位,_项)->+的(_操作,+平方)...
        ->+乘到右边(=,_项)->+的(_操作,+乘到右边)
}...

->[]{
    []:->[]{[]&:->的(_右边,乘式)->乘式=>结尾(_右边,乘式)}...
        ->+加括号平方(+占位,_x2)->+的(_操作,+加括号平方),
    ->的(_右边,乘式)->乘式=>的(乘式,_C)->_C(,_项)->_项(,)...
        =>+平方(+占位#2,_项)->+的(_操作,+平方),
    ->[]
}

## end
#1016, 80:
"""
记住"Python"

"""

n=n[0]
if n.is_integer() and n<10:
    n=int(n**2)
ans=n



## end
#1018, 182:
"""
P代码:...

"""

+数字平方(,_项)->+[del](,+数字平方)...
->的(数字平方,P代码)...

->+[标题](_项,)...
->+[python](Python,+[修改标题])->+[修改标题](,_项)...
->+[code](+[python],P代码)...
->+[.]"n"(+[python],+[标题])

## end
#1019, 129:
"""


"""

+倍数(_项,_指数)->+[del](,+倍数)...

->场景(+倍数,_式子)...
->^(_项,_指数)->+*(+2,_指数)->+[右连](^,+2)...
    ->+的(_式子,+*)->+的(_式子,+2)



## end
#1020, 64:
"""


"""

n=2*n[0]
if n.is_integer():
    n=int(n)
ans=n
n2=n


## end
#1022, 211:
"""
P代码:...

"""

+数字倍数(_项,_指数)->+[del](,+数字倍数)...
->的(数字倍数,P代码)...

->+[标题](_指数,)...
->+[python](Python,+[修改标题])->+[修改标题](,_指数)...
->+[code](+[python],P代码)...
->+[.]"n"(+[python],+[标题])->+[o]"n2"(+[python],_指数)
## end
#1023, 190:
"""


"""

+加括号倍数(_项,_指数)->+[del](,+加括号倍数)...

->场景(+加括号倍数,_式子)...
->^(_项,_指数)->+*(+2,+括号)->+2"2"->+的#0(+括号,_指数)...
    ->+的(_式子,+*)->+的(_式子,+2)->+的(_式子,+括号)->+的(_式子,+的#0)...
->+[右连](^,+2)


## end
#1027, 31:


加括号倍数:...
数字倍数:...
倍数:...




## end
#1028, 237:
"""


"""

+结构描述(_项,_指数)...

->操作(+结构描述,)->[]{
    []:->[]{_re"[+\-]"(_指数,)}...
        ->+加括号倍数(_项,_指数)->+的(操作,+加括号倍数),
    ->[]{[is](_指数,_re)->_re"-?[\d\.]+"}...
        ->+数字倍数(_项,_指数)->+的(操作,+数字倍数),
    ->+倍数(_项,_指数)->+的(操作,+倍数)
}



## end
#1031, 501:
"""
结构描述:...
操作库:...
+[新建阅读窗口](,结构描述)

"""

+更新指数(_式子,_项)->+[del](,+更新指数)...
->的(更新指数,结构描述)->的(更新指数,操作库)...

->^(_项,_指数)...
->+操作([想],)->+[del](,+操作)...
    ->+[code]([想],结构描述)->[想](_项,_指数)...

->[]{
    []=>的(+操作,_操作)->_操作=>[说](,_操作)->[]:
        ->[is](_操作,_操作1)->_操作1(_主语,_宾语)->_主语->_宾语(,)...
            ->的(操作库,_条目)->_条目->[eq](_操作,_条目)...
            ->+[做](_主语,_宾语)->+[code](+[做],_条目)...
            ->+场景(+[做],_式子)->+[del](,+场景)...
            ->+未知数(+[做],_变量)->+[del](,+未知数),
        ->[]
}



## end
#1034, 22:

更新指数:...
数字平方:...




## end
#1036, 701:
"""
库:...
+[新建阅读窗口](,库)

"""

+平方(,_项)->+[del](,+平方)...
->平方->的(库#0,平方)->的(平方,库)...
->的(库#0,加括号平方)->的(库#0,去根式)...

->场景(+平方,_场景)...
->[]{
    []:->[is](_项,分式)->分式(,)...
        ->+[做](,_项)->+[code](+[做],加括号平方)...
        ->+场景(+[做],_场景)->+[del](,+场景)->+[.]"项"(+[做],),
    ->[is](_项,根式)->根式(,)...
        ->+[做](,_项)->+[code](+[做],去根式)...
        ->+场景(+[做],_场景)->+[del](,+场景),
    ->[is](_项,0)->0,
    ->[is](_项,1)->1,

    ->^(_项,)->的(库,更新指数)->更新指数(,)...
        ->+[做](_场景,_项)->+[code](+[做],更新指数),
    ->[is](_项,_re)->_re"^[0-9\.]+$"->的(库,数字平方)->数字平方(,)...
        ->+[做](_场景,_项)->+[code](+[做],数字平方),

    ->+^(_项,+2)->+2"2"->+的(_场景,+^)->+的(_场景,+2)
}->[]{
    []:->负号(_项,)->+[del](,负号),
    ->[]
}


## end
#1038, 151:
"""


"""


入口(,_项)->_项->+[公式结构加括号](式子,_项)...
    ->[m_text](类型,+[公式结构加括号]);

入口(,_项)->_项->的(括号,_项)...
    ->+^(括号,+2)->+2"2"->+的(式子,+^)->+的(式子,+2)




## end
#1040, 338:
"""
操作:...

"""

+加括号平方(,_项)->+[del](,+加括号平方)...
->的(加括号平方,操作)...

->场景(+加括号平方,_场景)...
->+[structure](compiler,+场景)->+[del](,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_场景)...
->+[.](+[structure],+入口)->+入口(,_项)->+[del](,+入口):

    ->.(+加括号平方,)->+[.]"类型"(+[structure],.),
    ->+[.](+[structure],+类型)->+类型"和式"->+[del](,+类型)

## end
#1043, 201:
"""


"""

+消除指数(_项,_指数)->+[del](,+消除指数)...

->场景(+消除指数,_场景)...
->^(_项,_指数)->/(_指数,3)...
    ->+[del](,^)->+[del](,3)->+[del](,/)->+[del](,_指数):

->[is](_项,括号)->+[公式结构拆括号](_场景,括号)->+[del](,括号),
->[]



## end
#1045, 158:
"""
乘式:...

"""

+结构描述(,_项)...
->的(结构描述,乘式)...

->操作(+结构描述,)...
->+系数->+[code]([想],乘式)->[想](+系数,_项)...

->[]{
    []=>的(+系数,1)->1=>+消除系数(,1)->+的(操作,+消除系数)
}


## end
#1047, 110:
"""


"""

+乘式(系数,_a)->乘式(,)...

->+的(系数,_a)->[]:
->_re"[*/]"(_a,_b)->_b->+[code]([想],乘式)->[想](系数,_b),
->[]



## end
#1048, 110:
"""


"""

+乘式(系数,_a)->乘式(,)...

->+的(系数,_a)->[]:
->_re"[*/]"(_a,_b)->_b->+[code]([想],乘式)->[想](系数,_b),
->[]



## end
#1050, 158:
"""
乘式:...

"""

+结构描述(,_项)...
->的(结构描述,乘式)...

->操作(+结构描述,)...
->+系数->+[code]([想],乘式)->[想](+系数,_项)...

->[]{
    []=>的(+系数,1)->1=>+消除系数(,1)->+的(操作,+消除系数)
}


## end
#1052, 4:
1061
## end
#1055, 794:
"""
+[返回目录](,乘式)

LaTeX::%[运算]%[项]
表达式::%[运算]%[项]
Matlab::.%[运算]%[项]

P代码:...

保存:...

"""

+乘式(_节点,_乘式)->+[del](,+乘式)...
->的(乘式,P代码)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],乘式)->+[del](,+动词)...

->+[项](_节点,+[临时文本]#0)...
->[]{
    []=>_re"[*/]|\\cdot |\\times "(_节点,_节点1)->_节点1(,)...
    =>+[乘式](_节点1,+[临时文本])->+[标题](_re,)->[]{
        []:->记忆"LaTeX"->[is](_re,*#0)->*#0(,)...
            ->[is](_节点1,_re#1)->_re#1"^[\d\.]+$"->+[修改内容]"\times "(,+[标题]),
        ->记忆"LaTeX"->[is](_re,*)->*->[==]"*"(,*)->+[修改内容]"\ "(,+[标题]),

        ->[==]"\cdot "(,_re)->+[修改内容](_re,+[标题]),
        ->[==]"\times "(,_re)->+[修改内容](_re,+[标题]),
        ->[]
    }->+[模板文本](+[临时文本]#m,+[增加内容])->+[增加内容](,+[临时文本]#0)...
    ->+[.]"[运算]"(+[模板文本],+[标题])->+[.]"[项]"(+[模板文本],+[临时文本])
}->+[增加内容](+[临时文本]#0,_乘式)







## end
#1056, 4:
1143
## end
#1059, 301:
<!--
+[H函数](,整体框架)
-->

%[1].



<!--
[1].:
将"f(x)=A\times A_1*B\cdot C"记作为式(1)

将"f(x)=\eqs{0,x<=0;
1/2,x=0;
1,otherwise}"记作为式(1)
输出代码:...
+[消息窗口](,输出代码)

的([1].,表达式)->+[算式结构转换]"Matlab"(表达式,+[消息窗口])
的([1].,表达式)->+[显示星图](,表达式)

的([1].,表达式)->的(表达式,方程组)->输入(方程组,)->的(输入,_项)->+[显示](,_项)
+[H函数](,整体框架)
-->
## end
#1061, 28:
f(x)=A\times A_{1}\ B\cdot C
## end
#1062, 25:
f(x)=A\times A_1*B\cdot C
## end
#1066, 838:
"""
+[显示](,记忆)
[==]"Python"(,记忆)

"""
+结构描述(_类型,_c)...

->+操作(+结构描述,)...
->[]{
    []:->[==]"Python"(,_类型)->[]{
        []:->[is](_c,方程组#0)->方程组#0->+的(+操作,+方程组2),
        ->=(_c,方程组)->方程组->+的(+操作,+方程组),

        ->=(_c,_c2)->_c2->输入(_c,)->[]{[]=>[is](_c,_re)->_re"矢量|矩阵"}...
        ->[]{
            []:->[]{[]&:=>_关联(_c2,),=>的(输入,_变量)->_变量->[eq](_变量,_c2)}...
                ->+的(+操作,+lambda函数2),
            ->+的(+操作,+lambda函数)
        }
    },
    ->[==]"Matlab"(,_类型)->[]{
        []:->[is](_c,方程组#0)->方程组#0->+的(+操作,+方程组2),
        ->=(_c,方程组)->方程组->+的(+操作,+方程组),

        ->=(_c,_c2)->_c2->输入(_c,)->[]{[]=>[is](_c,_re)->_re"矢量|矩阵"}...
        ->[]{
            []:->[]{[]&:=>_关联(_c2,),=>的(输入,_变量)->_变量->[eq](_变量,_c2)}...
                ->+的(+操作,+lambda函数2),
            ->+的(+操作,+lambda函数)
        }
    },
    ->+的(+操作,+算式#3)
}



## end
#1068, 68:
f(x)=[0,   x\le 0;
1,   otherwise]f(x)=[0,   x\le 0;
1,   otherwise]
## end
#1070, 87:


算式:...
方程组:...
方程组2:...
lambda函数:...
lambda函数2:...

将条目"lambda函数"复制为条目"lambda函数2"




## end
#1072, 250:
"""
结构描述:...
库:...
+[新建阅读窗口](,结构描述)
保存:...

"""

+算式结构转换(_结构,_输出)->+[del](,+算式结构转换)...
->的(算式结构转换,结构描述)...

->的(_结构,起点)->起点(,_c)...
->+[code]([想],结构描述)->[想](+算式结构转换,_c)...

->操作([想],)...
->+[修改内容](,记忆)->[m_text](+算式结构转换,+[修改内容])...
->+[算式](_c,_输出)



## end
#1074, 57:
"""


"""

+算式(_c,_输出)->+[del](,+算式)...
->+[算式](_c,_输出)


## end
#1076, 726:
"""
结构描述:...
库:...
+[新建阅读窗口](,结构描述)

"""

+方程组(_c,_输出)->+[del](,+方程组)...
->的(方程组,结构描述)...
->的(方程组,库)->的(库,生成代码)->的(库,生成代码_M)...

->+[code]([想],结构描述)->[想](_c,)...

->+的(+代码结构,+输出变量)->+[标题](_c,)->+[修改内容](+[标题],+输出变量)...

->操作([想],)...
->[]{
    []=>的(操作,情况)->情况=>内容(情况,_内容)...
    ->+的(+代码结构,+if)->+[和式](_内容,+if)->[]{
        []:->初次(操作,情况), ->+[修改标题]"elif"(,+if)
    }...
    =>条件(情况,_条件)->_条件=>+[等式](_条件,+cond)...
        ->+的(+if,+cond)->+判断(+cond,)->+[del](,+判断)
}...

->记忆->[]{
    []:->[==]"Matlab"(,记忆)->输入(_c,)->的(输入,_x)->+的(+代码结构,+输入变量)...
        ->+[标题](_x,)->+[修改内容](+[标题],+输入变量)...
        ->+[做](+代码结构,_输出)->+[code](+[做],生成代码_M),
    ->+[做](+代码结构,_输出)->+[code](+[做],生成代码)
}...

->+[删除结构](,+代码结构)->+[del](,+代码结构)



## end
#1078, 152:
"""
分类:...

"""

+结构描述(_c,)...
->的(结构描述,分类)...

->+操作(+结构描述,)...
->=(_c,方程组)->输入(方程组,)->+操作#0([想],+操作)...
    ->+初次([想],)->+[code]([想],分类)->[想](输入,)




## end
#1080, 254:
"""
一类:...

"""

+分类(输入,)...
->分类->的(分类,一类)...

->操作(+分类,_操作)...
    ->+的(_操作,+情况)->+情况([想],)->+[code]([想],一类)->[想](输入,)...
->[]{[]:->初次(+分类,)->+初次(_操作,+情况),->[]}...
->[]{
    []:->输入#1(输入,)->+操作([想]#1,_操作)->+[code]([想]#1,分类)->[想]#1(输入#1,),
    ->[]
}



## end
#1082, 126:
"""


"""
+一类(输入,)...

->情况(+一类,)...
->的(输入,_内容)->+内容(情况,_内容)...
->[]{
    []=>的(输入,_条件)->_条件{[]=>内容(情况,_条件)}=>+条件(情况,_条件)
}


## end
#1084, 49:

生成代码:...
生成代码_M:...
将条目"生成代码"复制为条目"生成代码_M"






## end
#1086, 1425:
"""
+[删除结构](,生成代码_M)

"""

+生成代码_M(代码结构,_输出)->+[del](,+生成代码_M)...

->的(代码结构,输出变量)->的(代码结构,输入变量)...

->+[临时文本]->[]{
    []:->的(代码结构,elif)->elif->的(elif,cond)->[==]"otherwise"(,cond)...
        ->+[模板文本]"%输出变量=%数值.*ones(size(%输入变量));"(,+[临时文本])...
        ->+[.](+[模板文本],输出变量)->+[.](+[模板文本],输入变量)...
        ->+[.]"数值"(+[模板文本],elif),
    ->+[模板文本]"%输出变量=zeros(size(%输入变量));"(,+[临时文本])...
        ->+[.](+[模板文本],输出变量)->+[.](+[模板文本],输入变量)
}...

->+[临时文本]#if->[]{
    的(代码结构,if)->if(,)...
        ->+[临时文本]#条件->[]{
            []=>的(if,cond)->cond=>+[增加内容]"%s & "(cond,+[临时文本]#条件)
        }->+[python]"ans=text_str[0:-3]"(Python,+[临时文本]#条件)...
        ->+[s]"text_str"(+[python],+[临时文本]#条件)...

    ->+[模板文本]"
%输出变量(%[条件])=%[操作];"(,+[临时文本]#if)...
        ->+[.](+[模板文本],输出变量)->+[.]"[操作]"(+[模板文本],if)...
        ->+[.]"[条件]"(+[模板文本],+[临时文本]#条件)
}...

->+[临时文本]#分支->[]{
    []=>的(代码结构,elif)->elif(,)...
        =>+[临时文本]#条件->[]{
            []=>的(elif,cond)->cond=>+[增加内容]"%s & "(cond,+[临时文本]#条件)
        }->+[python]"ans=text_str[0:-3]"(Python,+[临时文本]#条件)...
        ->+[s]"text_str"(+[python],+[临时文本]#条件)...

    ->[]:->的(elif,cond)->[==]"otherwise"(,cond),
    ->+[模板文本]"
%输出变量(%[条件])=%[操作];"(,+[增加内容2]#2)...
        ->+[增加内容2]#2(,+[临时文本]#分支)...
        ->+[.](+[模板文本],输出变量)->+[.]"[操作]"(+[模板文本],elif)...
        ->+[.]"[条件]"(+[模板文本],+[临时文本]#条件)
}...

->+[修改内容](+[临时文本],_输出)...
->+[增加内容](+[临时文本]#if,_输出)->+[增加内容](+[临时文本]#分支,_输出)


## end
#1087, 22:
elif %[条件]:
    %[操作]

## end
#1088, 26:
if %[条件]:
    %[操作]
%[分支]

## end
#1090, 938:
"""
记住"Python"
print(type_eq0,op_name,op_text)

"""

if type_eq0=='LaTeX':
    if op_name=='/':
        ans="%[项0]/%[项]"
    elif op_name=='*' and op_text=='\\cdot ':
        ans="%[项0]\\cdot %[项]"
    elif op_text=='\\times ':
        ans="%[项0]\\times %[项]"
    else:
        ans="%[项0]\ %[项]"

elif type_eq0=='LaTeX_times':
    ans="%[项0]\\times %[项]"

elif type_eq0=='Matlab':
    if op_name=='/':
        ans="%[项0]./%[项]"
    elif op_name=='*' and op_text=='\\cdot ':
        ans="sum(%[项0].*%[项])"
    elif op_text=='\\times ':
        ans="cross(%[项0],%[项])"
    else:
        ans="%[项0].*%[项]"

elif type_eq0=='Python':
    if op_name=='/':
        ans="%[项0]/%[项]"
    else:
        ans="%[项0]*%[项]"

else:
    if op_name=='/':
        ans="%[项0]/%[项]"
    elif op_name=='*' and op_text=='\\cdot ':
        ans="%[项0]\\cdot %[项]"
    elif op_text=='\\times ':
        ans="%[项0]\\times %[项]"
    else:
        ans="%[项0]*%[项]"


## end
#1092, 518:
"""
结构描述:...
+[新建阅读窗口](,结构描述)

"""
+去负号(负号,_d)->+[del](,+去负号)...
->的(去负号,结构描述)...

->+[code]([想],结构描述)->[想](负号,_d)->操作([想],)...
->[]{
    的(操作,_操作)->_操作->[说](,_操作):
        ->[is](_操作,负负得正)->负负得正(,负号#1)->负号#1(,)...
            ->+[del](,负号#1)->+[del](,负号),
        ->[is](_操作,添加负号)->添加负号(,_d0)->_d0(,)...
            ->+[右连](负号,_d0),
        ->[is](_操作,改变加减)->改变加减(,_符号)->_符号->+[del](,负号)...
            ->[]{
                []:->[is](_符号,-)->-->+[修改标题]"+"(,_符号),
                ->+[修改标题]"-"(,_符号)
            }
}



## end
#1094, 393:
"""
乘式头:...

"""

+结构描述(负号,_d)...
->的(结构描述,乘式头)...

->+[code]([想],乘式头)->[想](,_d)->头部([想],_d0)...

->+操作(+结构描述,)->[]{
    []:->_re"[+\-]"(,_d0)->+改变加减(,_re)->+的(+操作,+改变加减),
    ->[is](_d0,_d)->[]{
        []:->负号#1(_d,)->[]{[]=>[is](负号,负号#1)}...
            ->+负负得正(,负号#1)->+的(+操作,+负负得正),
        ->[]
    },
    ->负号#2(_d0,)->+负负得正(,负号#2)->+的(+操作,+负负得正),
    ->+添加负号(,_d0)->+的(+操作,+添加负号)
}




## end
#1096, 167:
"""


"""

+乘式头(,_d)->乘式头(,)...

->[]{
    []:->_re"[*/]"(_d1,_d)->_d1(,)...
        ->+[code]([想],乘式头)->[想](,_d1)->头部([想],_d0)->+头部(+乘式头,_d0),
    ->+头部(+乘式头,_d)
}



## end
#1098, 145:
+[删除结构](,测试结构)
+[显示星图](,测试结构)

a*b*(-c)
+*(+a,+b)->+*(+b,+c)->+负号(+c,)

-a*b*(-c)
+负号(a,)

1+a*b*(-c)
++(+1,+a)->+*(+a,+b)->+*(+b,+c)->+负号(+c,)


## end
#1099, 4:
1149
## end
#1102, 205:
"""
P代码:...

"""

+公式分析_代码(_公式,)...
->的(公式分析_代码,P代码)->的(P代码,函数定义)...

->+[code]([python]#0,函数定义)->[python]#0(Python,)...

->+[code]([python],P代码)->+[s]"code"([python],_公式)...
->[python](Python,+公式分析_代码)



## end
#1104, 268:
"""
函数定义(P函数):...
在函数定义中, 将"\(code,%[i]\)"替换为"(code,%[i],list_pt,pt)"
将函数定义的"\[False,i0,pt\]"替换为"[False,i0,None]"
+[修改天使]

函数定义有内容
+[设置结构](,函数定义)
函数定义的内容是什么
[python]"print('????')
state=True"(Python,)
记住"Python"
print(code)

"""

ans=formula_parser(code)
state=True



## end
#1106, 15693:
"""
+[P函数](,函数定义)
def term_var_token
list_in
<<
\pi

"""

import re
from body.bone import NetP
from tools import tools_basic


"""
a-z
测试word_pat_token:...

"""


def eqn_token(code,i,list_pt=None):
    i0=i
    pt=None
    [state,i,pt]=sum_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]

    [state,i,text]=op_eq_token(code,i,list_pt)
    if state==False:
        return [True,i,pt]

    [state,i,pt2]=eqn_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]

    pt_eq=NetP('等于',text).con(pt,pt2)
    list_pt.append(pt_eq)
    return [True,i,pt]



def sum_token(code,i,list_pt=None):
    i0=i
    pt=None

    [sign,i,text]=word_pat_token(code,i,'-|\+-|-\+')
    [state,i,pt]=tim_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]

    if sign==True:
        pt_sign=NetP('负号',text).con(pt,None)
        list_pt.append(pt_sign)

    [state,i,text]=op_add_token(code,i,list_pt)
    if state==False:
        return [True,i,pt]

    [state,i,pt2]=sum_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]

    pt_add=NetP('加减',text).con(pt,pt2)
    list_pt.append(pt_add)

    return [True,i,pt]


def tim_token(code,i,list_pt=None):
    i0=i
    pt=None
    [state,i,pt]=term_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]

    [state,i,text]=op_mul_token(code,i,list_pt)
    if state==False:
        return [True,i,pt]

    [state,i,pt2]=tim_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]

    pt_mul=NetP('乘除',text).con(pt,pt2)
    list_pt.append(pt_mul)
    return [True,i,pt]


def term_token(code,i,list_pt=None):
    i0=i
    pt=None

    [state,i,pt]=term_xxx_token(code,i0,list_pt)
    if state==False:
        [state,i,pt]=term_num_token(code,i0,list_pt)
        if state==False:
            [state,i,pt]=term_var_token(code,i0,list_pt)
    if state==False:
        return [False,i0,None]

    [state,i,text]=word_pat_token(code,i,'\\^')
    if state==True:
        [state,i,pt_power]=power_token(code,i,list_pt)
        if state==False:
            return[False,i0,None]
        pt_op=NetP('^').con(pt,pt_power)
        list_pt.append(pt_op)

    return [True,i,pt]


def power_token(code,i,list_pt=None):
    i0=i
    pt=None

    [state,i,text]=word_pat_token(code,i,'{')
    if state==True:
        [state,i,pt]=sum_token(code,i,list_pt)
        if state==False:
            return [False,i0,None]
        [state,i,text]=word_pat_token(code,i,'}')
        if state==False:
            return [False,i0,None]
        else:
            return [True,i,pt]

    [state,i,pt]=term_token(code,i0,list_pt)

    return [state,i,pt]


def term_xxx_token(code,i,list_pt=None):
    i0=i
    pt=None

    if code[i:i+1]=='(' or code[i:i+1]=='[' or code[i:i+1]=='{':
        [state,i,pt]=term_brck_token(code,i0,list_pt)
    elif code[i:i+5]=='\\left':
        [state,i,pt]=term_brck_token(code,i0,list_pt)
    elif code[i:i+5]=='\\frac':
        [state,i,pt]=term_frac_token(code,i0,list_pt)
    elif code[i:i+4]=='\\int':
        [state,i,pt]=term_int_token(code,i0,list_pt)
    elif code[i:i+4]=='\\sum':
        [state,i,pt]=term_sum_token(code,i0,list_pt)
    elif code[i:i+5]=='\\sqrt':
        [state,i,pt]=term_sqrt_token(code,i0,list_pt)
    elif code[i:i+3]=='\\p{':
        [state,i,pt]=term_part_token(code,i0,list_pt)
    elif code[i:i+3]=='\\d{':
        [state,i,pt]=term_diff_token(code,i0,list_pt)
    elif code[i:i+4]=='\\vec' or code[i:i+4]=='\\hat':
        [state,i,pt]=term_vec_token(code,i0,list_pt)
    elif code[i:i+4]=='\\mat':
        [state,i,pt]=term_mat_token(code,i0,list_pt)
    elif code[i:i+4]=='\\eqs':
        [state,i,pt]=term_eqs_token(code,i0,list_pt)
    else:
        return [False,i0,None]

    if state==False:
        return [False,i0,None]
    return [state,i,pt]


def term_frac_token(code,i,list_pt=None):
    i0=i
    pt=None

    [state,i,text]=word_pat_token(code,i,'\\\\frac{')
    if state==False:
        return [False,i0,None]
    [state,i,pt1]=sum_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]

    [state,i,text]=word_pat_token(code,i,'}{')
    if state==False:
        return [False,i0,None]
    [state,i,pt2]=sum_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'}')
    if state==False:
        return [False,i0,None]

    pt=NetP('分式')
    list_pt.append(pt)
    ptA=NetP('分子').con(None,pt1)
    list_pt.append(ptA)
    pt_de=NetP('的').con(pt,ptA)
    list_pt.append(pt_de)
    
    ptB=NetP('分母').con(None,pt2)
    list_pt.append(ptB)
    pt_de=NetP('的').con(pt,ptB)
    list_pt.append(pt_de)

    return [state,i,pt]


def term_brck_token(code,i,list_pt=None):
    i0=i
    pt=None

    [state,i,text]=word_pat_token(code,i,'(\\\\left)?[\\(\\[{]')
    if state==False:
        return [False,i0,None]
    [state,i,pt1]=sum_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'(\\\\right)?[\\)\\]}]')
    if state==False:
        return [False,i0,None]

    pt=NetP('括号',text)
    list_pt.append(pt)
    pt_de=NetP('的').con(pt,pt1)
    list_pt.append(pt_de)

    return [state,i,pt]


def term_sqrt_token(code,i,list_pt=None):
    i0=i
    pt=None
    [state,i,text]=word_pat_token(code,i,'\\\\sqrt{')
    if state==False:
        return [False,i0,None]
    [state,i,pt1]=sum_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'}')
    if state==False:
        return [False,i0,None]

    pt=NetP('根式').con(None,pt1)
    list_pt.append(pt)

    return [state,i,pt]


def term_int_token(code,i,list_pt=None):
    i0=i
    pt=NetP('积分式')

    [state,i,text]=word_pat_token(code,i,'\\\\int')
    if state==False:
        return [False,i0,None]

    [state,i,text]=word_pat_token(code,i,'_{')
    if state==True:
        [state,i,pt1]=eqn_token(code,i,list_pt)
        [state,i,text]=word_pat_token(code,i,'}')
        if state==False:
            return [False,i0,None]

        pt_con=NetP('下限').con(pt,pt1)
        list_pt.append(pt_con)

    [state,i,text]=word_pat_token(code,i,'\\^{')
    if state==True:
        [state,i,pt2]=eqn_token(code,i,list_pt)
        [state,i,text]=word_pat_token(code,i,'}')
        if state==False:
            return [False,i0,None]

        pt_con=NetP('上限').con(pt,pt2)
        list_pt.append(pt_con)


    [state,i,text]=word_pat_token(code,i,'{')
    [state,i,pt_ins]=term_input_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'}{')
    if state==False:
        return [False,i0,None]

    [state,i,pt_fun]=sum_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'}')
    if state==False:
        return [False,i0,None]

    list_pt.append(pt)
    pt.con(None,pt_fun)
    pt_ins.con(pt,None)

    return [state,i,pt]


def term_sum_token(code,i,list_pt=None):
    i0=i
    pt=NetP('求和式')

    [state,i,text]=word_pat_token(code,i,'\\\\sum')
    if state==False:
        return [False,i0,None]

    [state,i,text]=word_pat_token(code,i,'_{')
    if state==True:
        [state,i,pt1]=eqn_token(code,i,list_pt)
        [state,i,text]=word_pat_token(code,i,'}')
        if state==False:
            return [False,i0,None]

        pt_con=NetP('下限').con(pt,pt1)
        list_pt.append(pt_con)

    [state,i,text]=word_pat_token(code,i,'\\^{')
    if state==True:
        [state,i,pt2]=eqn_token(code,i,list_pt)
        [state,i,text]=word_pat_token(code,i,'}')
        if state==False:
            return [False,i0,None]

        pt_con=NetP('上限').con(pt,pt2)
        list_pt.append(pt_con)


    [state,i,text]=word_pat_token(code,i,'{')
    [state,i,pt_ins]=term_input_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'}{')
    if state==False:
        return [False,i0,None]

    [state,i,pt_fun]=sum_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'}')
    if state==False:
        return [False,i0,None]

    list_pt.append(pt)
    pt.con(None,pt_fun)
    pt_ins.con(pt,None)

    return [state,i,pt]




def term_part_token(code,i,list_pt=None):
    i0=i
    pt=None
    [state,i,text]=word_pat_token(code,i,'\\\\p')
    if state==False:
        return [False,i0,None]

    [state,i,text]=word_pat_token(code,i,'{')
    [state,i,pt_ins]=term_matin_token(code,i,list_pt)
#     [state,i,pt_ins]=term_input_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'}{')
    if state==False:
        return [False,i0,None]

    [state,i,pt_fun]=sum_token(code,i,list_pt)
    if state==False:
        # pt_fun=NetP('变量','\\empty')
        pt_fun=None
    [state,i,text]=word_pat_token(code,i,'}')
    if state==False:
        return [False,i0,None]

    pt=NetP('偏微分')
    list_pt.append(pt)
    pt.con(None,pt_fun)
    pt_ins.con(pt,None)

    return [state,i,pt]


def term_diff_token(code,i,list_pt=None):
    i0=i
    pt=None

    [state,i,text]=word_pat_token(code,i,'\\\\d{')
    if state==False:
        return [False,i0,None]
    [state,i,pt1]=sum_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'}_{')

    pt_ins=None
    if state==False:
        [state,i,text]=word_pat_token(code,i,'}')
        if state==False:
                return [False,i0,None]
    else:
        [state,i,pt_ins]=term_input_token(code,i,list_pt)
        if state==False:
            return [False,i0,None]
        [state,i,text]=word_pat_token(code,i,'}')
        if state==False:
            return [False,i0,None]

    pt=NetP('微分').con(None,pt1)
    list_pt.append(pt)
    if pt_ins!=None:
        pt_ins.con(pt,None)

    return [state,i,pt]


def term_vec_token(code,i,list_pt=None):
    i0=i
    [state,i,text]=word_pat_token(code,i,r'\\vec{|\\hat{')
    if state==False:
        return [False,i0,None]

    pt=NetP('矢量',text)

    i1=i
    [state,i,text]=word_pat_token(code,i,'\\\\?[a-zA-Z_\d]+}')
    if state==True:
        [state,i,pt1]=term_var_token(code,i1,list_pt)
        [state,i,text]=word_pat_token(code,i,'}')
        pt.con(None,pt1)
        pt_in=NetP('输入').con(pt,pt1)
        list_pt.append(pt_in)
    else:
        [state,i,pt_in]=term_input_token(code,i1,list_pt)
        if state==False:
            return [False,i0,None]
        [state,i,text]=word_pat_token(code,i,'}')
        if state==True:
            pt_in.con(pt,None)
        else:
            return [False,i0,None]

    list_pt.append(pt)

    return [state,i,pt]


"""
def term_input_token
保存term_mat_token:...

"""

def term_mat_token(code,i,list_pt=None):
    i0=i
    pt=NetP('矩阵')
    [state,i,text]=word_pat_token(code,i,'\\\\mat{')
    if state==False:
        return [False,i0,None]

    i1=i
    # [state,i,text]=word_pat_token(code,i,'\\\\?[a-zA-Z_\d]+}')
    [state1,i,pt_tmp]=term_var_token(code,i,[])
    [state2,i,text]=word_pat_token(code,i,'^}')
    state=state1 and state2

    if state==True:
        [state,i,pt1]=term_var_token(code,i1,list_pt)
        [state,i,text]=word_pat_token(code,i,'}')
        pt.con(None,pt1)
        pt_in=NetP('输入').con(pt,pt1)
        list_pt.append(pt_in)
    else:
        [state,i,pt2]=term_matin_token(code,i1,list_pt)
        if state==False:
            return [False,i0,None]
        [state,i,text]=word_pat_token(code,i,'}')
        if state==True:
            pt2.con(pt,None)
        else:
            return [False,i0,None]

    list_pt.append(pt)

    return [state,i,pt]


def term_eqs_token(code,i,list_pt=None):
    i0=i
    pt=NetP('方程组')
    [state,i,text]=word_pat_token(code,i,'\\\\eqs{')
    if state==False:
        return [False,i0,None]

    [state,i,pt2]=term_matin_token(code,i,list_pt)
    if state==False:
        return [False,i0,None]
    [state,i,text]=word_pat_token(code,i,'}')
    if state==False:
        return [False,i0,None]

    list_pt.append(pt)
    pt2.con(pt,None)

    return [state,i,pt]


def term_num_token(code,i,list_pt=None):
    pt=None
    [state,i,text]=word_pat_token(code,i,'[\d\.]+|\\\C|\\\pi|\\\infty')
    if state==True:
        pt=NetP('数字',text)
        list_pt.append(pt)
    return [state,i,pt]

"""
保存term_var_token:...

"""

def term_var_token(code,i,list_pt=None):
    i0=i
    pt=None
    # [state,i,text]=word_pat_token(code,i,'\\\?[a-z\'A-Z_\d \\\\]*[a-z\'A-Z_\d]')
    [state,i,text]=word_pat_token(code,i,'\\\?[a-z\'A-Z_ \d]*[a-z\'A-Z_\d]')
    while state:
        [state1,i1,text1]=word_pat_token(code,i,' ?\\\?[a-z\'A-Z_ \d]*[a-z\'A-Z_\d]')
        if state1==False:
            break
        elif len(text1)>=5 and text1[0:5]=="\\cdot":
            break
        elif len(text1)>=6 and text1[0:6]=="\\cross":
            break
        
        else:
            i=i1
            text+=text1

    if state==False:
        return [state,i0,None]
    pt=NetP('变量',text)
    list_pt.append(pt)

    [state,i,text]=word_pat_token(code,i,'\[')
    if state==True:
        [state,i,pt_i]=term_matin_token(code,i,list_pt,NetP('序号输入'))
        [state,i,text]=word_pat_token(code,i,'\]')
        if state==True:
            pt_i.con(pt,None)
            list_pt.append(pt_i)
        else:
            return [state,i0,None]


    [state,i,text]=word_pat_token(code,i,'\(')
    if state==True:
        [state,i,pt_x]=term_input_token(code,i,list_pt)
        [state,i,text]=word_pat_token(code,i,'\)')
        if state==True:
            pt_x.con(pt,None)
        else:
            return [state,i0,None]

    return [True,i,pt]


def term_input_token(code,i,list_pt=None,pt=None):
    i0=i
    if pt==None:
        pt=NetP('输入')
        list_pt.append(pt)

    [state,i,pt1]=eqn_token(code,i,list_pt)
    if state==False:
        return [False,i,None]
    pt_de=NetP('的').con(pt,pt1)
    list_pt.append(pt_de)

    [state,i,text]=word_pat_token(code,i,',\\s*')
    if state==False:
        return [True,i,pt]
    [state,i,pt2]=term_input_token(code,i,list_pt,pt)

    return [state,i,pt]


def term_matin_token(code,i,list_pt=None,pt=None):
    i0=i
    if pt==None:
        pt=NetP('输入')
        list_pt.append(pt)

    [state,i,pt]=term_input_token(code,i,list_pt,pt)
    if state==False:
        return [False,i,None]

    [state,i,text]=word_pat_token(code,i,';\\s*')
    if state==False:
        return [True,i,pt]
    [state,i,pt2]=term_matin_token(code,i,list_pt)

    pt2.con(pt,None)
    return [state,i,pt]


def word_pat_token(code,i,pat):
    text=''
    try:
        a=re.match(pat,code[i:])
        if a==None:
            state=False
        else:
            di=a.span()[1]
            output_txt=code[i:i+di]
            i+=di
            state=True
            text=output_txt
    except:
        state=False
    
    return [state,i,text]


def op_eq_token(code,i,list_pt=None):
    [state,i,text]=word_pat_token(code,i,'[\\n\\s\\t]*(=|<[=<]?|>[=>]?|~|\\\l |\\\g |\\\le |\\\ge |!=)')
    return [state,i,text]


def op_add_token(code,i,list_pt=None):
    [state,i,text]=word_pat_token(code,i,'[\\n\\s\\t]*[+-][+-]?')
    return [state,i,text]


def op_mul_token(code,i,list_pt=None):
    [state,i,text]=word_pat_token(code,i,'[\\n\\t\\s]*([*/ ]|\\\cdot |\\\\times )')
    return [state,i,text]


def formula_parser(code):
    list_pt=[]
    [state,i,pt]=eqn_token(code,0,list_pt)
    if state==False:
        return ''

    text=tools_basic.writeStdCode([],list_pt)
    return text

state=True

"""
+[P函数](,函数定义)
测试:...
+[新建阅读窗口](,测试)

"""
## end
#1108, 296:
"""
测试->的(函数定义,测试)->+[P函数](,函数定义)->+[P函数](,测试)
记住"Python"
测试文本模板:...
测试结构:...

结构样本(html):...
+[新建阅读窗口](,结构样本)

"""

i=0
code='[\mat{A}+1]^{x+y}=0'

text=formula_parser(code)
print(text)

# print(word_pat_token(code,i,'(\\\\left)?[\\(\\[{]'))


"""
测试->的(函数定义,测试)->+[P函数](,函数定义)->+[P函数](,测试)

"""
## end
#1110, 134:
"""
+[P函数](,测试)
记住"Python"

"""

code='\pi'
i=0

[state,i,text]=word_pat_token(code,i,'[\d\.]+|\\\pi|\\\infty')
print([state,i,text])

## end
#1111, 4:
1171
## end
#1117, 182:
"""
测试->的(函数定义,测试)->+[P函数](,函数定义)->+[P函数](,测试)
记住"Python"
测试文本模板:...

"""

i=0
code='\\eqs{a=1,x<0;a=2,x>2}'

[state,i,pt]=eqn_token(code,i,[])
print([state,i,code[0:i]])
print()




## end
#1119, 435:
<!--
+[H函数](,结构样本)
-->

%[1].



<!--
[1].:
将"f[2](x,y)"记作为式(1)
将"-\mat{a,-b;b,-a}^2"记作为式(1)
将"\frac{a}{b}"记作为式(1)
将"\sqrt{a}"记作为式(1)
将"\int_{0}{x}{x}"记作为式(1)
将"\p{x,y}{f}"记作为式(1)
将"\d{f}"记作为式(1)
将"\vec{x}"记作为式(1)
将"\mat{x}"记作为式(1)
将"\eqs{x>=[1+b],a=1;x=2,a=2}"记作为式(1)
将"(-1+\sqrt{A}^2)^2"记作为式(1)
将"-\mat{A}^2+1"记作为式(1)

的([1].,表达式)->+[显示星图](,表达式)
的([1].,表达式)->的(表达式,等号)->+[显示](,等号)
的([1].,表达式)->的(表达式,括号)->+[显示](,括号)
+[H函数](,结构样本)
-->
## end
#1122, 48:
-\begin{pmatrix}
a&-b\\ b&-a
\end{pmatrix}

^{2}
## end
#1123, 18:
-\mat{a,-b;b,-a}^2
## end
#1127, 304:
"""
测试->的(函数定义,测试)->+[P函数](,函数定义)->+[P函数](,测试)
记住"Python"
测试文本模板:...
测试结构:...

结构样本(html):...
+[新建阅读窗口](,结构样本)

"""

i=0
code='(\mat{A}+1)^{x+y}=0'
# code='\\eqs{x=1,a=1;x=2,a=2}'

list_pt=[]
[state,i,pt]=eqn_token(code,i,list_pt)
print([state,i,code[0:i]])
print(pt)
tools_basic.printPtList(list_pt)




## end
#1129, 421:
"""
+[返回目录](,生成公式结构)

结构修饰:...
结构变换:...
(没有使用)

算式版本:...

"""

+生成公式结构(_公式,_输出结构)...
->的(生成公式结构,结构修饰)->的(生成公式结构,结构变换)...

->[]{
    []:->_公式->[算式](_公式,)->+[导入节点](,_输出结构)->[m_text]([算式],+[导入节点])...
    ->+[做](,_输出结构)->+[code](+[做],结构修饰)...
    ->+[del](,+生成公式结构),

    ->[算式](+生成公式结构,)->+[导入节点](,_输出结构)->[m_text]([算式],+[导入节点])...
    ->+[做](,_输出结构)->+[code](+[做],结构修饰)...
    ->+[del](,+生成公式结构)
}...

->+[转换公式结构](,_输出结构)


## end
#1131, 234:
"""
+[返回目录](,算式)
+[新建阅读窗口](,算式)

结构语言版本:...

"""

+算式(_公式,)->+[s]"formula"([python],_公式)...

->+Python_算式(记忆,)->[python]"
import re
text=formula
i=0
state=True
"(+Python_算式,)...

->[等式](+结构,)...
->[记录结构](+结构,)->[m_text]([记录结构],+算式)



## end
#1132, 4:
1165
## end
#1146, 4:
1168
## end
#1149, 5:
%变量


## end
#1151, 5:
(%和式)
## end
#1152, 5:
%[操作]
## end
#1153, 5:
%[操作]
## end
#1154, 23:
if %[条件]
    %[操作]
end

## end
#1155, 20:
if %[条件]:
    %[操作]

## end
#1156, 37:
%[else]
if %[条件]
    %[操作]
end
%[分支]

## end
#1157, 34:
%[else]
if %[条件]:
    %[操作]
%[分支]

## end
#1164, 2092:
"""
条件模板_P:...
条件模板_M:...
操作模板_P:...
操作模板_M:...
else模板_P:...
else模板_M:...

"""

+生成代码(代码结构,_输出)->+[del](,+生成代码)...
->的(生成代码,条件模板_P)->的(生成代码,条件模板_M)...
->的(生成代码,操作模板_P)->的(生成代码,操作模板_M)...
->的(生成代码,else模板_P)->的(生成代码,else模板_M)...

->记忆(,)...
->+条件模板{
    []:->[==]"Matlab"(,记忆)->[m_text](条件模板_M,+条件模板),
    ->[m_text](条件模板_P,+条件模板)
}...
->+操作模板{
    []:->[==]"Matlab"(,记忆)->[m_text](操作模板_M,+操作模板),
    ->[m_text](操作模板_P,+操作模板)
}...
->+else模板{
    []:->[==]"Matlab"(,记忆)->[m_text](else模板_M,+else模板),
    ->[m_text](else模板_P,+else模板)
}...

->+[临时文本]->的(代码结构,输出变量)->[]{
    的(代码结构,if)->if(,)...
        ->+[临时文本]#操作->+[修改内容](输出变量,+[临时文本]#操作)...
        ->+[增加内容]"="(if,+[临时文本]#操作)...
        ->+[临时文本]#条件->[]{
            []=>的(if,cond)->cond=>[]:
                ->[==]"Python"(,记忆)->+[增加内容]" %s and"(cond,+[临时文本]#条件),
                ->+[增加内容]" %s & "(cond,+[临时文本]#条件)
        }->+[python]"ans=text_str[0:-3]"(Python,+[临时文本]#条件)...
        ->+[s]"text_str"(+[python],+[临时文本]#条件)...

    ->+[模板文本](+条件模板,+[临时文本])...
        ->+[.]"[条件]"(+[模板文本],+[临时文本]#条件)...
        ->+[.]"[操作]"(+[模板文本],+[临时文本]#操作)
}...

->+[临时文本]#else->+[临时文本]#分支->[]{
    []=>的(代码结构,elif)->elif(,)...
        =>+[临时文本]#操作->+[修改内容](输出变量,+[临时文本]#操作)...
        ->+[增加内容]"="(elif,+[临时文本]#操作)...
        ->+[临时文本]#条件->[]{
            []=>的(elif,cond)->cond=>[]:
                ->[==]"Python"(,记忆)->+[增加内容]" %s and"(cond,+[临时文本]#条件),
                ->+[增加内容]" %s & "(cond,+[临时文本]#条件)
        }->+[python]"ans=text_str[0:-3]"(Python,+[临时文本]#条件)...
        ->+[s]"text_str"(+[python],+[临时文本]#条件)...

    ->[]:
        ->的(elif,cond)->[==]"otherwise"(,cond)...
        ->+[模板文本]#1(+else模板,+[增加内容2]#1)->+[增加内容2]#1(,+[临时文本]#else)...
            ->+[.]"[操作]"(+[模板文本]#1,+[临时文本]#操作),
    
        ->+[模板文本](+操作模板,+[增加内容2]#2)->+[增加内容2]#2(,+[临时文本]#分支)...
            ->+[.]"[条件]"(+[模板文本],+[临时文本]#条件)...
            ->+[.]"[操作]"(+[模板文本],+[临时文本]#操作)
}...

->+[模板文本](+[临时文本],+[临时文本])...
->+[.]"[分支]"(+[模板文本],+[临时文本]#分支)...
->+[.]"[else]"(+[模板文本],+[临时文本]#else)...
->+[修改内容](+[临时文本],_输出)...

->+[del](,+条件模板)->+[del](,+操作模板)->+[del](,+else模板)


## end
#1166, 4:
1169
## end
#1169, 128:
"""


"""

+表达式转结构(_表达式,_结构)->+[del](,+表达式转结构)...

->+[删除结构](,_结构)->+[生成公式结构](_表达式,_结构)...
->+[转换公式结构](,_结构)->+[更新公式起点](,_结构)



## end
#1170, 4:
1173
## end
#1172, 4:
1185
## end
#1175, 11:
**(%[临时文本])
## end
#1177, 510:
"""
P代码:...
保存:...

"""

+lambda函数2(_c,_输出)->+[del](,+lambda函数2)...
->的(lambda函数2,P代码)...

->输入(_c,)->=(_c,_f)...
->+[函数输入](输入,+输入)->+[和式](_f,+和式)...
->+[左连](输入,)->+[变量](_c,+函数)->+[左连](输入,_c)...
->的(输入,_变量)->+[标题](_变量,)...

->+[python](Python,+[增加内容])->+[增加内容](,_输出)...
->+[code](+[python],P代码)...
->+[.]"txt_name"(+[python],+函数)->+[.]"txt_input"(+[python],+输入)...
->+[.]"txt_var"(+[python],+[标题])->+[.]"txt_expr"(+[python],+和式)...
->+[.]"txt_type"(+[python],记忆)...

->+[del](,+函数)->+[del](,+输入)->+[del](,+和式)

## end
#1178, 4:
1195
## end
#1180, 622:
"""
矢量: (-)和式 (等于 矢量)...

保存:...

"""
+矢量(矢量#A,_输出)->[说](,+矢量)...
->矢量->的(库,矢量)->的(库,项)->的(库,和式)...

->模板结构(+矢量,矢量#B)->矢量#B(,_B)->输入#B(矢量#B,)...
    ->矢量#A(,_A)->输入#A(矢量#A,)->+的(_输出,输入#A)...

->[]{_B}:
->[is](矢量#B,矢量#0)->矢量#0(,_B0)->_A->[]{
        []:->未知量(_B0,)->+是(_B0,_A), ->[eq](_B0,_A)
    }->+是(矢量#B,矢量#A)->+的(_输出,矢量#A)->+的(_输出,_A),

->>[]{
    []=>的(输入#B,_B2)->_B2=>的(输入#A,_A2)->_A2->[]{[]=>是(,_A2)}...
    ->[]{
        []:->未知量(_B2,)->+是(_B2,_A2),
        ->+的(_输出,的)->[eq](_A2,_B2)...
            ->+[code]([想]#1,和式)->+模板结构([想]#1,_B2)->[想]#1(_A2,_输出)
    }
}...
    ->+是(矢量#B,矢量#A)->+的(_输出,矢量#A)->+的(_输出,_A)




## end
#1183, 30:
\frac{\partial}{%微分变量} (%微分函数)
## end
#1185, 32:
\frac{d}{d%变量}\left(%[和式]\right)
## end
#1187, 15:
\d{%[和式]}_{%变量}
## end
#1188, 4:
1195
## end
#1190, 4:
1197
## end
#1192, 4:
1199
## end
#1194, 4:
1201
## end
#1196, 186:
"""


"""

+方程(输入,)...
->方程(,)...

->操作(+方程,_操作)...
    ->的(输入,_方程)...
->[]{
    []:->输入#1(输入,)->+操作([想]#1,_操作)->+[code]([想]#1,方程)->[想]#1(输入#1,),
    ->[]
}->+结构转换(,_方程)->+的(_操作,+结构转换)


## end
#1198, 122:
"""
方程:...

"""

+结构描述(方程组,)...
->的(结构描述,方程)...

->+操作(+结构描述,)...
->输入(方程组,)->+操作#0([想],+操作)->+[code]([想],方程)->[想](输入,)



## end
#1200, 379:
"""
结构描述:...
+[新建阅读窗口](,结构描述)

"""

+方程组2(_c,_输出)->+[del](,+方程组2)...
->的(方程组2,结构描述)...

->+[code]([想],结构描述)->[想](_c,)...
->+后缀"
"->[]{
    []:->记忆->[==]"Matlab"(,记忆)->+[增加内容2]";"(,+后缀),
    ->[]
}...

->记忆->操作([想],)...
->[]{
    []=>的(操作,结构转换)->结构转换(,_方程)...
    =>+[算式结构转换](_方程,+[增加内容])->+[增加内容](,_输出)->+[增加内容](+后缀,_输出)...
        ->[m_text](记忆,+[算式结构转换])
}...

->+[del](,+后缀)


## end
#1202, 4:
1206
## end
#1204, 4:
1207
## end
#1206, 4:
1210
## end
#1208, 4:
1211
## end
#1210, 4:
1214
## end
#1212, 4:
1217
## end
#1215, 790:
def term_mat_token(code,i,list_pt=None):
    i0=i
    pt=NetP('矩阵')
    [state,i,text]=word_pat_token(code,i,'\\\\mat{')
    if state==False:
        return [False,i0,None]

    i1=i
    [state,i,text]=word_pat_token(code,i,'\\\\?[a-zA-Z_\d]+}')

    if state==True:
        [state,i,pt1]=term_var_token(code,i1,list_pt)
        [state,i,text]=word_pat_token(code,i,'}')
        pt.con(None,pt1)
        pt_in=NetP('输入').con(pt,pt1)
        list_pt.append(pt_in)
    else:
        [state,i,pt2]=term_matin_token(code,i1,list_pt)
        if state==False:
            return [False,i0,None]
        [state,i,text]=word_pat_token(code,i,'}')
        if state==True:
            pt2.con(pt,None)
        else:
            return [False,i0,None]

    list_pt.append(pt)

    return [state,i,pt]

## end
#1216, 4:
1219
## end
#1218, 16:
(%[分子])./(%[分母])
## end
#1219, 30:
\int_{%下限}^{%上限}{%积分变量}{%积分函数}
## end
#1220, 31:
\%nnt_{%下限}^{%上限}{%积分变量}{%积分函数}
## end
#1224, 1208:
"""
+[返回目录](,积分式)
\frac { (-) 和式 } { (-) 和式 }...

LaTeX::\%nnt_{%下限}^{%上限}{%积分变量}{%积分函数}
表达式::\int_{%下限}^{%上限}{%积分变量}{%积分函数}
P代码:...
P代码1:...
P代码2:...
将条目"P代码"复制为条目"P代码2"
+[新建阅读窗口](,P代码)

保存:...

"""

+积分式(_节点,_积分式)->+[del](,+积分式)...
->的(积分式,P代码)->的(积分式,P代码1)->的(积分式,P代码2)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],积分式)->+[del](,+动词)...

->_节点(,_积分函数)->+[和式](_积分函数,+积分函数)...

->记忆->+n->+积分变量{
    输入(_节点,):
        ->[==]"表达式"(,记忆)->+[函数输入](输入,+积分变量),
    
        =>的(输入,_变量)->_变量(,)...
        =>+[和式](_变量,+[临时文本])->+[增加内容]"d%s "(+[临时文本],+积分变量)...
        ->+[python]"n=n+'i'"(Python,)->+[o](+[python],+n)
}...

->+上限{
    []:->上限(_节点,_上限)->_上限->+[和式](_上限,+上限),
    ->[]
}...
->+下限{
    []:->下限(_节点,_下限)->_下限->+[和式](_下限,+下限),
    ->[]
}...

->+[python](Python,_积分式)...
->+[s]"text_var"(+[python],+积分变量)->+[s]"text_func"(+[python],+积分函数)...
->+[s]"text_upper"(+[python],+上限)->+[s]"text_lower"(+[python],+下限)...
->+[s]"text_n"(+[python],+n)->+[s]"text_type"(+[python],记忆)...
->[]{
    []:->_re"[\+\-/]|负号"(_积分函数,)->+[code](+[python],P代码1),
    ->_re"[\*/\^]"(_节点,)->+[code](+[python],P代码2),
    ->+[code](+[python],P代码)
}...

->+[del](,+积分变量)->+[del](,+积分函数)->+[del](,+上限)->+[del](,+下限)...
->+[del](,+n)


## end
#1227, 743:
"""
+[返回目录](,微分)

LaTeX::d%[和式]
LaTeX2::\frac{d}{d%变量}\left(%[和式]\right)
表达式::\d{%[和式]}
表达式2::\d{%[和式]}_{%变量}
Matlab::d%[和式]

"""

+微分(_节点,_微分)->+[del](,+微分)...
->的(微分,LaTeX2)->的(微分,表达式2)...
->的(微分,Matlab)->的(微分,LaTeX)->的(微分,表达式)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],微分)->+[del](,+动词)...

->_节点(,_和式)->+[和式](_和式,+和式#1)...
->+[修改内容](+和式#1,+[临时文本])->+[del](,+和式#1)...

->记忆->+[模板文本](,_微分)...
->[]{
    []:->输入(_节点,)->的(输入,_变量)->[标题](_变量,)...
        ->+[.]"变量"(+[模板文本],+[临时文本]#t)->[m_text]([标题],+[临时文本]#t)...
    ->[]{
        []:->[==]"LaTeX"(,记忆)->+[code](+[模板文本],LaTeX2),
        ->[==]"Matlab"(,记忆)->+[code](+[模板文本],Matlab),
        ->+[code](+[模板文本],表达式2)
    },
    ->+[code](+[模板文本],+[临时文本]#m)
}...
->+[.]"[和式]"(+[模板文本],+[临时文本])


## end
#1229, 830:
"""
记住"Python"
print(','.join(list_var))

"""

n=len(list_var)
ans=''
if text_type=='表达式':
    ans='\d{%s}_{%s}'%(text_func,','.join(list_var))

elif text_type=='LaTeX' and n>1 and func_type=='算式':
    ans='\\frac{d^{%d}}{d%s^{%d}}\\left(%s\\right)'%(n,list_var[0],n,text_func)
elif text_type=='LaTeX' and n>1 and func_type=='变量':
    ans='\\frac{d^{%d}%s}{d%s^{%d}}'%(n,text_func,list_var[0],n)
elif text_type=='LaTeX' and func_type=='算式':
    ans='\\frac{d}{d%s}\\left(%s\\right)'%(list_var[0],text_func)
elif text_type=='LaTeX' and func_type=='括号':
    ans='\\frac{d}{d%s}%s'%(list_var[0],text_func)
elif text_type=='LaTeX':
    ans='\\frac{d%s}{d%s}'%(text_func,list_var[0])

elif text_type=='Matlab' and n>1:
    ans='d%d%s_d%s'%(n,text_func,list_var[0])
elif text_type=='Matlab':
    ans='d%s_d%s'%(text_func,list_var[0])



## end
#1231, 314:
"""
记住"Python"
print(','.join(list_var))
print(func_type)

"""


ans=''
if text_type=='表达式':
    ans='\\d{%s}'%(text_func)
elif text_type=='LaTeX' and func_type=='变量':
    ans='d%s'%(text_func)
elif text_type=='LaTeX':
    ans='d\\left(%s\\right)'%(text_func)
elif text_type=='Matlab':
    ans='d%s'%(text_func)



## end
#1232, 444:
"""
P代码:...
保存:...

"""

+lambda函数(_c,_输出)->+[del](,+lambda函数)...
->的(lambda函数,P代码)...

->输入(_c,)->=(_c,_f)...
->+[函数输入](输入,+输入)->+[和式](_f,+和式)...
->+[左连](输入,)->+[变量](_c,+函数)->+[左连](输入,_c)...

->+[python](Python,+[增加内容])->+[增加内容](,_输出)...
->+[code](+[python],P代码)...
->+[.]"txt_name"(+[python],+函数)->+[.]"txt_input"(+[python],+输入)...
->+[.]"txt_expr"(+[python],+和式)->+[.]"txt_type"(+[python],记忆)...

->+[del](,+函数)->+[del](,+输入)->+[del](,+和式)


## end
#1235, 1040:
"""
+[返回目录](,偏偏微分)
\frac { (-) 和式 } { (-) 和式 }...

LaTeX::\frac{\partial^%n %微分函数}{%微分变量}
LaTeX2::\frac{\partial %微分函数}{%微分变量}
LaTeX2::\frac{\partial}{%微分变量} (%微分函数)
表达式::\p{%微分变量}{%微分函数}

P代码:...
+[新建阅读窗口](,P代码)

保存:...

"""

+偏微分(_节点,_偏微分)->+[del](,+偏微分)...
->的(偏微分,P代码)...

->记忆->_节点(,_和式0)->+和式#1{
    []:->_和式0->+[和式](_和式0,+和式#1),
    ->[]
}...

->+[python]"list_var=[]"(Python,)...
->[]{
    []=>输入(_节点,)->的(输入,_变量)=>+[和式](_变量,+变量#1)...
        ->+[python]"list_var.append(text_var)"(Python,)...
        ->+[s]"text_var"(+[python],+变量#1)->+[del](,+变量#1)
}...

->+[python](Python,_偏微分)->+[code](+[python],P代码)...
->+[del](,+和式#1)...
->+[.]"text_type"(+[python],记忆)->+[s]"text_func"(+[python],+和式#1)...
->[]{
    []:->[is](_节点,_节点1)->_节点1(,_和式)->[]{
        []:->_re"[\*\^\+\-/]|负号|输入"(_和式,)...
            ->+[临时文本]"算式"->+[s]"func_type"(+[python],+[临时文本]),
        ->[is](_和式,_re#1)->_re#1"分式|微分|偏微分|积分式"...
            ->+[临时文本]"算式"->+[s]"func_type"(+[python],+[临时文本])
    },
    ->+[临时文本]"变量"->+[s]"func_type"(+[python],+[临时文本])
}



## end
#1237, 1581:
"""
记住"Python"
print(','.join(list_var))
print(list_cond)
print(list_var)


条件参考::https://tex.stackexchange.com/questions/122331/derivatives-enter-evaluated-at-vertical-bar-with-multiple-values-as-subscript
数目参考::https://stackoverflow.com/questions/2600191/how-do-i-count-the-occurrences-of-a-list-item

测试:...

"""
from collections import Counter

n=len(list_var)
dict_var=Counter(list_var)
ans=''

text_vars=""
if text_type=="LaTeX":
    for var_name in dict_var:
        var_n=dict_var[var_name]
        if var_n==1:
            text_vars="\partial %s "%(var_name)+text_vars
        else:
            text_vars="\partial %s ^{%d}"%(var_name,var_n)+text_vars


if text_type=='表达式':
    if len(list_cond)>0:
        ans='\p{%s;%s}{%s}'%(','.join(list_var),','.join(list_cond),text_func)
    else:
        ans='\p{%s}{%s}'%(','.join(list_var),text_func)

elif text_type=='LaTeX' and n>1 and func_type=='算式':
    ans='\\frac{\partial^{%d}}{%s}\\left(%s\\right)'%(n,text_vars,text_func)
elif text_type=='LaTeX' and n>1 and func_type=='变量':
    ans='\\frac{\partial^{%d}%s}{%s}'%(n,text_func,text_vars)
elif text_type=='LaTeX' and func_type=='算式':
    ans='\\frac{\partial}{\partial %s}\\left(%s\\right)'%(list_var[0],text_func)
elif text_type=='LaTeX':
    ans='\\frac{\partial %s}{\partial %s}'%(text_func,list_var[0])

elif text_type=='Matlab' and n>1:
    ans='d%d%s_d%s'%(n,text_func,list_var[0])
elif text_type=='Matlab':
    ans='d%s_d%s'%(text_func,list_var[0])


if len(list_cond)>0:
    if text_type=="LaTeX":
        ans+="\Bigr|_{\substack{%s}}"%(", ".join(list_cond))




## end
#1239, 844:
"""
+[返回目录](,求和式)
\frac { (-) 和式 } { (-) 和式 }...

LaTeX::\sum_{%求和变量%下限}^{%上限}{%求和函数}
表达式::\sum_{%下限}^{%上限}{%求和变量}{%求和函数}

保存:...

"""

+求和式(_节点,_求和式)->+[del](,+求和式)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],求和式)->+[del](,+动词)...

->_节点(,_求和函数)->+[和式](_求和函数,+求和函数)...

->+n->+求和变量{
    输入(_节点,):
        ->记忆"表达式"->+[函数输入](输入,+求和变量),
    
        =>的(输入,_变量)->_变量(,)...
        =>+[和式](_变量,+[临时文本])->+[增加内容]"%s="(+[临时文本],+求和变量)...
        ->+[python]"n=n+'i'"(Python,)->+[o](+[python],+n)
}...

->+上限{
    []:->上限(_节点,_上限)->_上限->+[和式](_上限,+上限),
    ->[]
}...
->+下限{
    []:->下限(_节点,_下限)->_下限->+[和式](_下限,+下限),
    ->[]
}...

->+[模板文本](+[临时文本]#m,_求和式)...
->+[.](+[模板文本],+求和变量)->+[.](+[模板文本],+求和函数)...
->+[.](+[模板文本],+上限)->+[.](+[模板文本],+下限)...
->+[.](+[模板文本],+n)...

->+[del](,+求和变量)->+[del](,+求和函数)->+[del](,+上限)->+[del](,+下限)...
->+[del](,+n)
## end
#1241, 344:
"""
记住"Python"
print(','.join(list_var))

"""

n=len(list_var)
ans=''
if text_type=='表达式':
    ans='\sum_{%s}^{%s}{%s}{%s}'%(i_s,i_e,','.join(list_var),sum_func)

elif text_type=='LaTeX' and i_s=='':
    ans='\sum_{%s}{%s}'%(','.join(list_var),sum_func)
elif text_type=='LaTeX':
    ans='\sum_{%s=%s}^{%s}{%s}'%(list_var[0],i_s,i_e,sum_func)



## end
#1243, 476:
<!--
+[H函数](,抽象结构)
-->

%[1].



<!--
[1].:
将"(1+b+x)*x/(1+x)+a+b*x^2+a*x+c*x*x=x"记作为式(1)
将"1+x+a"记作为式(1)
将"1+x*a^2"记作为式(1)
将"1+f(x+a)"记作为式(1)
将"1+\sqrt{x+a}"记作为式(1)
将"f(1+2)+\sqrt{\frac{b}{x+a}}"记作为式(1)

结构:...
+[描述抽象结构](+x,[1].)->+[.](+[描述抽象结构],结构)->+[del](,+x)
+[显示星图](,结构)
+[删除结构](,结构)

的([1].,表达式)->的(表达式,起点)->起点(,_式子)...
->+[.]"结构"([公式描述_结构],结构)->+[.]"类型"([公式描述_结构],+和式)...
->[公式描述_结构](_式子,+x)...
->+[del](,+x)->+[del](,+和式)...
=>的(结构,_节点)=>[说](,_节点)


+[H函数](,抽象结构)
-->
## end
#1245, 64:
\left(1+b+x\right)\ x/\left(1+x\right)+a+b\ x^{2}+a\ x+c\ x\ x=x
## end
#1246, 35:
(1+b+x)*x/(1+x)+a+b*x^2+a*x+c*x*x=x
## end
#1249, 504:
"""


"""

+根式(_式,_x)...

->[is](_式,根式)->根式(,_和式0)->+[.]([公式描述]#0,+和式)->[公式描述]#0(_和式0,_x)...
->[]{
    []:->^(_式,_和式)->_和式->+[.]([公式描述],+和式#1)->[公式描述](_和式,_x)->[]{
        []:->x(+和式#1,)->+fx(,_式)->+[o](+根式,+fx)...
            ->+内容(+fx,+和式)->+指数(+fx,+和式#1),
        ->[]
    }, ->[]
}...

->[]{
    []:->o(+根式,),
    ->x(+和式,)->+x(,_式)->+[o](+根式,+x)->+内容(+x,+和式),
    ->fx(+和式,)->+fx(,_式)->+[o](+根式,+fx)->+内容(+fx,+和式),
    ->[]
}...

->[]{
    []:->o(+根式,),
    ->+C(,_式)->+[o](+根式,+C)->+内容(+C,+和式)
}



## end
#1250, 442:
"""


"""

+函数(_式,_x)...

->[]{
    []:->^(_式,_和式)->_和式->+[.]([公式描述],+和式)->[公式描述](_和式,_x)->[]{
        []:->x(+和式,)->+fx(,_式)->+[o](+函数,+fx),
        ->[]
    }, ->[]
}...

->输入(_式,)->[]{
    []=>的(输入,_变量)->_变量=>+[.]([公式描述],+和式)->[公式描述](_变量,_x)->[]{
        []:->o(+函数,),
        ->x(+和式,)->+fx(,_式)->+[o](+函数,+fx),
        ->fx(+和式,)->+fx(,_式)->+[o](+函数,+fx),
        ->[]
    }
}...

->[]{
    []:->o(+函数,),
    ->+C(,_式)->+[o](+函数,+C)
}



## end
#1251, 841:
"""


"""

+分式(_式,_x)...

->[is](_式,分式)...
->的(分式,分子)...
    ->分子(,_和式1)->+[.]([公式描述]#1,+和式#1)->[公式描述]#1(_和式1,_x)...
->的(分式,分母)...
    ->分母(,_和式2)->+[.]([公式描述]#2,+和式#2)->[公式描述]#2(_和式2,_x)...

->[]{
    []:->^(_式,_和式)->_和式->+[.]([公式描述],+和式)->[公式描述](_和式,_x)->[]{
        []:->x(+和式,)->+fx(,_式)->+[o](+分式,+fx)...
            ->+指数(+fx,+和式)->+入口(+和式,_和式),
        ->[]
    }, ->[]
}...

->[]{
    []:->o(+分式,),
    ->x(+和式#1,)->+x(,_式)->+[o](+分式,+x),
    ->fx(+和式#1,)->+fx(,_式)->+[o](+分式,+fx),
    ->[]
}...

->[]{
    []:->o(+分式,),
    ->x(+和式#2,)->+x(,_式)->+[o](+分式,+x),
    ->fx(+和式#2,)->+fx(,_式)->+[o](+分式,+fx),
    ->[]
}...

->[]{
    []:->o(+分式,_f)->_f->+分子(_f,+和式#1)->+分母(_f,+和式#2)...
        ->+入口(+和式#1,_和式1)->+入口(+和式#2,_和式2),
    ->+C(,_式)->+[o](+分式,+C)->+分子(+C,+和式#1)->+分母(+C,+和式#2)...
        ->+入口(+和式#1,_和式1)->+入口(+和式#2,_和式2)
}



## end
#1252, 275:
"""


"""

+变量(_式,_x)...

->[]{
    []:->^(_式,_和式)->_和式->+[.]([公式描述],+和式)->[公式描述](_和式,_x)->[]{
        []:->x(+和式,)->+fx(,_式)->+[o](+变量,+fx),
        ->[]
    },
    ->[]
}...

->[]{
    []:->o(+变量,),
    ->[eq](_式,_x)->+x(,_式)->+[o](+变量,+x),
    ->+C(,_式)->+[o](+变量,+C)
}



## end
#1253, 447:
"""


"""

+括号(_式,_x)...

->的(_式,_式2)->+[.]([公式描述],+和式)->[公式描述](_式2,_x)...

->[]{
    []:->^(_式,_和式)->_和式->+[.]([公式描述],+和式#2)->[公式描述](_和式,_x)->[]{
        []:->x(+和式#2,)->+fx(,_式)->+[o](+括号,+fx)...
            ->+指数(+fx,+和式#2)->+内容(+fx,+和式),
        ->[]
    }, ->[]
}...

->[]{
    []:->o(+括号,),
    ->fx(+和式,)->+fx(,_式)->+[o](+括号,+fx)->+内容(+fx,+和式),
    ->x(+和式,)->+x(,_式)->+[o](+括号,+x)->+内容(+x,+和式),
    ->+C(,_式)->+[o](+括号,+C)->+内容(+C,+和式)
}


## end
#1254, 598:
"""
+[全部关联](,项)->+[显示](,+[全部关联])

"""

+项(_式,_x)...

->[]{
    []:->[is](_式,分式)->分式->+[.]([公式描述]#2C,+分式)->[公式描述]#2C(_式,_x)...
        ->o([公式描述]#2C,_变量类型2C)->+[o](+项,_变量类型2C),
    ->[is](_式,根式)->根式->+[.]([公式描述]#2A,+根式)->[公式描述]#2A(_式,_x)...
        ->o([公式描述]#2A,_变量类型2A)->+[o](+项,_变量类型2A),
    ->[is](_式,括号)->括号->+[.]([公式描述]#2B,+括号)->[公式描述]#2B(_式,_x)...
        ->o([公式描述]#2B,_变量类型2B)->+[o](+项,_变量类型2B),
    
    ->输入(_式,)->+[.]([公式描述]#1,+函数)->[公式描述]#1(_式,_x)...
        ->o([公式描述]#1,_变量类型1)->+[o](+项,_变量类型1),

    ->+[.]([公式描述],+变量)->[公式描述](_式,_x)...
        ->o([公式描述],_变量类型)->+[o](+项,_变量类型)
}



## end
#1255, 404:
"""


"""

+和式(_式,_x)...

->+[.]([公式描述],+乘式)->[公式描述](_式,_x)...
->o([公式描述],_变量类型)->_变量类型->+入口(+乘式,_变量类型)...

->.(+和式,和式#0)...
->[]{
    []:->_re"[+\-]"(_式,_式2)...
        ->+[.]([公式描述]#2,和式#0)->[公式描述]#2(_式2,_x),
    ->+结尾(和式#0,+乘式)
}...
->+的(和式#0,+乘式)->+[o](+和式,_变量类型)...

->[]{
    []:->fx(和式#0,), ->fx#0(+乘式,)->+fx(和式#0,)->+x(和式#0,), ->[]
}...
->[]{
    []:->x(和式#0,), ->x#0(+乘式,)->+x(和式#0,), ->[]
}




## end
#1256, 478:
"""


"""

+乘式(_式,_x)...

->+[.]([公式描述],+项)->[公式描述](_式,_x)...
->o([公式描述],_变量类型)->_变量类型(,)...

->.(+乘式,乘式#0)...
->[]{
    []:->_re"[*/]"(_式,_式2)...
        ->+[.]([公式描述]#2,乘式#0)->[公式描述]#2(_式2,_x),
    ->+结尾(乘式#0,_变量类型)
}...

->+的(乘式#0,_变量类型)->+[o](+乘式,_变量类型)...
->[]{
    []:->/(,_式)->+分母(乘式#0,_式),
    ->+分子(乘式#0,_式)
}...

->[]{
    []:->fx(乘式#0,), ->[is](_变量类型,fx#0)->fx#0->+fx(乘式#0,)->+x(乘式#0,), ->[]
}...
->[]{
    []:->x(乘式#0,), ->[is](_变量类型,x#0)->x#0->+x(乘式#0,), ->[]
}




## end
#1265, 77:


和式:...
乘式:...
项:...

变量:...
括号:...

函数:...
根式:...
分式:...
将条目"根式"复制为条目"分式"


## end
#1266, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1267, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1268, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1269, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1270, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1271, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1272, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1273, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1274, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1275, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1276, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1277, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1278, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1279, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1280, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1281, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1282, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1283, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1284, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1285, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1286, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1287, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1288, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1289, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1290, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1291, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1292, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1293, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1294, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1295, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1296, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1297, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1298, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1299, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1300, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1301, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1302, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1303, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1304, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1305, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1306, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1307, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1308, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1309, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1310, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1311, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1312, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1313, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1314, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1315, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1316, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1317, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1318, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1319, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1320, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1321, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1322, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1323, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1324, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1325, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1326, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1327, 162:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1328, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1329, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1330, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1331, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1332, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1333, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1334, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1335, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1336, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1337, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1338, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1339, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1340, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1341, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1342, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1343, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1344, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1345, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1346, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1347, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1348, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1349, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1350, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1351, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1352, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1353, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1354, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1355, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1356, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1357, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1358, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1359, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1360, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1361, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1362, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1363, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1364, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1365, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1366, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1367, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1368, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1369, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1370, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1371, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1372, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1373, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1374, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1375, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1376, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1377, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1378, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1379, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1380, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1381, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1382, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1383, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1384, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1385, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1386, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1387, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1388, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1389, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1390, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1391, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1392, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1393, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1394, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1395, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1396, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1397, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1398, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1399, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1400, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1401, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1402, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1403, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1404, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1405, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1406, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1407, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1408, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1409, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1410, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1411, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1412, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1413, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1414, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1415, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1416, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1417, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1418, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1419, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1420, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1421, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1422, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1423, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1424, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1425, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1426, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1427, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1428, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1429, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1430, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1431, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1432, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1433, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1434, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1435, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1436, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1437, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1438, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1439, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1440, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1441, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1442, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1443, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1444, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1445, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1446, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1447, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1448, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1449, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1450, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1451, 183:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"变量: "(,_入口)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1452, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1453, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1454, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1455, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1456, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1457, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1458, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1459, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1460, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1461, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1462, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1463, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1464, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1465, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1466, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1467, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1468, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1469, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1470, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1471, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1472, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1473, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1474, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1475, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1476, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1477, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1478, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1479, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1480, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1481, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1482, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1483, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1484, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1485, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1486, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1487, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1488, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1489, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1490, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1491, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1492, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1493, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1494, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1495, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1496, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1497, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1498, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1499, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1500, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1501, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1502, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1503, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1504, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1505, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1506, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1507, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1508, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1509, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1510, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1511, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1512, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1513, 176:
+公式描述(_入口,_变量)...
->的(公式描述,想法库)...
->[说]"???"...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)
## end
#1515, 198:
"""
想法库:...
+[新建阅读窗口](,想法库)

"""

+公式描述(_入口,_变量)...
->的(公式描述,想法库)...

->.(+公式描述,_类型)->的(想法库,_条目)->[eq](_条目,_类型)...
->+[.]([想],_类型)->+[code]([想],_条目)->[想](_入口,_变量)...

=>o([想],_描述)=>+[o](+公式描述,_描述)


## end
#1524, 2135:
和式#0""(,)
括号#1""(乘式#63,)
变量#2""(乘式#7,)
C#3""(变量#2,1)
结尾#4""(乘式#7,C#3)
分子#5""(乘式#7,1)
入口#6""(乘式#7,C#3)
乘式#7""(,)
变量#8""(乘式#13,)
C#9""(变量#8,b)
结尾#10""(乘式#13,C#9)
分子#11""(乘式#13,b)
入口#12""(乘式#13,C#9)
乘式#13""(,)
变量#14""(乘式#21,)
x#15""(变量#14,x)
结尾#16""(乘式#21,x#15)
分子#17""(乘式#21,x)
因为#18""(x#15,x#19)
x#19""(乘式#21,)
入口#20""(乘式#21,x#15)
乘式#21""(,)
结尾#22""(和式#28,乘式#21)
的#23""(和式#28,乘式#21)
因为#24""(x#19,x#25)
x#25""(和式#28,)
的#26""(和式#28,乘式#13)
的#27""(和式#28,乘式#7)
和式#28""(,)
x#29""(括号#1,括号)
内容#30""(x#29,和式#28)
变量#31""(乘式#63,)
x#32""(变量#31,x)
括号#33""(乘式#63,)
变量#34""(乘式#39,)
C#35""(变量#34,1)
结尾#36""(乘式#39,C#35)
分子#37""(乘式#39,1)
入口#38""(乘式#39,C#35)
乘式#39""(,)
变量#40""(乘式#47,)
x#41""(变量#40,x)
结尾#42""(乘式#47,x#41)
分子#43""(乘式#47,x)
因为#44""(x#41,x#45)
x#45""(乘式#47,)
入口#46""(乘式#47,x#41)
乘式#47""(,)
结尾#48""(和式#53,乘式#47)
的#49""(和式#53,乘式#47)
因为#50""(x#45,x#51)
x#51""(和式#53,)
的#52""(和式#53,乘式#39)
和式#53""(,)
x#54""(括号#33,括号)
内容#55""(x#54,和式#53)
结尾#56""(乘式#63,x#54)
分母#57""(乘式#63,括号)
因为#58""(x#54,x#59)
x#59""(乘式#63,)
分子#60""(乘式#63,x)
分子#61""(乘式#63,括号)
入口#62""(乘式#63,x#29)
乘式#63""(,)
变量#64""(乘式#69,)
C#65""(变量#64,a)
结尾#66""(乘式#69,C#65)
分子#67""(乘式#69,a)
入口#68""(乘式#69,C#65)
乘式#69""(,)
变量#70""(乘式#90,)
C#71""(变量#70,b)
变量#72""(乘式#90,)
变量#73""(乘式#78,)
C#74""(变量#73,2)
结尾#75""(乘式#78,C#74)
分子#76""(乘式#78,2)
入口#77""(乘式#78,C#74)
乘式#78""(,)
结尾#79""(和式#81,乘式#78)
的#80""(和式#81,乘式#78)
和式#81""(,)
^#82""(变量#72,和式#81)
x#83""(变量#72,x)
结尾#84""(乘式#90,x#83)
分子#85""(乘式#90,x)
因为#86""(x#83,x#87)
x#87""(乘式#90,)
分子#88""(乘式#90,b)
入口#89""(乘式#90,C#71)
乘式#90""(,)
变量#91""(乘式#101,)
C#92""(变量#91,a)
变量#93""(乘式#101,)
x#94""(变量#93,x)
结尾#95""(乘式#101,x#94)
分子#96""(乘式#101,x)
因为#97""(x#94,x#98)
x#98""(乘式#101,)
分子#99""(乘式#101,a)
入口#100""(乘式#101,C#92)
乘式#101""(,)
变量#102""(乘式#115,)
C#103""(变量#102,c)
变量#104""(乘式#115,)
x#105""(变量#104,x)
变量#106""(乘式#115,)
x#107""(变量#106,x)
结尾#108""(乘式#115,x#107)
分子#109""(乘式#115,x)
因为#110""(x#107,x#111)
x#111""(乘式#115,)
分子#112""(乘式#115,x)
分子#113""(乘式#115,c)
入口#114""(乘式#115,C#103)
乘式#115""(,)
结尾#116""(和式#0,乘式#115)
的#117""(和式#0,乘式#115)
因为#118""(x#111,x#119)
x#119""(和式#0,)
的#120""(和式#0,乘式#101)
的#121""(和式#0,乘式#90)
的#122""(和式#0,乘式#69)
的#123""(和式#0,乘式#63)

## end
#1526, 344:
"""

"""
+描述抽象结构(_x,_式子)->+[del](,+描述抽象结构)...

->.(+描述抽象结构,_结构)...
->的(_式子,表达式)->的(表达式,起点)->起点(,_a)...

->+的(+结构,+和式)->+[del](,+和式)->+[del](,+结构)...
->+[.]"结构"([公式描述_结构],+结构)->+[.]"类型"([公式描述_结构],+和式)...
->[公式描述_结构](_a,_x)...

->+[修改内容](,_结构)->[记录结构](+结构,)->[m_text]([记录结构],+[修改内容])...
->+[删除结构](,_结构)->+[导入节点](,_结构)->[m_text]([记录结构],+[导入节点])



## end
#1528, 238:
"""
记住"Python"

"""

if num_type=='Matlab' and text_num[0]=='\\':
    ans=text_num[1:]
elif num_type=='Python' and text_num=='\\pi':
    ans='np.pi'
elif num_type=='LaTeX' and text_num=='\\C':
    ans='^\circ C'
else:
    ans=text_num




## end
#1530, 1459:
"""


"""

+分式(_式,_x)...

->."结构"(+分式,_结构)->."类型"(+分式,分式#0)...
->[is](_式,分式)...
->的(分式,分子)->分子(,_和式1)...
    ->+[.]"结构"([公式描述_结构]#1,_结构)->+[.]"类型"([公式描述_结构]#1,+和式#1)...
    ->[公式描述_结构]#1(_和式1,_x)->+的(_结构,+和式#1)...
->的(分式,分母)->分母(,_和式2)...
    ->+[.]"结构"([公式描述_结构]#2,_结构)->+[.]"类型"([公式描述_结构]#2,+和式#2)...
    ->[公式描述_结构]#2(_和式2,_x)->+的(_结构,+和式#2)...

->[]{
    []:->^(_式,_和式)->_和式(,)...
    ->+[.]"结构"([公式描述_结构],_结构)->+[.]"类型"([公式描述_结构],+和式)...
        ->[公式描述_结构](_和式,_x)...
    ->+的(_结构,+和式)->[]{
        []:->x(+和式,)->+fx(分式#0,_式)->+因为(x,+fx)->+[o](+分式,+fx)...
            ->+^(分式#0,+和式)...
            ->+的(_结构,+fx)->+的(_结构,+^)->+的(_结构,+因为),
        ->[]
    }, ->[]
}...

->+分子(分式#0,+和式#1)->+的(_结构,+分子)...
->[]{
    []:->o(+分式,),
    ->x(+和式#1,)->+x(分式#0,_式)->+[o](+分式,+x)->+的(_结构,+x),
    ->fx(+和式#1,)->+fx(分式#0,_式)->+[o](+分式,+fx)->+的(_结构,+fx),
    ->[]
}...

->+分母(分式#0,+和式#2)->+的(_结构,+分母)...
->[]{
    []:->o(+分式,),
    ->x(+和式#2,)->+x(分式#0,_式)->+[o](+分式,+x)->+的(_结构,+x),
    ->fx(+和式#2,)->+fx(分式#0,_式)->+[o](+分式,+fx)->+的(_结构,+fx),
    ->[]
}...

->[]{
    []:->o(+分式,_f)->_f->+分子(_f,+和式#1)->+分母(_f,+和式#2)...
        ->+入口#1(+和式#1,_和式1)->+入口#2(+和式#2,_和式2)...
        ->+的(_结构,+分子)->+的(_结构,+分母)...
        ->+的(_结构,+入口#1)->+的(_结构,+入口#2),
    ->+C(,_式)->+[o](+分式,+C)->+分子(+C,+和式#1)->+分母(+C,+和式#2)...
        ->+入口#1(+和式#1,_和式1)->+入口#2(+和式#2,_和式2)...
        ->+的(_结构,+C)...
        ->+的(_结构,+分子)->+的(_结构,+分母)...
        ->+的(_结构,+入口#1)->+的(_结构,+入口#2)
}



## end
#1533, 441:
"""
分式: (-)和式 (等于 分式)...

"""
+分式(_A,_输出)->[说](,+分式)...
->分式->的(库,分式)->的(库,项)->的(库,和式)...

->模板结构(+分式,_B)->[eq](_B,_A)...

->的(_B,分子#B)->分子#B(,_B1)->的(_A,分子#A)->分子#A(,_A1)...
    ->+的(_输出,的)->+的(_输出,分子#A)...
    ->+[code]([想]#1,和式)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出)...

->的(_B,分母#B)->分母#B(,_B2)->的(_A,分母#A)->分母#A(,_A2)...
    ->+的(_输出,的)->+的(_输出,分母#A)...
    ->+[code]([想]#2,和式)->+模板结构([想]#2,_B2)->[想]#2(_A2,_输出)...

->+是(_B,_A)->+的(_输出,_A)

## end
#1535, 458:
"""
微分: (-)和式 (等于 微分)...

保存:...

"""
+微分(微分#A,_输出)->[说](,+微分)...
->微分->的(库,微分)->的(库,项)->的(库,和式)...

->模板结构(+微分,微分#B)...
->微分#B(,_式B)->输入#B(微分#B,)...
->微分#A(,_式A)->输入#A(微分#A,)->+的(_输出,输入#A)...
    ->+[code]([想]#1,和式)->+模板结构([想]#1,_式B)->[想]#1(_式A,_输出)...

->[]{
    []=>的(输入#B,_B2)->_B2=>的(输入#A,_A2)->_A2->[]{[]=>是(_B2,_A2)}...
        ->+的(_输出,的)->+的(_输出,_A2)...
    ->+[code]([想]#2,和式)->+模板结构([想]#2,_B2)->[想]#2(_A2,_输出)
}...

->+是(微分#B,微分#A)->+的(_输出,微分#A)


## end
#1541, 211:
"""
微分: (-)和式 (等于 微分)...

保存:...

"""
+微分(微分#A,_输出)->[说](,+微分)...
->微分->的(库,微分)->的(库,项)->的(库,和式)...

->模板结构(+微分,微分#B)...
->微分#B(,_B)->微分#A(,_A)->[eq](_B,_A)...
    ->+的(_输出,_A)...

->+是(微分#B,微分#A)->+的(_输出,微分#A)

## end
#1544, 1098:
"""
记住"Python"
print(type_eq0,op_name,op_text)

"""

if type_eq0=='LaTeX':
    if op_name=='/':
        ans="%[项0]/%[项]"
    elif op_name=='*' and op_text=='\\cdot ':
        ans="%[项0]\\cdot %[项]"
    elif op_text=='\\times ':
        ans="%[项0]\\times %[项]"
    else:
        ans="%[项0] %[项]"

elif type_eq0=='LaTeX_times':
    ans="%[项0]\\times %[项]"

elif type_eq0=='Matlab':
    if op_name=='/':
        ans="%[项0]./%[项]"
    elif op_name=='*' and op_text=='\\cdot ':
        ans="sum(%[项0].*%[项])"
    elif op_text=='\\times ':
        ans="cross(%[项0],%[项])"
    else:
        ans="%[项0].*%[项]"

elif type_eq0=='Python':
    if op_name=='/':
        ans="%[项0]/%[项]"
    elif op_name=='*' and op_text=='\\cdot ':
        ans="np.dot(%[项0],%[项])"
    elif op_name=='*' and op_text=='\\times ':
        ans="np.cross(%[项0],%[项])"
    else:
        ans="%[项0]*%[项]"

else:
    if op_name=='/':
        ans="%[项0]/%[项]"
    elif op_name=='*' and op_text=='\\cdot ':
        ans="%[项0]\\cdot %[项]"
    elif op_text=='\\times ':
        ans="%[项0]\\times %[项]"
    else:
        ans="%[项0]*%[项]"


## end
#1545, 794:
"""
+[返回目录](,乘式)

LaTeX::%[运算]%[项]
表达式::%[运算]%[项]
Matlab::.%[运算]%[项]

P代码:...

保存:...

"""

+乘式(_节点,_乘式)->+[del](,+乘式)...
->的(乘式,P代码)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],乘式)->+[del](,+动词)...

->+[项](_节点,+[临时文本]#0)...
->[]{
    []=>_re"[*/]|\\cdot |\\times "(_节点,_节点1)->_节点1(,)...
    =>+[乘式](_节点1,+[临时文本])->+[标题](_re,)->[]{
        []:->记忆"LaTeX"->[is](_re,*#0)->*#0(,)...
            ->[is](_节点1,_re#1)->_re#1"^[\d\.]+$"->+[修改内容]"\times "(,+[标题]),
        ->记忆"LaTeX"->[is](_re,*)->*->[==]"*"(,*)->+[修改内容]"\ "(,+[标题]),

        ->[==]"\cdot "(,_re)->+[修改内容](_re,+[标题]),
        ->[==]"\times "(,_re)->+[修改内容](_re,+[标题]),
        ->[]
    }->+[模板文本](+[临时文本]#m,+[增加内容])->+[增加内容](,+[临时文本]#0)...
    ->+[.]"[运算]"(+[模板文本],+[标题])->+[.]"[项]"(+[模板文本],+[临时文本])
}->+[增加内容](+[临时文本]#0,_乘式)







## end
#1546, 9:
%[运算]%[项]
## end
#1547, 10:
.%[运算]%[项]
## end
#1548, 9:
%[运算]%[项]
## end
#1554, 920:
"""
+[返回目录](,乘式)

LaTeX::%[运算]%[项]
表达式::%[运算]%[项]
Matlab::.%[运算]%[项]

P代码:...
P代码的"type_eq"替换为"type_eq0"
保存:...
+[新建阅读窗口](,P代码)

"""

+乘式(_节点,_乘式)->+[del](,+乘式)...
->的(乘式,P代码)...

->记忆(,)...
->+[项](_节点,+[临时文本]#0)->+[幂次](_节点,+[临时文本]#0)...
->[]{
    []=>_re"[*/]|\\cdot |\\times "(_节点,_节点1)->_节点1(,)...
    =>+[乘式](_节点1,+[临时文本])->+[标题](_re,)...

    ->+[python](Python,+[临时文本]#m)->+[code](+[python],P代码)...
    ->+[.]"op_name"(+[python],+[标题])->+[.]"op_text"(+[python],_re)...
    
    ->[]{
        []:->记忆#1"LaTeX"->[is](_re,*#0)->*#0(,)...
            ->[is](_节点1,_re#1)->_re#1"^[\d\.]+$"->+[修改内容]"\times "(,+[标题])...
            ->+[.]"type_eq0"(+[python],+[临时文本]#A)->+[临时文本]#A"LaTeX_times",
        ->+[.]"type_eq0"(+[python],记忆)
    }...

    ->+[模板文本](+[临时文本]#m,+[临时文本]#0)...
        ->+[.]"[运算]"(+[模板文本],+[标题])...
        ->+[.]"[项0]"(+[模板文本],+[临时文本]#0)->+[.]"[项]"(+[模板文本],+[临时文本])
}->+[增加内容](+[临时文本]#0,_乘式)







## end
#1557, 306:
<!--
+[H函数](,求和运算)
-->

<h2>Fourier transform</h2>
If the steps of the one-dimension \(L\)-length grid are,
%[1].

The function on the grid is,
%[2].

The Fuorier transformed function is, 
%[3].



<!--
[3].:
将"Y[n]=\sum_{1}^{M}{m}{y[m]*exp(-i*n*k*m*\Delta x)}"记作为式(3)
Nini, 打开公式分析器(文件)

+[H函数](,测试fft)
-->
## end
#1559, 63:
Y\ _{n}=\sum_{m=[1.0]}^{M}{y\ _{m}\ exp(-i\ n\ k\ m\ \Delta x)}
## end
#1560, 49:
Y[n]=\sum_{1}^{M}{m}{y[m]*exp(-i*n*k*m*\Delta x)}
## end
#1564, 135:
"""


"""

if type_out=="LaTeX":
    ans="%s \\left( %s \\right)"%(func_name,input_vars)
else:
    ans="%s(%s)"%(func_name,input_vars)

## end
#1566, 296:
"""
项: 项内容 (^ 幂次)...

"""
+项(_A,_输出)->[说](,+项)...
->项->的(库,项)->的(库,项内容)...

->模板结构(+项,_B)...
    ->+[code]([想],项内容)->+模板结构([想],_B)->[想](_A,_输出)...

->[]{^(_B,)}:
    ->^(_B,_B1)->^(_A,_A1)...
        ->+的(_输出,^)...
        ->+[code]([想]#1,项)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>[]=>^(_A,)


## end
#1568, 408:
"""
局部项: 局部项内容 (^ 幂次)...
保存:...

"""
+局部项(_A,_输出)->[说](,+局部项)...
->局部项->的(库,局部项)->的(库,项内容)->的(库,项)...

->模板结构(+局部项,_B)->[]{
    []:->未知量(_B,)->+是(未知量,_A)->+[o](_输出,+是),
    ->+[code]([想],项内容)->+模板结构([想],_B)->[想](_A,_输出)
}...

->[]{^(_B,)}:
    ->^(_B,_B1)->^(_A,_A1)->+结尾(_输出,^)...
        ->+的(_输出,^)...
        ->+[code]([想]#1,项)->+模板结构([想]#1,_B1)->[想]#1(_A1,_输出),
    ->>+结尾(_输出,_A)=>^(_A,)=>+结尾(_输出,^)



## end
#1570, 869:

def term_var_token(code,i,list_pt=None):
    i0=i
    pt=None
    [state,i,text]=word_pat_token(code,i,'\\\?[a-z\'A-Z_\d \\\\]*[a-z\'A-Z_\d]')
    if state==False:
        return [state,i0,None]
    pt=NetP('变量',text)
    list_pt.append(pt)

    [state,i,text]=word_pat_token(code,i,'\[')
    if state==True:
        [state,i,pt_i]=term_matin_token(code,i,list_pt,NetP('序号输入'))
        [state,i,text]=word_pat_token(code,i,'\]')
        if state==True:
            pt_i.con(pt,None)
            list_pt.append(pt_i)
        else:
            return [state,i0,None]


    [state,i,text]=word_pat_token(code,i,'\(')
    if state==True:
        [state,i,pt_x]=term_input_token(code,i,list_pt)
        [state,i,text]=word_pat_token(code,i,'\)')
        if state==True:
            pt_x.con(pt,None)
        else:
            return [state,i0,None]

    return [True,i,pt]

## end
#1572, 366:
"""
记住"Python"
print(','.join(list_var))
\int_{%下限}^{%上限}{%积分变量}{%积分函数}

"""

ans=''
if text_type=='表达式':
    ans='\\int_{%s}^{%s}{%s}{%s}'%(text_lower,text_upper,text_var,text_func)
    # ans='\d{%s}_{%s}'%(text_func,','.join(list_var))

elif text_type=='LaTeX':
    ans='\\%snt_{%s}^{%s}{%s}{\\left(%s\\right)}'%(text_n,text_lower,text_upper,text_var,text_func)



## end
#1574, 867:
"""
+[返回目录](,积分式)
\frac { (-) 和式 } { (-) 和式 }...

LaTeX::\%nnt_{%下限}^{%上限}{%积分变量}{%积分函数}
表达式::\int_{%下限}^{%上限}{%积分变量}{%积分函数}
P代码:...

"""

+积分式(_节点,_积分式)->+[del](,+积分式)...
->的(积分式,P代码)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],积分式)->+[del](,+动词)...

->_节点(,_积分函数)->+[和式](_积分函数,+积分函数)...

->+n->+积分变量{
    输入(_节点,):
        ->记忆"表达式"->+[函数输入](输入,+积分变量),
    
        =>的(输入,_变量)->_变量(,)...
        =>+[和式](_变量,+[临时文本])->+[增加内容]"d%s\ "(+[临时文本],+积分变量)...
        ->+[python]"n=n+'i'"(Python,)->+[o](+[python],+n)
}...

->+上限{
    []:->上限(_节点,_上限)->_上限->+[和式](_上限,+上限),
    ->[]
}...
->+下限{
    []:->下限(_节点,_下限)->_下限->+[和式](_下限,+下限),
    ->[]
}...

->+[模板文本](+[临时文本]#m,_积分式)...
->+[.](+[模板文本],+积分变量)->+[.](+[模板文本],+积分函数)...
->+[.](+[模板文本],+上限)->+[.](+[模板文本],+下限)...
->+[.](+[模板文本],+n)...

->+[del](,+积分变量)->+[del](,+积分函数)->+[del](,+上限)->+[del](,+下限)...
->+[del](,+n)


## end
#1575, 364:
"""
记住"Python"
print(','.join(list_var))
\int_{%下限}^{%上限}{%积分变量}{%积分函数}

"""

ans=''
if text_type=='表达式':
    ans='\\int_{%s}^{%s}{%s}{%s}'%(text_lower,text_upper,text_var,text_func)
    # ans='\d{%s}_{%s}'%(text_func,','.join(list_var))

elif text_type=='LaTeX':
    ans='\left(\\%snt_{%s}^{%s}{%s}{%s}\right)'%(text_n,text_lower,text_upper,text_var,text_func)



## end
#1577, 351:
"""
记住"Python"
print(','.join(list_var))
\int_{%下限}^{%上限}{%积分变量}{%积分函数}

"""

ans=''
if text_type=='表达式':
    ans='\\int_{%s}^{%s}{%s}{%s}'%(text_lower,text_upper,text_var,text_func)
    # ans='\d{%s}_{%s}'%(text_func,','.join(list_var))

elif text_type=='LaTeX':
    ans='\\%snt_{%s}^{%s}{%s}{%s}'%(text_n,text_lower,text_upper,text_var,text_func)



## end
#1580, 241:
"""
矢量: (-)和式 (等于 矢量)...

"""
+矢量(矢量#A,_输出)->[说](,+矢量)...
->矢量->的(库,矢量)->的(库,项)->的(库,和式)...

->模板结构(+矢量,矢量#B)...
->矢量#B(,_B)->输入(矢量#B,_B)->矢量#A(,_A)->输入(矢量#A,_A)->[eq](_B,_A)...
    ->+的(_输出,输入)->+的(_输出,_A)...

->+是(矢量#B,矢量#A)->+的(_输出,矢量#A)

## end
#1582, 350:
"""


"""
+序号(序号输入#A,_输出)->[说](,+序号)...
->序号->的(库,序号)->的(库,项)->的(库,和式)...

->模板结构(+序号,序号输入#B)...
->[]{
    []=>的(序号输入#B,_B2)->_B2=>的(序号输入#A,_A2)->_A2->[]{[]=>是(,_A2)}...
    ->[]{
        []:->未知量(_B2,)->+是(_B2,_A2),
        ->+的(_输出,的)->[eq](_A2,_B2)...
            ->+[code]([想]#1,和式)->+模板结构([想]#1,_B2)->[想]#1(_A2,_输出)
    }
}...

->+的(_输出,序号输入#A)

## end
#1584, 243:
"""
矩阵: (-)和式 (等于 矩阵)...

"""
+矩阵(矩阵#A,_输出)->[说](,+矩阵)...
->矩阵->的(库,矩阵)->的(库,项)->的(库,和式)...

->模板结构(+矩阵,矩阵#B)...
->矩阵#B(,_B)->输入(矩阵#B,_B)->矩阵#A(,_A)->输入(矩阵#A,_A)->[eq](_B,_A)...
    ->+的(_输出,输入)->+的(_输出,_A)...

->+是(矩阵#B,矩阵#A)->+的(_输出,矩阵#A)



## end
#1586, 362:
"""
记住"Python"
print(input_vars=='y')

"""

if type_out=="LaTeX":
    ans="%s_{%s}"%(func_name,input_vars)
elif type_out=="表达式":
    ans="%s[%s]"%(func_name,input_vars)
elif input_vars=='x' or input_vars=='y':
    ans="%s_%s"%(func_name,input_vars)
elif type_out=="Matlab":
    ans="%s(%s)"%(func_name,input_vars)
else:
    ans="%s[%s]"%(func_name,input_vars)



## end
#1588, 310:
"""
+[返回目录](,幂次)

LaTeX::^{%[临时文本]}
表达式::^{%[临时文本]}
Matlab::.^(%[临时文本])
Python::**(%[临时文本])

保存:...

"""

+幂次(_节点,_文本)->+[del](,+幂次)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],幂次)->+[del](,+动词)...

->^(_节点,_幂次)->+[和式](_幂次,+[临时文本])...
->+[模板文本](+[临时文本]#m,+[增加内容])->+[.](+[模板文本],+[临时文本])...
->+[增加内容](,_文本)




## end
#1590, 502:
"""
记住"Python"

"""

ans=''
if text_type=='表达式':
    ans='%s^{%s}'%(text_f,text_n)
elif text_type=='表达式':
    ans='%s^{%s}'%(text_f,text_n)
elif text_type=='Matlab':
    if var_type=="矩阵":
        ans='%s^%s'%(text_f,text_n)
    elif var_type=="矢量":
        ans='sum(%s.^%s)'%(text_f,text_n)
    else:
        ans='%s.^%s'%(text_f,text_n)
elif text_type=='Python':
    ans='%s**%s'%(text_f,text_n)
elif text_type=='Javascript':
    ans='%s**%s'%(text_f,text_n)
else:
    ans='%s^{%s}'%(text_f,text_n)


## end
#1592, 441:
"""
记住"Python"

"""

ans=''
if text_type=='表达式':
    ans='%s^{%s}'%(text_f,text_n)
elif text_type=='表达式':
    ans='%s^{%s}'%(text_f,text_n)
elif text_type=='Matlab':
    if var_type=="矩阵":
        ans='%s^%s'%(text_f,text_n)
    else:
        ans='%s.^(%s)'%(text_f,text_n)
elif text_type=='Python':
    ans='%s**(%s)'%(text_f,text_n)
elif text_type=='Javascript':
    ans='%s**(%s)'%(text_f,text_n)
else:
    ans='%s^{%s}'%(text_f,text_n)


## end
#1594, 321:
"""
+[返回目录](,根式)

LaTeX::\sqrt{%[和式]}
表达式::\sqrt{%[和式]}
Matlab::sqrt(%[和式])

保存:...

"""

+根式(_节点,_根式)->+[del](,+根式)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],根式)->+[del](,+动词)...

->_节点(,_和式)->+[和式](_和式,+和式#1)...
->+[修改内容](+和式#1,+[临时文本])->+[del](,+和式#1)...

->+[模板文本](+[临时文本]#m,_根式)...
->+[.]"[和式]"(+[模板文本],+[临时文本])


## end
#1596, 330:
"""
LaTeX::\sqrt{%[和式]}
表达式::\sqrt{%[和式]}
Matlab::sqrt(%[和式])

"""

if type_out=="LaTeX":
    ans="\\sqrt{%s}"%(text_f)
elif type_out=="Matlab":
    ans="sqrt(%s)"%(text_f)
elif type_out=="Python":
    ans="np.sqrt(%s)"%(text_f)
elif type_out=="Javascript":
    ans="Math.sqrt(%s)"%(text_f)
else:
    ans="\\sqrt{%s}"%(text_f)




## end
#1598, 634:
"""
+[返回目录](,括号)
\( 和式 \)...

LaTeX::\left(%和式\right)
LaTeX2::\left|%和式\right|
表达式::(%和式)
Matlab::(%和式)
Matlab2::abs(%和式)
P模板:...


"""

+括号(_节点,_括号)->+[del](,+括号)...
->的(括号,LaTeX)->的(括号,LaTeX2)...
->的(括号,Matlab)->的(括号,Matlab2)...
->的(括号,P模板)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],括号)->+[del](,+动词)...

->的(_节点,_和式)->+[和式](_和式,+和式#1)...

->+[模板文本](,_括号)...
->+[.](+[模板文本],+和式#1)->+[del](,+和式#1)...
->记忆->[]{
    []:->[==]"LaTeX"(,记忆)->[==]"绝对值"(,_节点)->+[code](+[模板文本],LaTeX2),
    ->[==]"Matlab"(,记忆)->[==]"绝对值"(,_节点)->+[code](+[模板文本],Matlab2),
    ->[==]"Python"(,记忆)->+[code](+[模板文本],P模板),
    ->+[code](+[模板文本],+[临时文本]#m)
}

## end
#1600, 352:
"""
LaTeX::\left(%和式\right)
LaTeX2::\left|%和式\right|
表达式::(%和式)
Matlab::(%和式)
Matlab2::abs(%和式)
P模板:...

"""
if type_out=="LaTeX":
    ans="\\left(%s\\right)"%(text_f)
elif type_out=="Matlab":
    ans="(%s)"%(text_f)
elif type_out=="Python":
    ans="(%s)"%(text_f)
elif type_out=="Javascript":
    ans="(%s)"%(text_f)
else:
    ans="(%s)"%(text_f)




## end
#1602, 434:
"""
记住"Pythone"
print(var_type)

"""

if type_out=="LaTeX":
    ans="\\left|%s\\right|"%(text_f)

elif type_out=="Matlab":
    if var_type=="\\vec{":
        ans="norm(%s)"%(text_f)
    if var_type=="\\hat{":
        ans="norm(%s)"%(text_f)
    else:
        ans="abs(%s)"%(text_f)

elif type_out=="Python":
    ans="np.abs(%s)"%(text_f)

elif type_out=="Javascript":
    ans="Math.abs(%s)"%(text_f)

else:
    ans="[%s]"%(text_f)




## end
#1604, 339:
"""
记住"Python"
print(type_name)

"""

if type_name=="LaTeX":
    if op_text=="+-":
        ans="%s\\pm %s"%(a,b)
    elif op_text=="-+":
        ans="%s\\mp %s"%(a,b)
    else:
        ans="%s%s%s"%(a,op_name,b)
else:
    if op_text=="+-" or op_text=="-+":
        ans="%s%s%s"%(a,op_text,b)
    else:
        ans="%s%s%s"%(a,op_name,b)



## end
#1606, 519:
"""
+[返回目录](,和式)

LaTeX::%[运算]%[项]
Matlab::%[运算]%[项]
表达式::%[运算]%[项]
P代码:...

保存:...

"""

+和式(_节点,_和式)->+[del](,+和式)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],和式)->+[del](,+动词)...

->[]{
    []:->负号(_节点,)->+[增加内容]"-"(,_和式),->[]
}...

->+[乘式](_节点,+[临时文本]#0)...
->[]{
    []=>_re"[+-]"(_节点,_节点1)->_节点1(,)...
    =>+[和式](_节点1,+[临时文本])->[m_text](+和式,+[和式])->+[标题](_re,)...
    ->+[模板文本](+[临时文本]#m,+[增加内容])->+[增加内容](,+[临时文本]#0)...
    ->+[.]"[运算]"(+[模板文本],+[标题])->+[.]"[项]"(+[模板文本],+[临时文本])
}->+[增加内容](+[临时文本]#0,_和式)





## end
#1608, 501:
"""
收集行:...

保存:...

"""

+收集矩阵内容(_矩阵,_变量)->+[del](,+收集矩阵内容)...
->的(收集矩阵内容,收集行)...

->记忆->[]{
    []:->[==](,+收集矩阵内容)->+[修改内容]"表达式"(,记忆),
    ->+[修改内容](,记忆)->[m_text](+收集矩阵内容,+[修改内容])
}...

->Python->+[乘式2](_矩阵,+[临时文本])...
->[]:
    ->输入(_矩阵,)...
        ->+[python]"list_lines=[]"(Python,)->+[v]"list_lines"(+[python],_变量)...
        ->+[做](输入,_变量)->+[code](+[做],收集行),
    
    ->+[python]"list_lines=['标量',name]"(Python,)->+[v]"list_lines"(+[python],_变量)...
        ->+[.]"name"(+[python],+[临时文本])


## end
#1610, 442:
"""
P代码:...

"""

+收集行(输入,_变量)->+[del](,+收集行)...
->的(收集行,P代码)...

->+[python]"list_vars=[]"(Python,)...
->[]{
    []=>的(输入,_输入)->_输入=>+[和式](_输入,+[临时文本])...
        ->+[python]"list_vars.append(txt_var)"(Python,)...
        ->+[s]"txt_var"(+[python],+[临时文本])
}...
->+[python]"list_vars.reverse()
list_lines.append(list_vars)"(Python,)->+[v]"list_lines"(+[python],_变量)...

->[]:
    ->输入#1(输入,)->+[做](输入#1,_变量)->+[code](+[做],收集行),
    ->[]





## end
#1614, 326:
"""


"""

if type_out=="LaTeX":
    ans="\\frac{%s}{%s}"%(text_up,text_dwn)
elif type_out=="Matlab":
    ans="(%s)./(%s)"%(text_up,text_dwn)
elif type_out=="Python":
    ans="(%s)/(%s)"%(text_up,text_dwn)
elif type_out=="Javascript":
    ans="(%s)/(%s)"%(text_up,text_dwn)
else:
    ans="\\frac{%s}{%s}"%(text_up,text_dwn)



## end
#1616, 486:
"""
+[返回目录](,分式)
\frac { (-) 和式 } { (-) 和式 }...

LaTeX::\frac{%[分子]}{%[分母]}
表达式::\frac{%[分子]}{%[分母]}
Matlab::(%[分子])./(%[分母])

P代码:...
保存:...

"""

+分式(_节点,_分式)->+[del](,+分式)...
->+[获取输出模板](_节点,+[临时文本]#m)->+动词(+[获取输出模板],分式)->+[del](,+动词)...

->的(_节点,分子)->分子(,_分子)->+[和式](_分子,+和式#1)...
->+[修改内容](+和式#1,+[分子])->+[del](,+和式#1)...

->的(_节点,分母)->分母(,_分母)->+[和式](_分母,+和式#2)...
->+[修改内容](+和式#2,+[分母])->+[del](,+和式#2)...

->+[模板文本](+[临时文本]#m,_分式)...
->+[.](+[模板文本],+[分子])->+[.](+[模板文本],+[分母])


## end
#1618, 140:
"""

"""

if txt_type=="Matlab":
    pat_out="%s=@(%s) %s"
else:
    pat_out="%s=lambda %s: %s"

ans=pat_out%(txt_name,txt_input,txt_expr)


## end
#1620, 349:
"""
P代码:...

"""

+lambda函数(_c,_输出)->+[del](,+lambda函数)...
->的(lambda函数,P代码)...

->输入(_c,)->=(_c,_f)...
->+[函数输入](输入,+输入)->+[和式](_f,+和式)...
->+[左连](输入,)->+[变量](_c,+函数)->+[左连](输入,_c)...

->+[模板文本]"%函数=@(%输入)%和式"(,+[增加内容])->+[增加内容](,_输出)...
->+[.](+[模板文本],+函数)->+[.](+[模板文本],+输入)...
->+[.](+[模板文本],+和式)...

->+[del](,+函数)->+[del](,+输入)->+[del](,+和式)


## end
#1622, 393:
"""


"""

+lambda函数2(_c,_输出)->+[del](,+lambda函数2)...

->输入(_c,)->=(_c,_f)...
->+[函数输入](输入,+输入)->+[和式](_f,+和式)...
->+[左连](输入,)->+[变量](_c,+函数)->+[左连](输入,_c)...
->的(输入,_变量)->+[标题](_变量,)...

->+[模板文本]"%函数=@(%输入)%和式*ones(size(%[标题]))"(,+[增加内容])...
->+[增加内容](,_输出)...
->+[.](+[模板文本],+函数)->+[.](+[模板文本],+输入)...
->+[.](+[模板文本],+和式)->+[.](+[模板文本],+[标题])...

->+[del](,+函数)->+[del](,+输入)->+[del](,+和式)

## end
#1624, 200:
"""
%函数=@(%输入)%和式*ones(size(%[标题]))

"""

if txt_type=="Matlab":
    pat_out="%s=@(%s) %s*ones(size(%s))"
else:
    pat_out="%s=lambda %s: %s+0*%s"

ans=pat_out%(txt_name,txt_input,txt_expr,txt_var)


## end
#1626, 334:
"""


"""

if vec_type=="\\hat{":
    if type_txt=="Matlab" or type_txt=="Python" or type_txt=="Javascript":
        exp_pat="%s"
    else:
        exp_pat="\\hat{%s}"
else:
    if type_txt=="Matlab" or type_txt=="Python" or type_txt=="Javascript":
        exp_pat="%s"
    else:
        exp_pat="\\vec{%s}"

ans=exp_pat%(vec_name)



## end
#1629, 264:
"""


"""


if type_name=="LaTeX":
    if op_text=="+-":
        ans="\\pm "
    elif op_text=="-+":
        ans="\\mp "
    elif op_text=="":
        ans="-"
    else:
        ans=op_text
else:
    if op_text=="":
        ans="-"
    else:
        ans=op_text




## end
#1631, 124:
https://tex.stackexchange.com/questions/122331/derivatives-enter-evaluated-at-vertical-bar-with-multiple-values-as-subscript
## end
#1633, 89:
https://stackoverflow.com/questions/2600191/how-do-i-count-the-occurrences-of-a-list-item
## end
#1635, 137:
"""
+[P函数](,测试)

"""
from collections import Counter

print(list_var)
test_dict=Counter(list_var)
for name in test_dict:
    print(name)

## end
#1637, 475:
"""
收集行:...

"""

+收集矩阵内容(_矩阵,_变量)->+[del](,+收集矩阵内容)...
->的(收集矩阵内容,收集行)...

->记忆->[]{
    []:->[==](,+收集矩阵内容)->+[修改内容]"表达式"(,记忆),
    ->+[修改内容](,记忆)->[m_text](+收集矩阵内容,+[修改内容])
}...

->Python->+[标题](_矩阵,)...
->[]:
    ->输入(_矩阵,)...
        ->+[python]"list_lines=[]"(Python,)->+[v]"list_lines"(+[python],_变量)...
        ->+[做](输入,_变量)->+[code](+[做],收集行),
    
    ->+[python]"list_lines=[name]"(Python,)->+[v]"list_lines"(+[python],_变量)...
        ->+[.]"name"(Python,+[标题])


## end
#1639, 121:
"""


"""
+删除表达式(,_式子)->+[del](,+删除表达式)...
->+[删除结构](,_式子)->+[del](,_式子)...

->[]:
    ->公式(_式子,)->+[del](,公式),
    ->[]

## end
#1641, 391:
"""
描述结构:...
库:...
+[新建阅读窗口](,描述结构)

"""
+初等化简(,_式子)->+[del](,+初等化简)...
->的(初等化简,描述结构)->的(初等化简,库)...

->[]{
    []:->[is](_式子,表达式#0)->表达式#0->+[.](+初等化简,表达式#0),
    ->的(_式子,表达式)->表达式->+[.](+初等化简,表达式)
}->.(+初等化简,表达式)...
->+[code]([想],描述结构)->[想](,表达式)...

->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(,_A)->_A=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)->+[做](表达式,_A)->+[code](+[做],_条目)
}



## end
#1643, 506:
"""


"""
+描述结构(,表达式)->+操作(+描述结构,)...

->[]{
    []=>的(表达式,括号)->括号{[]:=>^(括号,), =>[==]"绝对值"(,括号)}...
            ->[]{[]:->的(括号,_A)->_A=>_re"[+\-]"(_A,),
                    =>[]{[]:->_re"[+\-\*/]"(括号,), ->_re"[+\-\*/]"(,括号)}}...
        =>+去括号(表达式,括号)->+的(+操作,+去括号)
}...

->[]{
    []=>的(表达式,0)->0{[]:->_re"[+\-\*/\^]"(0,),->_re"[+\-\*\^]|分子"(,0)}...
        =>+化简0(表达式,0)->+的(+操作,+化简0)
}...

->[]{
    []=>的(表达式,1)->1{[]:->_re"[\*/\^]"(1,),->_re"[\*/\^]"(,1)}...
        =>+化简1(表达式,1)->+的(+操作,+化简1)
}




## end
#1645, 43:

去括号:...
化简0:...
化简1:...
将条目"化简0"复制为条目"化简1"
## end
#1647, 217:
"""


"""
+去括号(表达式,括号)->+[del](,+去括号)...

->的(括号,_A)...
->[]{
    []:->负号(_A,)->+[del](,负号)...
        ->+相反数(,括号)->+[投影虚构操作](表达式,+相反数)->+[del](,+相反数),
    ->[]
}...
->+代入"项"(_A,括号)->+[投影虚构操作](表达式,+代入)->+[del](,+代入)


## end
#1649, 85:
"""


"""
+化简1(表达式,1)->+[del](,+化简1)...

->+化简(,1)->+[投影虚构操作](表达式,+化简)->+[del](,+化简)

## end
#1650, 319:
"""
头部:...

"""
+化简0(表达式,0)->+[del](,+化简0)...
->的(化简0,头部)...

->+[code]([想],头部)->[想](0,0)->o"头部"(0,_A)...
->[]:
->[]{[]=>_re"[+\-]"(_A,)}->分子(,_A)->的(分式,分子)...
    ->+化简(,+[修改内容]#1)->+[投影虚构操作](表达式,+化简)->+[del](,+化简)...
    ->+[修改内容]#1"0"(,分式),

->+化简(,+[修改内容])->+[投影虚构操作](表达式,+化简)->+[del](,+化简)...
    ->+[修改内容]"0"(,_A)
## end
#1653, 118:
"""


"""
+头部(_B0,_B)...

->[]:
    ->_re"[\*/]"(_B1,_B)->_B1->+[code]([想],头部)->[想](_B0,_B1),
    ->+[o]"头部"(_B0,_B)


## end
#1655, 320:
"""
收集项:...
将'收集项'的"乘式"替换为"项"

保存:...

"""

+收集乘式系数(_A,_变量)->+[del](,+收集乘式系数)...
->的(收集乘式系数,收集项)...

->记忆->[]{
    []:->[==](,+收集乘式系数)->+[修改内容]"表达式"(,记忆),
    ->+[修改内容](,记忆)->[m_text](+收集乘式系数,+[修改内容])
}...

->+[python]"list_eles=[[],[]]"(Python,)->+[v]"list_eles"(+[python],_变量)...
->+[做](_A,_变量)->+[code](+[做],收集项)





## end
#1657, 521:
"""
P代码:...
"list_eles.append(txt_ele)"

"""

+收集项(_A,_变量)->+[del](,+收集项)...

->+[项](_A,+[临时文本])->+[临时文本]#n"1"->[]{
    []:->^(_A,_n)->_n->+[和式](_n,+[修改内容])->+[修改内容](,+[临时文本]#n),
    ->[]
}...

->+[python](Python,)...
->+[s]"txt_ele"(+[python],+[临时文本])->+[s]"txt_n"(+[python],+[临时文本]#n)...
->[]{
    []:->/(,_A)->[m_text]"list_eles[1].append([txt_ele,txt_n])"(,+[python]),
    ->[m_text]"list_eles[0].append([txt_ele,txt_n])"(,+[python])
}...

->[]:
    ->_re"[\*/]"(_A,_B)->+[做](_B,_变量)->+[code](+[做],收集项),
    ->[]





## end
#1658, 377:
"""
P代码:...
"list_eles.append(txt_ele)"

"""

+收集乘式(_A,_变量)->+[del](,+收集乘式)...

->+[乘式](_A,+[临时文本])...
->+[python](Python,)->+[s]"txt_ele"(+[python],+[临时文本])...
->[]{
    []:->-(,_A)->[m_text]"list_eles[1].append(txt_ele)"(,+[python]),
    ->[m_text]"list_eles[0].append(txt_ele)"(,+[python])
}...

->[]:
    ->_re"[+\-]"(_A,_B)->+[做](_B,_变量)->+[code](+[做],收集乘式),
    ->[]





## end
#1660, 514:
"""
收集乘式:...
将'收集乘式'的"行"替换为"乘式"

保存:...

"""

+收集括号内容(_括号,_变量)->+[del](,+收集括号内容)...
->的(收集括号内容,收集乘式)...

->记忆->[]{
    []:->[==](,+收集括号内容)->+[修改内容]"表达式"(,记忆),
    ->+[修改内容](,记忆)->[m_text](+收集括号内容,+[修改内容])
}...

->+[python]"list_eles=[[],[]]"(Python,)->+[v]"list_eles"(+[python],_变量)...
->[]:
->[is](_括号,括号)->的(括号,_A)...
    ->+[做](_A,_变量)->+[code](+[做],收集乘式),

->+[乘式2](_括号,+[临时文本])...
    ->+[python]"list_eles=[[ele_txt],[]]"(Python,)->+[v]"list_eles"(+[python],_变量)...
    ->+[s]"ele_txt"(+[python],+[临时文本])




## end
### 结束