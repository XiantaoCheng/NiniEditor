### 节点
地址, 的, 核心, 目录, 的, 的, Structure, 的, Karma, 的, Karma结构, 的, 结构场景, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 的, 节点数目统计, 20220402, 的, 20220419, 的, 20220421, 的, 的, CNetP, 的, NetP, 的, NetP结构, 的, JS程序, 20220423, 的, 的, JS版本, 20220506, 的, 20220507, 的, 的, JS版本, 的, 保存, 的, 测试结构, 20220508, 的, 的, 引用, 答案, 回答, 引用, 的, 测试, 的, J函数, 的, 测试等于, 的, 测试变量, 的, 存档1, 20220509, 的, 的, Parser, 20220513, 的, 的, 图形, 20220514, 的, 的, JS版本, J函数, 引用, 的, 测试list, 的, list_index, 的, 多输出, 的, 字符串, 的, 测试stdCode, 的, regex, 的, 参考, 20220515, 的, 的, 保存, 答案, 块尺寸, 块尺寸, 块尺寸, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 块尺寸, 块尺寸, 块尺寸, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 块尺寸, 块尺寸, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 块尺寸, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 的, 测试Parser, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 的, 测试match, 答案, 的, 保存karma, 的, conToken, 的, dict, 的, 保存NetPStack, 的, Parser语句, 20220521, 的, 块尺寸, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 答案, 的, newMap存档, 块尺寸, 空间点, 空间点, 空间点, 块尺寸, 空间点, 空间点, 空间点, 空间点, 空间点, 答案, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 的, 测试流程, 的, 测试map, 20220522, 的, 的, 测试newMap, 答案, 答案, 的, 测试re, 的, 参考, 的, 测试match, 的, 测试stateSelf, 的, 测试stateSelf_eq, 的, 测试stateSelf_is, 的, 测试stateRelation, 的, 测试, 的, 测试一般匹配, 的, 测试concat, 的, 测试新建节点, 的, 测试run_code, 的, 测试action, 的, 测试中文, 的, 测试throw, 的, 参考, 打开网页, 答案, 的, 测试中文match, 的, 测试中文匹配, 20220523, 的, 的, 测试, 20220604, 的, 的, S编辑器, html, 的, 引用, 的, StCore, 的, JS版本, 引用, 的, 引用, 的, J函数, 的, 测试, 的, J函数, 的, 测试listFromPt, 的, 保存run_code_line, 的, 测试run_code, 的, 测试do, 20220605, 的, 的, 保存, 的, 测试缩写, 的, 测试Stack, 的, 测试insert, 的, 测试readSubCode_tokener, 的, 保存run_code, 的, 测试run_code2, 的, 测试缩写, 20220606, 的, 的, 参考, 的, 测试copy, 的, 测试isType, 的, 测试setRanger, 答案, 20220611, 的, 的, 测试rangeList, 的, 测试rangeList2, 的, 测试rangeList3, 的, 测试listPt2poolPt, 20220612, 的, 的, 测试缩写2, 20220613, 的, 的, 测试流程2, 的, 测试节点构造, 的, J函数, 的, 测试make, 的, 测试场景, 核心结构, 的, 的, 的, B, C, A, 20220617, 的, 20220618, 的, 的, 笔记, 的, 修改compiler, 的, 测试lib, 的, 测试等于, 的, 测试限制匹配, 的, 测试act1, 的, 测试act2, 20220619, 的, 的, 测试内置条目, 的, 网页聊天框, 节点数目统计, 网页聊天框, 的, Nini聊天框, html, 的, 引用, 的, emoji, 20220625, 的, 的, 测试内置条目2, 的, 场景测试, 核心结构, 的, Nini, 的, 的, 的, 的, m_idea, 的, m_lib, 的, 的, A, 核心场景, 核心场景, 核心场景, 核心场景, 核心场景, 的, 测试, 的, 测试核心结构, 的, 测试readSubCode_tokener2, 的, 测试内置动词, 的, 代码, 的, 测试动作, 的, 显示, 的, 测试JS, 的, NL_Parser, 的, JS版本, 的, 测试代码, 20220626, 的, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 模块, 尺寸, 的, 尺寸, 的, 模块, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 模块, 尺寸, 组尺寸, 的, 的, 的, 模块, 尺寸, 的, 尺寸, 的, 模块, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 模块, 尺寸, 的, 尺寸, 的, 模块, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 模块, 尺寸, 的, 尺寸, 的, 模块, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 模块, 尺寸, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 模块, 尺寸, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 模块, 尺寸, 的, 尺寸, 的, 模块, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 模块, 尺寸, 的, 尺寸, 的, 模块, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 模块, 尺寸, 的, 尺寸, 的, 模块, 组尺寸, 的, 的, 的, 空间点, 在, 的, 的, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 的, 的, 空间点, 在, 空间点, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 的, 的, 空间点, 在, 空间点, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 的, 的, 空间点, 在, 空间点, 空间点, 引用, 的, 测试, 的, J函数, 的, 保存, 的, J函数, 的, 测试match, 的, 测试名词, 的, 测试动词, 的, 测试把字句, 的, 测试被动句, 的, Nini本体, 核心结构, 的, Nini, 的, m_lib, 的, m_idea, 的, 的, 的, 的, 的, 听, 的, 说, 的, 的, 的, 的, 的, 自我意识, 的, 引用, 的, 测试con, 20220629, 的, 的, 库, 的, 你好, 的, 问题, 20220630, 的, 20220701, 的, 的, 操作, 的, 库, 的, 保存, 的, 显示, 的, 的, B, 的, 的, 保存, 的, 测试缩写3, 的, 词语, 的, 测试定义条目, 的, 是, 的, 库, 的, 没有性质, 的, 回答模板, 的, 有, 的, 库, 的, 回答有什么, 的, 回答模板, 的, 测试动作排序, 20220702, 的, 的, 回答模板2, 的, 操作0, 的, 回答模板, 的, 词典, 的, 的, 的, 名词, JS代码, 的, 定义, 的, 圆柱体, 的, 20220703, 的, 回答模板, 的, 回答什么, 的, 的, 回答模板2, 定义, 的, 圆形, 的, 定义, 的, 线段, 的, 的, 测试页面, 的, 的, B, 显示, 的, 的, 的, 测试动作, 代码, 的, 的, 测试, 的, m_lib, 的, A, 的, m_idea, Nini, 的, 的, 的, 的, 的, 核心结构, 场景测试, 的, st_core.textContent, 的, 的, 测试JS, 的, 测试var, 的, 测试JS_v, 的, JS代码, 的, JS代码, 的, 在, 的, 更新意境, 的, 回答模板, 的, 保存, 的, 库, 的, 在位置, 的, 回答模板2, 的, 回答模板, 的, 朝向, 的, 回答模板, 的, 库, 的, 操作, 的, 回答模板, 的, 回答模板2, 的, 库, 的, JS代码, 20220707, 的, 20220708, 的, 20220709, 的, 的, ThreeJS, J函数, 的, OrbitControls, 库, 的, three, 库, 的, 例子, 的, 测试, 的, 引用, 的, 保存, JS代码, 的, 定义, 的, 长方形, 的, 的, 测试lookAt, 的, 测试Eulers, 的, 参考Matrix, 的, 保存, 的, 测试Matrix, 的, 测试rotationWorld, 的, 测试相机lookAt, 的, 测试ctrl性质, 20220710, 的, JS代码, 的, 定义, 的, 球体, 的, JS代码, 的, 定义, 的, 立方体, 的, JS代码, 库, 回答模板2, 回答模板, 的, 的, 的, 的, 操作, 的, 库, 回答模板, 的, 的, 旋转, 的, 的, 测试cameraLookAt, 的, JS代码2, 回答模板, 回答模板, 回答模板2, 库, JS代码, 的, 的, 的, 的, 操作, 的, 库, 的, 的, 距离, 的, 的, 回答模板2, 的, 库, 的, 回答模板1, 的, 回答模板2, 的, 显示, 的, 测试m_text保持问题, 20220922, 的, 
### 关联

### 内容
#0, 14:
文档\伊甸园\核心.ftxt
## end
#2, 599:
+[返回目录](,核心)
+[设置结构](,核心)
地址::文档\伊甸园\核心.ftxt


Nini, 导入词典的库. 导入词典
Nini, 导入网页画板的库
Nini, 导入编程语言parser的库. Nini, 导入JS编译器的库
Nini, 导入PPT的库
Nini, 打开编程语言parser(文件)
Nini, 打开JS编译器(文件)
Nini, 打开网页画板(文件)
Nini, 打开词典(文件)

Nini, 打开能谱仪论文报告(文件)
Nini, 打开网页编辑器(文件)
Nini, 打开网页聊天框(文件)
在"文档\S应用\网页聊天框.ftxt"处, 新建网页聊天框


Structure:...
ThreeJS(J函数):...
+[J函数](,ThreeJS)
+[新建阅读窗口](,ThreeJS)


S编辑器(html):...
Nini聊天框(html):...
的(Structure,NL_Parser)->的(NL_Parser,JS版本)->引用(Nini聊天框,JS版本)
的(Structure,StCore)->的(StCore,JS版本)->引用(Nini聊天框,JS版本)
引用(Nini聊天框,ThreeJS)


笔记:...

+[H函数](,Nini聊天框)
+[新建阅读窗口](,S编辑器)
+[新建阅读窗口](,Nini聊天框)



## end
#3, 104:
核心:...
创建于 20220327

节点数目统计::
+[设置结构](,节点数目统计)

[]=>Structure=>+[显示](,Structure)
Karma
+[新建阅读窗口](,Karma)
## end
#6, 1169:
Nini, 打开编程语言parser(文件)
Nini, 打开句子结构的结构场景(节点)
Nini, 打开词典的条目(节点)
Nini, 打开词典(文件)
Nini, 打开JS编译器(文件)
+[修改标题]"Structure"(,自己)

NetP:...
Karma:...
Parser:...
StCore:...
NL_Parser:...
测试代码:...

+[新建阅读窗口](,NL_Parser)
+[新建阅读窗口](,StCore)
+[新建阅读窗口](,Parser)
+[新建阅读窗口](,Karma)
+[新建阅读窗口](,NetP)
+[移除注释](NL_Parser,测试代码)
Karma的JS版本引用NetP的JS版本
NL_Parser的JS版本引用NetP的JS版本
Parser的JS版本引用Karma的JS版本
StCore的JS版本引用Parser的JS版本
的(Parser,JS版本)->引用(,JS版本)

定义"引用"为动词
Nini, "引用"是什么词性?

JS程序:...

记住"自然语言"

+[新建阅读窗口](,测试结构)
将NL_Parser解析为测试结构
测试结构转换为Javascript
测试结构的函数"removeComment"转换为Javascript
测试结构的函数"buildPoints_tokener"转换为Javascript
测试结构的类"NetPStack"转换为Javascript
测试结构的函数"Reason_oneStep"转换为Javascript
查看测试结构
查看测试结构的类"Karma"

+[修改标题]"Structure"(,自己)

图形::
在图形中, 把测试结构的函数"fun_普通句"显示为程序流程图
+[显示PPT场景](,图形)


查看测试结构
测试结构:...
+[显示星图](,测试结构)
的(测试结构,func)->+[显示](,func)
Nini, 打开编程语言parser(文件)


Karma结构:...
[python程序_代码](Karma,)...
->+[修改内容](,Karma结构)->[m_text]([python程序_代码],+[修改内容])
NetP结构:...
[python程序_代码](NetP,)...
->+[修改内容](,NetP结构)->[m_text]([python程序_代码],+[修改内容])



结构场景:...
+[导入节点](,结构场景)->[m_text](Karma结构,+[导入节点])
+[删除结构](,结构场景)->+[导入节点](,结构场景)->[m_text](NetP结构,+[导入节点])
+[显示星图]"1"(,结构场景)

## end
#8, 34885:
"""
JS版本(J函数):...
+[新建阅读窗口](,JS版本)
+[移除注释](JS版本,JS版本)
JS版本的"None"替换为"''"

记住"自然语言"

将JS版本的"%[list1]\+=%[list2]\(\)"替换为"%[list1]=%[list1].concat(%[list2]())"
将JS版本的"%[变量]\[-%[n]\]"替换为"%[变量][%[变量].length-%[n]]"
将JS版本的"%[变量]\[%[1]:-%[n]\]"替换为"%[变量].slice(%[1],%[变量].length-%[n])"
将JS版本的"%[变量]\[%[1]:\]"替换为"%[变量].slice(%[1],%[变量].length)"
将JS版本的"len\(%[变量]\)"替换为"%[变量].length"
将JS版本的"NetP"替换为"new NetP"
将JS版本的"not "替换为"!"

allEffects

"""


import sys
import re
if __name__=='__main__':
    sys.path.append(sys.path[0]+'\\..')
from body.bone import NetP

def dictToList(dict_pt):
    list_pt=[]
    for term in dict_pt:
        list_pt+=dict_pt[term]
    return list_pt


class Karma:
    def __init__(self,symbol):
        self.m_symbol=symbol
        symbol.m_master=self
        self.m_creator=None


        self.m_map=None


        self.m_cause=None
        self.m_yese=[]
        self.m_noe=[]
        self.m_yesAnd=False
        self.m_noAnd=False
        self.m_eoi=0


        self.m_clause=[]
        self.m_clauseAnd=True
        self.m_clauseNew=[]
        self.m_clauseCollect=False
        self.m_clauseOut=False
        self.m_clauseIn=False


        self.m_not=False
        self.m_no=False
        
        self.m_buildMode=False


        self.m_listMP=None
        self.m_restricted=False


        self.m_ranger=None
        self.m_rangType=False                               # connecting[self(,ranger)]---True, connected[ranger(,self)]---False
        self.m_stage=0
        self.m_reState=''
        self.m_choose=True
        self.m_interp=False


    def stateSelf(self):
        if self.m_interp==True:
            return 'blue'
        if self.m_symbol==None or self.m_map==None:
            return 'yellow'
        if self.m_symbol.m_name=='[eq]' or self.m_symbol.m_name=='[同名]':
            return self.stateSelf_eq()
        elif self.m_symbol.m_name=='[is]' or self.m_symbol.m_name=='[是]':
            return self.stateSelf_is()
        elif self.m_symbol.m_name=='[那]':
            return 'green'
        if self.m_symbol.m_name=='_正则表达式' or self.m_symbol.m_name=='_re':
            try:
                pattern=re.compile(self.m_symbol.m_text)
            except:
                print('Invalid regular expression: '+self.m_symbol.m_text+'!')
                return 'red'
            match=self.m_map.m_name
            if pattern.findall(match)!=[]:
                return 'green'
            else:
                return 'red'
        if self.m_symbol.m_name!='' and self.m_symbol.m_name[0]=='_':
            name=self.m_symbol.m_name[1:]
            name_m=self.m_map.m_name
            if len(name)==0:
                return 'green'
            elif name[0]=='[' and name[-1]==']':
                if len(name_m)>=2 and name_m[0]=='[' and name_m[-1]==']':
                    return 'green'
                else:
                    return 'red'
            else:
                return 'green'
        if self.m_symbol.m_name!='' and self.m_symbol.m_name[0]=='[' and self.m_symbol.m_name[-1]==']':
            name1=self.m_symbol.m_name[1:-1]
            name2=self.m_symbol.m_name
            if self.m_interp==False and self.m_map.m_creator==None and self.m_buildMode==False:
                return 'red'
            if name1==self.m_map.m_name or name2==self.m_map.m_name:
                return 'green'
            else:
                return 'red'
        if self.m_symbol.m_name!='' and self.m_symbol.m_name[0]=='~':
            name=self.m_symbol.m_name[1:]
            if name==self.m_map.m_name:
                return 'red'
            else: 
                return 'green'
        else:
            name=self.m_map.m_name
            if name!='' and name[0]=='[' and name[-1]==']':
                name=name[1:-1]
            if name!=self.m_symbol.m_name:
                return 'red'
            elif self.m_symbol.m_text!='' and self.m_symbol.m_text!=self.m_map.m_text:
                return 'red'
            else:
                return 'green'


    def stateSelf_eq(self):
        if self.m_map==None:
            return 'yellow'
        if self.m_symbol.m_db[0]==None or self.m_symbol.m_db[1]==None:
            return 'red'
        
        karmaL=self.m_symbol.m_db[0].m_master
        karmaR=self.m_symbol.m_db[1].m_master
        if karmaL==None or karmaR==None:
            print('Error! [eq] doesn\'t have sbj or obj.')
            print('Sbj:',karmaL)
            print('Obj:',karmaR)
            return 'red'
        if karmaL.m_map==None or karmaR.m_map==None:
            return 'green'
        else:
            nameL=karmaL.m_map.m_name
            nameR=karmaR.m_map.m_name
            
            if len(karmaL.m_map.m_name)>1 and karmaL.m_map.m_name[0]=='[' and karmaL.m_map.m_name[-1]==']':
                nameL=karmaL.m_map.m_name[1:-1]
            if len(karmaR.m_map.m_name)>1 and karmaR.m_map.m_name[0]=='[' and karmaR.m_map.m_name[-1]==']':
                nameR=karmaR.m_map.m_name[1:-1]


            if nameL==nameR:
                return 'green'
            else:
                return 'red'


    def stateSelf_is(self):
        if self.m_map==None:
            return 'yellow'
        if self.m_symbol.m_db[0]==None or self.m_symbol.m_db[1]==None:
            return 'red'
        
        karmaL=self.m_symbol.m_db[0].m_master
        karmaR=self.m_symbol.m_db[1].m_master
        if karmaL.m_map==None or karmaR.m_map==None:
            return 'green'
        else:
            if karmaL.m_map==karmaR.m_map:
                return 'green'
            else:
                return 'red'


    def stateSelf_space(self):
        if self.m_map==None:
            return 'yellow'
        if self.m_symbol.m_db[0]==None or self.m_symbol.m_db[1]==None:
            return 'red'


        km_sbj=self.m_symbol.m_db[0].m_master
        km_obj=self.m_symbol.m_db[1].m_master
        if km_sbj.m_map==None or km_obj.m_map==None:
            return 'green'
        elif km_sbj.m_map==km_obj.m_map:
            return 'red'
        x1=km_sbj.m_map.m_pos[0]
        y1=km_sbj.m_map.m_pos[1]
        x2=km_obj.m_map.m_pos[0]
        y2=km_obj.m_map.m_pos[1]
        name=self.m_symbol.m_name
        if name=='[当地]' or name=='[here]':
            if x1==x2 and y1==y2:
                return 'green'
            else:
                return 'red'
        elif name=='[上面]' or name=='[up]':
            if y1>y2:
                return 'green'
            else:
                return 'red'
        elif name=='[正上面]' or name=='[Up]':
            if x1==x2 and y1>y2:
                return 'green'
            else:
                return 'red'
        elif name=='[下面]' or name=='[down]':
            if y1<y2:
                return 'green'
            else:
                return 'red'
        elif name=='[正下面]' or name=='[Down]':
            if x1==x2 and y1<y2:
                return 'green'
            else:
                return 'red'
        elif name=='[左面]' or name=='[left]':
            if x1>x2:
                return 'green'
            else:
                return 'red'
        elif name=='[正左面]' or name=='[Left]':
            if y1==y2 and x1>x2:
                return 'green'
            else:
                return 'red'
        elif name=='[右面]' or name=='[right]':
            if x1<x2:
                return 'green'
            else:
                return 'red'
        elif name=='[正右面]' or name=='[Right]':
            if y1==y2 and x1<x2:
                return 'green'
            else:
                return 'red'



    
    def stateRelation(self):
        if self.m_map==None or self.m_symbol==None:
            return True
            
        cause=self.m_cause
        while cause!=None:
            if cause.m_symbol==self.m_symbol.m_db[0]:
                if cause.m_map!=self.m_map.m_db[0]:
                    return False
            if cause.m_symbol==self.m_symbol.m_db[1]:
                if cause.m_map!=self.m_map.m_db[1]:
                    return False
            if cause.m_symbol.m_db[0]==self.m_symbol:
                if cause.m_map.m_db[0]!=self.m_map or cause.stateSelf()=='red':
                    return False
            if cause.m_symbol.m_db[1]==self.m_symbol:
                if cause.m_map.m_db[1]!=self.m_map or cause.stateSelf()=='red':
                    return False


            cause=cause.m_cause
        
        return True


    def mapListFromRange(self):
        list_map=[]
        if self.m_rangType==True:
            if self.m_ranger.m_map==None:
                list_map=[]
            else:
                list_map=self.m_ranger.m_map.m_con.copy()
        elif self.m_ranger.m_symbol.m_db[0]==self.m_symbol:
            if self.m_ranger.m_map.m_db[0]==None:
                list_map=[]
            else:
                list_map=[self.m_ranger.m_map.m_db[0]]
        elif self.m_ranger.m_symbol.m_db[1]==self.m_symbol:
            if self.m_ranger.m_map.m_db[1]==None:
                list_map=[]
            else:
                list_map=[self.m_ranger.m_map.m_db[1]]
        else:
            print('Warning! Undefined situation.')
        return list_map
    
    def mapListFromPool_normal(self,pool):
        name=self.m_symbol.m_name
        if len(name)>0 and (name[0]=='_' or name[0]=='~'):
            list_have=dictToList(pool)
            list_map=[]
            for point in list_have:
                if point.m_needed==None or (point.m_needed!=None and point.m_creator!=None):
                    list_map.append(point)
        else:
            list_map=pool.get(self.m_symbol.m_name,[])
        return list_map


    def mapList_is(self,ranger,pool):
        if ranger.m_symbol.m_db[0]==None or ranger.m_symbol.m_db[1]==None:
            return self.mapListFromPool_normal(pool)
        if ranger.m_symbol.m_db[0]==self.m_symbol and ranger.m_map.m_db[1]!=None:
            return [ranger.m_map.m_db[1]]
        if ranger.m_symbol.m_db[1]==self.m_symbol and ranger.m_map.m_db[0]!=None:
            return [ranger.m_map.m_db[0]]
        return self.mapListFromPool_normal(pool)


    def mapList_that(self,ranger):
        list_cause=ranger.allCauses()
        list_map=[]
        for cause in list_cause:
            pt_map=cause.m_map
            if pt_map!=None and pt_map not in list_map:
                list_map.append(pt_map)
        return list_map


    def rangeList(self,pool,areaType,list_new):
        if self.m_listMP!=None:
            return self.m_listMP
        elif self.m_ranger!=None:
            ranger=self.m_ranger
            nameR=self.m_ranger.m_symbol.m_name
            if nameR=='[is]':
                list_map=self.mapList_is(self.m_ranger,pool)
            elif nameR=='[那]':
                list_map=self.mapList_that(self.m_ranger)
            elif self.m_ranger.isType('非回答新建') and self.m_ranger.m_symbol in self.m_symbol.m_con:
                list_map=self.mapListFromPool_normal(pool)
            else:
                list_map=self.mapListFromRange()
        else:
            list_map=self.mapListFromPool_normal(pool)


        self.m_listMP=list_map


        return list_map



    def newMap(self,pool,areaType,list_new):
        list_map=self.rangeList(pool,areaType,list_new)


        if self.m_buildMode==False or areaType==False:
            name=self.m_symbol.m_name
            if self.isPreDefined():
                if self.m_map==None:
                    point=NetP(name,self.m_symbol.m_text)
                    point.m_pos=self.m_symbol.m_pos.copy()
                    point.m_needed=self
                    point.m_creator=self
                    self.map(point)
                else:
                    self.m_map.delete()
                    del self.m_map
                    self.map(None)
                return
            elif self.isFunctionPoint()==2:
                if self.m_map==None:
                    point=NetP(name,self.m_symbol.m_text)
                    point.m_pos=self.m_symbol.m_pos.copy()
                    point.m_needed=self
                    self.map(point)
                else:
                    self.map(self.m_map)
                self.m_interp=True
                return
            list_have=list_map
            mp=self.m_map
            self.map(self.nextInlist(mp,list_have))
            return
        else:
            name=self.m_symbol.m_name
            if name!='' and (name[0]!='[' or name[-1]!=']'):
                if self.m_map!=None:
                    self.m_map.m_creator=None
                    if self.m_map.m_needed==None:
                        self.m_map.delete()
                        self.map(None)
                        return
                    else:
                        self.m_map.m_name='['+self.m_map.m_name+']'
                list_need=[]
                for point in list_map:
                    if point.m_creator==None and point.m_needed!=None:
                        list_need.append(point)
                point=self.m_map
                self.map(self.nextInlist(point,list_need))
                if self.m_map==None:
                    if self.m_restricted==True:
                        self.map(None)
                        return
                    point=NetP(self.m_symbol.m_name,self.m_symbol.m_text)
                    point.m_pos=self.m_symbol.m_pos.copy()
                    point.m_building=True
                    self.map(point)
                else:
                    self.m_map.m_building=True
                    self.m_map.m_name=self.m_map.m_name[1:-1]
                self.m_map.m_creator=self
                return
            else:
                if self.m_map==None:
                    point=NetP(name,self.m_symbol.m_text)
                    point.m_pos=self.m_symbol.m_pos.copy()
                    point.m_building=True
                    point.m_needed=self
                    self.map(point)
                    return
                else:
                    self.m_map.m_needed=None
                    self.m_map.delete()
                    self.map(None)
                    return


        self.map(None)



    def nextInlist(self,point,list_pt):
        if list_pt==[]:
            return None
        if point==None:
            return list_pt[0]
        
        try:
            i=list_pt.index(point)
        except:
            return None
        
        if i+1>=len(list_pt):
            return None
        else:
            return list_pt[i+1]


    def clearAll(self):
        self.m_map=None
        self.m_stage=0
        self.m_interp=False
        self.m_reState=''
        self.m_choose=True
        self.m_eoi=0
        if self.m_restricted==False:
            del self.m_listMP
            self.m_listMP=None
        for clause in self.m_clause:
            clause.clearAll()
        for end in self.m_noe:
            end.clearAll()
        for end in self.m_yese:
            end.clearAll()



    def map(self,point):
        self.clearAll()


        self.m_map=point
        if self.m_map!=None:
            cause=self.m_cause
            while cause!=None:
                if cause.needBuildRelation():
                    if cause.m_map.m_needed==None or cause.m_map.m_needed==cause:
                        if cause.m_symbol.m_db[0]==self.m_symbol:
                            cause.m_map.connect(self.m_map,0)
                        if cause.m_symbol.m_db[1]==self.m_symbol:
                            cause.m_map.connect(self.m_map,1)
                if self.needBuildRelation():
                    if self.m_map.m_needed==None or self.m_map.m_needed==self:
                        if self.m_symbol.m_db[0]==cause.m_symbol:
                            self.m_map.connect(cause.m_map,0)
                        if self.m_symbol.m_db[1]==cause.m_symbol:
                            self.m_map.connect(cause.m_map,1)
                cause=cause.m_cause


    def buildingNewMap(self):
        if self.m_map==None:
            return False
        elif self.m_buildMode==False:
            return False
        else:
            if self.m_map.m_needed==None:
                return True
        return False


    def needBuildRelation(self):
        if self.buildingNewMap():
            return True
        elif self.isFunctionPoint()!=0:
            return True
        return False
    
    def selfType(self):
        name=self.m_symbol.m_name
        if name=='':
            return "实链节"
        elif name[0]=='_':
            return "实万用链节"
        elif name[0]=='~':
            return "实否定链节"
        elif name[0]=='[' and name[-1]==']':
            return "虚链节"
        return "实链节"


    def isVirtual(self):
        name=self.m_symbol.m_name
        if len(name)>1 and name[0]=='[' and name[-1]==']':
            return True
        elif self.isSpaceRelation():
            return True
        else:
            return False


    def isPreDefined(self):
        name=self.m_symbol.m_name
        if name=='[is]' or name=='[eq]' or name=='[那]' or name=='[]':
            return True
        elif self.isSpaceRelation():
            return True
        else:
            return False


    def isSpecialRanger(self):
        name=self.m_symbol.m_name
        if name=='[is]' or name=='[那]':
            return True
        return False



    def isType(self,str_type):
        name=self.m_symbol.m_name
        if infoInStr('引用',str_type):
            if not self.isVirtual() or self.m_buildMode==True:
                return False
        if infoInStr('新建',str_type):
            if infoInStr('非新建',str_type):
                if self.m_buildMode==True:
                    return False
            elif self.m_buildMode==False:
                return False
        if infoInStr('动作',str_type):
            if not self.isVirtual() or self.m_buildMode==False:
                return False
        if infoInStr('内置',str_type):
            if not self.isPreDefined():
                return False
        if infoInStr('特殊范围',str_type):
            if not self.isSpecialRanger():
                return False
        if infoInStr('否定',str_type):
            if name=='' or name[0]!='~':
                return False
        if infoInStr('通用',str_type):
            if name=='' or name[0]!='_':
                return False
        if infoInStr('普通',str_type):
            if self.isVirtual():
                return False
        if infoInStr('端点',str_type):
            if infoInStr('非端点',str_type):
                if self.m_ranger==None:
                    return False
            elif self.m_ranger!=None:
                return False
        if infoInStr('回答',str_type):
            an_type=True
            if self.m_map==None or self.m_map.m_needed==self or self.m_map.m_needed==None:
                an_type=False
            if infoInStr('非回答',str_type):
                if an_type:
                    return False
            elif not an_type:
                return False
        if infoInStr('限制',str_type):
            if self.m_restricted==False:
                return False
        return True
        



    def isFunctionPoint(self):
        if self.m_symbol.m_name=='':
            return 0
        elif self.m_symbol.m_name=='[eq]' or self.m_symbol.m_name=='[同名]':
            return 1
        elif self.m_symbol.m_name=='[is]' or self.m_symbol.m_name=='[是]':
            return 1
        elif self.m_symbol.m_name=='[那]':
            return 1
        elif self.m_symbol.m_name=='[]':
            return 1
        elif self.isSpaceRelation():
            return 1
        elif self.m_symbol.m_name[0]=='[' and self.m_symbol.m_name[-1]==']':
            return 2
        return 0


    def isSpaceRelation(self):
        if self.m_buildMode==True:
            return False
        name=self.m_symbol.m_name
        if name=='[上面]' or name=='[下面]' or name=='[左面]' or name=='[右面]':
            return True
        elif name=='[正上面]' or name=='[正下面]' or name=='[正左面]' or name=='[正右面]':
            return True
        elif name=='[当地]':
            return True
        elif name=='[up]' or name=='[down]' or name=='[left]' or name=='[right]':
            return True
        elif name=='[Up]' or name=='[Down]' or name=='[Left]' or name=='[Right]':
            return True
        elif name=='[here]':
            return True
        return False


                
    def Reason_iterative(self,pool,list_new=None):
        if list_new==None:
            list_new=[]
        while True:
            [change,list_pt]=self.Reason_oneStep(pool)
            if self.m_stage==2:
                for clause in self.m_clause:
                    clause.Reason_iterative(pool)
            elif self.m_stage==3:
                for end in self.m_noe:
                    end.Reason_iterative(pool)
                for end in self.m_yese:
                    end.Reason_iterative(pool)
            elif self.m_stage==5:
                break
        return [self.m_reState,list_new]




    def isChosen(self):
        if self.m_cause==None:
            return False
        if self.m_cause.m_choose==False:
            return self in self.m_cause.m_noe
        else:
            return self in self.m_cause.m_yese


    def Reason_oneStep(self,pool):
        list_new=[]
        areaType=self.areaType()
        change=False
        
        if self.m_stage==0:
            if self.m_cause!=None:
                if self in self.m_cause.m_clause:
                    if self.m_cause.m_stage==2:
                        self.m_stage=1
                        change=True


        if self.m_stage==1:
            while True:
                if self.stateSelf()!='blue':
                    self.newMap(pool,areaType,list_new)
                else:
                    self.m_interp=False
                change=True
                if self.stateRelation()==False:
                    continue
                elif self.stateSelf()=='red':
                    continue
                elif self.stateSelf()=='yellow':
                    self.m_stage=5
                    if self.m_no==False:
                        self.m_reState='dark yellow'
                        return [change,list_new]
                    else:
                        self.m_reState='dark green'
                        return [change,list_new]
                elif self.stateSelf()=='blue':
                    self.m_stage=1
                    return [change,list_new]
                else:
                    self.m_stage=2
                    break


        if self.m_stage==2:
            if self.m_clause==[]:
                self.m_choose=True
                self.m_stage=3
                change=True
            else:
                self.m_choose=self.m_clauseAnd
                keep=False
            for clause in self.m_clause:
                if self.m_clauseAnd==True:
                    if clause.m_reState=='dark yellow':
                        self.m_choose=False
                        self.m_stage=3
                        change=True
                        self.m_clauseOut=True
                        break
                    elif clause.m_reState=='':
                        keep=True
                else:
                    if clause.m_reState=='dark green':
                        self.m_choose=True
                        self.m_stage=3
                        change=True
                        self.m_clauseOut=True
                        break
                    elif clause.m_reState=='':
                        keep=True
            if self.m_clause!=[] and keep==False:
                self.m_stage=3
                change=True
                self.m_clauseOut=True


        if self.m_stage==3:
            if self.m_choose==False:
                if self.m_noe==[]:
                    self.m_stage=1
                    change=True
                    return [change,list_new]


                i=self.m_eoi
                end=self.m_noe[i]
                if end.m_stage==0:
                    end.m_stage=1
                    change=True
                elif end.m_reState=='dark yellow':
                    if self.m_noAnd==True:
                        self.m_stage=1
                        change=True
                    else:
                        i+=1
                        change=True
                        if i==len(self.m_noe):
                            self.m_stage=1
                            self.m_eoi=0
                        else:
                            self.m_eoi=i
                elif end.m_reState=='dark green':
                    if self.m_noAnd!=True:
                        self.m_stage=4
                        change=True
                    else:
                        i+=1
                        change=True
                        if i==len(self.m_noe):
                            self.m_stage=4
                            self.m_eoi=0
                        else:
                            self.m_eoi=i
            else:
                if self.m_yese==[] and self.m_noe==[]:
                    self.m_stage=4
                    change=True
                elif self.m_yese==[]:
                    self.m_stage=1
                    change=True
                    return [change,list_new]
                else:
                    i=self.m_eoi
                    end=self.m_yese[i]
                    if end.m_stage==0:
                        end.m_stage=1
                        change=True
                    elif end.m_reState=='dark yellow':
                        if self.m_yesAnd==True:
                            self.m_stage=1
                            change=True
                        else:
                            i+=1
                            change=True
                            if i==len(self.m_yese):
                                self.m_stage=1
                                self.m_eoi=0
                            else:
                                self.m_eoi=i
                    elif end.m_reState=='dark green':
                        if self.m_yesAnd!=True:
                            self.m_stage=4
                            change=True
                        else:
                            i+=1
                            change=True
                            if i==len(self.m_yese):
                                self.m_stage=4
                                self.m_eoi=0
                            else:
                                self.m_eoi=i


        if self.m_stage==4:
            if self.m_clauseNew!=[] or self.m_clauseOut==True:
                self.m_clauseCollect=True
            if (self.m_buildMode==True or self.isFunctionPoint()==1) and self.m_map!=None and self.m_map not in list_new:
                list_new.append(self.m_map)
            self.m_stage=5
            if self.m_no==True:
                self.m_reState='dark yellow'
                change=True
                return [change,list_new]
            else:
                self.m_reState='dark green'
                change=True
                return [change,list_new]


        return [change,list_new]





    def areaType(self):
        aType=True
        cause=self
        while True:
            if cause.m_no==True:
                aType=not aType
            if cause.m_cause==None:
                return aType
            else:
                cause=cause.m_cause



        




    def build(self,code,points):
        wait_list=[]
        last=self
        connection=None
        exp='(->>|=>>|->|=>|{[ \t\n]*|[ \t\n]*}|,[ \t\n]*|;[ \t\n]*|:[ \t\n]*)'
        units=re.split(exp,code)
        for unit in units:
            if unit=='':
                continue
            elif unit=='->' or unit=='=>' or unit=='->>' or unit=='=>>':
                connection=unit
            elif unit[0]=='{':
                wait_list.append(['clause_splitting',last])
            elif unit[0]==':':
                wait_list.append(['end_splitting',last])
            elif unit[0]==',':
                last=wait_list[-1][1]
            elif unit[0]==';':
                if wait_list[-1][0]=='end_splitting':
                    wait_list.pop()
                if wait_list!=[]:
                    last=wait_list[-1][1]
            elif unit[-1]=='}':
                last=wait_list[-1][1]
                wait_list.pop()
            else:
                current=Karma(points[int(unit)])
                current.m_cause=last
                if connection=='->':
                    current.m_no=False
                    last.m_yese.append(current)
                elif connection=='->>':
                    current.m_no=False
                    last.m_noe.append(current)
                elif connection=='=>':
                    current.m_no=True
                    last.m_yese.append(current)
                elif connection=='=>>':
                    current.m_no=True
                    last.m_noe.append(current)
                else:
                    last.m_clause.append(current)
                connection=''
                last=current


    def info_cause(self):
        info=''
        karma=self
        while True:
            if karma.m_symbol!=None:
                info=karma.m_symbol.m_name+info
            if karma.m_cause==None:
                break
            if karma in karma.m_cause.m_yese:
                if karma.m_no==True:
                    info='=>'+info
                else:
                    info='->'+info
            elif karma in karma.m_cause.m_noe:
                if karma.m_no==True:
                    info='=>>'+info
                else:
                    info='->>'+info
            elif karma in karma.m_cause.m_clause:
                info='=='+info
            karma=karma.m_cause
        print(info)
        return info


    def allEffects(self):
        list_effects=[self]
        for karma in self.m_clause:
            list_effects+=karma.allEffects()
        for karma in self.m_noe:
            list_effects+=karma.allEffects()
        for karma in self.m_yese:
            list_effects+=karma.allEffects()
        return list_effects


    def setRangers(self,causes=None):
        connecting=None
        connected=None
        caseNo=100
        if causes==None:
            causes=[]
        elif self.isType('非新建普通链节'):
            for cause in causes:
                if cause.m_symbol.m_db[0]==self.m_symbol or cause.m_symbol.m_db[1]==self.m_symbol:
                    if cause.isType('特殊范围'):
                        connected=cause
                        break
                    elif cause.isType('普通非新建') and caseNo>3:
                        connected=cause
                        caseNo=3
                    elif cause.isType('新建') and caseNo>5:
                        connected=cause
                        caseNo=5
                elif self.m_symbol.m_db[0]==cause.m_symbol or self.m_symbol.m_db[1]==cause.m_symbol:
                    if cause.isType('引用') and caseNo>2:
                        connecting=cause
                        caseNo=2
                    elif cause.isType('普通非新建') and caseNo>4:
                        connecting=cause
                        caseNo=4
                    elif cause.isType('新建') and caseNo>6:
                        connecting=cause
                        caseNo=6
            if connected!=None:
                self.m_ranger=connected
            elif connecting!=None:
                self.m_ranger=connecting
                self.m_rangType=True
        causes=causes[:]+[self]


        for con in self.m_clause:
            con.setRangers(causes)
        for end in self.m_yese:
            end.setRangers(causes)
        for end in self.m_noe:
            end.setRangers(causes)


    def causeEnd(self):
        cause=self
        while cause.m_cause!=None:
            cause=cause.m_cause
        return cause


    def allCauses(self):
        cause=self
        list_km=[]
        while cause.m_cause!=None:
            cause=cause.m_cause
            list_km.append(cause)
        return list_km


    def addKarma(self,karma,con_type='肯定'):
        while karma.m_cause!=None:
            karma=karma.m_cause
        if con_type=="clause" or con_type=="从句":
            self.m_clause.append(karma)
        elif con_type=="no" or con_type=="否定":
            self.m_noe.append(karma)
        else:
            self.m_yese.append(karma)
        karma.m_cause=self


    def __str__(self) -> str:
        return self.info_karma()


    def info_karma(self,info='',head=0,type_info=0):
        if info=='' and self.m_no==True:
            info='[]=>'
        if self.m_ranger!=None and type_info==0:
            ranger=self.m_ranger.m_symbol.info("不显示位置不显示内容")
            info+='['+ranger+']'
            head+=len(ranger)+2
            
        info+=self.m_symbol.info("不显示位置不显示内容")
        head+=len(self.m_symbol.info("不显示位置不显示内容"))


        if self.m_clause!=[]:
            info+='{'
            head+=1
            for clause in self.m_clause:
                info+='\n'+''.rjust(head)
                info=clause.info_karma(info,head,type_info)
                if clause!=self.m_clause[-1]:
                    info+=','
            info+='\n'+'}'.rjust(head-1)
        n=0
        if len(self.m_noe)+len(self.m_yese)>1:
            info+=':'
        for end in self.m_yese:
            if n==0:
                if end.m_no==False:
                    info+='->'
                else:
                    info+='=>'
                info=end.info_karma(info,head+2,type_info)
                n+=1
            else:
                if end.m_no==False:
                    info+='\n'+'->'.rjust(head+2)
                else:
                    info+='\n'+'=>'.rjust(head+2)
                info=end.info_karma(info,head,type_info)
            if end!=self.m_yese[-1] or self.m_noe!=[]:
                info+=','
        for end in self.m_noe:
            if n==0:
                if end.m_no==False:
                    info+='->>'
                else:
                    info+='=>>'
                info=end.info_karma(info,head+3,type_info)
                n+=1
            else:
                if end.m_no==False:
                    info+='\n'+'->>'.rjust(head+3)
                else:
                    info+='\n'+'=>>'.rjust(head+3)
                info=end.info_karma(info,head,type_info)
            if end!=self.m_noe[-1]:
                info+=','


        return info
                


        
        
def printPtList(list_pt):
    info_pt='['
    for pt in list_pt:
        info_pt+=pt.info(show_info='不显示文本')
        if pt!=list_pt[-1]:
            info_pt+=', '
        else:
            info_pt+=';'
    info_pt+=']'
    print(info_pt)





def infoInStr(string,str_info):
    a=str_info.find(string)
    return a!=-1





if __name__=='__main__':
    result=infoInStr('新建','新建')
    print(result)
## end
#10, 82913:
起点#0""(,块#1)[-1,-1]
块#1"\"\"\"
JS版本:...
\"\"\"
import sys
import re
"(,)[-1,-1]
块#2""(,)[-1,-1]
然后#3""(块#1,块#2)[-1,-1]
块#4"sys.path.append(sys.path[0]+'\\..')
"(,)[-1,-1]
if#5"__name__=='__main__'"(块#2,块#4)[-1,-1]
eof#6""(,)[-1,-1]
然后#7""(块#4,eof#6)[-1,-1]
块#8"from body.bone import NetP
"(,)[-1,-1]
然后#9""(块#2,块#8)[-1,-1]
块#10""(,)[-1,-1]
然后#11""(块#8,块#10)[-1,-1]
块#12"list_pt=[]
"(,)[-1,-1]
func#13"dictToList(dict_pt)"(块#10,块#12)[-1,-1]
块#14""(,)[-1,-1]
然后#15""(块#12,块#14)[-1,-1]
块#16"list_pt+=dict_pt[term]
"(,)[-1,-1]
for#17"dict_pt"(块#14,块#16)[-1,-1]
变量#18"term"(for#17,)[-1,-1]
eof#19""(,)[-1,-1]
然后#20""(块#16,eof#19)[-1,-1]
块#21"return list_pt
"(,)[-1,-1]
然后#22""(块#14,块#21)[-1,-1]
eof#23""(,)[-1,-1]
然后#24""(块#21,eof#23)[-1,-1]
块#25""(,)[-1,-1]
然后#26""(块#10,块#25)[-1,-1]
块#27""(,)[-1,-1]
class#28"Karma"(块#25,块#27)[-1,-1]
块#29"self.m_symbol=symbol
symbol.m_master=self
self.m_creator=None
self.m_map=None
self.m_cause=None
self.m_yese=[]
self.m_noe=[]
self.m_yesAnd=False
self.m_noAnd=False
self.m_eoi=0
self.m_clause=[]
self.m_clauseAnd=True
# To reorder actions generated inside a clause. All new points generated in clauses will be stored in
# m_clauseNew until the whole sentence completes the map.
# It's a kind of stack.
self.m_clauseNew=[]
self.m_clauseCollect=False
self.m_clauseOut=False
self.m_clauseIn=False
self.m_not=False
self.m_no=False
self.m_buildMode=False
self.m_listMP=None
self.m_restricted=False
self.m_ranger=None
self.m_rangType=False                               # connecting[self(,ranger)]---True, connected[ranger(,self)]---False
# one step
self.m_stage=0
self.m_reState='0'
self.m_choose=True
self.m_interp=False
"(,)[-1,-1]
func#30"__init__(self,symbol)"(块#27,块#29)[-1,-1]
eof#31""(,)[-1,-1]
然后#32""(块#29,eof#31)[-1,-1]
块#33""(,)[-1,-1]
然后#34""(块#27,块#33)[-1,-1]
块#35""(,)[-1,-1]
func#36"stateSelf(self)"(块#33,块#35)[-1,-1]
块#37"return 'blue'
"(,)[-1,-1]
if#38"self.m_interp==True"(块#35,块#37)[-1,-1]
eof#39""(,)[-1,-1]
然后#40""(块#37,eof#39)[-1,-1]
块#41""(,)[-1,-1]
然后#42""(块#35,块#41)[-1,-1]
块#43"return 'yellow'
"(,)[-1,-1]
if#44"self.m_symbol==None or self.m_map==None"(块#41,块#43)[-1,-1]
eof#45""(,)[-1,-1]
然后#46""(块#43,eof#45)[-1,-1]
块#47"# [eq](,) and [is](,) function points
"(,)[-1,-1]
然后#48""(块#41,块#47)[-1,-1]
块#49""(,)[-1,-1]
然后#50""(块#47,块#49)[-1,-1]
块#51"return self.stateSelf_eq()
"(,)[-1,-1]
if#52"self.m_symbol.m_name=='[eq]' or self.m_symbol.m_name=='[同名]'"(块#49,块#51)[-1,-1]
eof#53""(,)[-1,-1]
然后#54""(块#51,eof#53)[-1,-1]
eof#55""(,)[-1,-1]
然后#56""(块#57,eof#55)[-1,-1]
块#57"return self.stateSelf_is()
"(,)[-1,-1]
elif#58"self.m_symbol.m_name=='[is]' or self.m_symbol.m_name=='[是]'"(if#52,块#57)[-1,-1]
eof#59""(,)[-1,-1]
然后#60""(块#63,eof#59)[-1,-1]
块#61""(,)[-1,-1]
if#62""(eof#59,块#61)[-1,-1]
块#63"return 'green'
"(,)[-1,-1]
elif#64"self.m_symbol.m_name=='[那]'"(elif#58,块#63)[-1,-1]
块#65"# elif self.isSpaceRelation():
#     return self.stateSelf_space()
# _re\"^.*\"(,) regular expression
"(,)[-1,-1]
然后#66""(块#49,块#65)[-1,-1]
eof#67""(,)[-1,-1]
然后#68""(块#65,eof#67)[-1,-1]
eof#69""(,)[-1,-1]
if#70"self.m_symbol.m_name=='_正则表达式' or self.m_symbol.m_name=='_re'"(eof#67,eof#69)[-1,-1]
块#71"pattern=re.compile(self.m_symbol.m_text)
"(,)[-1,-1]
块#72""(,)[-1,-1]
try#73""(eof#69,块#71)[-1,-1]
except#74""(try#73,块#72)[-1,-1]
eof#75""(,)[-1,-1]
然后#76""(块#71,eof#75)[-1,-1]
块#77"    if self.m_symbol.m_name=='_正则表达式' or self.m_symbol.m_name=='_re':
        try:
            pattern=re.compile(self.m_symbol.m_text)
        except:
            print('Invalid regular expression: '+self.m_symbol.m_text+'!')
            return 'red'
        match=self.m_map.m_name
        if pattern.findall(match)!=[]:
            return 'green'
        else:
            return 'red'
    # _word(,) or _[word](,)
    if self.m_symbol.m_name!='' and self.m_symbol.m_name[0]=='_':
        name=self.m_symbol.m_name[1:]
        name_m=self.m_map.m_name
        if len(name)==0:
            return 'green'
        elif name[0]=='[' and name[-1]==']':
            if len(name_m)>=2 and name_m[0]=='[' and name_m[-1]==']':
                return 'green'
            else:
                return 'red'
        else:
            return 'green'
            # if len(name_m)<2 or name_m[0]!='[' or name_m[-1]!=']':
            #     return 'green'
            # else:
            #     return 'red'
    # [word](,)/+[word](,)
    if self.m_symbol.m_name!='' and self.m_symbol.m_name[0]=='[' and self.m_symbol.m_name[-1]==']':
        name1=self.m_symbol.m_name[1:-1]
        name2=self.m_symbol.m_name
        if self.m_interp==False and self.m_map.m_creator==None and self.m_buildMode==False:
            return 'red'
        if name1==self.m_map.m_name or name2==self.m_map.m_name:
            return 'green'
        else:
            return 'red'
    # ~word(,)
    if self.m_symbol.m_name!='' and self.m_symbol.m_name[0]=='~':
        name=self.m_symbol.m_name[1:]
        if name==self.m_map.m_name:
            return 'red'
        else: 
            return 'green'
    # word(,)
    else:
        name=self.m_map.m_name
        if name!='' and name[0]=='[' and name[-1]==']':
            name=name[1:-1]
        if name!=self.m_symbol.m_name:
            return 'red'
        elif self.m_symbol.m_text!='' and self.m_symbol.m_text!=self.m_map.m_text:
            return 'red'
        else:
            return 'green'
"(,)[-1,-1]
然后#78""(块#33,块#77)[-1,-1]
块#79""(,)[-1,-1]
然后#80""(块#77,块#79)[-1,-1]
块#81""(,)[-1,-1]
func#82"stateSelf_eq(self)"(块#79,块#81)[-1,-1]
块#83"return 'yellow'
"(,)[-1,-1]
if#84"self.m_map==None"(块#81,块#83)[-1,-1]
eof#85""(,)[-1,-1]
然后#86""(块#83,eof#85)[-1,-1]
块#87""(,)[-1,-1]
然后#88""(块#81,块#87)[-1,-1]
块#89"return 'red'
"(,)[-1,-1]
if#90"self.m_symbol.m_db[0]==None or self.m_symbol.m_db[1]==None"(块#87,块#89)[-1,-1]
eof#91""(,)[-1,-1]
然后#92""(块#89,eof#91)[-1,-1]
块#93"karmaL=self.m_symbol.m_db[0].m_master
karmaR=self.m_symbol.m_db[1].m_master
"(,)[-1,-1]
然后#94""(块#87,块#93)[-1,-1]
块#95""(,)[-1,-1]
然后#96""(块#93,块#95)[-1,-1]
块#97"print('Error! [eq] doesn\'t have sbj or obj.')
print('Sbj:',karmaL)
print('Obj:',karmaR)
return 'red'
"(,)[-1,-1]
if#98"karmaL==None or karmaR==None"(块#95,块#97)[-1,-1]
eof#99""(,)[-1,-1]
然后#100""(块#97,eof#99)[-1,-1]
块#101""(,)[-1,-1]
然后#102""(块#95,块#101)[-1,-1]
块#103"return 'green'
"(,)[-1,-1]
if#104"karmaL.m_map==None or karmaR.m_map==None"(块#101,块#103)[-1,-1]
eof#105""(,)[-1,-1]
然后#106""(块#103,eof#105)[-1,-1]
块#107"nameL=karmaL.m_map.m_name
nameR=karmaR.m_map.m_name
# I don't remember why I removed it
# if len(karmaL.m_map.m_name)>1 and karmaL.m_map.m_name[0]=='[' and karmaL.m_map.m_name[-1]==']':
#     nameL=karmaL.m_map.m_name[1:-1]
# if len(karmaR.m_map.m_name)>1 and karmaR.m_map.m_name[0]=='[' and karmaR.m_map.m_name[-1]==']':
#     nameR=karmaR.m_map.m_name[1:-1]
"(,)[-1,-1]
else#108""(if#104,块#107)[-1,-1]
块#109""(,)[-1,-1]
然后#110""(块#107,块#109)[-1,-1]
块#111"nameL=karmaL.m_map.m_name[1:-1]
"(,)[-1,-1]
if#112"len(karmaL.m_map.m_name)>1 and karmaL.m_map.m_name[0]=='[' and karmaL.m_map.m_name[-1]==']'"(块#109,块#111)[-1,-1]
eof#113""(,)[-1,-1]
然后#114""(块#111,eof#113)[-1,-1]
块#115""(,)[-1,-1]
然后#116""(块#109,块#115)[-1,-1]
块#117"nameR=karmaR.m_map.m_name[1:-1]
"(,)[-1,-1]
if#118"len(karmaR.m_map.m_name)>1 and karmaR.m_map.m_name[0]=='[' and karmaR.m_map.m_name[-1]==']'"(块#115,块#117)[-1,-1]
eof#119""(,)[-1,-1]
然后#120""(块#117,eof#119)[-1,-1]
块#121""(,)[-1,-1]
然后#122""(块#115,块#121)[-1,-1]
块#123"return 'green'
"(,)[-1,-1]
if#124"nameL==nameR"(块#121,块#123)[-1,-1]
eof#125""(,)[-1,-1]
然后#126""(块#123,eof#125)[-1,-1]
块#127"return 'red'
"(,)[-1,-1]
else#128""(if#124,块#127)[-1,-1]
eof#129""(,)[-1,-1]
然后#130""(块#127,eof#129)[-1,-1]
eof#131""(,)[-1,-1]
然后#132""(块#121,eof#131)[-1,-1]
eof#133""(,)[-1,-1]
然后#134""(块#101,eof#133)[-1,-1]
块#135""(,)[-1,-1]
然后#136""(块#79,块#135)[-1,-1]
块#137""(,)[-1,-1]
func#138"stateSelf_is(self)"(块#135,块#137)[-1,-1]
块#139"return 'yellow'
"(,)[-1,-1]
if#140"self.m_map==None"(块#137,块#139)[-1,-1]
eof#141""(,)[-1,-1]
然后#142""(块#139,eof#141)[-1,-1]
块#143""(,)[-1,-1]
然后#144""(块#137,块#143)[-1,-1]
块#145"return 'red'
"(,)[-1,-1]
if#146"self.m_symbol.m_db[0]==None or self.m_symbol.m_db[1]==None"(块#143,块#145)[-1,-1]
eof#147""(,)[-1,-1]
然后#148""(块#145,eof#147)[-1,-1]
块#149"karmaL=self.m_symbol.m_db[0].m_master
karmaR=self.m_symbol.m_db[1].m_master
"(,)[-1,-1]
然后#150""(块#143,块#149)[-1,-1]
块#151""(,)[-1,-1]
然后#152""(块#149,块#151)[-1,-1]
块#153"return 'green'
"(,)[-1,-1]
if#154"karmaL.m_map==None or karmaR.m_map==None"(块#151,块#153)[-1,-1]
eof#155""(,)[-1,-1]
然后#156""(块#153,eof#155)[-1,-1]
块#157""(,)[-1,-1]
else#158""(if#154,块#157)[-1,-1]
块#159"return 'green'
"(,)[-1,-1]
if#160"karmaL.m_map==karmaR.m_map"(块#157,块#159)[-1,-1]
eof#161""(,)[-1,-1]
然后#162""(块#159,eof#161)[-1,-1]
块#163"return 'red'
"(,)[-1,-1]
else#164""(if#160,块#163)[-1,-1]
eof#165""(,)[-1,-1]
然后#166""(块#163,eof#165)[-1,-1]
eof#167""(,)[-1,-1]
然后#168""(块#157,eof#167)[-1,-1]
eof#169""(,)[-1,-1]
然后#170""(块#151,eof#169)[-1,-1]
块#171""(,)[-1,-1]
然后#172""(块#135,块#171)[-1,-1]
块#173""(,)[-1,-1]
func#174"stateSelf_space(self)"(块#171,块#173)[-1,-1]
块#175"return 'yellow'
"(,)[-1,-1]
if#176"self.m_map==None"(块#173,块#175)[-1,-1]
eof#177""(,)[-1,-1]
然后#178""(块#175,eof#177)[-1,-1]
块#179""(,)[-1,-1]
然后#180""(块#173,块#179)[-1,-1]
块#181"return 'red'
"(,)[-1,-1]
if#182"self.m_symbol.m_db[0]==None or self.m_symbol.m_db[1]==None"(块#179,块#181)[-1,-1]
eof#183""(,)[-1,-1]
然后#184""(块#181,eof#183)[-1,-1]
块#185"km_sbj=self.m_symbol.m_db[0].m_master
km_obj=self.m_symbol.m_db[1].m_master
"(,)[-1,-1]
然后#186""(块#179,块#185)[-1,-1]
块#187""(,)[-1,-1]
然后#188""(块#185,块#187)[-1,-1]
块#189"return 'green'
"(,)[-1,-1]
if#190"km_sbj.m_map==None or km_obj.m_map==None"(块#187,块#189)[-1,-1]
eof#191""(,)[-1,-1]
然后#192""(块#189,eof#191)[-1,-1]
eof#193""(,)[-1,-1]
然后#194""(块#195,eof#193)[-1,-1]
块#195"return 'red'
"(,)[-1,-1]
elif#196"km_sbj.m_map==km_obj.m_map"(if#190,块#195)[-1,-1]
块#197"x1=km_sbj.m_map.m_pos[0]
y1=km_sbj.m_map.m_pos[1]
x2=km_obj.m_map.m_pos[0]
y2=km_obj.m_map.m_pos[1]
name=self.m_symbol.m_name
"(,)[-1,-1]
然后#198""(块#187,块#197)[-1,-1]
块#199""(,)[-1,-1]
然后#200""(块#197,块#199)[-1,-1]
块#201""(,)[-1,-1]
if#202"name=='[当地]' or name=='[here]'"(块#199,块#201)[-1,-1]
块#203"return 'green'
"(,)[-1,-1]
if#204"x1==x2 and y1==y2"(块#201,块#203)[-1,-1]
eof#205""(,)[-1,-1]
然后#206""(块#203,eof#205)[-1,-1]
块#207"return 'red'
"(,)[-1,-1]
else#208""(if#204,块#207)[-1,-1]
eof#209""(,)[-1,-1]
然后#210""(块#207,eof#209)[-1,-1]
eof#211""(,)[-1,-1]
然后#212""(块#201,eof#211)[-1,-1]
块#213"return 'green'
"(,)[-1,-1]
if#214"y1>y2"(块#223,块#213)[-1,-1]
eof#215""(,)[-1,-1]
然后#216""(块#213,eof#215)[-1,-1]
块#217"return 'red'
"(,)[-1,-1]
else#218""(if#214,块#217)[-1,-1]
eof#219""(,)[-1,-1]
然后#220""(块#217,eof#219)[-1,-1]
eof#221""(,)[-1,-1]
然后#222""(块#223,eof#221)[-1,-1]
块#223""(,)[-1,-1]
elif#224"name=='[上面]' or name=='[up]'"(if#202,块#223)[-1,-1]
块#225"return 'green'
"(,)[-1,-1]
if#226"x1==x2 and y1>y2"(块#235,块#225)[-1,-1]
eof#227""(,)[-1,-1]
然后#228""(块#225,eof#227)[-1,-1]
块#229"return 'red'
"(,)[-1,-1]
else#230""(if#226,块#229)[-1,-1]
eof#231""(,)[-1,-1]
然后#232""(块#229,eof#231)[-1,-1]
eof#233""(,)[-1,-1]
然后#234""(块#235,eof#233)[-1,-1]
块#235""(,)[-1,-1]
elif#236"name=='[正上面]' or name=='[Up]'"(elif#224,块#235)[-1,-1]
块#237"return 'green'
"(,)[-1,-1]
if#238"y1<y2"(块#247,块#237)[-1,-1]
eof#239""(,)[-1,-1]
然后#240""(块#237,eof#239)[-1,-1]
块#241"return 'red'
"(,)[-1,-1]
else#242""(if#238,块#241)[-1,-1]
eof#243""(,)[-1,-1]
然后#244""(块#241,eof#243)[-1,-1]
eof#245""(,)[-1,-1]
然后#246""(块#247,eof#245)[-1,-1]
块#247""(,)[-1,-1]
elif#248"name=='[下面]' or name=='[down]'"(elif#236,块#247)[-1,-1]
块#249"return 'green'
"(,)[-1,-1]
if#250"x1==x2 and y1<y2"(块#259,块#249)[-1,-1]
eof#251""(,)[-1,-1]
然后#252""(块#249,eof#251)[-1,-1]
块#253"return 'red'
"(,)[-1,-1]
else#254""(if#250,块#253)[-1,-1]
eof#255""(,)[-1,-1]
然后#256""(块#253,eof#255)[-1,-1]
eof#257""(,)[-1,-1]
然后#258""(块#259,eof#257)[-1,-1]
块#259""(,)[-1,-1]
elif#260"name=='[正下面]' or name=='[Down]'"(elif#248,块#259)[-1,-1]
块#261"return 'green'
"(,)[-1,-1]
if#262"x1>x2"(块#271,块#261)[-1,-1]
eof#263""(,)[-1,-1]
然后#264""(块#261,eof#263)[-1,-1]
块#265"return 'red'
"(,)[-1,-1]
else#266""(if#262,块#265)[-1,-1]
eof#267""(,)[-1,-1]
然后#268""(块#265,eof#267)[-1,-1]
eof#269""(,)[-1,-1]
然后#270""(块#271,eof#269)[-1,-1]
块#271""(,)[-1,-1]
elif#272"name=='[左面]' or name=='[left]'"(elif#260,块#271)[-1,-1]
块#273"return 'green'
"(,)[-1,-1]
if#274"y1==y2 and x1>x2"(块#283,块#273)[-1,-1]
eof#275""(,)[-1,-1]
然后#276""(块#273,eof#275)[-1,-1]
块#277"return 'red'
"(,)[-1,-1]
else#278""(if#274,块#277)[-1,-1]
eof#279""(,)[-1,-1]
然后#280""(块#277,eof#279)[-1,-1]
eof#281""(,)[-1,-1]
然后#282""(块#283,eof#281)[-1,-1]
块#283""(,)[-1,-1]
elif#284"name=='[正左面]' or name=='[Left]'"(elif#272,块#283)[-1,-1]
块#285"return 'green'
"(,)[-1,-1]
if#286"x1<x2"(块#295,块#285)[-1,-1]
eof#287""(,)[-1,-1]
然后#288""(块#285,eof#287)[-1,-1]
块#289"return 'red'
"(,)[-1,-1]
else#290""(if#286,块#289)[-1,-1]
eof#291""(,)[-1,-1]
然后#292""(块#289,eof#291)[-1,-1]
eof#293""(,)[-1,-1]
然后#294""(块#295,eof#293)[-1,-1]
块#295""(,)[-1,-1]
elif#296"name=='[右面]' or name=='[right]'"(elif#284,块#295)[-1,-1]
块#297"return 'green'
"(,)[-1,-1]
if#298"y1==y2 and x1<x2"(块#307,块#297)[-1,-1]
eof#299""(,)[-1,-1]
然后#300""(块#297,eof#299)[-1,-1]
块#301"return 'red'
"(,)[-1,-1]
else#302""(if#298,块#301)[-1,-1]
eof#303""(,)[-1,-1]
然后#304""(块#301,eof#303)[-1,-1]
eof#305""(,)[-1,-1]
然后#306""(块#307,eof#305)[-1,-1]
块#307""(,)[-1,-1]
elif#308"name=='[正右面]' or name=='[Right]'"(elif#296,块#307)[-1,-1]
eof#309""(,)[-1,-1]
然后#310""(块#199,eof#309)[-1,-1]
块#311""(,)[-1,-1]
然后#312""(块#171,块#311)[-1,-1]
块#313""(,)[-1,-1]
func#314"stateRelation(self)"(块#311,块#313)[-1,-1]
块#315"return True
"(,)[-1,-1]
if#316"self.m_map==None or self.m_symbol==None"(块#313,块#315)[-1,-1]
eof#317""(,)[-1,-1]
然后#318""(块#315,eof#317)[-1,-1]
块#319"cause=self.m_cause
"(,)[-1,-1]
然后#320""(块#313,块#319)[-1,-1]
块#321""(,)[-1,-1]
然后#322""(块#319,块#321)[-1,-1]
块#323""(,)[-1,-1]
while#324"cause!=None"(块#321,块#323)[-1,-1]
块#325""(,)[-1,-1]
if#326"cause.m_symbol==self.m_symbol.m_db[0]"(块#323,块#325)[-1,-1]
块#327"return False
"(,)[-1,-1]
if#328"cause.m_map!=self.m_map.m_db[0]"(块#325,块#327)[-1,-1]
eof#329""(,)[-1,-1]
然后#330""(块#327,eof#329)[-1,-1]
eof#331""(,)[-1,-1]
然后#332""(块#325,eof#331)[-1,-1]
块#333""(,)[-1,-1]
然后#334""(块#323,块#333)[-1,-1]
块#335""(,)[-1,-1]
if#336"cause.m_symbol==self.m_symbol.m_db[1]"(块#333,块#335)[-1,-1]
块#337"return False
"(,)[-1,-1]
if#338"cause.m_map!=self.m_map.m_db[1]"(块#335,块#337)[-1,-1]
eof#339""(,)[-1,-1]
然后#340""(块#337,eof#339)[-1,-1]
eof#341""(,)[-1,-1]
然后#342""(块#335,eof#341)[-1,-1]
块#343"# For a function point, you should check the relation between the point through the function point selfstate()
"(,)[-1,-1]
然后#344""(块#333,块#343)[-1,-1]
块#345""(,)[-1,-1]
然后#346""(块#343,块#345)[-1,-1]
块#347""(,)[-1,-1]
if#348"cause.m_symbol.m_db[0]==self.m_symbol"(块#345,块#347)[-1,-1]
块#349"return False
"(,)[-1,-1]
if#350"cause.m_map.m_db[0]!=self.m_map or cause.stateSelf()=='red'"(块#347,块#349)[-1,-1]
eof#351""(,)[-1,-1]
然后#352""(块#349,eof#351)[-1,-1]
eof#353""(,)[-1,-1]
然后#354""(块#347,eof#353)[-1,-1]
块#355""(,)[-1,-1]
然后#356""(块#345,块#355)[-1,-1]
块#357""(,)[-1,-1]
if#358"cause.m_symbol.m_db[1]==self.m_symbol"(块#355,块#357)[-1,-1]
块#359"return False
"(,)[-1,-1]
if#360"cause.m_map.m_db[1]!=self.m_map or cause.stateSelf()=='red'"(块#357,块#359)[-1,-1]
eof#361""(,)[-1,-1]
然后#362""(块#359,eof#361)[-1,-1]
eof#363""(,)[-1,-1]
然后#364""(块#357,eof#363)[-1,-1]
块#365"cause=cause.m_cause
"(,)[-1,-1]
然后#366""(块#355,块#365)[-1,-1]
eof#367""(,)[-1,-1]
然后#368""(块#365,eof#367)[-1,-1]
块#369"return True
"(,)[-1,-1]
然后#370""(块#321,块#369)[-1,-1]
eof#371""(,)[-1,-1]
然后#372""(块#369,eof#371)[-1,-1]
块#373"# def rangeList(self,pool,areaType,list_new):
#     # restrict the map pool by m_listMP
#     if self.m_listMP!=[]:
#         list_map=self.m_listMP
#     # self(+ranger,) or others
#     elif self.m_ranger!=None and (self.m_ranger.buildingNewMap()==False or self.m_rangType==True):
#         # restrict the map pool by m_cause
#         # self(+ranger,) or self(ranger,)
#         if self.m_rangType==True:
#             if self.m_ranger.m_map==None or self.m_ranger.m_map.m_con==[]:
#                 list_map=[]
#             else:
#                 list_map=self.m_ranger.m_map.m_con.copy()
#         # ranger(self,)
#         elif self.m_ranger.m_symbol.m_db[0]==self.m_symbol:
#             if self.m_ranger.m_map.m_db[0]==None:
#                 list_map=[]
#             else:
#                 list_map=[self.m_ranger.m_map.m_db[0]]
#         # ranger(,self)
#         elif self.m_ranger.m_symbol.m_db[1]==self.m_symbol:
#             if self.m_ranger.m_map.m_db[1]==None:
#                 list_map=dictToList(pool)
#             else:
#                 list_map=[self.m_ranger.m_map.m_db[1]]
#         else:
#             print('Warning! Undefined situation.')
#     # _point(,) or ~point(,)
#     elif self.selfType()=='实万用链节' or self.selfType()=='实否定链节':                  # '_point' and '' aren't restricted
#         list_map=dictToList(pool)
#         if len(self.m_symbol.m_name)>2 and self.m_symbol.m_name[1]=='_':
#             for mp in list_map:
#                 if mp in list_new:
#                     list_map.remove(mp)
#     # noraml(,)
#     else:
#         # list_map=dictToList(pool)
#         list_map=pool.get(self.m_symbol.m_name,[])
#         list_map+=pool.get('['+self.m_symbol.m_name+']',[])
#     return list_map
"(,)[-1,-1]
然后#374""(块#311,块#373)[-1,-1]
块#375""(,)[-1,-1]
然后#376""(块#373,块#375)[-1,-1]
块#377"list_map=[]
"(,)[-1,-1]
func#378"mapListFromRange(self)"(块#375,块#377)[-1,-1]
块#379""(,)[-1,-1]
然后#380""(块#377,块#379)[-1,-1]
块#381""(,)[-1,-1]
if#382"self.m_rangType==True"(块#379,块#381)[-1,-1]
块#383"list_map=[]
"(,)[-1,-1]
if#384"self.m_ranger.m_map==None"(块#381,块#383)[-1,-1]
eof#385""(,)[-1,-1]
然后#386""(块#383,eof#385)[-1,-1]
块#387"list_map=self.m_ranger.m_map.m_con.copy()
"(,)[-1,-1]
else#388""(if#384,块#387)[-1,-1]
eof#389""(,)[-1,-1]
然后#390""(块#387,eof#389)[-1,-1]
eof#391""(,)[-1,-1]
然后#392""(块#381,eof#391)[-1,-1]
块#393"# ranger(self,)
"(,)[-1,-1]
然后#394""(块#379,块#393)[-1,-1]
eof#395""(,)[-1,-1]
然后#396""(块#393,eof#395)[-1,-1]
块#397"    elif self.m_ranger.m_symbol.m_db[0]==self.m_symbol:
        if self.m_ranger.m_map.m_db[0]==None:
            list_map=[]
        else:
            list_map=[self.m_ranger.m_map.m_db[0]]
    # ranger(,self)
    elif self.m_ranger.m_symbol.m_db[1]==self.m_symbol:
        if self.m_ranger.m_map.m_db[1]==None:
            list_map=[]
        else:
            list_map=[self.m_ranger.m_map.m_db[1]]
    else:
        print('Warning! Undefined situation.')
    return list_map
"(,)[-1,-1]
然后#398""(块#375,块#397)[-1,-1]
块#399""(,)[-1,-1]
然后#400""(块#397,块#399)[-1,-1]
块#401"name=self.m_symbol.m_name
# if self.isType('通用') or self.isType('否定'):
"(,)[-1,-1]
func#402"mapListFromPool_normal(self,pool)"(块#399,块#401)[-1,-1]
块#403""(,)[-1,-1]
然后#404""(块#401,块#403)[-1,-1]
块#405"list_have=dictToList(pool)
list_map=[]
"(,)[-1,-1]
if#406"len(name)>0 and (name[0]=='_' or name[0]=='~')"(块#403,块#405)[-1,-1]
块#407""(,)[-1,-1]
然后#408""(块#405,块#407)[-1,-1]
块#409""(,)[-1,-1]
for#410"list_have"(块#407,块#409)[-1,-1]
变量#411"point"(for#410,)[-1,-1]
块#412"list_map.append(point)
"(,)[-1,-1]
if#413"point.m_needed==None or (point.m_needed!=None and point.m_creator!=None)"(块#409,块#412)[-1,-1]
eof#414""(,)[-1,-1]
然后#415""(块#412,eof#414)[-1,-1]
eof#416""(,)[-1,-1]
然后#417""(块#409,eof#416)[-1,-1]
eof#418""(,)[-1,-1]
然后#419""(块#407,eof#418)[-1,-1]
块#420"list_map=pool.get(self.m_symbol.m_name,[])
# list_map+=pool.get('['+self.m_symbol.m_name+']',[])
"(,)[-1,-1]
else#421""(if#406,块#420)[-1,-1]
eof#422""(,)[-1,-1]
然后#423""(块#420,eof#422)[-1,-1]
块#424"return list_map
"(,)[-1,-1]
然后#425""(块#403,块#424)[-1,-1]
eof#426""(,)[-1,-1]
然后#427""(块#424,eof#426)[-1,-1]
块#428""(,)[-1,-1]
然后#429""(块#399,块#428)[-1,-1]
块#430""(,)[-1,-1]
func#431"mapList_is(self,ranger,pool)"(块#428,块#430)[-1,-1]
块#432"return self.mapListFromPool_normal(pool)
"(,)[-1,-1]
if#433"ranger.m_symbol.m_db[0]==None or ranger.m_symbol.m_db[1]==None"(块#430,块#432)[-1,-1]
eof#434""(,)[-1,-1]
然后#435""(块#432,eof#434)[-1,-1]
块#436""(,)[-1,-1]
然后#437""(块#430,块#436)[-1,-1]
块#438"return [ranger.m_map.m_db[1]]
"(,)[-1,-1]
if#439"ranger.m_symbol.m_db[0]==self.m_symbol and ranger.m_map.m_db[1]!=None"(块#436,块#438)[-1,-1]
eof#440""(,)[-1,-1]
然后#441""(块#438,eof#440)[-1,-1]
块#442""(,)[-1,-1]
然后#443""(块#436,块#442)[-1,-1]
块#444"return [ranger.m_map.m_db[0]]
"(,)[-1,-1]
if#445"ranger.m_symbol.m_db[1]==self.m_symbol and ranger.m_map.m_db[0]!=None"(块#442,块#444)[-1,-1]
eof#446""(,)[-1,-1]
然后#447""(块#444,eof#446)[-1,-1]
块#448"return self.mapListFromPool_normal(pool)
"(,)[-1,-1]
然后#449""(块#442,块#448)[-1,-1]
eof#450""(,)[-1,-1]
然后#451""(块#448,eof#450)[-1,-1]
块#452""(,)[-1,-1]
然后#453""(块#428,块#452)[-1,-1]
块#454"list_cause=ranger.allCauses()
list_map=[]
"(,)[-1,-1]
func#455"mapList_that(self,ranger)"(块#452,块#454)[-1,-1]
块#456""(,)[-1,-1]
然后#457""(块#454,块#456)[-1,-1]
块#458"pt_map=cause.m_map
"(,)[-1,-1]
for#459"list_cause"(块#456,块#458)[-1,-1]
变量#460"cause"(for#459,)[-1,-1]
块#461""(,)[-1,-1]
然后#462""(块#458,块#461)[-1,-1]
块#463"list_map.append(pt_map)
"(,)[-1,-1]
if#464"pt_map!=None and pt_map not in list_map"(块#461,块#463)[-1,-1]
eof#465""(,)[-1,-1]
然后#466""(块#463,eof#465)[-1,-1]
eof#467""(,)[-1,-1]
然后#468""(块#461,eof#467)[-1,-1]
块#469"return list_map
"(,)[-1,-1]
然后#470""(块#456,块#469)[-1,-1]
eof#471""(,)[-1,-1]
然后#472""(块#469,eof#471)[-1,-1]
块#473""(,)[-1,-1]
然后#474""(块#452,块#473)[-1,-1]
块#475"# restrict the map pool by m_listMP
"(,)[-1,-1]
func#476"rangeList(self,pool,areaType,list_new)"(块#473,块#475)[-1,-1]
块#477""(,)[-1,-1]
然后#478""(块#475,块#477)[-1,-1]
块#479"return self.m_listMP
"(,)[-1,-1]
if#480"self.m_listMP!=None"(块#477,块#479)[-1,-1]
eof#481""(,)[-1,-1]
然后#482""(块#479,eof#481)[-1,-1]
块#483""(,)[-1,-1]
if#484""(eof#481,块#483)[-1,-1]
块#485"# elif self.isType('非端点'):
"(,)[-1,-1]
然后#486""(块#477,块#485)[-1,-1]
eof#487""(,)[-1,-1]
然后#488""(块#485,eof#487)[-1,-1]
块#489"    elif self.m_ranger!=None:
        ranger=self.m_ranger
        # print('范围',ranger.m_symbol.info())
        nameR=self.m_ranger.m_symbol.m_name
        if nameR=='[is]':
            list_map=self.mapList_is(self.m_ranger,pool)
        elif nameR=='[那]':
            list_map=self.mapList_that(self.m_ranger)
        elif self.m_ranger.isType('非回答新建') and self.m_ranger.m_symbol in self.m_symbol.m_con:
            list_map=self.mapListFromPool_normal(pool)
        else:
            list_map=self.mapListFromRange()
        # elif self.m_ranger.isType('回答') or self.m_ranger.isType('非新建'):
        #     list_map=self.mapListFromRange()
        # elif self.m_buildMode==False:
        #     list_map=self.mapListFromPool_normal(pool)
        # else:
        #     list_map=[]
    else:
        list_map=self.mapListFromPool_normal(pool)
    self.m_listMP=list_map
    return list_map
"(,)[-1,-1]
然后#490""(块#473,块#489)[-1,-1]
块#491""(,)[-1,-1]
然后#492""(块#489,块#491)[-1,-1]
块#493"list_map=self.rangeList(pool,areaType,list_new)
# if self.m_symbol.m_name=='的':
#     printPtList(list_map)
"(,)[-1,-1]
func#494"newMap(self,pool,areaType,list_new)"(块#491,块#493)[-1,-1]
块#495""(,)[-1,-1]
然后#496""(块#493,块#495)[-1,-1]
块#497"name=self.m_symbol.m_name
# [noun]:
# function points
# if self.isFunctionPoint()==1:
# if self.isType('内置'):
"(,)[-1,-1]
if#498"self.m_buildMode==False or areaType==False"(块#495,块#497)[-1,-1]
块#499""(,)[-1,-1]
然后#500""(块#497,块#499)[-1,-1]
块#501""(,)[-1,-1]
if#502"self.isPreDefined()"(块#499,块#501)[-1,-1]
块#503"point=NetP(name,self.m_symbol.m_text)
point.m_pos=self.m_symbol.m_pos.copy()
point.m_needed=self
point.m_creator=self
self.map(point)
"(,)[-1,-1]
if#504"self.m_map==None"(块#501,块#503)[-1,-1]
eof#505""(,)[-1,-1]
然后#506""(块#503,eof#505)[-1,-1]
块#507"self.m_map.delete()
del self.m_map
self.map(None)
"(,)[-1,-1]
else#508""(if#504,块#507)[-1,-1]
eof#509""(,)[-1,-1]
然后#510""(块#507,eof#509)[-1,-1]
块#511"return
"(,)[-1,-1]
然后#512""(块#501,块#511)[-1,-1]
eof#513""(,)[-1,-1]
然后#514""(块#511,eof#513)[-1,-1]
块#515""(,)[-1,-1]
然后#516""(块#529,块#515)[-1,-1]
块#517"point=NetP(name,self.m_symbol.m_text)
point.m_pos=self.m_symbol.m_pos.copy()
point.m_needed=self
self.map(point)
"(,)[-1,-1]
if#518"self.m_map==None"(块#515,块#517)[-1,-1]
eof#519""(,)[-1,-1]
然后#520""(块#517,eof#519)[-1,-1]
块#521"self.map(self.m_map)
"(,)[-1,-1]
else#522""(if#518,块#521)[-1,-1]
eof#523""(,)[-1,-1]
然后#524""(块#521,eof#523)[-1,-1]
块#525"self.m_interp=True
# else:
#     self.m_map.delete()
#     self.m_map.m_needed=None
#     self.map(None)
return
"(,)[-1,-1]
然后#526""(块#515,块#525)[-1,-1]
eof#527""(,)[-1,-1]
然后#528""(块#525,eof#527)[-1,-1]
块#529"# function points [P] don't find map from pool
"(,)[-1,-1]
elif#530"self.isFunctionPoint()==2"(if#502,块#529)[-1,-1]
块#531"# printPtList(list_map)
# only take real points when karma is start with _ and ~
# list_have=[]
# for point in list_map:
#     if self.selfType()=='实万用链节' or self.selfType()=='实否定链节':
#         # if point.m_creator!=None or point.m_needed==None:
#         if point.m_needed==None or (point.m_needed!=None and point.m_creator!=None):
#             # point.print()
#             list_have.append(point)
#         # else:
#         #     pass
#             # print('Erased from map_list:',point.info(),', it should be an imagine point.')
#     else:
#         list_have.append(point)
list_have=list_map
mp=self.m_map
self.map(self.nextInlist(mp,list_have))
# if self.m_map!=None:
#     print(self.m_symbol.m_name+':',self.m_map.m_name)
#     printPtList(self.m_map.m_con)
return
"(,)[-1,-1]
然后#532""(块#499,块#531)[-1,-1]
eof#533""(,)[-1,-1]
然后#534""(块#531,eof#533)[-1,-1]
块#535"name=self.m_symbol.m_name
# answer questions
# +word(,)
"(,)[-1,-1]
else#536""(if#498,块#535)[-1,-1]
块#537""(,)[-1,-1]
然后#538""(块#535,块#537)[-1,-1]
块#539""(,)[-1,-1]
if#540"name!='' and (name[0]!='[' or name[-1]!=']')"(块#537,块#539)[-1,-1]
块#541"self.m_map.m_creator=None
# ???
"(,)[-1,-1]
if#542"self.m_map!=None"(块#539,块#541)[-1,-1]
块#543""(,)[-1,-1]
然后#544""(块#541,块#543)[-1,-1]
块#545"self.m_map.delete()
self.map(None)
return
"(,)[-1,-1]
if#546"self.m_map.m_needed==None"(块#543,块#545)[-1,-1]
eof#547""(,)[-1,-1]
然后#548""(块#545,eof#547)[-1,-1]
块#549"self.m_map.m_name='['+self.m_map.m_name+']'
# self.m_map.m_building=False
"(,)[-1,-1]
else#550""(if#546,块#549)[-1,-1]
eof#551""(,)[-1,-1]
然后#552""(块#549,eof#551)[-1,-1]
eof#553""(,)[-1,-1]
然后#554""(块#543,eof#553)[-1,-1]
块#555"list_need=[]
"(,)[-1,-1]
然后#556""(块#539,块#555)[-1,-1]
块#557""(,)[-1,-1]
然后#558""(块#555,块#557)[-1,-1]
块#559""(,)[-1,-1]
for#560"list_map"(块#557,块#559)[-1,-1]
变量#561"point"(for#560,)[-1,-1]
块#562"list_need.append(point)
"(,)[-1,-1]
if#563"point.m_creator==None and point.m_needed!=None"(块#559,块#562)[-1,-1]
eof#564""(,)[-1,-1]
然后#565""(块#562,eof#564)[-1,-1]
eof#566""(,)[-1,-1]
然后#567""(块#559,eof#566)[-1,-1]
块#568"point=self.m_map
# printPtList(list_need)
# if point==None:
#     print(self.m_symbol.m_name+\":\",point,-1)
# else:
#     try:
#         print(self.m_symbol.m_name+\":\",list_need,point,list_need.index(point))
#         # print(self.m_symbol.m_name+\":\",pool)
#     except:
#         print(self.m_symbol.m_name+\":\",list_need,point.info(),-1)
self.map(self.nextInlist(point,list_need))
"(,)[-1,-1]
然后#569""(块#557,块#568)[-1,-1]
块#570""(,)[-1,-1]
然后#571""(块#568,块#570)[-1,-1]
块#572""(,)[-1,-1]
if#573"self.m_map==None"(块#570,块#572)[-1,-1]
块#574"self.map(None)
return
"(,)[-1,-1]
if#575"self.m_restricted==True"(块#572,块#574)[-1,-1]
eof#576""(,)[-1,-1]
然后#577""(块#574,eof#576)[-1,-1]
块#578"point=NetP(self.m_symbol.m_name,self.m_symbol.m_text)
point.m_pos=self.m_symbol.m_pos.copy()
point.m_building=True
self.map(point)
"(,)[-1,-1]
然后#579""(块#572,块#578)[-1,-1]
eof#580""(,)[-1,-1]
然后#581""(块#578,eof#580)[-1,-1]
块#582"self.m_map.m_building=True
self.m_map.m_name=self.m_map.m_name[1:-1]
"(,)[-1,-1]
else#583""(if#573,块#582)[-1,-1]
eof#584""(,)[-1,-1]
然后#585""(块#582,eof#584)[-1,-1]
块#586"self.m_map.m_creator=self
return
"(,)[-1,-1]
然后#587""(块#570,块#586)[-1,-1]
eof#588""(,)[-1,-1]
然后#589""(块#586,eof#588)[-1,-1]
块#590"# +[word](,)
"(,)[-1,-1]
然后#591""(块#537,块#590)[-1,-1]
eof#592""(,)[-1,-1]
然后#593""(块#590,eof#592)[-1,-1]
块#594"    else:
        if self.m_map==None:
            point=NetP(name,self.m_symbol.m_text)
            point.m_pos=self.m_symbol.m_pos.copy()
            point.m_building=True
            point.m_needed=self
            self.map(point)
            return
        else:
            self.m_map.m_needed=None
            self.m_map.delete()
            self.map(None)
            return
self.map(None)
"(,)[-1,-1]
然后#595""(块#495,块#594)[-1,-1]
eof#596""(,)[-1,-1]
然后#597""(块#594,eof#596)[-1,-1]
块#598""(,)[-1,-1]
然后#599""(块#491,块#598)[-1,-1]
块#600""(,)[-1,-1]
func#601"nextInlist(self,point,list_pt)"(块#598,块#600)[-1,-1]
块#602"return None
"(,)[-1,-1]
if#603"list_pt==[]"(块#600,块#602)[-1,-1]
eof#604""(,)[-1,-1]
然后#605""(块#602,eof#604)[-1,-1]
块#606""(,)[-1,-1]
然后#607""(块#600,块#606)[-1,-1]
块#608"return list_pt[0]
"(,)[-1,-1]
if#609"point==None"(块#606,块#608)[-1,-1]
eof#610""(,)[-1,-1]
然后#611""(块#608,eof#610)[-1,-1]
eof#612""(,)[-1,-1]
然后#613""(块#606,eof#612)[-1,-1]
块#614"i=list_pt.index(point)
"(,)[-1,-1]
块#615""(,)[-1,-1]
try#616""(eof#612,块#614)[-1,-1]
except#617""(try#616,块#615)[-1,-1]
eof#618""(,)[-1,-1]
然后#619""(块#614,eof#618)[-1,-1]
块#620"    try:
        i=list_pt.index(point)
    except:
        return None
    if i+1>=len(list_pt):
        return None
    else:
        return list_pt[i+1]
"(,)[-1,-1]
然后#621""(块#598,块#620)[-1,-1]
块#622""(,)[-1,-1]
然后#623""(块#620,块#622)[-1,-1]
块#624"self.m_map=None
self.m_stage=0
self.m_interp=False
self.m_reState=''
self.m_choose=True
self.m_eoi=0
"(,)[-1,-1]
func#625"clearAll(self)"(块#622,块#624)[-1,-1]
块#626""(,)[-1,-1]
然后#627""(块#624,块#626)[-1,-1]
块#628"del self.m_listMP
self.m_listMP=None
"(,)[-1,-1]
if#629"self.m_restricted==False"(块#626,块#628)[-1,-1]
eof#630""(,)[-1,-1]
然后#631""(块#628,eof#630)[-1,-1]
块#632""(,)[-1,-1]
然后#633""(块#626,块#632)[-1,-1]
块#634"clause.clearAll()
"(,)[-1,-1]
for#635"self.m_clause"(块#632,块#634)[-1,-1]
变量#636"clause"(for#635,)[-1,-1]
eof#637""(,)[-1,-1]
然后#638""(块#634,eof#637)[-1,-1]
块#639""(,)[-1,-1]
然后#640""(块#632,块#639)[-1,-1]
块#641"end.clearAll()
"(,)[-1,-1]
for#642"self.m_noe"(块#639,块#641)[-1,-1]
变量#643"end"(for#642,)[-1,-1]
eof#644""(,)[-1,-1]
然后#645""(块#641,eof#644)[-1,-1]
块#646""(,)[-1,-1]
然后#647""(块#639,块#646)[-1,-1]
块#648"end.clearAll()
"(,)[-1,-1]
for#649"self.m_yese"(块#646,块#648)[-1,-1]
变量#650"end"(for#649,)[-1,-1]
eof#651""(,)[-1,-1]
然后#652""(块#648,eof#651)[-1,-1]
eof#653""(,)[-1,-1]
然后#654""(块#646,eof#653)[-1,-1]
块#655""(,)[-1,-1]
然后#656""(块#622,块#655)[-1,-1]
块#657"self.clearAll()
# self.m_stage=0
# self.m_interp=False
# self.m_reState=''
# self.m_choose=True
# for clause in self.m_clause:
#     clause.map(None)
# for end in self.m_noe:
#     end.map(None)
# for end in self.m_yese:
#     end.map(None)
self.m_map=point
"(,)[-1,-1]
func#658"map(self,point)"(块#655,块#657)[-1,-1]
块#659""(,)[-1,-1]
然后#660""(块#657,块#659)[-1,-1]
块#661"cause=self.m_cause
"(,)[-1,-1]
if#662"self.m_map!=None"(块#659,块#661)[-1,-1]
块#663""(,)[-1,-1]
然后#664""(块#661,块#663)[-1,-1]
块#665"# function relation points
# print('当前链节:',self.m_symbol.m_name)
# print('因链节:',cause.m_symbol.m_name)
"(,)[-1,-1]
while#666"cause!=None"(块#663,块#665)[-1,-1]
块#667""(,)[-1,-1]
然后#668""(块#665,块#667)[-1,-1]
块#669"# To allow +[a]: +a(,_obj)->_obj, _obj can find map from pool.
"(,)[-1,-1]
if#670"cause.needBuildRelation()"(块#667,块#669)[-1,-1]
块#671""(,)[-1,-1]
然后#672""(块#669,块#671)[-1,-1]
块#673""(,)[-1,-1]
if#674"cause.m_map.m_needed==None or cause.m_map.m_needed==cause"(块#671,块#673)[-1,-1]
块#675"cause.m_map.connect(self.m_map,0)
"(,)[-1,-1]
if#676"cause.m_symbol.m_db[0]==self.m_symbol"(块#673,块#675)[-1,-1]
eof#677""(,)[-1,-1]
然后#678""(块#675,eof#677)[-1,-1]
块#679""(,)[-1,-1]
然后#680""(块#673,块#679)[-1,-1]
块#681"cause.m_map.connect(self.m_map,1)
"(,)[-1,-1]
if#682"cause.m_symbol.m_db[1]==self.m_symbol"(块#679,块#681)[-1,-1]
eof#683""(,)[-1,-1]
然后#684""(块#681,eof#683)[-1,-1]
eof#685""(,)[-1,-1]
然后#686""(块#679,eof#685)[-1,-1]
eof#687""(,)[-1,-1]
然后#688""(块#671,eof#687)[-1,-1]
块#689""(,)[-1,-1]
然后#690""(块#667,块#689)[-1,-1]
块#691""(,)[-1,-1]
if#692"self.needBuildRelation()"(块#689,块#691)[-1,-1]
块#693""(,)[-1,-1]
if#694"self.m_map.m_needed==None or self.m_map.m_needed==self"(块#691,块#693)[-1,-1]
块#695"self.m_map.connect(cause.m_map,0)
"(,)[-1,-1]
if#696"self.m_symbol.m_db[0]==cause.m_symbol"(块#693,块#695)[-1,-1]
eof#697""(,)[-1,-1]
然后#698""(块#695,eof#697)[-1,-1]
块#699""(,)[-1,-1]
然后#700""(块#693,块#699)[-1,-1]
块#701"self.m_map.connect(cause.m_map,1)
"(,)[-1,-1]
if#702"self.m_symbol.m_db[1]==cause.m_symbol"(块#699,块#701)[-1,-1]
eof#703""(,)[-1,-1]
然后#704""(块#701,eof#703)[-1,-1]
eof#705""(,)[-1,-1]
然后#706""(块#699,eof#705)[-1,-1]
eof#707""(,)[-1,-1]
然后#708""(块#691,eof#707)[-1,-1]
块#709"cause=cause.m_cause
"(,)[-1,-1]
然后#710""(块#689,块#709)[-1,-1]
eof#711""(,)[-1,-1]
然后#712""(块#709,eof#711)[-1,-1]
eof#713""(,)[-1,-1]
然后#714""(块#663,eof#713)[-1,-1]
eof#715""(,)[-1,-1]
然后#716""(块#659,eof#715)[-1,-1]
块#717""(,)[-1,-1]
然后#718""(块#655,块#717)[-1,-1]
块#719""(,)[-1,-1]
func#720"buildingNewMap(self)"(块#717,块#719)[-1,-1]
块#721"return False
"(,)[-1,-1]
if#722"self.m_map==None"(块#719,块#721)[-1,-1]
eof#723""(,)[-1,-1]
然后#724""(块#721,eof#723)[-1,-1]
eof#725""(,)[-1,-1]
然后#726""(块#727,eof#725)[-1,-1]
块#727"return False
"(,)[-1,-1]
elif#728"self.m_buildMode==False"(if#722,块#727)[-1,-1]
块#729"# +[a]: +a(,_obj)->_obj
"(,)[-1,-1]
else#730""(if#722,块#729)[-1,-1]
块#731""(,)[-1,-1]
然后#732""(块#729,块#731)[-1,-1]
块#733"return True
"(,)[-1,-1]
if#734"self.m_map.m_needed==None"(块#731,块#733)[-1,-1]
eof#735""(,)[-1,-1]
然后#736""(块#733,eof#735)[-1,-1]
块#737"# return True
"(,)[-1,-1]
然后#738""(块#731,块#737)[-1,-1]
eof#739""(,)[-1,-1]
然后#740""(块#737,eof#739)[-1,-1]
块#741"return False
"(,)[-1,-1]
然后#742""(块#719,块#741)[-1,-1]
eof#743""(,)[-1,-1]
然后#744""(块#741,eof#743)[-1,-1]
块#745""(,)[-1,-1]
然后#746""(块#717,块#745)[-1,-1]
块#747""(,)[-1,-1]
func#748"needBuildRelation(self)"(块#745,块#747)[-1,-1]
块#749"return True
"(,)[-1,-1]
if#750"self.buildingNewMap()"(块#747,块#749)[-1,-1]
eof#751""(,)[-1,-1]
然后#752""(块#749,eof#751)[-1,-1]
eof#753""(,)[-1,-1]
然后#754""(块#755,eof#753)[-1,-1]
块#755"return True
"(,)[-1,-1]
elif#756"self.isFunctionPoint()!=0"(if#750,块#755)[-1,-1]
块#757"return False
"(,)[-1,-1]
然后#758""(块#747,块#757)[-1,-1]
eof#759""(,)[-1,-1]
然后#760""(块#757,eof#759)[-1,-1]
块#761""(,)[-1,-1]
然后#762""(块#745,块#761)[-1,-1]
块#763"name=self.m_symbol.m_name
"(,)[-1,-1]
func#764"selfType(self)"(块#761,块#763)[-1,-1]
块#765""(,)[-1,-1]
然后#766""(块#763,块#765)[-1,-1]
块#767"return \"实链节\"
"(,)[-1,-1]
if#768"name==''"(块#765,块#767)[-1,-1]
eof#769""(,)[-1,-1]
然后#770""(块#767,eof#769)[-1,-1]
eof#771""(,)[-1,-1]
然后#772""(块#773,eof#771)[-1,-1]
块#773"return \"实万用链节\"
"(,)[-1,-1]
elif#774"name[0]=='_'"(if#768,块#773)[-1,-1]
eof#775""(,)[-1,-1]
然后#776""(块#777,eof#775)[-1,-1]
块#777"return \"实否定链节\"
"(,)[-1,-1]
elif#778"name[0]=='~'"(elif#774,块#777)[-1,-1]
eof#779""(,)[-1,-1]
然后#780""(块#781,eof#779)[-1,-1]
块#781"return \"虚链节\"
"(,)[-1,-1]
elif#782"name[0]=='[' and name[-1]==']'"(elif#778,块#781)[-1,-1]
块#783"return \"实链节\"
"(,)[-1,-1]
然后#784""(块#765,块#783)[-1,-1]
eof#785""(,)[-1,-1]
然后#786""(块#783,eof#785)[-1,-1]
块#787""(,)[-1,-1]
然后#788""(块#761,块#787)[-1,-1]
块#789"name=self.m_symbol.m_name
"(,)[-1,-1]
func#790"isVirtual(self)"(块#787,块#789)[-1,-1]
块#791""(,)[-1,-1]
然后#792""(块#789,块#791)[-1,-1]
块#793"return True
"(,)[-1,-1]
if#794"len(name)>1 and name[0]=='[' and name[-1]==']'"(块#791,块#793)[-1,-1]
eof#795""(,)[-1,-1]
然后#796""(块#793,eof#795)[-1,-1]
eof#797""(,)[-1,-1]
然后#798""(块#799,eof#797)[-1,-1]
块#799"return True
"(,)[-1,-1]
elif#800"self.isSpaceRelation()"(if#794,块#799)[-1,-1]
块#801"return False
"(,)[-1,-1]
else#802""(if#794,块#801)[-1,-1]
eof#803""(,)[-1,-1]
然后#804""(块#801,eof#803)[-1,-1]
eof#805""(,)[-1,-1]
然后#806""(块#791,eof#805)[-1,-1]
块#807""(,)[-1,-1]
然后#808""(块#787,块#807)[-1,-1]
块#809"name=self.m_symbol.m_name
"(,)[-1,-1]
func#810"isPreDefined(self)"(块#807,块#809)[-1,-1]
块#811""(,)[-1,-1]
然后#812""(块#809,块#811)[-1,-1]
块#813"return True
"(,)[-1,-1]
if#814"name=='[is]' or name=='[eq]' or name=='[那]' or name=='[]'"(块#811,块#813)[-1,-1]
eof#815""(,)[-1,-1]
然后#816""(块#813,eof#815)[-1,-1]
eof#817""(,)[-1,-1]
然后#818""(块#819,eof#817)[-1,-1]
块#819"return True
"(,)[-1,-1]
elif#820"self.isSpaceRelation()"(if#814,块#819)[-1,-1]
块#821"return False
"(,)[-1,-1]
else#822""(if#814,块#821)[-1,-1]
eof#823""(,)[-1,-1]
然后#824""(块#821,eof#823)[-1,-1]
eof#825""(,)[-1,-1]
然后#826""(块#811,eof#825)[-1,-1]
块#827""(,)[-1,-1]
然后#828""(块#807,块#827)[-1,-1]
块#829"name=self.m_symbol.m_name
"(,)[-1,-1]
func#830"isSpecialRanger(self)"(块#827,块#829)[-1,-1]
块#831""(,)[-1,-1]
然后#832""(块#829,块#831)[-1,-1]
块#833"return True
"(,)[-1,-1]
if#834"name=='[is]' or name=='[那]'"(块#831,块#833)[-1,-1]
eof#835""(,)[-1,-1]
然后#836""(块#833,eof#835)[-1,-1]
块#837"return False
"(,)[-1,-1]
然后#838""(块#831,块#837)[-1,-1]
eof#839""(,)[-1,-1]
然后#840""(块#837,eof#839)[-1,-1]
块#841""(,)[-1,-1]
然后#842""(块#827,块#841)[-1,-1]
块#843"name=self.m_symbol.m_name
"(,)[-1,-1]
func#844"isType(self,str_type)"(块#841,块#843)[-1,-1]
块#845""(,)[-1,-1]
然后#846""(块#843,块#845)[-1,-1]
块#847""(,)[-1,-1]
if#848"infoInStr('引用',str_type)"(块#845,块#847)[-1,-1]
块#849"return False
"(,)[-1,-1]
if#850"not self.isVirtual() or self.m_buildMode==True"(块#847,块#849)[-1,-1]
eof#851""(,)[-1,-1]
然后#852""(块#849,eof#851)[-1,-1]
eof#853""(,)[-1,-1]
然后#854""(块#847,eof#853)[-1,-1]
块#855""(,)[-1,-1]
然后#856""(块#845,块#855)[-1,-1]
块#857""(,)[-1,-1]
if#858"infoInStr('新建',str_type)"(块#855,块#857)[-1,-1]
块#859""(,)[-1,-1]
if#860"infoInStr('非新建',str_type)"(块#857,块#859)[-1,-1]
块#861"return False
"(,)[-1,-1]
if#862"self.m_buildMode==True"(块#859,块#861)[-1,-1]
eof#863""(,)[-1,-1]
然后#864""(块#861,eof#863)[-1,-1]
eof#865""(,)[-1,-1]
然后#866""(块#859,eof#865)[-1,-1]
eof#867""(,)[-1,-1]
然后#868""(块#869,eof#867)[-1,-1]
块#869"return False
"(,)[-1,-1]
elif#870"self.m_buildMode==False"(if#860,块#869)[-1,-1]
eof#871""(,)[-1,-1]
然后#872""(块#857,eof#871)[-1,-1]
块#873""(,)[-1,-1]
然后#874""(块#855,块#873)[-1,-1]
块#875""(,)[-1,-1]
if#876"infoInStr('动作',str_type)"(块#873,块#875)[-1,-1]
块#877"return False
"(,)[-1,-1]
if#878"not self.isVirtual() or self.m_buildMode==False"(块#875,块#877)[-1,-1]
eof#879""(,)[-1,-1]
然后#880""(块#877,eof#879)[-1,-1]
eof#881""(,)[-1,-1]
然后#882""(块#875,eof#881)[-1,-1]
块#883""(,)[-1,-1]
然后#884""(块#873,块#883)[-1,-1]
块#885""(,)[-1,-1]
if#886"infoInStr('内置',str_type)"(块#883,块#885)[-1,-1]
块#887"return False
"(,)[-1,-1]
if#888"not self.isPreDefined()"(块#885,块#887)[-1,-1]
eof#889""(,)[-1,-1]
然后#890""(块#887,eof#889)[-1,-1]
eof#891""(,)[-1,-1]
然后#892""(块#885,eof#891)[-1,-1]
块#893""(,)[-1,-1]
然后#894""(块#883,块#893)[-1,-1]
块#895""(,)[-1,-1]
if#896"infoInStr('特殊范围',str_type)"(块#893,块#895)[-1,-1]
块#897"return False
"(,)[-1,-1]
if#898"not self.isSpecialRanger()"(块#895,块#897)[-1,-1]
eof#899""(,)[-1,-1]
然后#900""(块#897,eof#899)[-1,-1]
eof#901""(,)[-1,-1]
然后#902""(块#895,eof#901)[-1,-1]
块#903""(,)[-1,-1]
然后#904""(块#893,块#903)[-1,-1]
块#905""(,)[-1,-1]
if#906"infoInStr('否定',str_type)"(块#903,块#905)[-1,-1]
块#907"return False
"(,)[-1,-1]
if#908"name=='' or name[0]!='~'"(块#905,块#907)[-1,-1]
eof#909""(,)[-1,-1]
然后#910""(块#907,eof#909)[-1,-1]
eof#911""(,)[-1,-1]
然后#912""(块#905,eof#911)[-1,-1]
块#913""(,)[-1,-1]
然后#914""(块#903,块#913)[-1,-1]
块#915""(,)[-1,-1]
if#916"infoInStr('通用',str_type)"(块#913,块#915)[-1,-1]
块#917"return False
"(,)[-1,-1]
if#918"name=='' or name[0]!='_'"(块#915,块#917)[-1,-1]
eof#919""(,)[-1,-1]
然后#920""(块#917,eof#919)[-1,-1]
eof#921""(,)[-1,-1]
然后#922""(块#915,eof#921)[-1,-1]
块#923""(,)[-1,-1]
然后#924""(块#913,块#923)[-1,-1]
块#925"# if name!='' and (name[0]=='~' or name[0]=='_'):
#     return False
"(,)[-1,-1]
if#926"infoInStr('普通',str_type)"(块#923,块#925)[-1,-1]
块#927""(,)[-1,-1]
然后#928""(块#925,块#927)[-1,-1]
块#929"return False
"(,)[-1,-1]
if#930"self.isVirtual()"(块#927,块#929)[-1,-1]
eof#931""(,)[-1,-1]
然后#932""(块#929,eof#931)[-1,-1]
eof#933""(,)[-1,-1]
然后#934""(块#927,eof#933)[-1,-1]
块#935""(,)[-1,-1]
然后#936""(块#923,块#935)[-1,-1]
块#937""(,)[-1,-1]
if#938"infoInStr('端点',str_type)"(块#935,块#937)[-1,-1]
块#939""(,)[-1,-1]
if#940"infoInStr('非端点',str_type)"(块#937,块#939)[-1,-1]
块#941"return False
"(,)[-1,-1]
if#942"self.m_ranger==None"(块#939,块#941)[-1,-1]
eof#943""(,)[-1,-1]
然后#944""(块#941,eof#943)[-1,-1]
eof#945""(,)[-1,-1]
然后#946""(块#939,eof#945)[-1,-1]
eof#947""(,)[-1,-1]
然后#948""(块#949,eof#947)[-1,-1]
块#949"return False
"(,)[-1,-1]
elif#950"self.m_ranger!=None"(if#940,块#949)[-1,-1]
eof#951""(,)[-1,-1]
然后#952""(块#937,eof#951)[-1,-1]
块#953""(,)[-1,-1]
然后#954""(块#935,块#953)[-1,-1]
块#955"an_type=True
"(,)[-1,-1]
if#956"infoInStr('回答',str_type)"(块#953,块#955)[-1,-1]
块#957""(,)[-1,-1]
然后#958""(块#955,块#957)[-1,-1]
块#959"an_type=False
"(,)[-1,-1]
if#960"self.m_map==None or self.m_map.m_needed==self or self.m_map.m_needed==None"(块#957,块#959)[-1,-1]
eof#961""(,)[-1,-1]
然后#962""(块#959,eof#961)[-1,-1]
块#963""(,)[-1,-1]
然后#964""(块#957,块#963)[-1,-1]
块#965""(,)[-1,-1]
if#966"infoInStr('非回答',str_type)"(块#963,块#965)[-1,-1]
块#967"return False
"(,)[-1,-1]
if#968"an_type"(块#965,块#967)[-1,-1]
eof#969""(,)[-1,-1]
然后#970""(块#967,eof#969)[-1,-1]
eof#971""(,)[-1,-1]
然后#972""(块#965,eof#971)[-1,-1]
eof#973""(,)[-1,-1]
然后#974""(块#975,eof#973)[-1,-1]
块#975"return False
"(,)[-1,-1]
elif#976"not an_type"(if#966,块#975)[-1,-1]
eof#977""(,)[-1,-1]
然后#978""(块#963,eof#977)[-1,-1]
块#979""(,)[-1,-1]
然后#980""(块#953,块#979)[-1,-1]
块#981""(,)[-1,-1]
if#982"infoInStr('限制',str_type)"(块#979,块#981)[-1,-1]
块#983"return False
"(,)[-1,-1]
if#984"self.m_restricted==False"(块#981,块#983)[-1,-1]
eof#985""(,)[-1,-1]
然后#986""(块#983,eof#985)[-1,-1]
eof#987""(,)[-1,-1]
然后#988""(块#981,eof#987)[-1,-1]
块#989"return True
"(,)[-1,-1]
然后#990""(块#979,块#989)[-1,-1]
eof#991""(,)[-1,-1]
然后#992""(块#989,eof#991)[-1,-1]
块#993""(,)[-1,-1]
然后#994""(块#841,块#993)[-1,-1]
块#995""(,)[-1,-1]
func#996"isFunctionPoint(self)"(块#993,块#995)[-1,-1]
块#997"return 0
"(,)[-1,-1]
if#998"self.m_symbol.m_name==''"(块#995,块#997)[-1,-1]
eof#999""(,)[-1,-1]
然后#1000""(块#997,eof#999)[-1,-1]
eof#1001""(,)[-1,-1]
然后#1002""(块#1003,eof#1001)[-1,-1]
块#1003"return 1
"(,)[-1,-1]
elif#1004"self.m_symbol.m_name=='[eq]' or self.m_symbol.m_name=='[同名]'"(if#998,块#1003)[-1,-1]
eof#1005""(,)[-1,-1]
然后#1006""(块#1007,eof#1005)[-1,-1]
块#1007"return 1
"(,)[-1,-1]
elif#1008"self.m_symbol.m_name=='[is]' or self.m_symbol.m_name=='[是]'"(elif#1004,块#1007)[-1,-1]
eof#1009""(,)[-1,-1]
然后#1010""(块#1011,eof#1009)[-1,-1]
块#1011"return 1
"(,)[-1,-1]
elif#1012"self.m_symbol.m_name=='[那]'"(elif#1008,块#1011)[-1,-1]
eof#1013""(,)[-1,-1]
然后#1014""(块#1015,eof#1013)[-1,-1]
块#1015"return 1
"(,)[-1,-1]
elif#1016"self.m_symbol.m_name=='[]'"(elif#1012,块#1015)[-1,-1]
eof#1017""(,)[-1,-1]
然后#1018""(块#1019,eof#1017)[-1,-1]
块#1019"return 1
"(,)[-1,-1]
elif#1020"self.isSpaceRelation()"(elif#1016,块#1019)[-1,-1]
eof#1021""(,)[-1,-1]
然后#1022""(块#1023,eof#1021)[-1,-1]
块#1023"return 2
"(,)[-1,-1]
elif#1024"self.m_symbol.m_name[0]=='[' and self.m_symbol.m_name[-1]==']'"(elif#1020,块#1023)[-1,-1]
块#1025"return 0
"(,)[-1,-1]
然后#1026""(块#995,块#1025)[-1,-1]
eof#1027""(,)[-1,-1]
然后#1028""(块#1025,eof#1027)[-1,-1]
块#1029""(,)[-1,-1]
然后#1030""(块#993,块#1029)[-1,-1]
块#1031""(,)[-1,-1]
func#1032"isSpaceRelation(self)"(块#1029,块#1031)[-1,-1]
块#1033"return False
"(,)[-1,-1]
if#1034"self.m_buildMode==True"(块#1031,块#1033)[-1,-1]
eof#1035""(,)[-1,-1]
然后#1036""(块#1033,eof#1035)[-1,-1]
块#1037"name=self.m_symbol.m_name
"(,)[-1,-1]
然后#1038""(块#1031,块#1037)[-1,-1]
块#1039""(,)[-1,-1]
然后#1040""(块#1037,块#1039)[-1,-1]
块#1041"return True
"(,)[-1,-1]
if#1042"name=='[上面]' or name=='[下面]' or name=='[左面]' or name=='[右面]'"(块#1039,块#1041)[-1,-1]
eof#1043""(,)[-1,-1]
然后#1044""(块#1041,eof#1043)[-1,-1]
eof#1045""(,)[-1,-1]
然后#1046""(块#1047,eof#1045)[-1,-1]
块#1047"return True
"(,)[-1,-1]
elif#1048"name=='[正上面]' or name=='[正下面]' or name=='[正左面]' or name=='[正右面]'"(if#1042,块#1047)[-1,-1]
eof#1049""(,)[-1,-1]
然后#1050""(块#1051,eof#1049)[-1,-1]
块#1051"return True
"(,)[-1,-1]
elif#1052"name=='[当地]'"(elif#1048,块#1051)[-1,-1]
eof#1053""(,)[-1,-1]
然后#1054""(块#1055,eof#1053)[-1,-1]
块#1055"return True
"(,)[-1,-1]
elif#1056"name=='[up]' or name=='[down]' or name=='[left]' or name=='[right]'"(elif#1052,块#1055)[-1,-1]
eof#1057""(,)[-1,-1]
然后#1058""(块#1059,eof#1057)[-1,-1]
块#1059"return True
"(,)[-1,-1]
elif#1060"name=='[Up]' or name=='[Down]' or name=='[Left]' or name=='[Right]'"(elif#1056,块#1059)[-1,-1]
eof#1061""(,)[-1,-1]
然后#1062""(块#1063,eof#1061)[-1,-1]
块#1063"return True
"(,)[-1,-1]
elif#1064"name=='[here]'"(elif#1060,块#1063)[-1,-1]
块#1065"return False
"(,)[-1,-1]
然后#1066""(块#1039,块#1065)[-1,-1]
eof#1067""(,)[-1,-1]
然后#1068""(块#1065,eof#1067)[-1,-1]
块#1069""(,)[-1,-1]
然后#1070""(块#1029,块#1069)[-1,-1]
块#1071""(,)[-1,-1]
func#1072"Reason_iterative(self,pool,list_new=None)"(块#1069,块#1071)[-1,-1]
块#1073"list_new=[]
"(,)[-1,-1]
if#1074"list_new==None"(块#1071,块#1073)[-1,-1]
eof#1075""(,)[-1,-1]
然后#1076""(块#1073,eof#1075)[-1,-1]
块#1077""(,)[-1,-1]
然后#1078""(块#1071,块#1077)[-1,-1]
块#1079"[change,list_pt]=self.Reason_oneStep(pool)
"(,)[-1,-1]
while#1080"True"(块#1077,块#1079)[-1,-1]
块#1081""(,)[-1,-1]
然后#1082""(块#1079,块#1081)[-1,-1]
块#1083""(,)[-1,-1]
if#1084"self.m_stage==2"(块#1081,块#1083)[-1,-1]
块#1085"clause.Reason_iterative(pool)
"(,)[-1,-1]
for#1086"self.m_clause"(块#1083,块#1085)[-1,-1]
变量#1087"clause"(for#1086,)[-1,-1]
eof#1088""(,)[-1,-1]
然后#1089""(块#1085,eof#1088)[-1,-1]
eof#1090""(,)[-1,-1]
然后#1091""(块#1083,eof#1090)[-1,-1]
块#1092"end.Reason_iterative(pool)
"(,)[-1,-1]
for#1093"self.m_noe"(块#1106,块#1092)[-1,-1]
变量#1094"end"(for#1093,)[-1,-1]
eof#1095""(,)[-1,-1]
然后#1096""(块#1092,eof#1095)[-1,-1]
块#1097""(,)[-1,-1]
然后#1098""(块#1106,块#1097)[-1,-1]
块#1099"end.Reason_iterative(pool)
"(,)[-1,-1]
for#1100"self.m_yese"(块#1097,块#1099)[-1,-1]
变量#1101"end"(for#1100,)[-1,-1]
eof#1102""(,)[-1,-1]
然后#1103""(块#1099,eof#1102)[-1,-1]
eof#1104""(,)[-1,-1]
然后#1105""(块#1097,eof#1104)[-1,-1]
块#1106""(,)[-1,-1]
elif#1107"self.m_stage==3"(if#1084,块#1106)[-1,-1]
eof#1108""(,)[-1,-1]
然后#1109""(块#1110,eof#1108)[-1,-1]
块#1110"break
"(,)[-1,-1]
elif#1111"self.m_stage==5"(elif#1107,块#1110)[-1,-1]
eof#1112""(,)[-1,-1]
然后#1113""(块#1081,eof#1112)[-1,-1]
块#1114"return [self.m_reState,list_new]
"(,)[-1,-1]
然后#1115""(块#1077,块#1114)[-1,-1]
eof#1116""(,)[-1,-1]
然后#1117""(块#1114,eof#1116)[-1,-1]
块#1118""(,)[-1,-1]
然后#1119""(块#1069,块#1118)[-1,-1]
块#1120""(,)[-1,-1]
func#1121"isChosen(self)"(块#1118,块#1120)[-1,-1]
块#1122"return False
"(,)[-1,-1]
if#1123"self.m_cause==None"(块#1120,块#1122)[-1,-1]
eof#1124""(,)[-1,-1]
然后#1125""(块#1122,eof#1124)[-1,-1]
块#1126""(,)[-1,-1]
然后#1127""(块#1120,块#1126)[-1,-1]
块#1128"return self in self.m_cause.m_noe
"(,)[-1,-1]
if#1129"self.m_cause.m_choose==False"(块#1126,块#1128)[-1,-1]
eof#1130""(,)[-1,-1]
然后#1131""(块#1128,eof#1130)[-1,-1]
块#1132"return self in self.m_cause.m_yese
"(,)[-1,-1]
else#1133""(if#1129,块#1132)[-1,-1]
eof#1134""(,)[-1,-1]
然后#1135""(块#1132,eof#1134)[-1,-1]
eof#1136""(,)[-1,-1]
然后#1137""(块#1126,eof#1136)[-1,-1]
块#1138""(,)[-1,-1]
然后#1139""(块#1118,块#1138)[-1,-1]
块#1140"list_new=[]
areaType=self.areaType()
change=False
"(,)[-1,-1]
func#1141"Reason_oneStep(self,pool)"(块#1138,块#1140)[-1,-1]
块#1142""(,)[-1,-1]
然后#1143""(块#1140,块#1142)[-1,-1]
块#1144""(,)[-1,-1]
if#1145"self.m_stage==0"(块#1142,块#1144)[-1,-1]
块#1146""(,)[-1,-1]
if#1147"self.m_cause!=None"(块#1144,块#1146)[-1,-1]
块#1148""(,)[-1,-1]
if#1149"self in self.m_cause.m_clause"(块#1146,块#1148)[-1,-1]
块#1150"self.m_stage=1
change=True
"(,)[-1,-1]
if#1151"self.m_cause.m_stage==2"(块#1148,块#1150)[-1,-1]
eof#1152""(,)[-1,-1]
然后#1153""(块#1150,eof#1152)[-1,-1]
eof#1154""(,)[-1,-1]
然后#1155""(块#1148,eof#1154)[-1,-1]
块#1156"# else:
#     if self.m_cause.m_stage==3 and self.isChosen():
#         self.m_stage=1
#         change=True
#         # print(self.m_symbol.info(),'start!','The choose of the cause is:',self.m_cause.m_choose)
"(,)[-1,-1]
然后#1157""(块#1146,块#1156)[-1,-1]
eof#1158""(,)[-1,-1]
然后#1159""(块#1156,eof#1158)[-1,-1]
eof#1160""(,)[-1,-1]
然后#1161""(块#1144,eof#1160)[-1,-1]
块#1162""(,)[-1,-1]
然后#1163""(块#1142,块#1162)[-1,-1]
块#1164""(,)[-1,-1]
if#1165"self.m_stage==1"(块#1162,块#1164)[-1,-1]
块#1166""(,)[-1,-1]
while#1167"True"(块#1164,块#1166)[-1,-1]
块#1168"self.newMap(pool,areaType,list_new)
"(,)[-1,-1]
if#1169"self.stateSelf()!='blue'"(块#1166,块#1168)[-1,-1]
eof#1170""(,)[-1,-1]
然后#1171""(块#1168,eof#1170)[-1,-1]
块#1172"self.m_interp=False
"(,)[-1,-1]
else#1173""(if#1169,块#1172)[-1,-1]
eof#1174""(,)[-1,-1]
然后#1175""(块#1172,eof#1174)[-1,-1]
块#1176"# if self.m_map!=None:
#     print('Map:',self.m_map.info(),self.stateSelf())
change=True
"(,)[-1,-1]
然后#1177""(块#1166,块#1176)[-1,-1]
块#1178""(,)[-1,-1]
然后#1179""(块#1176,块#1178)[-1,-1]
块#1180"continue
"(,)[-1,-1]
if#1181"self.stateRelation()==False"(块#1178,块#1180)[-1,-1]
eof#1182""(,)[-1,-1]
然后#1183""(块#1180,eof#1182)[-1,-1]
eof#1184""(,)[-1,-1]
然后#1185""(块#1186,eof#1184)[-1,-1]
块#1186"continue
"(,)[-1,-1]
elif#1187"self.stateSelf()=='red'"(if#1181,块#1186)[-1,-1]
块#1188""(,)[-1,-1]
然后#1189""(块#1200,块#1188)[-1,-1]
块#1190"self.m_reState='dark yellow'
return [change,list_new]
"(,)[-1,-1]
if#1191"self.m_no==False"(块#1188,块#1190)[-1,-1]
eof#1192""(,)[-1,-1]
然后#1193""(块#1190,eof#1192)[-1,-1]
块#1194"self.m_reState='dark green'
return [change,list_new]
"(,)[-1,-1]
else#1195""(if#1191,块#1194)[-1,-1]
eof#1196""(,)[-1,-1]
然后#1197""(块#1194,eof#1196)[-1,-1]
eof#1198""(,)[-1,-1]
然后#1199""(块#1188,eof#1198)[-1,-1]
块#1200"self.m_stage=5
"(,)[-1,-1]
elif#1201"self.stateSelf()=='yellow'"(elif#1187,块#1200)[-1,-1]
eof#1202""(,)[-1,-1]
然后#1203""(块#1204,eof#1202)[-1,-1]
块#1204"self.m_stage=1
return [change,list_new]
"(,)[-1,-1]
elif#1205"self.stateSelf()=='blue'"(elif#1201,块#1204)[-1,-1]
块#1206"self.m_stage=2
break
"(,)[-1,-1]
else#1207""(if#1181,块#1206)[-1,-1]
eof#1208""(,)[-1,-1]
然后#1209""(块#1206,eof#1208)[-1,-1]
eof#1210""(,)[-1,-1]
然后#1211""(块#1178,eof#1210)[-1,-1]
eof#1212""(,)[-1,-1]
然后#1213""(块#1164,eof#1212)[-1,-1]
块#1214""(,)[-1,-1]
然后#1215""(块#1162,块#1214)[-1,-1]
块#1216""(,)[-1,-1]
if#1217"self.m_stage==2"(块#1214,块#1216)[-1,-1]
块#1218"self.m_choose=True
self.m_stage=3
change=True
"(,)[-1,-1]
if#1219"self.m_clause==[]"(块#1216,块#1218)[-1,-1]
eof#1220""(,)[-1,-1]
然后#1221""(块#1218,eof#1220)[-1,-1]
块#1222"self.m_choose=self.m_clauseAnd
keep=False
"(,)[-1,-1]
else#1223""(if#1219,块#1222)[-1,-1]
eof#1224""(,)[-1,-1]
然后#1225""(块#1222,eof#1224)[-1,-1]
块#1226""(,)[-1,-1]
然后#1227""(块#1216,块#1226)[-1,-1]
块#1228""(,)[-1,-1]
for#1229"self.m_clause"(块#1226,块#1228)[-1,-1]
变量#1230"clause"(for#1229,)[-1,-1]
块#1231""(,)[-1,-1]
if#1232"self.m_clauseAnd==True"(块#1228,块#1231)[-1,-1]
块#1233"self.m_choose=False
self.m_stage=3
change=True
self.m_clauseOut=True
break
"(,)[-1,-1]
if#1234"clause.m_reState=='dark yellow'"(块#1231,块#1233)[-1,-1]
eof#1235""(,)[-1,-1]
然后#1236""(块#1233,eof#1235)[-1,-1]
eof#1237""(,)[-1,-1]
然后#1238""(块#1239,eof#1237)[-1,-1]
块#1239"keep=True
"(,)[-1,-1]
elif#1240"clause.m_reState==''"(if#1234,块#1239)[-1,-1]
eof#1241""(,)[-1,-1]
然后#1242""(块#1231,eof#1241)[-1,-1]
块#1243""(,)[-1,-1]
else#1244""(if#1232,块#1243)[-1,-1]
块#1245"self.m_choose=True
self.m_stage=3
change=True
self.m_clauseOut=True
break
"(,)[-1,-1]
if#1246"clause.m_reState=='dark green'"(块#1243,块#1245)[-1,-1]
eof#1247""(,)[-1,-1]
然后#1248""(块#1245,eof#1247)[-1,-1]
eof#1249""(,)[-1,-1]
然后#1250""(块#1251,eof#1249)[-1,-1]
块#1251"keep=True
"(,)[-1,-1]
elif#1252"clause.m_reState==''"(if#1246,块#1251)[-1,-1]
eof#1253""(,)[-1,-1]
然后#1254""(块#1243,eof#1253)[-1,-1]
eof#1255""(,)[-1,-1]
然后#1256""(块#1228,eof#1255)[-1,-1]
块#1257""(,)[-1,-1]
然后#1258""(块#1226,块#1257)[-1,-1]
块#1259"self.m_stage=3
change=True
self.m_clauseOut=True
"(,)[-1,-1]
if#1260"self.m_clause!=[] and keep==False"(块#1257,块#1259)[-1,-1]
eof#1261""(,)[-1,-1]
然后#1262""(块#1259,eof#1261)[-1,-1]
eof#1263""(,)[-1,-1]
然后#1264""(块#1257,eof#1263)[-1,-1]
块#1265""(,)[-1,-1]
然后#1266""(块#1214,块#1265)[-1,-1]
块#1267"# print(self.m_symbol.info(),'End type:',self.m_yesAnd)
"(,)[-1,-1]
if#1268"self.m_stage==3"(块#1265,块#1267)[-1,-1]
块#1269""(,)[-1,-1]
然后#1270""(块#1267,块#1269)[-1,-1]
块#1271""(,)[-1,-1]
if#1272"self.m_choose==False"(块#1269,块#1271)[-1,-1]
块#1273"self.m_stage=1
change=True
return [change,list_new]
"(,)[-1,-1]
if#1274"self.m_noe==[]"(块#1271,块#1273)[-1,-1]
eof#1275""(,)[-1,-1]
然后#1276""(块#1273,eof#1275)[-1,-1]
块#1277"i=self.m_eoi
end=self.m_noe[i]
"(,)[-1,-1]
然后#1278""(块#1271,块#1277)[-1,-1]
块#1279""(,)[-1,-1]
然后#1280""(块#1277,块#1279)[-1,-1]
块#1281"end.m_stage=1
change=True
"(,)[-1,-1]
if#1282"end.m_stage==0"(块#1279,块#1281)[-1,-1]
eof#1283""(,)[-1,-1]
然后#1284""(块#1281,eof#1283)[-1,-1]
块#1285"self.m_stage=1
change=True
"(,)[-1,-1]
if#1286"self.m_noAnd==True"(块#1305,块#1285)[-1,-1]
eof#1287""(,)[-1,-1]
然后#1288""(块#1285,eof#1287)[-1,-1]
块#1289"i+=1
change=True
"(,)[-1,-1]
else#1290""(if#1286,块#1289)[-1,-1]
块#1291""(,)[-1,-1]
然后#1292""(块#1289,块#1291)[-1,-1]
块#1293"self.m_stage=1
self.m_eoi=0
"(,)[-1,-1]
if#1294"i==len(self.m_noe)"(块#1291,块#1293)[-1,-1]
eof#1295""(,)[-1,-1]
然后#1296""(块#1293,eof#1295)[-1,-1]
块#1297"self.m_eoi=i
"(,)[-1,-1]
else#1298""(if#1294,块#1297)[-1,-1]
eof#1299""(,)[-1,-1]
然后#1300""(块#1297,eof#1299)[-1,-1]
eof#1301""(,)[-1,-1]
然后#1302""(块#1291,eof#1301)[-1,-1]
eof#1303""(,)[-1,-1]
然后#1304""(块#1305,eof#1303)[-1,-1]
块#1305""(,)[-1,-1]
elif#1306"end.m_reState=='dark yellow'"(if#1282,块#1305)[-1,-1]
块#1307"self.m_stage=4
change=True
"(,)[-1,-1]
if#1308"self.m_noAnd!=True"(块#1327,块#1307)[-1,-1]
eof#1309""(,)[-1,-1]
然后#1310""(块#1307,eof#1309)[-1,-1]
块#1311"i+=1
change=True
"(,)[-1,-1]
else#1312""(if#1308,块#1311)[-1,-1]
块#1313""(,)[-1,-1]
然后#1314""(块#1311,块#1313)[-1,-1]
块#1315"self.m_stage=4
self.m_eoi=0
"(,)[-1,-1]
if#1316"i==len(self.m_noe)"(块#1313,块#1315)[-1,-1]
eof#1317""(,)[-1,-1]
然后#1318""(块#1315,eof#1317)[-1,-1]
块#1319"self.m_eoi=i
"(,)[-1,-1]
else#1320""(if#1316,块#1319)[-1,-1]
eof#1321""(,)[-1,-1]
然后#1322""(块#1319,eof#1321)[-1,-1]
eof#1323""(,)[-1,-1]
然后#1324""(块#1313,eof#1323)[-1,-1]
eof#1325""(,)[-1,-1]
然后#1326""(块#1327,eof#1325)[-1,-1]
块#1327""(,)[-1,-1]
elif#1328"end.m_reState=='dark green'"(elif#1306,块#1327)[-1,-1]
块#1329"# keep=False
# for end in self.m_noe:
#     if end.m_reState=='':
#         keep=True
#     elif self.m_noAnd==True:
#         if end.m_reState=='dark yellow':
#             self.m_stage=1
#             change=True
#             return [change,list_new]
#     else:
#         if end.m_reState=='dark green':
#             self.m_stage=4
#             change=True
#             break
# if self.m_stage==3 and keep==False:
#     if self.m_noAnd==True:
#         self.m_stage=4
#         change=True
#     else:
#         self.m_stage=1
#         change=True
#         return [change,list_new]
"(,)[-1,-1]
然后#1330""(块#1279,块#1329)[-1,-1]
eof#1331""(,)[-1,-1]
然后#1332""(块#1329,eof#1331)[-1,-1]
块#1333""(,)[-1,-1]
else#1334""(if#1272,块#1333)[-1,-1]
块#1335"self.m_stage=4
change=True
"(,)[-1,-1]
if#1336"self.m_yese==[] and self.m_noe==[]"(块#1333,块#1335)[-1,-1]
eof#1337""(,)[-1,-1]
然后#1338""(块#1335,eof#1337)[-1,-1]
eof#1339""(,)[-1,-1]
然后#1340""(块#1341,eof#1339)[-1,-1]
块#1341"self.m_stage=1
change=True
return [change,list_new]
"(,)[-1,-1]
elif#1342"self.m_yese==[]"(if#1336,块#1341)[-1,-1]
块#1343"i=self.m_eoi
end=self.m_yese[i]
"(,)[-1,-1]
else#1344""(if#1336,块#1343)[-1,-1]
块#1345""(,)[-1,-1]
然后#1346""(块#1343,块#1345)[-1,-1]
块#1347"end.m_stage=1
change=True
"(,)[-1,-1]
if#1348"end.m_stage==0"(块#1345,块#1347)[-1,-1]
eof#1349""(,)[-1,-1]
然后#1350""(块#1347,eof#1349)[-1,-1]
块#1351"self.m_stage=1
change=True
"(,)[-1,-1]
if#1352"self.m_yesAnd==True"(块#1371,块#1351)[-1,-1]
eof#1353""(,)[-1,-1]
然后#1354""(块#1351,eof#1353)[-1,-1]
块#1355"i+=1
change=True
"(,)[-1,-1]
else#1356""(if#1352,块#1355)[-1,-1]
块#1357""(,)[-1,-1]
然后#1358""(块#1355,块#1357)[-1,-1]
块#1359"self.m_stage=1
self.m_eoi=0
"(,)[-1,-1]
if#1360"i==len(self.m_yese)"(块#1357,块#1359)[-1,-1]
eof#1361""(,)[-1,-1]
然后#1362""(块#1359,eof#1361)[-1,-1]
块#1363"self.m_eoi=i
"(,)[-1,-1]
else#1364""(if#1360,块#1363)[-1,-1]
eof#1365""(,)[-1,-1]
然后#1366""(块#1363,eof#1365)[-1,-1]
eof#1367""(,)[-1,-1]
然后#1368""(块#1357,eof#1367)[-1,-1]
eof#1369""(,)[-1,-1]
然后#1370""(块#1371,eof#1369)[-1,-1]
块#1371""(,)[-1,-1]
elif#1372"end.m_reState=='dark yellow'"(if#1348,块#1371)[-1,-1]
块#1373"self.m_stage=4
change=True
"(,)[-1,-1]
if#1374"self.m_yesAnd!=True"(块#1393,块#1373)[-1,-1]
eof#1375""(,)[-1,-1]
然后#1376""(块#1373,eof#1375)[-1,-1]
块#1377"i+=1
change=True
"(,)[-1,-1]
else#1378""(if#1374,块#1377)[-1,-1]
块#1379""(,)[-1,-1]
然后#1380""(块#1377,块#1379)[-1,-1]
块#1381"self.m_stage=4
self.m_eoi=0
"(,)[-1,-1]
if#1382"i==len(self.m_yese)"(块#1379,块#1381)[-1,-1]
eof#1383""(,)[-1,-1]
然后#1384""(块#1381,eof#1383)[-1,-1]
块#1385"self.m_eoi=i
"(,)[-1,-1]
else#1386""(if#1382,块#1385)[-1,-1]
eof#1387""(,)[-1,-1]
然后#1388""(块#1385,eof#1387)[-1,-1]
eof#1389""(,)[-1,-1]
然后#1390""(块#1379,eof#1389)[-1,-1]
eof#1391""(,)[-1,-1]
然后#1392""(块#1393,eof#1391)[-1,-1]
块#1393""(,)[-1,-1]
elif#1394"end.m_reState=='dark green'"(elif#1372,块#1393)[-1,-1]
块#1395"# keep=False
# for end in self.m_yese:
#     if end.m_reState=='':
#         keep=True
#     elif self.m_yesAnd==True:
#         if end.m_reState=='dark yellow':
#             self.m_stage=1
#             change=True
#             return [change,list_new]
#     else:
#         if end.m_reState=='dark green':
#             self.m_stage=4
#             change=True
#             break
# if keep==False and self.m_stage==3:
#     if self.m_yesAnd:
#         self.m_stage=4
#         change=True
#     else:
#         self.m_stage=1
#         change=True
#         return [change,list_new]
"(,)[-1,-1]
然后#1396""(块#1345,块#1395)[-1,-1]
eof#1397""(,)[-1,-1]
然后#1398""(块#1395,eof#1397)[-1,-1]
eof#1399""(,)[-1,-1]
然后#1400""(块#1333,eof#1399)[-1,-1]
eof#1401""(,)[-1,-1]
然后#1402""(块#1269,eof#1401)[-1,-1]
块#1403""(,)[-1,-1]
然后#1404""(块#1265,块#1403)[-1,-1]
块#1405"# If clause isn't empty, collect them first
"(,)[-1,-1]
if#1406"self.m_stage==4"(块#1403,块#1405)[-1,-1]
块#1407""(,)[-1,-1]
然后#1408""(块#1405,块#1407)[-1,-1]
块#1409"self.m_clauseCollect=True
"(,)[-1,-1]
if#1410"self.m_clauseNew!=[] or self.m_clauseOut==True"(块#1407,块#1409)[-1,-1]
eof#1411""(,)[-1,-1]
然后#1412""(块#1409,eof#1411)[-1,-1]
块#1413"# the function points are collected, because they will be deleted after running as tmp points
"(,)[-1,-1]
然后#1414""(块#1407,块#1413)[-1,-1]
块#1415""(,)[-1,-1]
然后#1416""(块#1413,块#1415)[-1,-1]
块#1417"list_new.append(self.m_map)
"(,)[-1,-1]
if#1418"(self.m_buildMode==True or self.isFunctionPoint()==1) and self.m_map!=None and self.m_map not in list_new"(块#1415,块#1417)[-1,-1]
eof#1419""(,)[-1,-1]
然后#1420""(块#1417,eof#1419)[-1,-1]
块#1421"self.m_stage=5
"(,)[-1,-1]
然后#1422""(块#1415,块#1421)[-1,-1]
块#1423""(,)[-1,-1]
然后#1424""(块#1421,块#1423)[-1,-1]
块#1425"self.m_reState='dark yellow'
change=True
return [change,list_new]
"(,)[-1,-1]
if#1426"self.m_no==True"(块#1423,块#1425)[-1,-1]
eof#1427""(,)[-1,-1]
然后#1428""(块#1425,eof#1427)[-1,-1]
块#1429"self.m_reState='dark green'
change=True
return [change,list_new]
"(,)[-1,-1]
else#1430""(if#1426,块#1429)[-1,-1]
eof#1431""(,)[-1,-1]
然后#1432""(块#1429,eof#1431)[-1,-1]
eof#1433""(,)[-1,-1]
然后#1434""(块#1423,eof#1433)[-1,-1]
块#1435"return [change,list_new]
"(,)[-1,-1]
然后#1436""(块#1403,块#1435)[-1,-1]
eof#1437""(,)[-1,-1]
然后#1438""(块#1435,eof#1437)[-1,-1]
块#1439""(,)[-1,-1]
然后#1440""(块#1138,块#1439)[-1,-1]
块#1441"aType=True
cause=self
"(,)[-1,-1]
func#1442"areaType(self)"(块#1439,块#1441)[-1,-1]
块#1443""(,)[-1,-1]
然后#1444""(块#1441,块#1443)[-1,-1]
块#1445""(,)[-1,-1]
while#1446"True"(块#1443,块#1445)[-1,-1]
块#1447"aType=not aType
"(,)[-1,-1]
if#1448"cause.m_no==True"(块#1445,块#1447)[-1,-1]
eof#1449""(,)[-1,-1]
然后#1450""(块#1447,eof#1449)[-1,-1]
块#1451""(,)[-1,-1]
然后#1452""(块#1445,块#1451)[-1,-1]
块#1453"return aType
"(,)[-1,-1]
if#1454"cause.m_cause==None"(块#1451,块#1453)[-1,-1]
eof#1455""(,)[-1,-1]
然后#1456""(块#1453,eof#1455)[-1,-1]
块#1457"cause=cause.m_cause
"(,)[-1,-1]
else#1458""(if#1454,块#1457)[-1,-1]
eof#1459""(,)[-1,-1]
然后#1460""(块#1457,eof#1459)[-1,-1]
eof#1461""(,)[-1,-1]
然后#1462""(块#1451,eof#1461)[-1,-1]
eof#1463""(,)[-1,-1]
然后#1464""(块#1443,eof#1463)[-1,-1]
块#1465"# def Reason_oneStep(self,pool):
#     list_new=[]
#     areaType=self.areaType()
#     change=False
#     if self.m_stage==0:
#         if self.m_cause!=None:
#             if self in self.m_cause.m_clause:
#                 if self.m_cause.m_stage==2:
#                     self.m_stage=1
#                     change=True
#             else:
#                 if self.m_cause.m_stage==3 and self.isChosen():
#                     self.m_stage=1
#                     change=True
#                     # print(self.m_symbol.info(),'start!','The choose of the cause is:',self.m_cause.m_choose)
#     if self.m_stage==1:
#         while True:
#             if self.stateSelf()!='blue':
#                 self.newMap(pool,areaType,list_new)
#             else:
#                 self.m_interp=False
#             # if self.m_map!=None:
#             #     print('Map:',self.m_map.info(),self.stateSelf())
#             change=True
#             if self.stateRelation()==False:
#                 continue
#             elif self.stateSelf()=='red':
#                 continue
#             elif self.stateSelf()=='yellow':
#                 self.m_stage=5
#                 if self.m_no==False:
#                     self.m_reState='dark yellow'
#                     return [change,list_new]
#                 else:
#                     self.m_reState='dark green'
#                     return [change,list_new]
#             elif self.stateSelf()=='blue':
#                 self.m_stage=1
#                 return [change,list_new]
#             else:
#                 self.m_stage=2
#                 break
#     if self.m_stage==2:
#         if self.m_clause==[]:
#             self.m_choose=True
#             self.m_stage=3
#             change=True
#         else:
#             self.m_choose=self.m_clauseAnd
#             keep=False
#         for clause in self.m_clause:
#             if self.m_clauseAnd==True:
#                 if clause.m_reState=='dark yellow':
#                     self.m_choose=False
#                     self.m_stage=3
#                     change=True
#                     self.m_clauseOut=True
#                     break
#                 elif clause.m_reState=='':
#                     keep=True
#             else:
#                 if clause.m_reState=='dark green':
#                     self.m_choose=True
#                     self.m_stage=3
#                     change=True
#                     self.m_clauseOut=True
#                     break
#                 elif clause.m_reState=='':
#                     keep=True
#         if self.m_clause!=[] and keep==False:
#             self.m_stage=3
#             change=True
#             self.m_clauseOut=True
#     if self.m_stage==3:
#         # print(self.m_symbol.info(),'End type:',self.m_yesAnd)
#         if self.m_choose==False:
#             if self.m_noe==[]:
#                 self.m_stage=1
#                 change=True
#                 return [change,list_new]
#             keep=False
#             for end in self.m_noe:
#                 if end.m_reState=='':
#                     keep=True
#                 elif self.m_noAnd==True:
#                     if end.m_reState=='dark yellow':
#                         self.m_stage=1
#                         change=True
#                         return [change,list_new]
#                 else:
#                     if end.m_reState=='dark green':
#                         self.m_stage=4
#                         change=True
#                         break
#             if self.m_stage==3 and keep==False:
#                 if self.m_noAnd==True:
#                     self.m_stage==4
#                     change=True
#                 else:
#                     self.m_stage=1
#                     change=True
#                     return [change,list_new]
#         else:
#             if self.m_yese==[] and self.m_noe==[]:
#                 self.m_stage=4
#                 change=True
#             elif self.m_yese==[]:
#                 self.m_stage=1
#                 change=True
#                 return [change,list_new]
#             else:
#                 keep=False
#                 for end in self.m_yese:
#                     if end.m_reState=='':
#                         keep=True
#                     elif self.m_yesAnd==True:
#                         if end.m_reState=='dark yellow':
#                             self.m_stage=1
#                             change=True
#                             return [change,list_new]
#                     else:
#                         if end.m_reState=='dark green':
#                             self.m_stage=4
#                             change=True
#                             break
#                 if keep==False and self.m_stage==3:
#                     if self.m_yesAnd:
#                         self.m_stage=4
#                         change=True
#                     else:
#                         self.m_stage=1
#                         change=True
#                         return [change,list_new]
#     if self.m_stage==4:
#         # If clause isn't empty, collect them first
#         if self.m_clauseNew!=[] or self.m_clauseOut==True:
#             self.m_clauseCollect=True
#         # the function points are collected, because they will be deleted after running as tmp points
#         if (self.m_buildMode==True or self.isFunctionPoint()==1) and self.m_map!=None:
#             list_new.append(self.m_map)
#         self.m_stage=5
#         if self.m_no==True:
#             self.m_reState='dark yellow'
#             change=True
#             return [change,list_new]
#         else:
#             self.m_reState='dark green'
#             change=True
#             return [change,list_new]
#     return [change,list_new]
"(,)[-1,-1]
然后#1466""(块#1439,块#1465)[-1,-1]
块#1467""(,)[-1,-1]
然后#1468""(块#1465,块#1467)[-1,-1]
块#1469"wait_list=[]
last=self
connection=None
exp='(->>|=>>|->|=>|{[ \t\n]*|[ \t\n]*}|,[ \t\n]*|;[ \t\n]*|:[ \t\n]*)'
units=re.split(exp,code)
"(,)[-1,-1]
func#1470"build(self,code,points)"(块#1467,块#1469)[-1,-1]
eof#1471""(,)[-1,-1]
然后#1472""(块#1469,eof#1471)[-1,-1]
eof#1473""(,)[-1,-1]
for#1474"units"(eof#1471,eof#1473)[-1,-1]
变量#1475"unit"(for#1474,)[-1,-1]
块#1476"continue
"(,)[-1,-1]
if#1477"unit==''"(eof#1473,块#1476)[-1,-1]
eof#1478""(,)[-1,-1]
然后#1479""(块#1476,eof#1478)[-1,-1]
eof#1480""(,)[-1,-1]
然后#1481""(块#1482,eof#1480)[-1,-1]
块#1482"connection=unit
"(,)[-1,-1]
elif#1483"unit=='->' or unit=='=>' or unit=='->>' or unit=='=>>'"(if#1477,块#1482)[-1,-1]
eof#1484""(,)[-1,-1]
然后#1485""(块#1486,eof#1484)[-1,-1]
块#1486"wait_list.append(['clause_splitting',last])
"(,)[-1,-1]
elif#1487"unit[0]=='{'"(elif#1483,块#1486)[-1,-1]
块#1488"    for unit in units:
        if unit=='':
            continue
        elif unit=='->' or unit=='=>' or unit=='->>' or unit=='=>>':
            connection=unit
        elif unit[0]=='{':
            wait_list.append(['clause_splitting',last])
        elif unit[0]==':':
            wait_list.append(['end_splitting',last])
        elif unit[0]==',':
            last=wait_list[-1][1]
        elif unit[0]==';':
            if wait_list[-1][0]=='end_splitting':
                wait_list.pop()
            if wait_list!=[]:
                last=wait_list[-1][1]
        elif unit[-1]=='}':
            last=wait_list[-1][1]
            wait_list.pop()
        else:
            current=Karma(points[int(unit)])
            current.m_cause=last
            if connection=='->':
                current.m_no=False
                last.m_yese.append(current)
            elif connection=='->>':
                current.m_no=False
                last.m_noe.append(current)
            elif connection=='=>':
                current.m_no=True
                last.m_yese.append(current)
            elif connection=='=>>':
                current.m_no=True
                last.m_noe.append(current)
            else:
                last.m_clause.append(current)
            connection=''
            last=current
        # print(wait_list)
"(,)[-1,-1]
然后#1489""(块#1467,块#1488)[-1,-1]
块#1490""(,)[-1,-1]
然后#1491""(块#1488,块#1490)[-1,-1]
块#1492"info=''
karma=self
"(,)[-1,-1]
func#1493"info_cause(self)"(块#1490,块#1492)[-1,-1]
块#1494""(,)[-1,-1]
然后#1495""(块#1492,块#1494)[-1,-1]
块#1496""(,)[-1,-1]
while#1497"True"(块#1494,块#1496)[-1,-1]
块#1498"info=karma.m_symbol.m_name+info
"(,)[-1,-1]
if#1499"karma.m_symbol!=None"(块#1496,块#1498)[-1,-1]
eof#1500""(,)[-1,-1]
然后#1501""(块#1498,eof#1500)[-1,-1]
块#1502""(,)[-1,-1]
然后#1503""(块#1496,块#1502)[-1,-1]
块#1504"break
"(,)[-1,-1]
if#1505"karma.m_cause==None"(块#1502,块#1504)[-1,-1]
eof#1506""(,)[-1,-1]
然后#1507""(块#1504,eof#1506)[-1,-1]
块#1508""(,)[-1,-1]
然后#1509""(块#1502,块#1508)[-1,-1]
块#1510""(,)[-1,-1]
if#1511"karma in karma.m_cause.m_yese"(块#1508,块#1510)[-1,-1]
块#1512"info='=>'+info
"(,)[-1,-1]
if#1513"karma.m_no==True"(块#1510,块#1512)[-1,-1]
eof#1514""(,)[-1,-1]
然后#1515""(块#1512,eof#1514)[-1,-1]
块#1516"info='->'+info
"(,)[-1,-1]
else#1517""(if#1513,块#1516)[-1,-1]
eof#1518""(,)[-1,-1]
然后#1519""(块#1516,eof#1518)[-1,-1]
eof#1520""(,)[-1,-1]
然后#1521""(块#1510,eof#1520)[-1,-1]
块#1522"info='=>>'+info
"(,)[-1,-1]
if#1523"karma.m_no==True"(块#1532,块#1522)[-1,-1]
eof#1524""(,)[-1,-1]
然后#1525""(块#1522,eof#1524)[-1,-1]
块#1526"info='->>'+info
"(,)[-1,-1]
else#1527""(if#1523,块#1526)[-1,-1]
eof#1528""(,)[-1,-1]
然后#1529""(块#1526,eof#1528)[-1,-1]
eof#1530""(,)[-1,-1]
然后#1531""(块#1532,eof#1530)[-1,-1]
块#1532""(,)[-1,-1]
elif#1533"karma in karma.m_cause.m_noe"(if#1511,块#1532)[-1,-1]
eof#1534""(,)[-1,-1]
然后#1535""(块#1536,eof#1534)[-1,-1]
块#1536"info='=='+info
"(,)[-1,-1]
elif#1537"karma in karma.m_cause.m_clause"(elif#1533,块#1536)[-1,-1]
块#1538"karma=karma.m_cause
"(,)[-1,-1]
然后#1539""(块#1508,块#1538)[-1,-1]
eof#1540""(,)[-1,-1]
然后#1541""(块#1538,eof#1540)[-1,-1]
块#1542"print(info)
return info
"(,)[-1,-1]
然后#1543""(块#1494,块#1542)[-1,-1]
eof#1544""(,)[-1,-1]
然后#1545""(块#1542,eof#1544)[-1,-1]
块#1546""(,)[-1,-1]
然后#1547""(块#1490,块#1546)[-1,-1]
块#1548"list_effects=[self]
"(,)[-1,-1]
func#1549"allEffects(self)"(块#1546,块#1548)[-1,-1]
块#1550""(,)[-1,-1]
然后#1551""(块#1548,块#1550)[-1,-1]
块#1552"list_effects+=karma.allEffects()
"(,)[-1,-1]
for#1553"self.m_clause"(块#1550,块#1552)[-1,-1]
变量#1554"karma"(for#1553,)[-1,-1]
eof#1555""(,)[-1,-1]
然后#1556""(块#1552,eof#1555)[-1,-1]
块#1557""(,)[-1,-1]
然后#1558""(块#1550,块#1557)[-1,-1]
块#1559"list_effects+=karma.allEffects()
"(,)[-1,-1]
for#1560"self.m_noe"(块#1557,块#1559)[-1,-1]
变量#1561"karma"(for#1560,)[-1,-1]
eof#1562""(,)[-1,-1]
然后#1563""(块#1559,eof#1562)[-1,-1]
块#1564""(,)[-1,-1]
然后#1565""(块#1557,块#1564)[-1,-1]
块#1566"list_effects+=karma.allEffects()
"(,)[-1,-1]
for#1567"self.m_yese"(块#1564,块#1566)[-1,-1]
变量#1568"karma"(for#1567,)[-1,-1]
eof#1569""(,)[-1,-1]
然后#1570""(块#1566,eof#1569)[-1,-1]
块#1571"# list_effects.append(self)
return list_effects
"(,)[-1,-1]
然后#1572""(块#1564,块#1571)[-1,-1]
eof#1573""(,)[-1,-1]
然后#1574""(块#1571,eof#1573)[-1,-1]
块#1575"# def setAllBuildMode(self,mode,list_km):
#     self.m_buildMode=mode
#     for point in self.m_symbol.m_con:
#         for karma in list_km:
#             if karma.m_symbol==point:
#                 karma.setAllBuildMode(mode,list_km)
# one of causes provides map pool for this karma
"(,)[-1,-1]
然后#1576""(块#1546,块#1575)[-1,-1]
块#1577""(,)[-1,-1]
然后#1578""(块#1575,块#1577)[-1,-1]
块#1579"connecting=None
connected=None
caseNo=100
"(,)[-1,-1]
func#1580"setRangers(self,causes=None)"(块#1577,块#1579)[-1,-1]
块#1581""(,)[-1,-1]
然后#1582""(块#1579,块#1581)[-1,-1]
块#1583"causes=[]
"(,)[-1,-1]
if#1584"causes==None"(块#1581,块#1583)[-1,-1]
eof#1585""(,)[-1,-1]
然后#1586""(块#1583,eof#1585)[-1,-1]
块#1587"# # word(,)
# elif self.m_buildMode!=True and self.isFunctionPoint()==0:
#     for cause in causes:
#         # [pt]->word
#         if cause.isFunctionPoint()!=0:
#             # [pt]->word([pt],)
#             # Why?
#             if self.m_symbol.m_db[0]==cause.m_symbol or self.m_symbol.m_db[1]==cause.m_symbol:
#                 connecting=cause
#                 connected=None
#                 break
#             # elif cause.m_symbol.m_db[0]==self.m_symbol or cause.m_symbol.m_db[1]==self.m_symbol:
#             #     connected=cause
#             #     break
#         elif cause.m_buildMode==True and order<1:
#             # +cause(,self)->self(,)
#             if cause.m_symbol.m_db[0]==self.m_symbol or cause.m_symbol.m_db[1]==self.m_symbol:
#                 connected=cause
#                 order=1
#             # +cause(,)->self(,+cause)
#             elif self.m_symbol.m_db[0]==cause.m_symbol or self.m_symbol.m_db[1]==cause.m_symbol:
#                 connecting=cause
#         # cause->self
#         elif order<2:
#             # cause(,self)
#             if cause.m_symbol.m_db[0]==self.m_symbol or cause.m_symbol.m_db[1]==self.m_symbol:
#                 connected=cause
#                 order=2
#             # self(,cause)
#             elif self.m_symbol.m_db[0]==cause.m_symbol or self.m_symbol.m_db[1]==cause.m_symbol:
#                 connecting=cause
# word(,)
"(,)[-1,-1]
然后#1588""(块#1581,块#1587)[-1,-1]
eof#1589""(,)[-1,-1]
然后#1590""(块#1587,eof#1589)[-1,-1]
块#1591"    elif self.isType('非新建普通链节'):
        for cause in causes:
            # cause(,self)
            if cause.m_symbol.m_db[0]==self.m_symbol or cause.m_symbol.m_db[1]==self.m_symbol:
                if cause.isType('特殊范围'):
                    connected=cause
                    break
                elif cause.isType('普通非新建') and caseNo>3:
                    connected=cause
                    caseNo=3
                elif cause.isType('新建') and caseNo>5:
                    connected=cause
                    caseNo=5
            # self(cause,)
            elif self.m_symbol.m_db[0]==cause.m_symbol or self.m_symbol.m_db[1]==cause.m_symbol:
                if cause.isType('引用') and caseNo>2:
                    connecting=cause
                    caseNo=2
                elif cause.isType('普通非新建') and caseNo>4:
                    connecting=cause
                    caseNo=4
                elif cause.isType('新建') and caseNo>6:
                    connecting=cause
                    caseNo=6
        if connected!=None:
            self.m_ranger=connected
        elif connecting!=None:
            self.m_ranger=connecting
            self.m_rangType=True
    # set next one except for [eq], and buildMode==True
    # if self.m_buildMode!=True and self.m_symbol.m_name!='' and self.m_symbol.m_name!='[eq]' and self.m_symbol.m_name!='[同名]':
    # if self.isFunctionPoint()==0 and self.m_buildMode!=True:
    # if self.isFunctionPoint()==0:                                       # a building point can be a ranger of an another point(Why?)(May because of new point can be a answer point)
    causes=causes[:]+[self]
    for con in self.m_clause:
        # for cause in causes:
        #     cause.m_symbol.print()
        con.setRangers(causes)
    for end in self.m_yese:
        end.setRangers(causes)
    for end in self.m_noe:
        end.setRangers(causes)
"(,)[-1,-1]
然后#1592""(块#1577,块#1591)[-1,-1]
块#1593""(,)[-1,-1]
然后#1594""(块#1591,块#1593)[-1,-1]
块#1595"cause=self
"(,)[-1,-1]
func#1596"causeEnd(self)"(块#1593,块#1595)[-1,-1]
块#1597""(,)[-1,-1]
然后#1598""(块#1595,块#1597)[-1,-1]
块#1599"cause=cause.m_cause
"(,)[-1,-1]
while#1600"cause.m_cause!=None"(块#1597,块#1599)[-1,-1]
eof#1601""(,)[-1,-1]
然后#1602""(块#1599,eof#1601)[-1,-1]
块#1603"return cause
"(,)[-1,-1]
然后#1604""(块#1597,块#1603)[-1,-1]
eof#1605""(,)[-1,-1]
然后#1606""(块#1603,eof#1605)[-1,-1]
块#1607""(,)[-1,-1]
然后#1608""(块#1593,块#1607)[-1,-1]
块#1609"cause=self
list_km=[]
"(,)[-1,-1]
func#1610"allCauses(self)"(块#1607,块#1609)[-1,-1]
块#1611""(,)[-1,-1]
然后#1612""(块#1609,块#1611)[-1,-1]
块#1613"cause=cause.m_cause
list_km.append(cause)
"(,)[-1,-1]
while#1614"cause.m_cause!=None"(块#1611,块#1613)[-1,-1]
eof#1615""(,)[-1,-1]
然后#1616""(块#1613,eof#1615)[-1,-1]
块#1617"return list_km
"(,)[-1,-1]
然后#1618""(块#1611,块#1617)[-1,-1]
eof#1619""(,)[-1,-1]
然后#1620""(块#1617,eof#1619)[-1,-1]
块#1621""(,)[-1,-1]
然后#1622""(块#1607,块#1621)[-1,-1]
块#1623""(,)[-1,-1]
func#1624"addKarma(self,karma,con_type='肯定')"(块#1621,块#1623)[-1,-1]
块#1625"karma=karma.m_cause
"(,)[-1,-1]
while#1626"karma.m_cause!=None"(块#1623,块#1625)[-1,-1]
eof#1627""(,)[-1,-1]
然后#1628""(块#1625,eof#1627)[-1,-1]
块#1629""(,)[-1,-1]
然后#1630""(块#1623,块#1629)[-1,-1]
块#1631"self.m_clause.append(karma)
"(,)[-1,-1]
if#1632"con_type==\"clause\" or con_type==\"从句\""(块#1629,块#1631)[-1,-1]
eof#1633""(,)[-1,-1]
然后#1634""(块#1631,eof#1633)[-1,-1]
eof#1635""(,)[-1,-1]
然后#1636""(块#1637,eof#1635)[-1,-1]
块#1637"self.m_noe.append(karma)
"(,)[-1,-1]
elif#1638"con_type==\"no\" or con_type==\"否定\""(if#1632,块#1637)[-1,-1]
块#1639"self.m_yese.append(karma)
"(,)[-1,-1]
else#1640""(if#1632,块#1639)[-1,-1]
eof#1641""(,)[-1,-1]
然后#1642""(块#1639,eof#1641)[-1,-1]
块#1643"karma.m_cause=self
"(,)[-1,-1]
然后#1644""(块#1629,块#1643)[-1,-1]
eof#1645""(,)[-1,-1]
然后#1646""(块#1643,eof#1645)[-1,-1]
块#1647""(,)[-1,-1]
然后#1648""(块#1621,块#1647)[-1,-1]
块#1649"return self.info_karma()
"(,)[-1,-1]
func#1650"__str__(self) -> str"(块#1647,块#1649)[-1,-1]
eof#1651""(,)[-1,-1]
然后#1652""(块#1649,eof#1651)[-1,-1]
块#1653""(,)[-1,-1]
然后#1654""(块#1647,块#1653)[-1,-1]
块#1655""(,)[-1,-1]
func#1656"info_karma(self,info='',head=0,type_info=0)"(块#1653,块#1655)[-1,-1]
块#1657"info='[]=>'
"(,)[-1,-1]
if#1658"info=='' and self.m_no==True"(块#1655,块#1657)[-1,-1]
eof#1659""(,)[-1,-1]
然后#1660""(块#1657,eof#1659)[-1,-1]
块#1661""(,)[-1,-1]
然后#1662""(块#1655,块#1661)[-1,-1]
块#1663"ranger=self.m_ranger.m_symbol.info(\"不显示位置不显示内容\")
info+='['+ranger+']'
head+=len(ranger)+2
"(,)[-1,-1]
if#1664"self.m_ranger!=None and type_info==0"(块#1661,块#1663)[-1,-1]
eof#1665""(,)[-1,-1]
然后#1666""(块#1663,eof#1665)[-1,-1]
块#1667"# if self.m_buildMode==True:
#     info+='+'
#     head+=1
info+=self.m_symbol.info(\"不显示位置不显示内容\")
head+=len(self.m_symbol.info(\"不显示位置不显示内容\"))
"(,)[-1,-1]
然后#1668""(块#1661,块#1667)[-1,-1]
块#1669""(,)[-1,-1]
然后#1670""(块#1667,块#1669)[-1,-1]
块#1671"info+='{'
head+=1
"(,)[-1,-1]
if#1672"self.m_clause!=[]"(块#1669,块#1671)[-1,-1]
块#1673""(,)[-1,-1]
然后#1674""(块#1671,块#1673)[-1,-1]
块#1675"info+='\n'+''.rjust(head)
info=clause.info_karma(info,head,type_info)
"(,)[-1,-1]
for#1676"self.m_clause"(块#1673,块#1675)[-1,-1]
变量#1677"clause"(for#1676,)[-1,-1]
块#1678""(,)[-1,-1]
然后#1679""(块#1675,块#1678)[-1,-1]
块#1680"info+=','
"(,)[-1,-1]
if#1681"clause!=self.m_clause[-1]"(块#1678,块#1680)[-1,-1]
eof#1682""(,)[-1,-1]
然后#1683""(块#1680,eof#1682)[-1,-1]
eof#1684""(,)[-1,-1]
然后#1685""(块#1678,eof#1684)[-1,-1]
块#1686"info+='\n'+'}'.rjust(head-1)
"(,)[-1,-1]
然后#1687""(块#1673,块#1686)[-1,-1]
eof#1688""(,)[-1,-1]
然后#1689""(块#1686,eof#1688)[-1,-1]
块#1690"n=0
"(,)[-1,-1]
然后#1691""(块#1669,块#1690)[-1,-1]
块#1692""(,)[-1,-1]
然后#1693""(块#1690,块#1692)[-1,-1]
块#1694"info+=':'
"(,)[-1,-1]
if#1695"len(self.m_noe)+len(self.m_yese)>1"(块#1692,块#1694)[-1,-1]
eof#1696""(,)[-1,-1]
然后#1697""(块#1694,eof#1696)[-1,-1]
块#1698""(,)[-1,-1]
然后#1699""(块#1692,块#1698)[-1,-1]
块#1700""(,)[-1,-1]
for#1701"self.m_yese"(块#1698,块#1700)[-1,-1]
变量#1702"end"(for#1701,)[-1,-1]
块#1703""(,)[-1,-1]
if#1704"n==0"(块#1700,块#1703)[-1,-1]
块#1705"info+='->'
"(,)[-1,-1]
if#1706"end.m_no==False"(块#1703,块#1705)[-1,-1]
eof#1707""(,)[-1,-1]
然后#1708""(块#1705,eof#1707)[-1,-1]
块#1709"info+='=>'
"(,)[-1,-1]
else#1710""(if#1706,块#1709)[-1,-1]
eof#1711""(,)[-1,-1]
然后#1712""(块#1709,eof#1711)[-1,-1]
块#1713"info=end.info_karma(info,head+2,type_info)
n+=1
"(,)[-1,-1]
然后#1714""(块#1703,块#1713)[-1,-1]
eof#1715""(,)[-1,-1]
然后#1716""(块#1713,eof#1715)[-1,-1]
块#1717""(,)[-1,-1]
else#1718""(if#1704,块#1717)[-1,-1]
块#1719"info+='\n'+'->'.rjust(head+2)
"(,)[-1,-1]
if#1720"end.m_no==False"(块#1717,块#1719)[-1,-1]
eof#1721""(,)[-1,-1]
然后#1722""(块#1719,eof#1721)[-1,-1]
块#1723"info+='\n'+'=>'.rjust(head+2)
"(,)[-1,-1]
else#1724""(if#1720,块#1723)[-1,-1]
eof#1725""(,)[-1,-1]
然后#1726""(块#1723,eof#1725)[-1,-1]
块#1727"info=end.info_karma(info,head,type_info)
"(,)[-1,-1]
然后#1728""(块#1717,块#1727)[-1,-1]
eof#1729""(,)[-1,-1]
然后#1730""(块#1727,eof#1729)[-1,-1]
块#1731""(,)[-1,-1]
然后#1732""(块#1700,块#1731)[-1,-1]
块#1733"info+=','
"(,)[-1,-1]
if#1734"end!=self.m_yese[-1] or self.m_noe!=[]"(块#1731,块#1733)[-1,-1]
eof#1735""(,)[-1,-1]
然后#1736""(块#1733,eof#1735)[-1,-1]
eof#1737""(,)[-1,-1]
然后#1738""(块#1731,eof#1737)[-1,-1]
块#1739""(,)[-1,-1]
然后#1740""(块#1698,块#1739)[-1,-1]
块#1741""(,)[-1,-1]
for#1742"self.m_noe"(块#1739,块#1741)[-1,-1]
变量#1743"end"(for#1742,)[-1,-1]
块#1744""(,)[-1,-1]
if#1745"n==0"(块#1741,块#1744)[-1,-1]
块#1746"info+='->>'
"(,)[-1,-1]
if#1747"end.m_no==False"(块#1744,块#1746)[-1,-1]
eof#1748""(,)[-1,-1]
然后#1749""(块#1746,eof#1748)[-1,-1]
块#1750"info+='=>>'
"(,)[-1,-1]
else#1751""(if#1747,块#1750)[-1,-1]
eof#1752""(,)[-1,-1]
然后#1753""(块#1750,eof#1752)[-1,-1]
块#1754"info=end.info_karma(info,head+3,type_info)
n+=1
"(,)[-1,-1]
然后#1755""(块#1744,块#1754)[-1,-1]
eof#1756""(,)[-1,-1]
然后#1757""(块#1754,eof#1756)[-1,-1]
块#1758""(,)[-1,-1]
else#1759""(if#1745,块#1758)[-1,-1]
块#1760"info+='\n'+'->>'.rjust(head+3)
"(,)[-1,-1]
if#1761"end.m_no==False"(块#1758,块#1760)[-1,-1]
eof#1762""(,)[-1,-1]
然后#1763""(块#1760,eof#1762)[-1,-1]
块#1764"info+='\n'+'=>>'.rjust(head+3)
"(,)[-1,-1]
else#1765""(if#1761,块#1764)[-1,-1]
eof#1766""(,)[-1,-1]
然后#1767""(块#1764,eof#1766)[-1,-1]
块#1768"info=end.info_karma(info,head,type_info)
"(,)[-1,-1]
然后#1769""(块#1758,块#1768)[-1,-1]
eof#1770""(,)[-1,-1]
然后#1771""(块#1768,eof#1770)[-1,-1]
块#1772""(,)[-1,-1]
然后#1773""(块#1741,块#1772)[-1,-1]
块#1774"info+=','
"(,)[-1,-1]
if#1775"end!=self.m_noe[-1]"(块#1772,块#1774)[-1,-1]
eof#1776""(,)[-1,-1]
然后#1777""(块#1774,eof#1776)[-1,-1]
eof#1778""(,)[-1,-1]
然后#1779""(块#1772,eof#1778)[-1,-1]
块#1780"return info
"(,)[-1,-1]
然后#1781""(块#1739,块#1780)[-1,-1]
eof#1782""(,)[-1,-1]
然后#1783""(块#1780,eof#1782)[-1,-1]
eof#1784""(,)[-1,-1]
然后#1785""(块#1653,eof#1784)[-1,-1]
块#1786""(,)[-1,-1]
然后#1787""(块#25,块#1786)[-1,-1]
块#1788"info_pt='['
"(,)[-1,-1]
func#1789"printPtList(list_pt)"(块#1786,块#1788)[-1,-1]
块#1790""(,)[-1,-1]
然后#1791""(块#1788,块#1790)[-1,-1]
块#1792"info_pt+=pt.info(show_info='不显示文本')
"(,)[-1,-1]
for#1793"list_pt"(块#1790,块#1792)[-1,-1]
变量#1794"pt"(for#1793,)[-1,-1]
块#1795""(,)[-1,-1]
然后#1796""(块#1792,块#1795)[-1,-1]
块#1797"info_pt+=', '
"(,)[-1,-1]
if#1798"pt!=list_pt[-1]"(块#1795,块#1797)[-1,-1]
eof#1799""(,)[-1,-1]
然后#1800""(块#1797,eof#1799)[-1,-1]
块#1801"info_pt+=';'
"(,)[-1,-1]
else#1802""(if#1798,块#1801)[-1,-1]
eof#1803""(,)[-1,-1]
然后#1804""(块#1801,eof#1803)[-1,-1]
eof#1805""(,)[-1,-1]
然后#1806""(块#1795,eof#1805)[-1,-1]
块#1807"info_pt+=']'
print(info_pt)
"(,)[-1,-1]
然后#1808""(块#1790,块#1807)[-1,-1]
eof#1809""(,)[-1,-1]
然后#1810""(块#1807,eof#1809)[-1,-1]
块#1811""(,)[-1,-1]
然后#1812""(块#1786,块#1811)[-1,-1]
块#1813"a=str_info.find(string)
return a!=-1
"(,)[-1,-1]
func#1814"infoInStr(string,str_info)"(块#1811,块#1813)[-1,-1]
eof#1815""(,)[-1,-1]
然后#1816""(块#1813,eof#1815)[-1,-1]
块#1817""(,)[-1,-1]
然后#1818""(块#1811,块#1817)[-1,-1]
块#1819"result=infoInStr('新建','新建')
print(result)
"(,)[-1,-1]
if#1820"__name__=='__main__'"(块#1817,块#1819)[-1,-1]
eof#1821""(,)[-1,-1]
然后#1822""(块#1819,eof#1821)[-1,-1]
eof#1823""(,)[-1,-1]
然后#1824""(块#1817,eof#1823)[-1,-1]

## end
#12, 117:
+[显示星图](,结构场景)
+[显示PPT场景]"2"(,图形)

图形::
+[设置结构](,图形)
+[删除场景结构](,图形)

起点(,块)->+[生成程序结构](块,图形)->+[显示PPT场景]"1"(,图形)





## end
#13, 24:
2.3000000000000003, 7.15
## end
#14, 24:
2.3000000000000003, 7.15
## end
#15, 24:
2.3000000000000003, 7.15
## end
#16, 24:
2.3000000000000003, 7.15
## end
#17, 24:
2.3000000000000003, 7.15
## end
#18, 24:
2.3000000000000003, 7.15
## end
#19, 24:
2.3000000000000003, 7.15
## end
#20, 24:
2.3000000000000003, 7.15
## end
#21, 24:
2.3000000000000003, 7.15
## end
#22, 24:
2.3000000000000003, 7.15
## end
#23, 24:
2.3000000000000003, 7.15
## end
#24, 24:
2.3000000000000003, 7.15
## end
#25, 24:
2.3000000000000003, 7.15
## end
#26, 24:
2.3000000000000003, 7.15
## end
#27, 24:
2.3000000000000003, 7.15
## end
#28, 24:
2.3000000000000003, 7.15
## end
#29, 24:
2.3000000000000003, 7.15
## end
#30, 24:
2.3000000000000003, 7.15
## end
#31, 24:
2.3000000000000003, 7.15
## end
#32, 24:
2.3000000000000003, 7.15
## end
#33, 24:
2.3000000000000003, 7.15
## end
#34, 24:
2.3000000000000003, 7.15
## end
#35, 24:
2.3000000000000003, 7.15
## end
#36, 24:
2.3000000000000003, 7.15
## end
#37, 24:
2.3000000000000003, 7.15
## end
#38, 24:
2.3000000000000003, 7.15
## end
#39, 24:
2.3000000000000003, 7.15
## end
#40, 24:
2.3000000000000003, 7.15
## end
#41, 24:
2.3000000000000003, 7.15
## end
#42, 24:
2.3000000000000003, 7.15
## end
#43, 24:
2.3000000000000003, 7.15
## end
#44, 24:
2.3000000000000003, 7.15
## end
#45, 24:
2.3000000000000003, 7.15
## end
#46, 24:
2.3000000000000003, 7.15
## end
#47, 24:
2.3000000000000003, 7.15
## end
#48, 24:
2.3000000000000003, 7.15
## end
#49, 23:
2.2, 1.1500000000000001
## end
#50, 23:
4.4, 1.1500000000000001
## end
#51, 23:
2.2, 1.1500000000000001
## end
#52, 23:
4.5, 1.3000000000000003
## end
#53, 23:
9.0, 1.3000000000000003
## end
#54, 24:
13.5, 1.3000000000000003
## end
#55, 24:
18.0, 1.3000000000000003
## end
#56, 24:
22.5, 1.3000000000000003
## end
#57, 24:
27.0, 1.3000000000000003
## end
#58, 24:
31.5, 1.3000000000000003
## end
#59, 24:
36.0, 1.3000000000000003
## end
#60, 23:
4.5, 3.5000000000000004
## end
#61, 23:
2.2, 1.1500000000000001
## end
#62, 23:
2.2, 1.1500000000000001
## end
#63, 23:
2.2, 1.1500000000000001
## end
#64, 23:
4.4, 1.1500000000000001
## end
#65, 23:
6.6, 1.1500000000000001
## end
#66, 23:
2.2, 1.1500000000000001
## end
#67, 23:
2.2, 1.1500000000000001
## end
#68, 23:
2.2, 1.1500000000000001
## end
#69, 23:
2.2, 1.1500000000000001
## end
#70, 23:
2.2, 1.1500000000000001
## end
#71, 23:
2.2, 1.1500000000000001
## end
#72, 23:
4.4, 1.1500000000000001
## end
#73, 23:
6.6, 1.1500000000000001
## end
#74, 37:
8.799999999999999, 1.1500000000000001
## end
#75, 38:
10.999999999999998, 1.1500000000000001
## end
#76, 38:
13.199999999999998, 1.1500000000000001
## end
#77, 23:
2.2, 1.1500000000000001
## end
#78, 23:
4.4, 1.1500000000000001
## end
#79, 23:
6.6, 1.1500000000000001
## end
#80, 37:
8.799999999999999, 1.1500000000000001
## end
#81, 38:
10.999999999999998, 1.1500000000000001
## end
#82, 23:
2.2, 1.1500000000000001
## end
#83, 23:
4.5, 2.7500000000000004
## end
#84, 23:
2.2, 1.1500000000000001
## end
#85, 23:
6.7, 2.4000000000000004
## end
#86, 23:
8.9, 2.4000000000000004
## end
#87, 23:
2.2, 1.1500000000000001
## end
#88, 23:
2.2, 1.1500000000000001
## end
#89, 23:
6.8, 2.5500000000000003
## end
#90, 24:
13.6, 2.5500000000000003
## end
#91, 23:
2.2, 1.1500000000000001
## end
#92, 23:
6.8, 2.5500000000000003
## end
#93, 24:
13.6, 2.5500000000000003
## end
#94, 23:
2.2, 1.1500000000000001
## end
#95, 23:
6.7, 1.3000000000000003
## end
#96, 23:
2.2, 1.1500000000000001
## end
#97, 37:
40.900000000000006, 271.1499999999999
## end
#98, 37:
40.900000000000006, 271.1499999999999
## end
#99, 37:
40.900000000000006, 271.1499999999999
## end
#100, 37:
40.900000000000006, 271.1499999999999
## end
#101, 37:
40.900000000000006, 271.1499999999999
## end
#102, 37:
40.900000000000006, 271.1499999999999
## end
#103, 37:
40.900000000000006, 271.1499999999999
## end
#104, 37:
40.900000000000006, 271.1499999999999
## end
#105, 37:
40.900000000000006, 271.1499999999999
## end
#106, 37:
40.900000000000006, 271.1499999999999
## end
#107, 37:
40.900000000000006, 271.1499999999999
## end
#108, 37:
40.900000000000006, 271.1499999999999
## end
#109, 37:
40.900000000000006, 271.1499999999999
## end
#110, 37:
40.900000000000006, 271.1499999999999
## end
#111, 37:
40.900000000000006, 271.1499999999999
## end
#112, 37:
40.900000000000006, 271.1499999999999
## end
#113, 37:
40.900000000000006, 271.1499999999999
## end
#114, 37:
40.900000000000006, 271.1499999999999
## end
#115, 37:
40.900000000000006, 271.1499999999999
## end
#116, 37:
40.900000000000006, 271.1499999999999
## end
#117, 37:
40.900000000000006, 271.1499999999999
## end
#118, 37:
40.900000000000006, 271.1499999999999
## end
#119, 37:
40.900000000000006, 271.1499999999999
## end
#120, 37:
40.900000000000006, 271.1499999999999
## end
#121, 37:
40.900000000000006, 271.1499999999999
## end
#122, 37:
40.900000000000006, 271.1499999999999
## end
#123, 37:
40.900000000000006, 271.1499999999999
## end
#124, 37:
40.900000000000006, 271.1499999999999
## end
#125, 37:
40.900000000000006, 271.1499999999999
## end
#126, 37:
40.900000000000006, 271.1499999999999
## end
#127, 37:
40.900000000000006, 271.1499999999999
## end
#128, 37:
40.900000000000006, 271.1499999999999
## end
#129, 37:
40.900000000000006, 271.1499999999999
## end
#130, 37:
40.900000000000006, 271.1499999999999
## end
#131, 37:
40.900000000000006, 271.1499999999999
## end
#132, 37:
40.900000000000006, 271.1499999999999
## end
#133, 37:
40.900000000000006, 271.1499999999999
## end
#134, 37:
40.900000000000006, 271.1499999999999
## end
#135, 37:
40.900000000000006, 271.1499999999999
## end
#136, 37:
40.900000000000006, 271.1499999999999
## end
#137, 37:
40.900000000000006, 271.1499999999999
## end
#138, 37:
40.900000000000006, 271.1499999999999
## end
#139, 37:
40.900000000000006, 271.1499999999999
## end
#140, 37:
40.900000000000006, 271.1499999999999
## end
#141, 37:
40.900000000000006, 271.1499999999999
## end
#142, 37:
40.900000000000006, 271.1499999999999
## end
#143, 37:
40.900000000000006, 271.1499999999999
## end
#144, 37:
40.900000000000006, 271.1499999999999
## end
#145, 37:
40.900000000000006, 271.1499999999999
## end
#146, 37:
40.900000000000006, 271.1499999999999
## end
#147, 37:
40.900000000000006, 271.1499999999999
## end
#148, 37:
40.900000000000006, 271.1499999999999
## end
#149, 37:
40.900000000000006, 271.1499999999999
## end
#150, 37:
40.900000000000006, 271.1499999999999
## end
#151, 37:
40.900000000000006, 271.1499999999999
## end
#152, 37:
40.900000000000006, 271.1499999999999
## end
#153, 37:
40.900000000000006, 271.1499999999999
## end
#154, 37:
40.900000000000006, 271.1499999999999
## end
#155, 37:
40.900000000000006, 271.1499999999999
## end
#156, 37:
40.900000000000006, 271.1499999999999
## end
#157, 37:
40.900000000000006, 271.1499999999999
## end
#158, 37:
40.900000000000006, 271.1499999999999
## end
#159, 37:
40.900000000000006, 271.1499999999999
## end
#160, 37:
40.900000000000006, 271.1499999999999
## end
#161, 37:
40.900000000000006, 271.1499999999999
## end
#162, 37:
40.900000000000006, 271.1499999999999
## end
#163, 37:
40.900000000000006, 271.1499999999999
## end
#164, 37:
40.900000000000006, 271.1499999999999
## end
#165, 37:
40.900000000000006, 271.1499999999999
## end
#166, 37:
40.900000000000006, 271.1499999999999
## end
#167, 37:
40.900000000000006, 271.1499999999999
## end
#168, 37:
40.900000000000006, 271.1499999999999
## end
#169, 37:
40.900000000000006, 271.1499999999999
## end
#170, 37:
40.900000000000006, 271.1499999999999
## end
#171, 37:
40.900000000000006, 271.1499999999999
## end
#172, 37:
40.900000000000006, 271.1499999999999
## end
#173, 37:
40.900000000000006, 271.1499999999999
## end
#174, 37:
40.900000000000006, 271.1499999999999
## end
#175, 37:
40.900000000000006, 271.1499999999999
## end
#176, 37:
40.900000000000006, 271.1499999999999
## end
#177, 37:
40.900000000000006, 271.1499999999999
## end
#178, 37:
40.900000000000006, 271.1499999999999
## end
#179, 37:
40.900000000000006, 271.1499999999999
## end
#180, 37:
40.900000000000006, 271.1499999999999
## end
#181, 37:
40.900000000000006, 271.1499999999999
## end
#182, 37:
40.900000000000006, 271.1499999999999
## end
#183, 37:
40.900000000000006, 271.1499999999999
## end
#184, 37:
40.900000000000006, 271.1499999999999
## end
#185, 37:
40.900000000000006, 271.1499999999999
## end
#186, 37:
40.900000000000006, 271.1499999999999
## end
#187, 37:
40.900000000000006, 271.1499999999999
## end
#188, 37:
40.900000000000006, 271.1499999999999
## end
#189, 37:
40.900000000000006, 271.1499999999999
## end
#190, 37:
40.900000000000006, 271.1499999999999
## end
#191, 37:
40.900000000000006, 271.1499999999999
## end
#192, 37:
40.900000000000006, 271.1499999999999
## end
#193, 37:
40.900000000000006, 271.1499999999999
## end
#194, 37:
40.900000000000006, 271.1499999999999
## end
#195, 37:
40.900000000000006, 271.1499999999999
## end
#196, 37:
40.900000000000006, 271.1499999999999
## end
#197, 37:
40.900000000000006, 271.1499999999999
## end
#198, 37:
40.900000000000006, 271.1499999999999
## end
#199, 37:
40.900000000000006, 271.1499999999999
## end
#200, 37:
40.900000000000006, 271.1499999999999
## end
#201, 37:
40.900000000000006, 271.1499999999999
## end
#202, 37:
40.900000000000006, 271.1499999999999
## end
#203, 37:
40.900000000000006, 271.1499999999999
## end
#204, 37:
40.900000000000006, 271.1499999999999
## end
#205, 37:
40.900000000000006, 271.1499999999999
## end
#206, 37:
40.900000000000006, 271.1499999999999
## end
#207, 37:
40.900000000000006, 271.1499999999999
## end
#208, 37:
40.900000000000006, 271.1499999999999
## end
#209, 37:
40.900000000000006, 271.1499999999999
## end
#210, 37:
40.900000000000006, 271.1499999999999
## end
#211, 37:
40.900000000000006, 271.1499999999999
## end
#212, 37:
40.900000000000006, 271.1499999999999
## end
#213, 37:
40.900000000000006, 271.1499999999999
## end
#214, 37:
40.900000000000006, 271.1499999999999
## end
#215, 37:
40.900000000000006, 271.1499999999999
## end
#216, 37:
40.900000000000006, 271.1499999999999
## end
#217, 37:
40.900000000000006, 271.1499999999999
## end
#218, 37:
40.900000000000006, 271.1499999999999
## end
#219, 37:
40.900000000000006, 271.1499999999999
## end
#220, 37:
40.900000000000006, 271.1499999999999
## end
#221, 37:
40.900000000000006, 271.1499999999999
## end
#222, 37:
40.900000000000006, 271.1499999999999
## end
#223, 37:
40.900000000000006, 271.1499999999999
## end
#224, 37:
40.900000000000006, 271.1499999999999
## end
#225, 37:
40.900000000000006, 271.1499999999999
## end
#226, 37:
40.900000000000006, 271.1499999999999
## end
#227, 37:
40.900000000000006, 271.1499999999999
## end
#228, 37:
40.900000000000006, 271.1499999999999
## end
#229, 37:
40.900000000000006, 271.1499999999999
## end
#230, 37:
40.900000000000006, 271.1499999999999
## end
#231, 37:
40.900000000000006, 271.1499999999999
## end
#232, 37:
40.900000000000006, 271.1499999999999
## end
#233, 37:
40.900000000000006, 271.1499999999999
## end
#234, 37:
40.900000000000006, 271.1499999999999
## end
#235, 37:
40.900000000000006, 271.1499999999999
## end
#236, 37:
40.900000000000006, 271.1499999999999
## end
#237, 37:
40.900000000000006, 271.1499999999999
## end
#238, 37:
40.900000000000006, 271.1499999999999
## end
#239, 37:
40.900000000000006, 271.1499999999999
## end
#240, 37:
40.900000000000006, 271.1499999999999
## end
#241, 37:
40.900000000000006, 271.1499999999999
## end
#242, 37:
40.900000000000006, 271.1499999999999
## end
#243, 37:
40.900000000000006, 271.1499999999999
## end
#244, 37:
40.900000000000006, 271.1499999999999
## end
#245, 37:
40.900000000000006, 271.1499999999999
## end
#246, 37:
40.900000000000006, 271.1499999999999
## end
#247, 37:
40.900000000000006, 271.1499999999999
## end
#248, 37:
40.900000000000006, 271.1499999999999
## end
#249, 37:
40.900000000000006, 271.1499999999999
## end
#250, 37:
40.900000000000006, 271.1499999999999
## end
#251, 37:
40.900000000000006, 271.1499999999999
## end
#252, 37:
40.900000000000006, 271.1499999999999
## end
#253, 37:
40.900000000000006, 271.1499999999999
## end
#254, 37:
40.900000000000006, 271.1499999999999
## end
#255, 37:
40.900000000000006, 271.1499999999999
## end
#256, 37:
40.900000000000006, 271.1499999999999
## end
#257, 37:
40.900000000000006, 271.1499999999999
## end
#258, 37:
40.900000000000006, 271.1499999999999
## end
#259, 37:
40.900000000000006, 271.1499999999999
## end
#260, 37:
40.900000000000006, 271.1499999999999
## end
#261, 37:
40.900000000000006, 271.1499999999999
## end
#262, 37:
40.900000000000006, 271.1499999999999
## end
#263, 37:
40.900000000000006, 271.1499999999999
## end
#264, 37:
40.900000000000006, 271.1499999999999
## end
#265, 37:
40.900000000000006, 271.1499999999999
## end
#266, 37:
40.900000000000006, 271.1499999999999
## end
#267, 37:
40.900000000000006, 271.1499999999999
## end
#268, 37:
40.900000000000006, 271.1499999999999
## end
#269, 37:
40.900000000000006, 271.1499999999999
## end
#270, 37:
40.900000000000006, 271.1499999999999
## end
#271, 37:
40.900000000000006, 271.1499999999999
## end
#272, 37:
40.900000000000006, 271.1499999999999
## end
#273, 37:
40.900000000000006, 271.1499999999999
## end
#274, 37:
40.900000000000006, 271.1499999999999
## end
#275, 37:
40.900000000000006, 271.1499999999999
## end
#276, 37:
40.900000000000006, 271.1499999999999
## end
#277, 37:
40.900000000000006, 271.1499999999999
## end
#278, 37:
40.900000000000006, 271.1499999999999
## end
#279, 37:
40.900000000000006, 271.1499999999999
## end
#280, 37:
40.900000000000006, 271.1499999999999
## end
#281, 37:
40.900000000000006, 271.1499999999999
## end
#282, 37:
40.900000000000006, 271.1499999999999
## end
#283, 37:
40.900000000000006, 271.1499999999999
## end
#284, 37:
40.900000000000006, 271.1499999999999
## end
#285, 37:
40.900000000000006, 271.1499999999999
## end
#286, 37:
40.900000000000006, 271.1499999999999
## end
#287, 37:
40.900000000000006, 271.1499999999999
## end
#288, 37:
40.900000000000006, 271.1499999999999
## end
#289, 37:
40.900000000000006, 271.1499999999999
## end
#290, 37:
40.900000000000006, 271.1499999999999
## end
#291, 37:
40.900000000000006, 271.1499999999999
## end
#292, 37:
40.900000000000006, 271.1499999999999
## end
#293, 37:
40.900000000000006, 271.1499999999999
## end
#294, 37:
40.900000000000006, 271.1499999999999
## end
#295, 37:
40.900000000000006, 271.1499999999999
## end
#296, 37:
40.900000000000006, 271.1499999999999
## end
#297, 37:
40.900000000000006, 271.1499999999999
## end
#298, 37:
40.900000000000006, 271.1499999999999
## end
#299, 37:
40.900000000000006, 271.1499999999999
## end
#300, 37:
40.900000000000006, 271.1499999999999
## end
#301, 37:
40.900000000000006, 271.1499999999999
## end
#302, 37:
40.900000000000006, 271.1499999999999
## end
#303, 37:
40.900000000000006, 271.1499999999999
## end
#304, 37:
40.900000000000006, 271.1499999999999
## end
#305, 37:
40.900000000000006, 271.1499999999999
## end
#306, 37:
40.900000000000006, 271.1499999999999
## end
#307, 37:
40.900000000000006, 271.1499999999999
## end
#308, 37:
40.900000000000006, 271.1499999999999
## end
#309, 37:
40.900000000000006, 271.1499999999999
## end
#310, 37:
40.900000000000006, 271.1499999999999
## end
#311, 37:
40.900000000000006, 271.1499999999999
## end
#312, 37:
40.900000000000006, 271.1499999999999
## end
#313, 37:
40.900000000000006, 271.1499999999999
## end
#314, 37:
40.900000000000006, 271.1499999999999
## end
#315, 37:
40.900000000000006, 271.1499999999999
## end
#316, 37:
40.900000000000006, 271.1499999999999
## end
#317, 37:
40.900000000000006, 271.1499999999999
## end
#318, 37:
40.900000000000006, 271.1499999999999
## end
#319, 37:
40.900000000000006, 271.1499999999999
## end
#320, 37:
40.900000000000006, 271.1499999999999
## end
#321, 37:
40.900000000000006, 271.1499999999999
## end
#322, 37:
40.900000000000006, 271.1499999999999
## end
#323, 37:
40.900000000000006, 271.1499999999999
## end
#324, 37:
40.900000000000006, 271.1499999999999
## end
#325, 37:
40.900000000000006, 271.1499999999999
## end
#326, 37:
40.900000000000006, 271.1499999999999
## end
#327, 37:
40.900000000000006, 271.1499999999999
## end
#328, 37:
40.900000000000006, 271.1499999999999
## end
#329, 37:
40.900000000000006, 271.1499999999999
## end
#330, 37:
40.900000000000006, 271.1499999999999
## end
#331, 37:
40.900000000000006, 271.1499999999999
## end
#332, 37:
40.900000000000006, 271.1499999999999
## end
#333, 37:
40.900000000000006, 271.1499999999999
## end
#334, 37:
40.900000000000006, 271.1499999999999
## end
#335, 37:
40.900000000000006, 271.1499999999999
## end
#336, 37:
40.900000000000006, 271.1499999999999
## end
#337, 37:
40.900000000000006, 271.1499999999999
## end
#338, 37:
40.900000000000006, 271.1499999999999
## end
#339, 37:
40.900000000000006, 271.1499999999999
## end
#340, 37:
40.900000000000006, 271.1499999999999
## end
#341, 37:
40.900000000000006, 271.1499999999999
## end
#342, 37:
40.900000000000006, 271.1499999999999
## end
#343, 37:
40.900000000000006, 271.1499999999999
## end
#344, 37:
40.900000000000006, 271.1499999999999
## end
#345, 37:
40.900000000000006, 271.1499999999999
## end
#346, 37:
40.900000000000006, 271.1499999999999
## end
#347, 37:
40.900000000000006, 271.1499999999999
## end
#348, 37:
40.900000000000006, 271.1499999999999
## end
#349, 37:
40.900000000000006, 271.1499999999999
## end
#350, 37:
40.900000000000006, 271.1499999999999
## end
#351, 37:
40.900000000000006, 271.1499999999999
## end
#352, 37:
40.900000000000006, 271.1499999999999
## end
#353, 37:
40.900000000000006, 271.1499999999999
## end
#354, 37:
40.900000000000006, 271.1499999999999
## end
#355, 37:
40.900000000000006, 271.1499999999999
## end
#356, 37:
40.900000000000006, 271.1499999999999
## end
#357, 37:
40.900000000000006, 271.1499999999999
## end
#358, 37:
40.900000000000006, 271.1499999999999
## end
#359, 37:
40.900000000000006, 271.1499999999999
## end
#360, 37:
40.900000000000006, 271.1499999999999
## end
#361, 37:
40.900000000000006, 271.1499999999999
## end
#362, 37:
40.900000000000006, 271.1499999999999
## end
#363, 37:
40.900000000000006, 271.1499999999999
## end
#364, 37:
40.900000000000006, 271.1499999999999
## end
#365, 37:
40.900000000000006, 271.1499999999999
## end
#366, 37:
40.900000000000006, 271.1499999999999
## end
#367, 37:
40.900000000000006, 271.1499999999999
## end
#368, 37:
40.900000000000006, 271.1499999999999
## end
#369, 37:
40.900000000000006, 271.1499999999999
## end
#370, 37:
40.900000000000006, 271.1499999999999
## end
#371, 37:
40.900000000000006, 271.1499999999999
## end
#372, 37:
40.900000000000006, 271.1499999999999
## end
#373, 37:
40.900000000000006, 271.1499999999999
## end
#374, 37:
40.900000000000006, 271.1499999999999
## end
#375, 37:
40.900000000000006, 271.1499999999999
## end
#376, 37:
40.900000000000006, 271.1499999999999
## end
#377, 37:
40.900000000000006, 271.1499999999999
## end
#378, 37:
40.900000000000006, 271.1499999999999
## end
#379, 37:
40.900000000000006, 271.1499999999999
## end
#380, 37:
40.900000000000006, 271.1499999999999
## end
#381, 37:
40.900000000000006, 271.1499999999999
## end
#382, 37:
40.900000000000006, 271.1499999999999
## end
#383, 37:
40.900000000000006, 271.1499999999999
## end
#384, 37:
40.900000000000006, 271.1499999999999
## end
#385, 37:
40.900000000000006, 271.1499999999999
## end
#386, 37:
40.900000000000006, 271.1499999999999
## end
#387, 37:
40.900000000000006, 271.1499999999999
## end
#388, 37:
40.900000000000006, 271.1499999999999
## end
#389, 37:
40.900000000000006, 271.1499999999999
## end
#390, 37:
40.900000000000006, 271.1499999999999
## end
#391, 37:
40.900000000000006, 271.1499999999999
## end
#392, 37:
40.900000000000006, 271.1499999999999
## end
#393, 37:
40.900000000000006, 271.1499999999999
## end
#394, 37:
40.900000000000006, 271.1499999999999
## end
#395, 37:
40.900000000000006, 271.1499999999999
## end
#396, 37:
40.900000000000006, 271.1499999999999
## end
#397, 37:
40.900000000000006, 271.1499999999999
## end
#398, 37:
40.900000000000006, 271.1499999999999
## end
#399, 37:
40.900000000000006, 271.1499999999999
## end
#400, 37:
40.900000000000006, 271.1499999999999
## end
#401, 37:
40.900000000000006, 271.1499999999999
## end
#402, 37:
40.900000000000006, 271.1499999999999
## end
#403, 37:
40.900000000000006, 271.1499999999999
## end
#404, 37:
40.900000000000006, 271.1499999999999
## end
#405, 37:
40.900000000000006, 271.1499999999999
## end
#406, 37:
40.900000000000006, 271.1499999999999
## end
#407, 37:
40.900000000000006, 271.1499999999999
## end
#408, 37:
40.900000000000006, 271.1499999999999
## end
#409, 37:
40.900000000000006, 271.1499999999999
## end
#410, 37:
40.900000000000006, 271.1499999999999
## end
#411, 37:
40.900000000000006, 271.1499999999999
## end
#412, 37:
40.900000000000006, 271.1499999999999
## end
#413, 37:
40.900000000000006, 271.1499999999999
## end
#414, 37:
40.900000000000006, 271.1499999999999
## end
#415, 37:
40.900000000000006, 271.1499999999999
## end
#416, 37:
40.900000000000006, 271.1499999999999
## end
#417, 37:
40.900000000000006, 271.1499999999999
## end
#418, 37:
40.900000000000006, 271.1499999999999
## end
#419, 37:
40.900000000000006, 271.1499999999999
## end
#420, 37:
40.900000000000006, 271.1499999999999
## end
#421, 37:
40.900000000000006, 271.1499999999999
## end
#422, 37:
40.900000000000006, 271.1499999999999
## end
#423, 37:
40.900000000000006, 271.1499999999999
## end
#424, 37:
40.900000000000006, 271.1499999999999
## end
#425, 37:
40.900000000000006, 271.1499999999999
## end
#426, 37:
40.900000000000006, 271.1499999999999
## end
#427, 37:
40.900000000000006, 271.1499999999999
## end
#428, 37:
40.900000000000006, 271.1499999999999
## end
#429, 37:
40.900000000000006, 271.1499999999999
## end
#430, 37:
40.900000000000006, 271.1499999999999
## end
#431, 37:
40.900000000000006, 271.1499999999999
## end
#432, 37:
40.900000000000006, 271.1499999999999
## end
#433, 37:
40.900000000000006, 271.1499999999999
## end
#434, 37:
40.900000000000006, 271.1499999999999
## end
#435, 37:
40.900000000000006, 271.1499999999999
## end
#436, 37:
40.900000000000006, 271.1499999999999
## end
#437, 37:
40.900000000000006, 271.1499999999999
## end
#438, 37:
40.900000000000006, 271.1499999999999
## end
#439, 37:
40.900000000000006, 271.1499999999999
## end
#440, 37:
40.900000000000006, 271.1499999999999
## end
#441, 37:
40.900000000000006, 271.1499999999999
## end
#442, 37:
40.900000000000006, 271.1499999999999
## end
#443, 37:
40.900000000000006, 271.1499999999999
## end
#444, 37:
40.900000000000006, 271.1499999999999
## end
#445, 37:
40.900000000000006, 271.1499999999999
## end
#446, 37:
40.900000000000006, 271.1499999999999
## end
#447, 37:
40.900000000000006, 271.1499999999999
## end
#448, 37:
40.900000000000006, 271.1499999999999
## end
#449, 37:
40.900000000000006, 271.1499999999999
## end
#450, 37:
40.900000000000006, 271.1499999999999
## end
#451, 37:
40.900000000000006, 271.1499999999999
## end
#452, 37:
40.900000000000006, 271.1499999999999
## end
#453, 37:
40.900000000000006, 271.1499999999999
## end
#454, 37:
40.900000000000006, 271.1499999999999
## end
#455, 37:
40.900000000000006, 271.1499999999999
## end
#456, 37:
40.900000000000006, 271.1499999999999
## end
#457, 37:
40.900000000000006, 271.1499999999999
## end
#458, 37:
40.900000000000006, 271.1499999999999
## end
#459, 37:
40.900000000000006, 271.1499999999999
## end
#460, 37:
40.900000000000006, 271.1499999999999
## end
#461, 37:
40.900000000000006, 271.1499999999999
## end
#462, 37:
40.900000000000006, 271.1499999999999
## end
#463, 37:
40.900000000000006, 271.1499999999999
## end
#464, 37:
40.900000000000006, 271.1499999999999
## end
#465, 37:
40.900000000000006, 271.1499999999999
## end
#466, 37:
40.900000000000006, 271.1499999999999
## end
#467, 37:
40.900000000000006, 271.1499999999999
## end
#468, 37:
40.900000000000006, 271.1499999999999
## end
#469, 37:
40.900000000000006, 271.1499999999999
## end
#470, 37:
40.900000000000006, 271.1499999999999
## end
#471, 37:
40.900000000000006, 271.1499999999999
## end
#472, 37:
40.900000000000006, 271.1499999999999
## end
#473, 37:
40.900000000000006, 271.1499999999999
## end
#474, 37:
40.900000000000006, 271.1499999999999
## end
#475, 37:
40.900000000000006, 271.1499999999999
## end
#476, 37:
40.900000000000006, 271.1499999999999
## end
#477, 37:
40.900000000000006, 271.1499999999999
## end
#478, 37:
40.900000000000006, 271.1499999999999
## end
#479, 37:
40.900000000000006, 271.1499999999999
## end
#480, 37:
40.900000000000006, 271.1499999999999
## end
#481, 37:
40.900000000000006, 271.1499999999999
## end
#482, 37:
40.900000000000006, 271.1499999999999
## end
#483, 37:
40.900000000000006, 271.1499999999999
## end
#484, 37:
40.900000000000006, 271.1499999999999
## end
#485, 37:
40.900000000000006, 271.1499999999999
## end
#486, 37:
40.900000000000006, 271.1499999999999
## end
#487, 37:
40.900000000000006, 271.1499999999999
## end
#488, 37:
40.900000000000006, 271.1499999999999
## end
#489, 37:
40.900000000000006, 271.1499999999999
## end
#490, 37:
40.900000000000006, 271.1499999999999
## end
#491, 37:
40.900000000000006, 271.1499999999999
## end
#492, 37:
40.900000000000006, 271.1499999999999
## end
#493, 37:
40.900000000000006, 271.1499999999999
## end
#494, 37:
40.900000000000006, 271.1499999999999
## end
#495, 37:
40.900000000000006, 271.1499999999999
## end
#496, 37:
40.900000000000006, 271.1499999999999
## end
#497, 37:
40.900000000000006, 271.1499999999999
## end
#498, 37:
40.900000000000006, 271.1499999999999
## end
#499, 37:
40.900000000000006, 271.1499999999999
## end
#500, 37:
40.900000000000006, 271.1499999999999
## end
#501, 37:
40.900000000000006, 271.1499999999999
## end
#502, 37:
40.900000000000006, 271.1499999999999
## end
#503, 37:
40.900000000000006, 271.1499999999999
## end
#504, 37:
40.900000000000006, 271.1499999999999
## end
#505, 37:
40.900000000000006, 271.1499999999999
## end
#506, 37:
40.900000000000006, 271.1499999999999
## end
#507, 37:
40.900000000000006, 271.1499999999999
## end
#508, 37:
40.900000000000006, 271.1499999999999
## end
#509, 37:
40.900000000000006, 271.1499999999999
## end
#510, 37:
40.900000000000006, 271.1499999999999
## end
#511, 37:
40.900000000000006, 271.1499999999999
## end
#512, 37:
40.900000000000006, 271.1499999999999
## end
#513, 37:
40.900000000000006, 271.1499999999999
## end
#514, 37:
40.900000000000006, 271.1499999999999
## end
#515, 37:
40.900000000000006, 271.1499999999999
## end
#516, 37:
40.900000000000006, 271.1499999999999
## end
#517, 37:
40.900000000000006, 271.1499999999999
## end
#518, 37:
40.900000000000006, 271.1499999999999
## end
#519, 37:
40.900000000000006, 271.1499999999999
## end
#520, 37:
40.900000000000006, 271.1499999999999
## end
#521, 37:
40.900000000000006, 271.1499999999999
## end
#522, 37:
40.900000000000006, 271.1499999999999
## end
#523, 37:
40.900000000000006, 271.1499999999999
## end
#524, 37:
40.900000000000006, 271.1499999999999
## end
#525, 37:
40.900000000000006, 271.1499999999999
## end
#526, 37:
40.900000000000006, 271.1499999999999
## end
#527, 37:
40.900000000000006, 271.1499999999999
## end
#528, 37:
40.900000000000006, 271.1499999999999
## end
#529, 37:
40.900000000000006, 271.1499999999999
## end
#530, 37:
40.900000000000006, 271.1499999999999
## end
#531, 37:
40.900000000000006, 271.1499999999999
## end
#532, 37:
40.900000000000006, 271.1499999999999
## end
#533, 37:
40.900000000000006, 271.1499999999999
## end
#534, 37:
40.900000000000006, 271.1499999999999
## end
#535, 37:
40.900000000000006, 271.1499999999999
## end
#536, 37:
40.900000000000006, 271.1499999999999
## end
#537, 37:
40.900000000000006, 271.1499999999999
## end
#538, 37:
40.900000000000006, 271.1499999999999
## end
#539, 37:
40.900000000000006, 271.1499999999999
## end
#540, 37:
40.900000000000006, 271.1499999999999
## end
#541, 37:
40.900000000000006, 271.1499999999999
## end
#542, 37:
40.900000000000006, 271.1499999999999
## end
#543, 37:
40.900000000000006, 271.1499999999999
## end
#544, 37:
40.900000000000006, 271.1499999999999
## end
#545, 37:
40.900000000000006, 271.1499999999999
## end
#546, 37:
40.900000000000006, 271.1499999999999
## end
#547, 37:
40.900000000000006, 271.1499999999999
## end
#548, 37:
40.900000000000006, 271.1499999999999
## end
#549, 37:
40.900000000000006, 271.1499999999999
## end
#550, 37:
40.900000000000006, 271.1499999999999
## end
#551, 37:
40.900000000000006, 271.1499999999999
## end
#552, 37:
40.900000000000006, 271.1499999999999
## end
#553, 37:
40.900000000000006, 271.1499999999999
## end
#554, 37:
40.900000000000006, 271.1499999999999
## end
#555, 37:
40.900000000000006, 271.1499999999999
## end
#556, 37:
40.900000000000006, 271.1499999999999
## end
#557, 37:
40.900000000000006, 271.1499999999999
## end
#558, 37:
40.900000000000006, 271.1499999999999
## end
#559, 37:
40.900000000000006, 271.1499999999999
## end
#560, 37:
40.900000000000006, 271.1499999999999
## end
#561, 37:
40.900000000000006, 271.1499999999999
## end
#562, 37:
40.900000000000006, 271.1499999999999
## end
#563, 37:
40.900000000000006, 271.1499999999999
## end
#564, 37:
40.900000000000006, 271.1499999999999
## end
#565, 37:
40.900000000000006, 271.1499999999999
## end
#566, 37:
40.900000000000006, 271.1499999999999
## end
#567, 37:
40.900000000000006, 271.1499999999999
## end
#568, 37:
40.900000000000006, 271.1499999999999
## end
#569, 37:
40.900000000000006, 271.1499999999999
## end
#570, 37:
40.900000000000006, 271.1499999999999
## end
#571, 37:
40.900000000000006, 271.1499999999999
## end
#572, 37:
40.900000000000006, 271.1499999999999
## end
#573, 37:
40.900000000000006, 271.1499999999999
## end
#574, 37:
40.900000000000006, 271.1499999999999
## end
#575, 37:
40.900000000000006, 271.1499999999999
## end
#576, 37:
40.900000000000006, 271.1499999999999
## end
#577, 37:
40.900000000000006, 271.1499999999999
## end
#578, 37:
40.900000000000006, 271.1499999999999
## end
#579, 37:
40.900000000000006, 271.1499999999999
## end
#580, 37:
40.900000000000006, 271.1499999999999
## end
#581, 37:
40.900000000000006, 271.1499999999999
## end
#582, 37:
40.900000000000006, 271.1499999999999
## end
#583, 37:
40.900000000000006, 271.1499999999999
## end
#584, 37:
40.900000000000006, 271.1499999999999
## end
#585, 37:
40.900000000000006, 271.1499999999999
## end
#586, 37:
40.900000000000006, 271.1499999999999
## end
#587, 37:
40.900000000000006, 271.1499999999999
## end
#588, 37:
40.900000000000006, 271.1499999999999
## end
#589, 37:
40.900000000000006, 271.1499999999999
## end
#590, 37:
40.900000000000006, 271.1499999999999
## end
#591, 37:
40.900000000000006, 271.1499999999999
## end
#592, 37:
40.900000000000006, 271.1499999999999
## end
#593, 37:
40.900000000000006, 271.1499999999999
## end
#594, 37:
40.900000000000006, 271.1499999999999
## end
#595, 37:
40.900000000000006, 271.1499999999999
## end
#596, 37:
40.900000000000006, 271.1499999999999
## end
#597, 37:
40.900000000000006, 271.1499999999999
## end
#598, 37:
40.900000000000006, 271.1499999999999
## end
#599, 37:
40.900000000000006, 271.1499999999999
## end
#600, 37:
40.900000000000006, 271.1499999999999
## end
#601, 37:
40.900000000000006, 271.1499999999999
## end
#602, 37:
40.900000000000006, 271.1499999999999
## end
#603, 37:
40.900000000000006, 271.1499999999999
## end
#604, 37:
40.900000000000006, 271.1499999999999
## end
#605, 37:
40.900000000000006, 271.1499999999999
## end
#606, 37:
40.900000000000006, 271.1499999999999
## end
#607, 37:
40.900000000000006, 271.1499999999999
## end
#608, 37:
40.900000000000006, 271.1499999999999
## end
#609, 37:
40.900000000000006, 271.1499999999999
## end
#610, 37:
40.900000000000006, 271.1499999999999
## end
#611, 37:
40.900000000000006, 271.1499999999999
## end
#612, 37:
40.900000000000006, 271.1499999999999
## end
#613, 37:
40.900000000000006, 271.1499999999999
## end
#614, 37:
40.900000000000006, 271.1499999999999
## end
#615, 37:
40.900000000000006, 271.1499999999999
## end
#616, 37:
40.900000000000006, 271.1499999999999
## end
#617, 37:
40.900000000000006, 271.1499999999999
## end
#618, 37:
40.900000000000006, 271.1499999999999
## end
#619, 37:
40.900000000000006, 271.1499999999999
## end
#620, 37:
40.900000000000006, 271.1499999999999
## end
#621, 37:
40.900000000000006, 271.1499999999999
## end
#622, 37:
40.900000000000006, 271.1499999999999
## end
#623, 37:
40.900000000000006, 271.1499999999999
## end
#624, 37:
40.900000000000006, 271.1499999999999
## end
#625, 37:
40.900000000000006, 271.1499999999999
## end
#626, 37:
40.900000000000006, 271.1499999999999
## end
#627, 37:
40.900000000000006, 271.1499999999999
## end
#628, 37:
40.900000000000006, 271.1499999999999
## end
#629, 37:
40.900000000000006, 271.1499999999999
## end
#630, 37:
40.900000000000006, 271.1499999999999
## end
#631, 37:
40.900000000000006, 271.1499999999999
## end
#632, 37:
40.900000000000006, 271.1499999999999
## end
#633, 37:
40.900000000000006, 271.1499999999999
## end
#634, 37:
40.900000000000006, 271.1499999999999
## end
#635, 37:
40.900000000000006, 271.1499999999999
## end
#636, 37:
40.900000000000006, 271.1499999999999
## end
#637, 37:
40.900000000000006, 271.1499999999999
## end
#638, 37:
40.900000000000006, 271.1499999999999
## end
#639, 37:
40.900000000000006, 271.1499999999999
## end
#640, 37:
40.900000000000006, 271.1499999999999
## end
#641, 37:
40.900000000000006, 271.1499999999999
## end
#642, 37:
40.900000000000006, 271.1499999999999
## end
#643, 37:
40.900000000000006, 271.1499999999999
## end
#644, 37:
40.900000000000006, 271.1499999999999
## end
#645, 37:
40.900000000000006, 271.1499999999999
## end
#646, 37:
40.900000000000006, 271.1499999999999
## end
#647, 37:
40.900000000000006, 271.1499999999999
## end
#648, 37:
40.900000000000006, 271.1499999999999
## end
#649, 37:
40.900000000000006, 271.1499999999999
## end
#650, 37:
40.900000000000006, 271.1499999999999
## end
#653, 4:
7000
## end
#655, 4:
6283
## end
#657, 3:
673
## end
#662, 8642:
"""
JS版本:...
+J函数(JS版本,)
+[新建阅读窗口](,JS版本)
JS版本的"self"替换为"this"

"""


import sys
import re


class NetP:
    def __init__(self,name,text=''):
        self.m_master=None
        self.m_needed=None
        self.m_creator=None
        self.m_dev=None
        self.m_var=None
        self.m_permission=4
        
        self.m_building=False
        
        self.m_name=name
        self.m_text=text
        self.m_db=[None,None]
        self.m_con=[]
        self.m_pos=[-1,-1]


    def copy(self,point=None):
        if point!=None:
            self.m_name=point.m_name
            self.m_text=point.m_text
            return self
        else:
            point=NetP(self.m_name,self.m_text)
            return point


    def connect(self,con,index):
        if index>1 | index<0:
            return
        else:
            self.disconnect_i(index)
            self.m_db[index]=con
            if con!=None:
                if self in con.m_con:
                    pass
                    # print('Error! '+self.m_name+' is already connecting '+con.m_name+'.')
                    # print('It may be an old problem. Check soul().map()')
                else:
                    con.m_con.append(self)


    def con(self,con0,con1):
        if con0!=0:
            self.disconnect_i(0)
            self.connect(con0,0)
        if con1!=0:
            self.disconnect_i(1)
            self.connect(con1,1)
        return self


    def disconnect(self,con):
        if con==self.m_db[0]:
            self.m_db[0]=None
            if con!=self.m_db[1]:
                con.m_con.remove(self)
        elif con==self.m_db[1]:
            self.m_db[1]=None
            if con!=self.m_db[0]:
                con.m_con.remove(self)
                    
    def disconnect_i(self,index):
        if index==0 or index==1:
            con=self.m_db[index]
            self.m_db[index]=None
            if con!=None:
                if self not in con.m_con:
                    print('Something strange happened when deleting '+self.info()+'.m_db['+str(index)+']')
                elif con!=self.m_db[1-index]:
                    con.m_con.remove(self)


    def takeAllCon(self,target):
        list_pt=target.m_con.copy()
        for con in list_pt:
            if con.m_db[0]==target:
                con.con(self,0)
            if con.m_db[1]==target:
                con.con(0,self)


    def delete(self):
        self.disconnect_i(0)
        self.disconnect_i(1)
        cons=self.m_con.copy()
        for point in cons:
            point.disconnect(self)


    def print(self,show_type=0):
        text=self.m_text
        if text=='':
            str_self=self.m_name+'('
        else:
            str_self=self.m_name+'\"'+text+'\"'+'('
        if self.m_db[0]!=None:
            str_self=str_self+self.m_db[0].m_name
        str_self=str_self+','
        if self.m_db[1]!=None:
            str_self=str_self+self.m_db[1].m_name
        str_self=str_self+')'
        if show_type==0:
            str_self+='['+str(self.m_pos[0])+','+str(self.m_pos[1])+']'
        elif show_type=='全部关联':
            str_self+='\n全部关联: '
            name=self.m_name
            self.m_name+='#SELF'
            for con in self.m_con:
                str_self+=con.info(show_info='不显示文本不显示位置')+' '
            self.m_name=name
        print(str_self)
        if self.m_var!=None:
            print("m_var:",self.m_var)
        
        # cons=[]
        # for con in self.m_con:
        #     cons.append(con.m_name)
        # print('m_con:',cons)


    def __str__(self) -> str:
        return self.info(show_info='不显示文本不显示位置')


    def info(self,show_info='不显示位置',show_type=0):
        text=re.sub('\"','\\\"',self.m_text)
        # if text=='' or show_type!=0 or (not infoInStr(show_str,'显示文本')):
        if text=='' or infoInStr(show_info,'不显示文本'):
            str_self=self.m_name
        else:
            str_self=self.m_name+'\"'+text+'\"'


        str_self+='('
        if self.m_db[0]!=None:
            str_self=str_self+self.m_db[0].m_name
        str_self=str_self+','
        if self.m_db[1]!=None:
            str_self=str_self+self.m_db[1].m_name
        str_self=str_self+')'


        # if show_type==0 or infoInStr(show_str,'显示位置'):
        if not infoInStr(show_info,'不显示位置'):
            str_self+='['+str(self.m_pos[0])+','+str(self.m_pos[1])+']'


        return str_self


    
    # BE CAREFUL!!!!!!!
    # BE CAREFUL!!!!!!!
    # BE CAREFUL!!!!!!!
    # I'm using this function to save the pt_info into file. Any change to this function may cause a serious problem!!!!
    def info_saving(self):
        text=re.sub('\"','\\\"',self.m_text)
        if text!='' and text[-1]=='\\':
            text=text[:-1]
        str_self=self.m_name+'\"'+text+'\"'


        str_self+='('
        if self.m_db[0]!=None:
            str_self=str_self+self.m_db[0].m_name
        str_self=str_self+','
        if self.m_db[1]!=None:
            str_self=str_self+self.m_db[1].m_name
        str_self=str_self+')'


        str_self+='['+str(self.m_pos[0])+','+str(self.m_pos[1])+']'


        return str_self



    def printAllConnect(self):
        for point in self.m_con:
            point.print()
    
    # function to build a very complex structure
    def build(self,structure):
        building={}
        undefined={}
        list_return=[]


        aNetPoint=re.compile(r'[\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*\([\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*, *[\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*\)\[[\-0-9]+,[\-0-9]+\]')
        aNetPoint2=re.compile(r'([\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*\([\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*, *[\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*\))(?![\[])')
        # aNetPoint3=re.compile(r'[\w.,#=+*\\\-_\']*\[[-0-9]+,[-0-9]+\]')
        # aNetPoint4=re.compile(r'([\w.,#=+*\\\-_\']*)(?![\[\(,\)])')


        selfName=re.compile(r'([\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*)(?=\()')
        con0Name=re.compile(r'\(([\w.\[\]#=+*\\\-^$_\'~:@/\(\)]*),')
        con1Name=re.compile(r', *([\w.\[\]#=+*\\\-^$_\'~:@/\(\)]*)\)')
        posX=re.compile(r'\[([-0-9]+),')
        posY=re.compile(r',([-0-9]+)\]')
        
        points=aNetPoint.findall(structure)
        points+=aNetPoint2.findall(structure)
        for point_str in points:
            name=selfName.findall(point_str)[0]


            con0s=con0Name.findall(point_str)
            con0_name=''
            if con0s!=[]:
                con0_name=con0s[0]
            
            con1s=con1Name.findall(point_str)
            con1_name=''
            if con1s!=[]:
                con1_name=con1s[0]
            x=posX.findall(point_str)
            y=posY.findall(point_str)


            if name=='#THIS':
                point=self
            else:
                point=undefined.get(name,None)
                if point!=None:
                    undefined.pop(name)
                else:
                    point=NetP(name)
                    list_pt=building.get(name,[])
                    list_pt.append(point)
                    building.update({name:list_pt})
                list_return.append(point)
            
            if con0_name=='#THIS':
                point.connect(self,0)
            elif con0_name!='':
                list_con0=building.get(con0_name,[])
                if list_con0==[]:
                    point_new=NetP(con0_name)
                    list_con0.append(point_new)
                    building.update({con0_name:list_con0})
                    undefined.update({con0_name:point_new})
                point.connect(list_con0[-1],0)


            if con1_name=='#THIS':
                point.connect(self,1)
            elif con1_name!='':
                list_con1=building.get(con1_name,[])
                if list_con1==[]:
                    point_new=NetP(con1_name)
                    list_con1.append(point_new)
                    building.update({con1_name:list_con1})
                    undefined.update({con1_name:point_new})
                point.connect(list_con1[-1],1)


            if x!=[]:
                point.m_pos[0]=int(x[0])
            if y!=[]:
                point.m_pos[1]=int(y[0])
        for name in undefined:
            list_return.append(undefined[name])
        for point in list_return:
            point.m_name=re.sub(r'#.*$',"",point.m_name)


        return list_return


def infoInStr(string,str_info):
    a=string.find(str_info)
    return a!=-1



if __name__=="__main__":
    test=NetP("Nini")
    test2=NetP("haha")
    test3=NetP("gaga")
    test.connect(test2,0)
    test.connect(test3,1)



    test.print()
    test.build("a(#THIS,)[0,0];a#1(#THIS, a)")
test.printAllConnect()
## end
#664, 18109:
起点#0""(,块#1)[-1,-1]
块#1"import sys
import re
"(,)[-1,-1]
块#2""(,)[-1,-1]
然后#3""(块#1,块#2)[-1,-1]
块#4""(,)[-1,-1]
class#5"NetP"(块#2,块#4)[-1,-1]
块#6"self.m_master=None
self.m_needed=None
self.m_creator=None
self.m_dev=None
self.m_var=None
self.m_permission=4
self.m_building=False
self.m_name=name
self.m_text=text
self.m_db=[None,None]
self.m_con=[]
self.m_pos=[-1,-1]
"(,)[-1,-1]
func#7"__init__(self,name,text='')"(块#4,块#6)[-1,-1]
eof#8""(,)[-1,-1]
然后#9""(块#6,eof#8)[-1,-1]
块#10""(,)[-1,-1]
然后#11""(块#4,块#10)[-1,-1]
块#12""(,)[-1,-1]
func#13"copy(self,point=None)"(块#10,块#12)[-1,-1]
块#14"self.m_name=point.m_name
self.m_text=point.m_text
return self
"(,)[-1,-1]
if#15"point!=None"(块#12,块#14)[-1,-1]
eof#16""(,)[-1,-1]
然后#17""(块#14,eof#16)[-1,-1]
块#18""(,)[-1,-1]
elif#19""(if#15,块#18)[-1,-1]
块#20"point=NetP(self.m_name,self.m_text)
return point
"(,)[-1,-1]
else#21""(if#15,块#20)[-1,-1]
eof#22""(,)[-1,-1]
然后#23""(块#20,eof#22)[-1,-1]
eof#24""(,)[-1,-1]
然后#25""(块#12,eof#24)[-1,-1]
块#26""(,)[-1,-1]
然后#27""(块#10,块#26)[-1,-1]
块#28""(,)[-1,-1]
func#29"connect(self,con,index)"(块#26,块#28)[-1,-1]
块#30"return
"(,)[-1,-1]
if#31"index>1 | index<0"(块#28,块#30)[-1,-1]
eof#32""(,)[-1,-1]
然后#33""(块#30,eof#32)[-1,-1]
块#34""(,)[-1,-1]
elif#35""(if#31,块#34)[-1,-1]
块#36"self.disconnect_i(index)
self.m_db[index]=con
"(,)[-1,-1]
else#37""(if#31,块#36)[-1,-1]
块#38""(,)[-1,-1]
然后#39""(块#36,块#38)[-1,-1]
块#40""(,)[-1,-1]
if#41"con!=None"(块#38,块#40)[-1,-1]
块#42"pass
# print('Error! '+self.m_name+' is already connecting '+con.m_name+'.')
# print('It may be an old problem. Check soul().map()')
"(,)[-1,-1]
if#43"self in con.m_con"(块#40,块#42)[-1,-1]
eof#44""(,)[-1,-1]
然后#45""(块#42,eof#44)[-1,-1]
块#46""(,)[-1,-1]
elif#47""(if#43,块#46)[-1,-1]
块#48"con.m_con.append(self)
"(,)[-1,-1]
else#49""(if#43,块#48)[-1,-1]
eof#50""(,)[-1,-1]
然后#51""(块#48,eof#50)[-1,-1]
eof#52""(,)[-1,-1]
然后#53""(块#40,eof#52)[-1,-1]
块#54""(,)[-1,-1]
elif#55""(if#41,块#54)[-1,-1]
eof#56""(,)[-1,-1]
然后#57""(块#38,eof#56)[-1,-1]
eof#58""(,)[-1,-1]
然后#59""(块#28,eof#58)[-1,-1]
块#60""(,)[-1,-1]
然后#61""(块#26,块#60)[-1,-1]
块#62""(,)[-1,-1]
func#63"con(self,con0,con1)"(块#60,块#62)[-1,-1]
块#64"self.disconnect_i(0)
self.connect(con0,0)
"(,)[-1,-1]
if#65"con0!=0"(块#62,块#64)[-1,-1]
eof#66""(,)[-1,-1]
然后#67""(块#64,eof#66)[-1,-1]
块#68""(,)[-1,-1]
elif#69""(if#65,块#68)[-1,-1]
块#70""(,)[-1,-1]
然后#71""(块#62,块#70)[-1,-1]
块#72"self.disconnect_i(1)
self.connect(con1,1)
"(,)[-1,-1]
if#73"con1!=0"(块#70,块#72)[-1,-1]
eof#74""(,)[-1,-1]
然后#75""(块#72,eof#74)[-1,-1]
块#76""(,)[-1,-1]
elif#77""(if#73,块#76)[-1,-1]
块#78"return self
"(,)[-1,-1]
然后#79""(块#70,块#78)[-1,-1]
eof#80""(,)[-1,-1]
然后#81""(块#78,eof#80)[-1,-1]
块#82""(,)[-1,-1]
然后#83""(块#60,块#82)[-1,-1]
块#84""(,)[-1,-1]
func#85"disconnect(self,con)"(块#82,块#84)[-1,-1]
块#86"self.m_db[0]=None
"(,)[-1,-1]
if#87"con==self.m_db[0]"(块#84,块#86)[-1,-1]
块#88""(,)[-1,-1]
然后#89""(块#86,块#88)[-1,-1]
块#90"con.m_con.remove(self)
"(,)[-1,-1]
if#91"con!=self.m_db[1]"(块#88,块#90)[-1,-1]
eof#92""(,)[-1,-1]
然后#93""(块#90,eof#92)[-1,-1]
块#94""(,)[-1,-1]
elif#95""(if#91,块#94)[-1,-1]
eof#96""(,)[-1,-1]
然后#97""(块#88,eof#96)[-1,-1]
块#98"self.m_db[1]=None
"(,)[-1,-1]
elif#99"con==self.m_db[1]"(if#87,块#98)[-1,-1]
块#100""(,)[-1,-1]
然后#101""(块#98,块#100)[-1,-1]
块#102"con.m_con.remove(self)
"(,)[-1,-1]
if#103"con!=self.m_db[0]"(块#100,块#102)[-1,-1]
eof#104""(,)[-1,-1]
然后#105""(块#102,eof#104)[-1,-1]
块#106""(,)[-1,-1]
elif#107""(if#103,块#106)[-1,-1]
eof#108""(,)[-1,-1]
然后#109""(块#100,eof#108)[-1,-1]
块#110""(,)[-1,-1]
elif#111""(elif#99,块#110)[-1,-1]
eof#112""(,)[-1,-1]
然后#113""(块#84,eof#112)[-1,-1]
块#114""(,)[-1,-1]
然后#115""(块#82,块#114)[-1,-1]
块#116""(,)[-1,-1]
func#117"disconnect_i(self,index)"(块#114,块#116)[-1,-1]
块#118"con=self.m_db[index]
self.m_db[index]=None
"(,)[-1,-1]
if#119"index==0 or index==1"(块#116,块#118)[-1,-1]
块#120""(,)[-1,-1]
然后#121""(块#118,块#120)[-1,-1]
块#122""(,)[-1,-1]
if#123"con!=None"(块#120,块#122)[-1,-1]
块#124"print('Something strange happened when deleting '+self.info()+'.m_db['+str(index)+']')
"(,)[-1,-1]
if#125"self not in con.m_con"(块#122,块#124)[-1,-1]
eof#126""(,)[-1,-1]
然后#127""(块#124,eof#126)[-1,-1]
块#128"con.m_con.remove(self)
"(,)[-1,-1]
elif#129"con!=self.m_db[1-index]"(if#125,块#128)[-1,-1]
eof#130""(,)[-1,-1]
然后#131""(块#128,eof#130)[-1,-1]
块#132""(,)[-1,-1]
elif#133""(elif#129,块#132)[-1,-1]
eof#134""(,)[-1,-1]
然后#135""(块#122,eof#134)[-1,-1]
块#136""(,)[-1,-1]
elif#137""(if#123,块#136)[-1,-1]
eof#138""(,)[-1,-1]
然后#139""(块#120,eof#138)[-1,-1]
块#140""(,)[-1,-1]
elif#141""(if#119,块#140)[-1,-1]
eof#142""(,)[-1,-1]
然后#143""(块#116,eof#142)[-1,-1]
块#144""(,)[-1,-1]
然后#145""(块#114,块#144)[-1,-1]
块#146"list_pt=target.m_con.copy()
"(,)[-1,-1]
func#147"takeAllCon(self,target)"(块#144,块#146)[-1,-1]
块#148""(,)[-1,-1]
然后#149""(块#146,块#148)[-1,-1]
块#150""(,)[-1,-1]
for#151"list_pt"(块#148,块#150)[-1,-1]
变量#152"con"(for#151,)[-1,-1]
块#153"con.con(self,0)
"(,)[-1,-1]
if#154"con.m_db[0]==target"(块#150,块#153)[-1,-1]
eof#155""(,)[-1,-1]
然后#156""(块#153,eof#155)[-1,-1]
块#157""(,)[-1,-1]
elif#158""(if#154,块#157)[-1,-1]
块#159""(,)[-1,-1]
然后#160""(块#150,块#159)[-1,-1]
块#161"con.con(0,self)
"(,)[-1,-1]
if#162"con.m_db[1]==target"(块#159,块#161)[-1,-1]
eof#163""(,)[-1,-1]
然后#164""(块#161,eof#163)[-1,-1]
块#165""(,)[-1,-1]
elif#166""(if#162,块#165)[-1,-1]
eof#167""(,)[-1,-1]
然后#168""(块#159,eof#167)[-1,-1]
eof#169""(,)[-1,-1]
然后#170""(块#148,eof#169)[-1,-1]
块#171""(,)[-1,-1]
然后#172""(块#144,块#171)[-1,-1]
块#173"self.disconnect_i(0)
self.disconnect_i(1)
cons=self.m_con.copy()
"(,)[-1,-1]
func#174"delete(self)"(块#171,块#173)[-1,-1]
块#175""(,)[-1,-1]
然后#176""(块#173,块#175)[-1,-1]
块#177"point.disconnect(self)
"(,)[-1,-1]
for#178"cons"(块#175,块#177)[-1,-1]
变量#179"point"(for#178,)[-1,-1]
eof#180""(,)[-1,-1]
然后#181""(块#177,eof#180)[-1,-1]
eof#182""(,)[-1,-1]
然后#183""(块#175,eof#182)[-1,-1]
块#184""(,)[-1,-1]
然后#185""(块#171,块#184)[-1,-1]
块#186"text=self.m_text
"(,)[-1,-1]
func#187"print(self,show_type=0)"(块#184,块#186)[-1,-1]
块#188""(,)[-1,-1]
然后#189""(块#186,块#188)[-1,-1]
块#190"str_self=self.m_name+'('
"(,)[-1,-1]
if#191"text==''"(块#188,块#190)[-1,-1]
eof#192""(,)[-1,-1]
然后#193""(块#190,eof#192)[-1,-1]
块#194""(,)[-1,-1]
elif#195""(if#191,块#194)[-1,-1]
块#196"str_self=self.m_name+'\\"'+text+'\\"'+'('
"(,)[-1,-1]
else#197""(if#191,块#196)[-1,-1]
eof#198""(,)[-1,-1]
然后#199""(块#196,eof#198)[-1,-1]
块#200""(,)[-1,-1]
然后#201""(块#188,块#200)[-1,-1]
块#202"str_self=str_self+self.m_db[0].m_name
"(,)[-1,-1]
if#203"self.m_db[0]!=None"(块#200,块#202)[-1,-1]
eof#204""(,)[-1,-1]
然后#205""(块#202,eof#204)[-1,-1]
块#206""(,)[-1,-1]
elif#207""(if#203,块#206)[-1,-1]
块#208"str_self=str_self+','
"(,)[-1,-1]
然后#209""(块#200,块#208)[-1,-1]
块#210""(,)[-1,-1]
然后#211""(块#208,块#210)[-1,-1]
块#212"str_self=str_self+self.m_db[1].m_name
"(,)[-1,-1]
if#213"self.m_db[1]!=None"(块#210,块#212)[-1,-1]
eof#214""(,)[-1,-1]
然后#215""(块#212,eof#214)[-1,-1]
块#216""(,)[-1,-1]
elif#217""(if#213,块#216)[-1,-1]
块#218"str_self=str_self+')'
"(,)[-1,-1]
然后#219""(块#210,块#218)[-1,-1]
块#220""(,)[-1,-1]
然后#221""(块#218,块#220)[-1,-1]
块#222"str_self+='['+str(self.m_pos[0])+','+str(self.m_pos[1])+']'
"(,)[-1,-1]
if#223"show_type==0"(块#220,块#222)[-1,-1]
eof#224""(,)[-1,-1]
然后#225""(块#222,eof#224)[-1,-1]
块#226"str_self+='\n全部关联: '
name=self.m_name
self.m_name+='#SELF'
"(,)[-1,-1]
elif#227"show_type=='全部关联'"(if#223,块#226)[-1,-1]
块#228""(,)[-1,-1]
然后#229""(块#226,块#228)[-1,-1]
块#230"str_self+=con.info(show_info='不显示文本不显示位置')+' '
"(,)[-1,-1]
for#231"self.m_con"(块#228,块#230)[-1,-1]
变量#232"con"(for#231,)[-1,-1]
eof#233""(,)[-1,-1]
然后#234""(块#230,eof#233)[-1,-1]
块#235"self.m_name=name
"(,)[-1,-1]
然后#236""(块#228,块#235)[-1,-1]
eof#237""(,)[-1,-1]
然后#238""(块#235,eof#237)[-1,-1]
块#239""(,)[-1,-1]
elif#240""(elif#227,块#239)[-1,-1]
块#241"print(str_self)
"(,)[-1,-1]
然后#242""(块#220,块#241)[-1,-1]
块#243""(,)[-1,-1]
然后#244""(块#241,块#243)[-1,-1]
块#245"print(\"m_var:\",self.m_var)
"(,)[-1,-1]
if#246"self.m_var!=None"(块#243,块#245)[-1,-1]
eof#247""(,)[-1,-1]
然后#248""(块#245,eof#247)[-1,-1]
块#249""(,)[-1,-1]
elif#250""(if#246,块#249)[-1,-1]
块#251"# cons=[]
# for con in self.m_con:
#     cons.append(con.m_name)
# print('m_con:',cons)
"(,)[-1,-1]
然后#252""(块#243,块#251)[-1,-1]
eof#253""(,)[-1,-1]
然后#254""(块#251,eof#253)[-1,-1]
块#255""(,)[-1,-1]
然后#256""(块#184,块#255)[-1,-1]
块#257"return self.info(show_info='不显示文本不显示位置')
"(,)[-1,-1]
func#258"__str__(self) -> str"(块#255,块#257)[-1,-1]
eof#259""(,)[-1,-1]
然后#260""(块#257,eof#259)[-1,-1]
块#261""(,)[-1,-1]
然后#262""(块#255,块#261)[-1,-1]
块#263"text=re.sub('\\"','\\\\"',self.m_text)
# if text=='' or show_type!=0 or (not infoInStr(show_str,'显示文本')):
"(,)[-1,-1]
func#264"info(self,show_info='不显示位置',show_type=0)"(块#261,块#263)[-1,-1]
块#265""(,)[-1,-1]
然后#266""(块#263,块#265)[-1,-1]
块#267"str_self=self.m_name
"(,)[-1,-1]
if#268"text=='' or infoInStr(show_info,'不显示文本')"(块#265,块#267)[-1,-1]
eof#269""(,)[-1,-1]
然后#270""(块#267,eof#269)[-1,-1]
块#271""(,)[-1,-1]
elif#272""(if#268,块#271)[-1,-1]
块#273"str_self=self.m_name+'\\"'+text+'\\"'
"(,)[-1,-1]
else#274""(if#268,块#273)[-1,-1]
eof#275""(,)[-1,-1]
然后#276""(块#273,eof#275)[-1,-1]
块#277"str_self+='('
"(,)[-1,-1]
然后#278""(块#265,块#277)[-1,-1]
块#279""(,)[-1,-1]
然后#280""(块#277,块#279)[-1,-1]
块#281"str_self=str_self+self.m_db[0].m_name
"(,)[-1,-1]
if#282"self.m_db[0]!=None"(块#279,块#281)[-1,-1]
eof#283""(,)[-1,-1]
然后#284""(块#281,eof#283)[-1,-1]
块#285""(,)[-1,-1]
elif#286""(if#282,块#285)[-1,-1]
块#287"str_self=str_self+','
"(,)[-1,-1]
然后#288""(块#279,块#287)[-1,-1]
块#289""(,)[-1,-1]
然后#290""(块#287,块#289)[-1,-1]
块#291"str_self=str_self+self.m_db[1].m_name
"(,)[-1,-1]
if#292"self.m_db[1]!=None"(块#289,块#291)[-1,-1]
eof#293""(,)[-1,-1]
然后#294""(块#291,eof#293)[-1,-1]
块#295""(,)[-1,-1]
elif#296""(if#292,块#295)[-1,-1]
块#297"str_self=str_self+')'
# if show_type==0 or infoInStr(show_str,'显示位置'):
"(,)[-1,-1]
然后#298""(块#289,块#297)[-1,-1]
块#299""(,)[-1,-1]
然后#300""(块#297,块#299)[-1,-1]
块#301"str_self+='['+str(self.m_pos[0])+','+str(self.m_pos[1])+']'
"(,)[-1,-1]
if#302"not infoInStr(show_info,'不显示位置')"(块#299,块#301)[-1,-1]
eof#303""(,)[-1,-1]
然后#304""(块#301,eof#303)[-1,-1]
块#305""(,)[-1,-1]
elif#306""(if#302,块#305)[-1,-1]
块#307"return str_self
"(,)[-1,-1]
然后#308""(块#299,块#307)[-1,-1]
eof#309""(,)[-1,-1]
然后#310""(块#307,eof#309)[-1,-1]
块#311"# BE CAREFUL!!!!!!!
# BE CAREFUL!!!!!!!
# BE CAREFUL!!!!!!!
# I'm using this function to save the pt_info into file. Any change to this function may cause a serious problem!!!!
"(,)[-1,-1]
然后#312""(块#261,块#311)[-1,-1]
块#313""(,)[-1,-1]
然后#314""(块#311,块#313)[-1,-1]
块#315"text=re.sub('\\"','\\\\"',self.m_text)
"(,)[-1,-1]
func#316"info_saving(self)"(块#313,块#315)[-1,-1]
块#317""(,)[-1,-1]
然后#318""(块#315,块#317)[-1,-1]
块#319"text=text[:-1]
"(,)[-1,-1]
if#320"text!='' and text[-1]=='\\'"(块#317,块#319)[-1,-1]
eof#321""(,)[-1,-1]
然后#322""(块#319,eof#321)[-1,-1]
块#323""(,)[-1,-1]
elif#324""(if#320,块#323)[-1,-1]
块#325"str_self=self.m_name+'\\"'+text+'\\"'
str_self+='('
"(,)[-1,-1]
然后#326""(块#317,块#325)[-1,-1]
块#327""(,)[-1,-1]
然后#328""(块#325,块#327)[-1,-1]
块#329"str_self=str_self+self.m_db[0].m_name
"(,)[-1,-1]
if#330"self.m_db[0]!=None"(块#327,块#329)[-1,-1]
eof#331""(,)[-1,-1]
然后#332""(块#329,eof#331)[-1,-1]
块#333""(,)[-1,-1]
elif#334""(if#330,块#333)[-1,-1]
块#335"str_self=str_self+','
"(,)[-1,-1]
然后#336""(块#327,块#335)[-1,-1]
块#337""(,)[-1,-1]
然后#338""(块#335,块#337)[-1,-1]
块#339"str_self=str_self+self.m_db[1].m_name
"(,)[-1,-1]
if#340"self.m_db[1]!=None"(块#337,块#339)[-1,-1]
eof#341""(,)[-1,-1]
然后#342""(块#339,eof#341)[-1,-1]
块#343""(,)[-1,-1]
elif#344""(if#340,块#343)[-1,-1]
块#345"str_self=str_self+')'
str_self+='['+str(self.m_pos[0])+','+str(self.m_pos[1])+']'
return str_self
"(,)[-1,-1]
然后#346""(块#337,块#345)[-1,-1]
eof#347""(,)[-1,-1]
然后#348""(块#345,eof#347)[-1,-1]
块#349""(,)[-1,-1]
然后#350""(块#313,块#349)[-1,-1]
块#351""(,)[-1,-1]
func#352"printAllConnect(self)"(块#349,块#351)[-1,-1]
块#353"point.print()
"(,)[-1,-1]
for#354"self.m_con"(块#351,块#353)[-1,-1]
变量#355"point"(for#354,)[-1,-1]
eof#356""(,)[-1,-1]
然后#357""(块#353,eof#356)[-1,-1]
eof#358""(,)[-1,-1]
然后#359""(块#351,eof#358)[-1,-1]
块#360"# function to build a very complex structure
"(,)[-1,-1]
然后#361""(块#349,块#360)[-1,-1]
块#362""(,)[-1,-1]
然后#363""(块#360,块#362)[-1,-1]
块#364"building={}
undefined={}
list_return=[]
aNetPoint=re.compile(r'[\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*\([\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*, *[\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*\)\[[\-0-9]+,[\-0-9]+\]')
aNetPoint2=re.compile(r'([\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*\([\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*, *[\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*\))(?![\[])')
# aNetPoint3=re.compile(r'[\w.,#=+*\\\-_\']*\[[-0-9]+,[-0-9]+\]')
# aNetPoint4=re.compile(r'([\w.,#=+*\\\-_\']*)(?![\[\(,\)])')
selfName=re.compile(r'([\w.,\[\]#=+*\\\-^$_\'~:@/\(\)]*)(?=\()')
con0Name=re.compile(r'\(([\w.\[\]#=+*\\\-^$_\'~:@/\(\)]*),')
con1Name=re.compile(r', *([\w.\[\]#=+*\\\-^$_\'~:@/\(\)]*)\)')
posX=re.compile(r'\[([-0-9]+),')
posY=re.compile(r',([-0-9]+)\]')
points=aNetPoint.findall(structure)
points+=aNetPoint2.findall(structure)
"(,)[-1,-1]
func#365"build(self,structure)"(块#362,块#364)[-1,-1]
块#366""(,)[-1,-1]
然后#367""(块#364,块#366)[-1,-1]
块#368"name=selfName.findall(point_str)[0]
con0s=con0Name.findall(point_str)
con0_name=''
"(,)[-1,-1]
for#369"points"(块#366,块#368)[-1,-1]
变量#370"point_str"(for#369,)[-1,-1]
块#371""(,)[-1,-1]
然后#372""(块#368,块#371)[-1,-1]
块#373"con0_name=con0s[0]
"(,)[-1,-1]
if#374"con0s!=[]"(块#371,块#373)[-1,-1]
eof#375""(,)[-1,-1]
然后#376""(块#373,eof#375)[-1,-1]
块#377""(,)[-1,-1]
elif#378""(if#374,块#377)[-1,-1]
块#379"con1s=con1Name.findall(point_str)
con1_name=''
"(,)[-1,-1]
然后#380""(块#371,块#379)[-1,-1]
块#381""(,)[-1,-1]
然后#382""(块#379,块#381)[-1,-1]
块#383"con1_name=con1s[0]
"(,)[-1,-1]
if#384"con1s!=[]"(块#381,块#383)[-1,-1]
eof#385""(,)[-1,-1]
然后#386""(块#383,eof#385)[-1,-1]
块#387""(,)[-1,-1]
elif#388""(if#384,块#387)[-1,-1]
块#389"x=posX.findall(point_str)
y=posY.findall(point_str)
"(,)[-1,-1]
然后#390""(块#381,块#389)[-1,-1]
块#391""(,)[-1,-1]
然后#392""(块#389,块#391)[-1,-1]
块#393"point=self
"(,)[-1,-1]
if#394"name=='#THIS'"(块#391,块#393)[-1,-1]
eof#395""(,)[-1,-1]
然后#396""(块#393,eof#395)[-1,-1]
块#397""(,)[-1,-1]
elif#398""(if#394,块#397)[-1,-1]
块#399"point=undefined.get(name,None)
"(,)[-1,-1]
else#400""(if#394,块#399)[-1,-1]
块#401""(,)[-1,-1]
然后#402""(块#399,块#401)[-1,-1]
块#403"undefined.pop(name)
"(,)[-1,-1]
if#404"point!=None"(块#401,块#403)[-1,-1]
eof#405""(,)[-1,-1]
然后#406""(块#403,eof#405)[-1,-1]
块#407""(,)[-1,-1]
elif#408""(if#404,块#407)[-1,-1]
块#409"point=NetP(name)
list_pt=building.get(name,[])
list_pt.append(point)
building.update({name:list_pt})
"(,)[-1,-1]
else#410""(if#404,块#409)[-1,-1]
eof#411""(,)[-1,-1]
然后#412""(块#409,eof#411)[-1,-1]
块#413"list_return.append(point)
"(,)[-1,-1]
然后#414""(块#401,块#413)[-1,-1]
eof#415""(,)[-1,-1]
然后#416""(块#413,eof#415)[-1,-1]
块#417""(,)[-1,-1]
然后#418""(块#391,块#417)[-1,-1]
块#419"point.connect(self,0)
"(,)[-1,-1]
if#420"con0_name=='#THIS'"(块#417,块#419)[-1,-1]
eof#421""(,)[-1,-1]
然后#422""(块#419,eof#421)[-1,-1]
块#423"list_con0=building.get(con0_name,[])
"(,)[-1,-1]
elif#424"con0_name!=''"(if#420,块#423)[-1,-1]
块#425""(,)[-1,-1]
然后#426""(块#423,块#425)[-1,-1]
块#427"point_new=NetP(con0_name)
list_con0.append(point_new)
building.update({con0_name:list_con0})
undefined.update({con0_name:point_new})
"(,)[-1,-1]
if#428"list_con0==[]"(块#425,块#427)[-1,-1]
eof#429""(,)[-1,-1]
然后#430""(块#427,eof#429)[-1,-1]
块#431""(,)[-1,-1]
elif#432""(if#428,块#431)[-1,-1]
块#433"point.connect(list_con0[-1],0)
"(,)[-1,-1]
然后#434""(块#425,块#433)[-1,-1]
eof#435""(,)[-1,-1]
然后#436""(块#433,eof#435)[-1,-1]
块#437""(,)[-1,-1]
elif#438""(elif#424,块#437)[-1,-1]
块#439""(,)[-1,-1]
然后#440""(块#417,块#439)[-1,-1]
块#441"point.connect(self,1)
"(,)[-1,-1]
if#442"con1_name=='#THIS'"(块#439,块#441)[-1,-1]
eof#443""(,)[-1,-1]
然后#444""(块#441,eof#443)[-1,-1]
块#445"list_con1=building.get(con1_name,[])
"(,)[-1,-1]
elif#446"con1_name!=''"(if#442,块#445)[-1,-1]
块#447""(,)[-1,-1]
然后#448""(块#445,块#447)[-1,-1]
块#449"point_new=NetP(con1_name)
list_con1.append(point_new)
building.update({con1_name:list_con1})
undefined.update({con1_name:point_new})
"(,)[-1,-1]
if#450"list_con1==[]"(块#447,块#449)[-1,-1]
eof#451""(,)[-1,-1]
然后#452""(块#449,eof#451)[-1,-1]
块#453""(,)[-1,-1]
elif#454""(if#450,块#453)[-1,-1]
块#455"point.connect(list_con1[-1],1)
"(,)[-1,-1]
然后#456""(块#447,块#455)[-1,-1]
eof#457""(,)[-1,-1]
然后#458""(块#455,eof#457)[-1,-1]
块#459""(,)[-1,-1]
elif#460""(elif#446,块#459)[-1,-1]
块#461""(,)[-1,-1]
然后#462""(块#439,块#461)[-1,-1]
块#463"point.m_pos[0]=int(x[0])
"(,)[-1,-1]
if#464"x!=[]"(块#461,块#463)[-1,-1]
eof#465""(,)[-1,-1]
然后#466""(块#463,eof#465)[-1,-1]
块#467""(,)[-1,-1]
elif#468""(if#464,块#467)[-1,-1]
块#469""(,)[-1,-1]
然后#470""(块#461,块#469)[-1,-1]
块#471"point.m_pos[1]=int(y[0])
"(,)[-1,-1]
if#472"y!=[]"(块#469,块#471)[-1,-1]
eof#473""(,)[-1,-1]
然后#474""(块#471,eof#473)[-1,-1]
块#475""(,)[-1,-1]
elif#476""(if#472,块#475)[-1,-1]
eof#477""(,)[-1,-1]
然后#478""(块#469,eof#477)[-1,-1]
块#479""(,)[-1,-1]
然后#480""(块#366,块#479)[-1,-1]
块#481"list_return.append(undefined[name])
"(,)[-1,-1]
for#482"undefined"(块#479,块#481)[-1,-1]
变量#483"name"(for#482,)[-1,-1]
eof#484""(,)[-1,-1]
然后#485""(块#481,eof#484)[-1,-1]
块#486""(,)[-1,-1]
然后#487""(块#479,块#486)[-1,-1]
块#488"point.m_name=re.sub(r'#.*$',\"\",point.m_name)
"(,)[-1,-1]
for#489"list_return"(块#486,块#488)[-1,-1]
变量#490"point"(for#489,)[-1,-1]
eof#491""(,)[-1,-1]
然后#492""(块#488,eof#491)[-1,-1]
块#493"return list_return
"(,)[-1,-1]
然后#494""(块#486,块#493)[-1,-1]
eof#495""(,)[-1,-1]
然后#496""(块#493,eof#495)[-1,-1]
eof#497""(,)[-1,-1]
然后#498""(块#362,eof#497)[-1,-1]
块#499""(,)[-1,-1]
然后#500""(块#2,块#499)[-1,-1]
块#501"a=string.find(str_info)
return a!=-1
"(,)[-1,-1]
func#502"infoInStr(string,str_info)"(块#499,块#501)[-1,-1]
eof#503""(,)[-1,-1]
然后#504""(块#501,eof#503)[-1,-1]
块#505""(,)[-1,-1]
然后#506""(块#499,块#505)[-1,-1]
块#507"test=NetP(\"Nini\")
test2=NetP(\"haha\")
test3=NetP(\"gaga\")
test.connect(test2,0)
test.connect(test3,1)
test.print()
test.build(\"a(#THIS,)[0,0];a#1(#THIS, a)\")
"(,)[-1,-1]
if#508"__name__==\"__main__\""(块#505,块#507)[-1,-1]
eof#509""(,)[-1,-1]
然后#510""(块#507,eof#509)[-1,-1]
块#511""(,)[-1,-1]
elif#512""(if#508,块#511)[-1,-1]
块#513"test.printAllConnect()
"(,)[-1,-1]
然后#514""(块#505,块#513)[-1,-1]
eof#515""(,)[-1,-1]
然后#516""(块#513,eof#515)[-1,-1]

## end
#666, 222:
/*
+[J函数](,JS程序)
*/

print('Hello world');

class NetP {
    constructor() {
        this.m_db=[0,0];
    }

    con(a,b) {
        this.m_db=[a,b];
    }
}

var a=new NetP();
a.con(2,2)
print(a.m_db)


/*
+[J函数](,JS程序)
*/
## end
#667, 3:
679
## end
#670, 2433:
/*
+[J函数](,JS版本)
*/

function arrayRemove(arr,value) {
    a=arr.filter(function(ele) {
            return ele!=value;
        }
    );
    return a;
}


var global_counter=0;

class NetP {
    constructor(name,text='') {
        this.m_master='';
        this.m_needed='';
        this.m_creator='';
        this.m_dev='';
        this.m_var='';
        this.m_time=global_counter;
        global_counter+=1;

        this.m_permission=4;


        this.m_name=name;
        this.m_text=text;
        this.m_db=['',''];
        this.m_con=[];
    }

    connect(con,index) {
        if(index>1 | index<0) {
            return
        }
        else {
            this.disconnect_i(index)
            this.m_db[index]=con
            if(con!='') {
                if(!con.m_con.includes(this)) {
                    con.m_con.push(this)
                }
            }
        }
    }

/*
+[J函数](,JS版本)
*/

    disconnect_i(index) {
        var con;
        if(index==0 | index==1) {
            con=this.m_db[index];
            this.m_db[index]=''
            if(con!='' & con!=this.m_db[1-index]) {
                for(var i=0;i<con.m_con.length;i++) {
                    if(con.m_con[i]==this) {
                        con.m_con.splice(i,1);
                    }
                }
            }
        }
    }

    delete() {
        this.disconnect_i(0);
        this.disconnect_i(1);
        var cons=this.m_con.slice();
        for(var i;i<cons.length;i++) {
            var point=cons[i];
            if(point.m_db[0]==this) {
                point.disconnect(0);
            }
            if(point.m_db[1]==this) {
                point.disconnect(1);
            }
        }
    }

    con(con0,con1) {
        if(con0!==0) {
            this.disconnect_i(0);
            this.connect(con0,0);
        }
        if(con1!==0) {
            this.disconnect_i(1);
            this.connect(con1,1);
        }
        return this
    }

    info() {
    
        var str_info, str_d, str_b;
        if (this.m_db[0]=='') {
            str_d='';
        } else {
            str_d=this.m_db[0].m_name;
        }

        if (this.m_db[1]=='') {
            str_b='';
        }
        else {
            str_b=this.m_db[1].m_name;
        }
        
        str_info=`${this.m_name}(${str_d},${str_b})`;

        return str_info;
    }
}


/*
记住"Matlab"
Nini, 打开动作(库)
Nini, 打开JS编译器(文件)
+[J函数](,JS版本)

测试:...
+[新建阅读窗口](,测试)
*/
## end
#671, 3:
679
## end
#673, 3:
682
## end
#676, 35062:
/*
保存:...
+[J函数](,JS版本)
Reason_oneStep
J函数(JS版本,)

m_needed

参考::https://www.freecodecamp.org/news/how-to-clone-an-array-in-javascript-1d3183468f6a/
+[打开](,参考)
[:]
*/


class Karma {

    constructor(symbol) {
        this.m_symbol=symbol;
        symbol.m_master=this;
        this.m_creator='';
        this.m_map='';
        this.m_cause='';
        this.m_yese=[];
        this.m_noe=[];
        this.m_yesAnd=false;
        this.m_noAnd=false;
        this.m_eoi=0;
        this.m_clause=[];
        this.m_clauseAnd=true;

        this.m_clauseNew=[];
        this.m_clauseCollect=false;
        this.m_clauseOut=false;
        this.m_clauseIn=false;

        this.m_not=false;
        this.m_no=false;
        this.m_buildMode=false;

        this.m_listMP='';
        this.m_restricted=false;

        this.m_ranger='';
        this.m_rangType=false
        this.m_stage=0;
        this.m_reState='';
        this.m_choose=true;
        this.m_interp=false;
    }

    addKarma(karma,con_type='肯定') {
        
        while(karma.m_cause!='') {
            karma=karma.m_cause;
        }
        if(con_type=="clause" | con_type=="从句") {
            this.m_clause.push(karma);
        }
        
        else if(con_type=="no" | con_type=="否定") {
            this.m_noe.push(karma);
        }
        
        else {
            this.m_yese.push(karma);
        }
        karma.m_cause=this;
    }

    info_cause() {
        var info='';
        var karma=this;
        
        while(true) {
            if(karma.m_symbol!='') {
                info=karma.m_symbol.m_name+info;
            }
            if(karma.m_cause=='') {
                break;
            }
            if(karma.m_cause.m_yese.includes(karma)) {
                if(karma.m_no==true) {
                    info='=>'+info;
                }
                
                else {
                    info='->'+info;
                }
            }
            
            else if(karma.m_cause.m_noe.includes(karma)) {
                if(karma.m_no==true) {
                    info='=>>'+info;
                }
                
                else {
                    info='->>'+info;
                }
            }
            
            else if(karma.m_cause.m_clause.includes(karma)) {
                info='=='+info;
            }
            karma=karma.m_cause;
        }
        return info;
    }


    stateSelf() {
        var name;

        if(this.m_interp==true) {
            return 'blue';
        }
        if(this.m_symbol=='' | this.m_map=='') {
            return 'yellow';
        }
        if(this.m_symbol.m_name=='[eq]' | this.m_symbol.m_name=='[同名]') {
            return this.stateSelf_eq();
        }
        
        else if(this.m_symbol.m_name=='[is]' | this.m_symbol.m_name=='[是]') {
            return this.stateSelf_is();
        }
        
        else if(this.m_symbol.m_name=='[那]') {
            return 'green';
        }
        if(this.m_symbol.m_name=='_正则表达式' | this.m_symbol.m_name=='_re') {
            
            try {
                pattern=new RegEx(this.m_symbol.m_text);
            } catch(e) {
                print('Invalid regular expression: ',this.m_symbol.m_text,'!');
                return 'red';
            }
            match=this.m_map.m_name;
            if(pattern.test(match)) {
                return 'green';
            }
            
            else {
                return 'red';
            }
        }
        if(this.m_symbol.m_name!='' & this.m_symbol.m_name[0]=='_') {
            name=this.m_symbol.m_name.slice(1,this.m_symbol.m_name.length);
            var name_m=this.m_map.m_name;
            if(name.length==0) {
                return 'green';
            }
            
            else if(name[0]=='[' & name[name.length-1]==']') {
                if(name_m.length>=2 & name_m[0]=='[' & name_m[name_m.length-1]==']') {
                    return 'green';
                }
                
                else {
                    return 'red';
                }
            }
            
            else {
                return 'green';
            }
        }
        if(this.m_symbol.m_name.length > 1 & this.m_symbol.m_name[0]=='[' & this.m_symbol.m_name[this.m_symbol.m_name.length-1]==']') {
            var name1=this.m_symbol.m_name.slice(1,this.m_symbol.m_name.length-1);
            var name2=this.m_symbol.m_name;
            if(this.m_interp==false & this.m_map.m_creator=='' & this.m_buildMode==false) {
                return 'red';
            }
            if(name1==this.m_map.m_name | name2==this.m_map.m_name) {
                return 'green';
            }
            
            else {
                return 'red';
            }
        }
        if(this.m_symbol.m_name!='' & this.m_symbol.m_name[0]=='~') {
            name=this.m_symbol.m_name.slice(1,this.m_symbol.m_name.length);
            if(name==this.m_map.m_name) {
                return 'red';
            }
            
            else {
                return 'green';
            }
        }
        
        else {
            name=this.m_map.m_name;
            if(name!='' & name[0]=='[' & name[name.length-1]==']') {
                name=name.slice(1,name.length-1);
            }
            if(name!=this.m_symbol.m_name) {
                return 'red';
            }
            
            else if(this.m_symbol.m_text!='' & this.m_symbol.m_text!=this.m_map.m_text) {
                return 'red';
            }
            
            else {
                return 'green';
            }
        }
    }


    stateSelf_eq() {
        var karmaL,karmaR;
        var nameL,nameR;

        if(this.m_map=='') {
            return 'yellow';
        }
        if(this.m_symbol.m_db[0]=='' | this.m_symbol.m_db[1]=='') {
            return 'red';
        }
        karmaL=this.m_symbol.m_db[0].m_master;
        karmaR=this.m_symbol.m_db[1].m_master;
        if(karmaL=='' | karmaR=='') {
            print('Error! [eq] doesn\'t have sbj | obj.');
            print('Sbj:',karmaL);
            print('Obj:',karmaR);
            return 'red';
        }
        if(karmaL.m_map=='' | karmaR.m_map=='') {
            return 'green';
        }
        
        else {
            nameL=karmaL.m_map.m_name;
            nameR=karmaR.m_map.m_name;
            if(karmaL.m_map.m_name.length>1 & karmaL.m_map.m_name[0]=='[' & karmaL.m_map.m_name[karmaL.m_map.m_name.length-1]==']') {
                nameL=karmaL.m_map.m_name.slice(1,karmaL.m_map.m_name.length-1);
            }
            if(karmaR.m_map.m_name.length>1 & karmaR.m_map.m_name[0]=='[' & karmaR.m_map.m_name[karmaR.m_map.m_name.length-1]==']') {
                nameR=karmaR.m_map.m_name.slice(1,karmaR.m_map.m_name.length-1);
            }
            if(nameL==nameR) {
                return 'green';
            }
            
            else {
                return 'red';
            }
        }
    }


    stateSelf_is() {
        var karmaL,karmaR;
        if(this.m_map=='') {
            return 'yellow';
        }
        if(this.m_symbol.m_db[0]=='' | this.m_symbol.m_db[1]=='') {
            return 'red';
        }
        karmaL=this.m_symbol.m_db[0].m_master;
        karmaR=this.m_symbol.m_db[1].m_master;
        if(karmaL.m_map=='' | karmaR.m_map=='') {
            return 'green';
        }
        
        else {
            if(karmaL.m_map==karmaR.m_map) {
                return 'green';
            }
            
            else {
                return 'red';
            }
        }
    }



    stateRelation() {
        if(this.m_map=='' | this.m_symbol=='') {
            return true;
        }
        var cause=this.m_cause;
        
        while(cause!='') {
            if(cause.m_symbol==this.m_symbol.m_db[0]) {
                if(cause.m_map!=this.m_map.m_db[0]) {
                    return false;
                }
            }
            if(cause.m_symbol==this.m_symbol.m_db[1]) {
                if(cause.m_map!=this.m_map.m_db[1]) {
                    return false;
                }
            }

// For a function point, you should check the relation between the point through the function point selfstate()
            if(cause.m_symbol.m_db[0]==this.m_symbol) {
                if(cause.m_map.m_db[0]!=this.m_map | cause.stateSelf()=='red') {
                    return false;
                }
            }
            if(cause.m_symbol.m_db[1]==this.m_symbol) {
                if(cause.m_map.m_db[1]!=this.m_map | cause.stateSelf()=='red') {
                    return false;
                }
            }
            cause=cause.m_cause;
        }
        return true;
    }

/*
newMap存档:...
Reason_oneStep
delete
list_have
info_cause
setRangers
*/


    mapListFromRange() {
        var list_map=[];
        if(this.m_rangType==true) {
            if(this.m_ranger.m_map=='') {
                list_map=[];
            }
            
            else {
                list_map=[...this.m_ranger.m_map.m_con];
            }
        }
        
        else if(this.m_ranger.m_symbol.m_db[0]==this.m_symbol) {
            if(this.m_ranger.m_map.m_db[0]=='') {
                list_map=[];
            }
            
            else {
                list_map=[this.m_ranger.m_map.m_db[0]];
            }
        }
        
        else if(this.m_ranger.m_symbol.m_db[1]==this.m_symbol) {
            if(this.m_ranger.m_map.m_db[1]=='') {
                list_map=[];
            }
            
            else {
                list_map=[this.m_ranger.m_map.m_db[1]];
            }
        }
        
        else {
            print('Warning! Undefined situation.');
        }
        return list_map;
    }


    mapListFromPool_normal(pool) {
        var list_map=[];
        var name=this.m_symbol.m_name;

        if(name.length>0 & (name[0]=='_' | name[0]=='~')) {
            list_have=dictToList(pool);
            list_map=[];
            
            for(var i=0;i<list_have.length;i++) {
                var point=list_have[i];
                if(point.m_needed=='' | (point.m_needed!='' & point.m_creator!='')) {
                    list_map.push(point);
                }
            }
        }
        
        else {
// print(undefined===[])
            list_map=pool[this.m_symbol.m_name];
            if(list_map===undefined) {
                list_map=[];
            }
        }
        return list_map;
    }
    

    mapList_is(ranger,pool) {
        if(ranger.m_symbol.m_db[0]=='' | ranger.m_symbol.m_db[1]=='') {
            return this.mapListFromPool_normal(pool);
        }
        if(ranger.m_symbol.m_db[0]==this.m_symbol & ranger.m_map.m_db[1]!='') {
            return [ranger.m_map.m_db[1]];
        }
        if(ranger.m_symbol.m_db[1]==this.m_symbol & ranger.m_map.m_db[0]!='') {
            return [ranger.m_map.m_db[0]];
        }
        return this.mapListFromPool_normal(pool);
    }

    allCauses() {
        var cause=this;
        var list_km=[];
        
        while(cause.m_cause!='') {
            cause=cause.m_cause;
            list_km.push(cause);
        }
        return list_km;
    }

    mapList_that(ranger) {
        var list_cause=ranger.allCauses();
        var list_map=[];
        
        for(var i=0;i<list_cause.length;i++) {
            var cause=list_cause[i];
            var pt_map=cause.m_map;
            if(pt_map!='' & !list_map.includes(pt_map)) {
                list_map.push(pt_map);
            }
        }
        return list_map;
    }

    //rangeList(pool,areaType,list_new) {
    rangeList(pool,list_new) {
        var list_map=[];

        if(this.m_listMP!=='') {
            return this.m_listMP;
        }
        
        else if(this.m_ranger!='') {
            var ranger=this.m_ranger;
            var nameR=this.m_ranger.m_symbol.m_name;
            if(nameR=='[is]') {
                list_map=this.mapList_is(this.m_ranger,pool);
            }
            
            else if(nameR=='[那]') {
                list_map=this.mapList_that(this.m_ranger);
            }
            
            else if(this.m_ranger.isType('非回答新建') &  this.m_symbol.m_con.includes(this.m_ranger.m_symbol)) {
                list_map=this.mapListFromPool_normal(pool);
            }
            
            else {
                list_map=this.mapListFromRange();
            }
        }
        
        else {
            list_map=this.mapListFromPool_normal(pool);
        }
        this.m_listMP=list_map;
        return list_map;
    }


    newMap(pool,areaType,list_new) {
    //newMap(list_map,areaType,list_new) {
        var list_map=this.rangeList(pool,list_new);

        // var list_map=[];
        var name;
        if(this.m_buildMode==false | areaType==false) {
            name=this.m_symbol.m_name;
            if(this.isPreDefined()) {
                if(this.m_map=='') {
                    point=new NetP(name,this.m_symbol.m_text);
                    point.m_needed=this;
                    point.m_creator=this;
                    this.map(point);
                }
                
                else {
                    this.m_map.delete();
                    delete this.m_map;
                    this.map('');
                }
                return;
            }
            // [A]
            else if(this.isFunctionPoint()==2) {
                if(this.m_map=='') {
                    point=new NetP(name,this.m_symbol.m_text);
                    point.m_needed=this;
                    this.map(point);
                }
                
                else {
                    this.map(this.m_map);
                }
                this.m_interp=true;
                return;
            }
            var list_have=list_map;
            var mp=this.m_map;
            this.map(this.nextInlist(mp,list_have));
            return;
        }
        
        else {
            name=this.m_symbol.m_name;
            if(name!='' & (name[0]!='[' | name[name.length-1]!=']')) {
                if(this.m_map!='') {
                    this.m_map.m_creator='';
                    if(this.m_map.m_needed=='') {
                        this.m_map.delete();
                        this.map('');
                        return;
                    }
                    
                    else {
                        this.m_map.m_name='['+this.m_map.m_name+']';
                    }
                }
                var list_need=[];
                
                for(var i=0;i<list_map.length;i++) {
                    var point=list_map[i];
                    if(point.m_creator=='' & point.m_needed!='') {
                        list_need.push(point);
                    }
                }

                point=this.m_map;
                this.map(this.nextInlist(point,list_need));
                if(this.m_map=='') {
                    if(this.m_restricted==true) {
                        this.map('');
                        return;
                    }
                    point=new NetP(this.m_symbol.m_name,this.m_symbol.m_text);
                    point.m_building=true;
                    this.map(point);
                }
                
                else {
                    this.m_map.m_building=true;
                    this.m_map.m_name=this.m_map.m_name.slice(1,this.m_map.m_name.length-1);
                }
                this.m_map.m_creator=this;
                return;
            }
            else {
                if(this.m_map=='') {
                    point=new NetP(name,this.m_symbol.m_text);
                    point.m_building=true;
                    point.m_needed=this;
                    this.map(point);
                    return;
                } else {
                    this.m_map.m_needed='';
                    this.m_map.delete();
                    this.map('');
                    return;
                }
            }
        } 

        this.map('');
    }
/*
+[J函数](,JS版本)
*/

    nextInlist(point,list_pt) {
        var i;
        if(list_pt.length==0) {
            return '';
        }
        if(point=='') {
            return list_pt[0];
        }
        
        try {
            i=list_pt.lastIndexOf(point);
        } catch(e) {
            return '';
        }

        if(i+1>=list_pt.length) {
            return '';
        }
        else {
            return list_pt[i+1];
        }
    }

/*
+[J函数](,JS版本)
*/

    map(point) {
        var cause;
        this.clearAll();
        this.m_map=point;
        if(this.m_map!='') {
            cause=this.m_cause;
            
            while(cause!='') {
                if(cause.needBuildRelation()) {
                    if(cause.m_map.m_needed=='' | cause.m_map.m_needed==cause) {
                        if(cause.m_symbol.m_db[0]==this.m_symbol) {
                            cause.m_map.connect(this.m_map,0);
                        }
                        if(cause.m_symbol.m_db[1]==this.m_symbol) {
                            cause.m_map.connect(this.m_map,1);
                        }
                    }
                }
                if(this.needBuildRelation()) {
                    if(this.m_map.m_needed=='' | this.m_map.m_needed==this) {
                        if(this.m_symbol.m_db[0]==cause.m_symbol) {
                            this.m_map.connect(cause.m_map,0);
                        }
                        if(this.m_symbol.m_db[1]==cause.m_symbol) {
                            this.m_map.connect(cause.m_map,1);
                        }
                    }
                }
                cause=cause.m_cause;
            }
        }
    }

/*
+[J函数](,JS版本)
info(
*/

    clearAll() {
        this.m_map='';
        this.m_stage=0;
        this.m_interp=false;
        this.m_reState='';
        this.m_choose=true;
        this.m_eoi=0;
        if(this.m_restricted==false) {
            delete this.m_listMP;
            this.m_listMP='';
        }
        
        for(var i=0;i<this.m_clause.length;i++) {
            var clause=this.m_clause[i];
            clause.clearAll();
        }
        
        for(var i=0;i<this.m_noe.length;i++) {
            var end=this.m_noe[i];
            end.clearAll();
        }
        
        for(var i=0;i<this.m_yese.length;i++) {
            var end=this.m_yese[i];
            end.clearAll();
        }
    }


    needBuildRelation() {
        if(this.buildingNewMap()) {
            return true;
        }
        
        else if(this.isFunctionPoint()!=0) {
            return true;
        }
        return false;
    }



    buildingNewMap() {
        if(this.m_map=='') {
            return false;
        }
        
        else if(this.m_buildMode==false) {
            return false;
        }
        
        else {
            if(this.m_map.m_needed=='') {
                return true;
            }
        }
        return false;
    }



    isFunctionPoint() {
        if(this.m_symbol.m_name=='') {
            return 0;
        }
        
        else if(this.m_symbol.m_name=='[eq]' | this.m_symbol.m_name=='[同名]') {
            return 1;
        }
        
        else if(this.m_symbol.m_name=='[is]' | this.m_symbol.m_name=='[是]') {
            return 1;
        }
        
        else if(this.m_symbol.m_name=='[那]') {
            return 1;
        }
        
        else if(this.m_symbol.m_name=='[]') {
            return 1;
        }
        
        else if(this.m_symbol.m_name[0]=='[' & this.m_symbol.m_name[this.m_symbol.m_name.length-1]==']') {
            return 2;
        }
        return 0;
    }

/*
list_have
*/

    isPreDefined() {
        var name=this.m_symbol.m_name;
        if(name=='[is]' | name=='[eq]' | name=='[那]' | name=='[]') {
            return true;
        }
        
        else {
            return false;
        }
    }


    areaType() {
        return 0;
    }

/*
+[J函数](,JS版本)
length
newMap
*/

    Reason_oneStep(pool) {
        var list_new=[];
        // var areaType=areaType.concat(this.areaType());
        var areaType=true;
        var change=false;
        var keep=true;

        if(this.m_stage==0) {
            if(this.m_cause!='') {
                if(this.m_cause.m_clause.includes(this)) {
                    if(this.m_cause.m_stage==2) {
                        this.m_stage=1;
                        change=true;
                    }
                }
            }
        }

        if(this.m_stage==1) {
            
            while(true) {
                if(this.stateSelf()!='blue') {
                    this.newMap(pool,areaType,list_new);
                }
                else {
                    this.m_interp=false;
                }

                change=true;
                if(this.stateRelation()==false) {
                    continue;
                }
                
                else if(this.stateSelf()=='red') {
                    continue;
                }
                
                else if(this.stateSelf()=='yellow') {
                    this.m_stage=5;
                    if(this.m_no==false) {
                        this.m_reState='dark yellow';
                        return [change,list_new];
                    }
                    
                    else {
                        this.m_reState='dark green';
                        return [change,list_new];
                    }
                }
                
                else if(this.stateSelf()=='blue') {
                    this.m_stage=1;
                    return [change,list_new];
                }
                
                else {
                    this.m_stage=2;
                    break;
                }
            }
        }

        if(this.m_stage==2) {

            if(this.m_clause.length==0) {
                this.m_choose=true;
                this.m_stage=3;
                change=true;
            }
            
            else {
                this.m_choose=this.m_clauseAnd;
                keep=false;
            }

            
            for(var i=0;i<this.m_clause.length;i++) {
                var clause=this.m_clause[i];
                if(this.m_clauseAnd==true) {
                    if(clause.m_reState=='dark yellow') {
                        this.m_choose=false;
                        this.m_stage=3;
                        change=true;
                        this.m_clauseOut=true;
                        break;
                    }
                    
                    else if(clause.m_reState=='') {
                        keep=true;
                    }
                }
                
                else {
                    if(clause.m_reState=='dark green') {
                        this.m_choose=true;
                        this.m_stage=3;
                        change=true;
                        this.m_clauseOut=true;
                        break;
                    }
                    
                    else if(clause.m_reState=='') {
                        keep=true;
                    }
                }
            }

            if(this.m_clause.length!=0 & keep==false) {
                this.m_stage=3;
                change=true;
                this.m_clauseOut=true;
            }
        }


        if(this.m_stage==3) {
            if(this.m_choose==false) {
                if(this.m_noe.length==0) {
                    this.m_stage=1;
                    change=true;
                    return [change,list_new];
                }
                i=this.m_eoi;
                var end=this.m_noe[i];
                if(end.m_stage==0) {
                    end.m_stage=1;
                    change=true;
                }
                
                else if(end.m_reState=='dark yellow') {
                    if(this.m_noAnd==true) {
                        this.m_stage=1;
                        change=true;
                    }
                    
                    else {
                        i+=1;
                        change=true;
                        if(i==this.m_noe.length) {
                            this.m_stage=1;
                            this.m_eoi=0;
                        }
                        
                        else {
                            this.m_eoi=i;
                        }
                    }
                }
                
                else if(end.m_reState=='dark green') {
                    if(this.m_noAnd!=true) {
                        this.m_stage=4;
                        change=true;
                    }
                    
                    else {
                        i+=1;
                        change=true;
                        if(i==this.m_noe.length) {
                            this.m_stage=4;
                            this.m_eoi=0;
                        }
                        
                        else {
                            this.m_eoi=i;
                        }
                    }
                }
            }
            
            else {
                if(this.m_yese.length==0 & this.m_noe.length==0) {
                    this.m_stage=4;
                    change=true;
                }
                
                else if(this.m_yese.length==0) {
                    this.m_stage=1;
                    change=true;
                    return [change,list_new];
                }
                
                else {
                    i=this.m_eoi;
                    end=this.m_yese[i];
                    if(end.m_stage==0) {
                        end.m_stage=1;
                        change=true;
                    }
                    
                    else if(end.m_reState=='dark yellow') {
                        if(this.m_yesAnd==true) {
                            this.m_stage=1;
                            change=true;
                        }
                        
                        else {
                            i+=1;
                            change=true;
                            if(i==this.m_yese.length) {
                                this.m_stage=1;
                                this.m_eoi=0;
                            }
                            
                            else {
                                this.m_eoi=i;
                            }
                        }
                    }
                    
                    else if(end.m_reState=='dark green') {
                        if(this.m_yesAnd!=true) {
                            this.m_stage=4;
                            change=true;
                        }
                        
                        else {
                            i+=1;
                            change=true;
                            if(i==this.m_yese.length) {
                                this.m_stage=4;
                                this.m_eoi=0;
                            }
                            
                            else {
                                this.m_eoi=i;
                            }
                        }
                    }
                }
            }
        }


        if(this.m_stage==4) {
            if(this.m_clauseNew.length!=0 | this.m_clauseOut==true) {
                this.m_clauseCollect=true;
            }
            if((this.m_buildMode==true | this.isFunctionPoint()==1) & this.m_map!='' & !list_new.includes(this.m_map)) {
                list_new.push(this.m_map);
            }
            this.m_stage=5;
            if(this.m_no==true) {
                this.m_reState='dark yellow';
                change=true;
                return [change,list_new];
            }
            
            else {
                this.m_reState='dark green';
                change=true;
                return [change,list_new];
            }
        }
        return [change,list_new];
    }

    isVirtual() {
        var name=this.m_symbol.m_name;
        if(name.length>1 & name[0]=='[' & name[name.length-1]==']') {
            return true;
        }
        
        else {
            return false;
        }
    }


    isSpecialRanger() {
        var name=this.m_symbol.m_name;
        if(name=='[is]' | name=='[那]') {
            return true;
        }
        return false;
    }

    isType(str_type) {
        var name=this.m_symbol.m_name;
        if(infoInStr('引用',str_type)) {
            if(!this.isVirtual() | this.m_buildMode==true) {
                return false;
            }
        }
        if(infoInStr('新建',str_type)) {
            if(infoInStr('非新建',str_type)) {
                if(this.m_buildMode==true) {
                    return false;
                }
            }
            
            else if(this.m_buildMode==false) {
                return false;
            }
        }
        if(infoInStr('动作',str_type)) {
            if(!this.isVirtual() | this.m_buildMode==false) {
                return false;
            }
        }
        if(infoInStr('内置',str_type)) {
            if(!this.isPreDefined()) {
                return false;
            }
        }
        if(infoInStr('特殊范围',str_type)) {
            if(!this.isSpecialRanger()) {
                return false;
            }
        }
        if(infoInStr('否定',str_type)) {
            if(name=='' | name[0]!='~') {
                return false;
            }
        }
        if(infoInStr('通用',str_type)) {
            if(name=='' | name[0]!='_') {
                return false;
            }
        }
        if(infoInStr('普通',str_type)) {
            if(this.isVirtual()) {
                return false;
            }
        }
        if(infoInStr('端点',str_type)) {
            if(infoInStr('非端点',str_type)) {
                if(this.m_ranger=='') {
                    return false;
                }
            }
            
            else if(this.m_ranger!='') {
                return false;
            }
        }
        if(infoInStr('回答',str_type)) {
            var an_type=true;
            if(this.m_map=='' | this.m_map.m_needed==this | this.m_map.m_needed=='') {
                an_type=false;
            }
            if(infoInStr('非回答',str_type)) {
                if(an_type) {
                    return false;
                }
            }
            
            else if(!an_type) {
                return false;
            }
        }
        if(infoInStr('限制',str_type)) {
            if(this.m_restricted==false) {
                return false;
            }
        }
        return true;
    }


    setRangers(causes='') {
        var connecting='';
        var connected='';
        var caseNo=100;
        if(causes=='') {
            causes=[];
        }
        
        else if(this.isType('非新建普通链节')) {
            
            for(var i=0;i<causes.length;i++) {
                var cause=causes[i];
                if(cause.m_symbol.m_db[0]==this.m_symbol | cause.m_symbol.m_db[1]==this.m_symbol) {
                    if(cause.isType('特殊范围')) {
                        connected=cause;
                        break;
                    }
                    
                    else if(cause.isType('普通非新建') & caseNo>3) {
                        connected=cause;
                        caseNo=3;
                    }
                    
                    else if(cause.isType('新建') & caseNo>5) {
                        connected=cause;
                        caseNo=5;
                    }
                }
                
                else if(this.m_symbol.m_db[0]==cause.m_symbol | this.m_symbol.m_db[1]==cause.m_symbol) {
                    if(cause.isType('引用') & caseNo>2) {
                        connecting=cause;
                        caseNo=2;
                    }
                    
                    else if(cause.isType('普通非新建') & caseNo>4) {
                        connecting=cause;
                        caseNo=4;
                    }
                    
                    else if(cause.isType('新建') & caseNo>6) {
                        connecting=cause;
                        caseNo=6;
                    }
                }
            }
            if(connected!='') {
                this.m_ranger=connected;
            }
            
            else if(connecting!='') {
                this.m_ranger=connecting;
                this.m_rangType=true;
            }
        }
        causes=[...causes,this];
        
        for(var i=0;i<this.m_clause.length;i++) {
            var con=this.m_clause[i];
            con.setRangers(causes);
        }
        
        for(var i=0;i<this.m_yese.length;i++) {
            var end=this.m_yese[i];
            end.setRangers(causes);
        }
        
        for(var i=0;i<this.m_noe.length;i++) {
            var end=this.m_noe[i];
            end.setRangers(causes);
        }
    }

    allEffects() {
        var list_effects=[this];
        
        for(var i=0;i<this.m_clause.length;i++) {
            var karma=this.m_clause[i];
            list_effects=list_effects.concat(karma.allEffects());
        }
        
        for(var i=0;i<this.m_noe.length;i++) {
            var karma=this.m_noe[i];
            list_effects=list_effects.concat(karma.allEffects());
        }
        
        for(var i=0;i<this.m_yese.length;i++) {
            var karma=this.m_yese[i];
            list_effects=list_effects.concat(karma.allEffects());
        }
        return list_effects;
    }


    causeEnd() {
        var cause=this;
        
        while(cause.m_cause!='') {
            cause=cause.m_cause;
        }
        return cause;
    }


    info() {
        var map,str_info;
        if(this.m_map!='') {
            map=this.m_map.info();
        }
        else {
            map='(None)';
        }
        var map_info,name_info;
        
        if(this.m_reState=='dark green') {
            name_info=`<span style="background-color:green;color:white;">${this.m_symbol.info()}</span>`;
        }
        else if(this.m_reState=='dark yellow') {
            name_info=`<span style="background-color:yellow;color:black;">${this.m_symbol.info()}</span>`;
        }
        else {
            name_info=`<span>${this.m_symbol.info()}</span>`;
        }
        
        if(this.stateSelf()=='yellow') {
            map_info=`<span style="background-color:${this.stateSelf()};">${map}</span>`;
        }
        else {
            map_info=`<span style="background-color:${this.stateSelf()};color:white;">${map}</span>`;
        }
        
        str_info=`${name_info}:${map_info},stage(${this.m_stage})`;
        return str_info;
    }


}


function infoInStr(string,str_info) {
    a=str_info.includes(string);
    return a;
}


function dictToList(dict_pt) {
    var list_pt=[];
    
    for(var i=0;i<dict_pt.length;i++) {
        var term=dict_pt[i];
        list_pt=[...list_pt,dict_pt[term]];
    }
    return list_pt;
}




/*
oneStep

stateRelation
setRangers
nextInlist
concat
测试(J函数):...
+[新建阅读窗口](,测试)
*/
## end
#678, 41407:
/*
保存:...
*/

import sys
import re
if(__name__=='__main__') {
    sys.path.append(sys.path[0]+'\\..')
}
from body.bone import NetP

function dictToList(dict_pt) {
    list_pt=[]
    
    for(var i=0;i<dict_pt.length;i++) {
        var term=dict_pt[i];
        list_pt+=dict_pt[term]
    }
    return list_pt
}

class Karma {
    
    constructor(symbol) {
        self.m_symbol=symbol
        symbol.m_master=self
        self.m_creator=None
        self.m_map=None
        self.m_cause=None
        self.m_yese=[]
        self.m_noe=[]
        self.m_yesAnd=False
        self.m_noAnd=False
        self.m_eoi=0
        self.m_clause=[]
        self.m_clauseAnd=True
        self.m_clauseNew=[]
        self.m_clauseCollect=False
        self.m_clauseOut=False
        self.m_clauseIn=False
        self.m_not=False
        self.m_no=False
        self.m_buildMode=False
        self.m_listMP=None
        self.m_restricted=False
        self.m_ranger=None
        self.m_rangType=False
        self.m_stage=0
        self.m_reState='0'
        self.m_choose=True
        self.m_interp=False
    }
    
    stateSelf() {
        if(self.m_interp==True) {
            return 'blue'
        }
        if(self.m_symbol==None or self.m_map==None) {
            return 'yellow'
        }
        if(self.m_symbol.m_name=='[eq]' or self.m_symbol.m_name=='[同名]') {
            return self.stateSelf_eq()
        }
        
        elif(self.m_symbol.m_name=='[is]' or self.m_symbol.m_name=='[是]') {
            return self.stateSelf_is()
        }
        
        elif(self.m_symbol.m_name=='[那]') {
            return 'green'
        }
    }
        if self.m_symbol.m_name=='_正则表达式' or self.m_symbol.m_name=='_re':
            try:
                pattern=re.compile(self.m_symbol.m_text)
            except:
                print('Invalid regular expression: '+self.m_symbol.m_text+'!')
                return 'red'
            match=self.m_map.m_name
            if pattern.findall(match)!=[]:
                return 'green'
            else:
                return 'red'
        if self.m_symbol.m_name!='' and self.m_symbol.m_name[0]=='_':
            name=self.m_symbol.m_name[1:]
            name_m=self.m_map.m_name
            if len(name)==0:
                return 'green'
            elif name[0]=='[' and name[-1]==']':
                if len(name_m)>=2 and name_m[0]=='[' and name_m[-1]==']':
                    return 'green'
                else:
                    return 'red'
            else:
                return 'green'
        if self.m_symbol.m_name!='' and self.m_symbol.m_name[0]=='[' and self.m_symbol.m_name[-1]==']':
            name1=self.m_symbol.m_name[1:-1]
            name2=self.m_symbol.m_name
            if self.m_interp==False and self.m_map.m_creator==None and self.m_buildMode==False:
                return 'red'
            if name1==self.m_map.m_name or name2==self.m_map.m_name:
                return 'green'
            else:
                return 'red'
        if self.m_symbol.m_name!='' and self.m_symbol.m_name[0]=='~':
            name=self.m_symbol.m_name[1:]
            if name==self.m_map.m_name:
                return 'red'
            else: 
                return 'green'
        else:
            name=self.m_map.m_name
            if name!='' and name[0]=='[' and name[-1]==']':
                name=name[1:-1]
            if name!=self.m_symbol.m_name:
                return 'red'
            elif self.m_symbol.m_text!='' and self.m_symbol.m_text!=self.m_map.m_text:
                return 'red'
            else:
                return 'green'
    
    stateSelf_eq() {
        if(self.m_map==None) {
            return 'yellow'
        }
        if(self.m_symbol.m_db[0]==None or self.m_symbol.m_db[1]==None) {
            return 'red'
        }
        karmaL=self.m_symbol.m_db[0].m_master
        karmaR=self.m_symbol.m_db[1].m_master
        if(karmaL==None or karmaR==None) {
            print('Error! [eq] doesn\'t have sbj or obj.')
            print('Sbj:',karmaL)
            print('Obj:',karmaR)
            return 'red'
        }
        if(karmaL.m_map==None or karmaR.m_map==None) {
            return 'green'
        }
        
        else {
            nameL=karmaL.m_map.m_name
            nameR=karmaR.m_map.m_name
            if(len(karmaL.m_map.m_name)>1 and karmaL.m_map.m_name[0]=='[' and karmaL.m_map.m_name[-1]==']') {
                nameL=karmaL.m_map.m_name[1:-1]
            }
            if(len(karmaR.m_map.m_name)>1 and karmaR.m_map.m_name[0]=='[' and karmaR.m_map.m_name[-1]==']') {
                nameR=karmaR.m_map.m_name[1:-1]
            }
            if(nameL==nameR) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
    }
    
    stateSelf_is() {
        if(self.m_map==None) {
            return 'yellow'
        }
        if(self.m_symbol.m_db[0]==None or self.m_symbol.m_db[1]==None) {
            return 'red'
        }
        karmaL=self.m_symbol.m_db[0].m_master
        karmaR=self.m_symbol.m_db[1].m_master
        if(karmaL.m_map==None or karmaR.m_map==None) {
            return 'green'
        }
        
        else {
            if(karmaL.m_map==karmaR.m_map) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
    }
    
    stateSelf_space() {
        if(self.m_map==None) {
            return 'yellow'
        }
        if(self.m_symbol.m_db[0]==None or self.m_symbol.m_db[1]==None) {
            return 'red'
        }
        km_sbj=self.m_symbol.m_db[0].m_master
        km_obj=self.m_symbol.m_db[1].m_master
        if(km_sbj.m_map==None or km_obj.m_map==None) {
            return 'green'
        }
        
        elif(km_sbj.m_map==km_obj.m_map) {
            return 'red'
        }
        x1=km_sbj.m_map.m_pos[0]
        y1=km_sbj.m_map.m_pos[1]
        x2=km_obj.m_map.m_pos[0]
        y2=km_obj.m_map.m_pos[1]
        name=self.m_symbol.m_name
        if(name=='[当地]' or name=='[here]') {
            if(x1==x2 and y1==y2) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
        
        elif(name=='[上面]' or name=='[up]') {
            if(y1>y2) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
        
        elif(name=='[正上面]' or name=='[Up]') {
            if(x1==x2 and y1>y2) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
        
        elif(name=='[下面]' or name=='[down]') {
            if(y1<y2) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
        
        elif(name=='[正下面]' or name=='[Down]') {
            if(x1==x2 and y1<y2) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
        
        elif(name=='[左面]' or name=='[left]') {
            if(x1>x2) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
        
        elif(name=='[正左面]' or name=='[Left]') {
            if(y1==y2 and x1>x2) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
        
        elif(name=='[右面]' or name=='[right]') {
            if(x1<x2) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
        
        elif(name=='[正右面]' or name=='[Right]') {
            if(y1==y2 and x1<x2) {
                return 'green'
            }
            
            else {
                return 'red'
            }
        }
    }
    
    stateRelation() {
        if(self.m_map==None or self.m_symbol==None) {
            return True
        }
        cause=self.m_cause
        
        while(cause!=None) {
            if(cause.m_symbol==self.m_symbol.m_db[0]) {
                if(cause.m_map!=self.m_map.m_db[0]) {
                    return False
                }
            }
            if(cause.m_symbol==self.m_symbol.m_db[1]) {
                if(cause.m_map!=self.m_map.m_db[1]) {
                    return False
                }
            }
            if(cause.m_symbol.m_db[0]==self.m_symbol) {
                if(cause.m_map.m_db[0]!=self.m_map or cause.stateSelf()=='red') {
                    return False
                }
            }
            if(cause.m_symbol.m_db[1]==self.m_symbol) {
                if(cause.m_map.m_db[1]!=self.m_map or cause.stateSelf()=='red') {
                    return False
                }
            }
            cause=cause.m_cause
        }
        return True
    }
    
    mapListFromRange() {
        list_map=[]
        if(self.m_rangType==True) {
            if(self.m_ranger.m_map==None) {
                list_map=[]
            }
            
            else {
                list_map=self.m_ranger.m_map.m_con.copy()
            }
        }
    }
        elif self.m_ranger.m_symbol.m_db[0]==self.m_symbol:
            if self.m_ranger.m_map.m_db[0]==None:
                list_map=[]
            else:
                list_map=[self.m_ranger.m_map.m_db[0]]
        elif self.m_ranger.m_symbol.m_db[1]==self.m_symbol:
            if self.m_ranger.m_map.m_db[1]==None:
                list_map=[]
            else:
                list_map=[self.m_ranger.m_map.m_db[1]]
        else:
            print('Warning! Undefined situation.')
        return list_map
    
    mapListFromPool_normal(pool) {
        name=self.m_symbol.m_name
        if(len(name)>0 and (name[0]=='_' or name[0]=='~')) {
            list_have=dictToList(pool)
            list_map=[]
            
            for(var i=0;i<list_have.length;i++) {
                var point=list_have[i];
                if(point.m_needed==None or (point.m_needed!=None and point.m_creator!=None)) {
                    list_map.append(point)
                }
            }
        }
        
        else {
            list_map=pool.get(self.m_symbol.m_name,[])
        }
        return list_map
    }
    
    mapList_is(ranger,pool) {
        if(ranger.m_symbol.m_db[0]==None or ranger.m_symbol.m_db[1]==None) {
            return self.mapListFromPool_normal(pool)
        }
        if(ranger.m_symbol.m_db[0]==self.m_symbol and ranger.m_map.m_db[1]!=None) {
            return [ranger.m_map.m_db[1]]
        }
        if(ranger.m_symbol.m_db[1]==self.m_symbol and ranger.m_map.m_db[0]!=None) {
            return [ranger.m_map.m_db[0]]
        }
        return self.mapListFromPool_normal(pool)
    }
    
    mapList_that(ranger) {
        list_cause=ranger.allCauses()
        list_map=[]
        
        for(var i=0;i<list_cause.length;i++) {
            var cause=list_cause[i];
            pt_map=cause.m_map
            if(pt_map!=None and pt_map not in list_map) {
                list_map.append(pt_map)
            }
        }
        return list_map
    }
    
    rangeList(pool,areaType,list_new) {
        if(self.m_listMP!=None) {
            return self.m_listMP
        }
    }
        elif self.m_ranger!=None:
            ranger=self.m_ranger
            nameR=self.m_ranger.m_symbol.m_name
            if nameR=='[is]':
                list_map=self.mapList_is(self.m_ranger,pool)
            elif nameR=='[那]':
                list_map=self.mapList_that(self.m_ranger)
            elif self.m_ranger.isType('非回答新建') and self.m_ranger.m_symbol in self.m_symbol.m_con:
                list_map=self.mapListFromPool_normal(pool)
            else:
                list_map=self.mapListFromRange()
        else:
            list_map=self.mapListFromPool_normal(pool)
        self.m_listMP=list_map
        return list_map
    
    newMap(pool,areaType,list_new) {
        list_map=self.rangeList(pool,areaType,list_new)
        if(self.m_buildMode==False or areaType==False) {
            name=self.m_symbol.m_name
            if(self.isPreDefined()) {
                if(self.m_map==None) {
                    point=NetP(name,self.m_symbol.m_text)
                    point.m_pos=self.m_symbol.m_pos.copy()
                    point.m_needed=self
                    point.m_creator=self
                    self.map(point)
                }
                
                else {
                    self.m_map.delete()
                    del self.m_map
                    self.map(None)
                }
                return
            }
            
            elif(self.isFunctionPoint()==2) {
                if(self.m_map==None) {
                    point=NetP(name,self.m_symbol.m_text)
                    point.m_pos=self.m_symbol.m_pos.copy()
                    point.m_needed=self
                    self.map(point)
                }
                
                else {
                    self.map(self.m_map)
                }
                self.m_interp=True
                return
            }
            list_have=list_map
            mp=self.m_map
            self.map(self.nextInlist(mp,list_have))
            return
        }
        
        else {
            name=self.m_symbol.m_name
            if(name!='' and (name[0]!='[' or name[-1]!=']')) {
                if(self.m_map!=None) {
                    self.m_map.m_creator=None
                    if(self.m_map.m_needed==None) {
                        self.m_map.delete()
                        self.map(None)
                        return
                    }
                    
                    else {
                        self.m_map.m_name='['+self.m_map.m_name+']'
                    }
                }
                list_need=[]
                
                for(var i=0;i<list_map.length;i++) {
                    var point=list_map[i];
                    if(point.m_creator==None and point.m_needed!=None) {
                        list_need.append(point)
                    }
                }
                point=self.m_map
                self.map(self.nextInlist(point,list_need))
                if(self.m_map==None) {
                    if(self.m_restricted==True) {
                        self.map(None)
                        return
                    }
                    point=NetP(self.m_symbol.m_name,self.m_symbol.m_text)
                    point.m_pos=self.m_symbol.m_pos.copy()
                    point.m_building=True
                    self.map(point)
                }
                
                else {
                    self.m_map.m_building=True
                    self.m_map.m_name=self.m_map.m_name[1:-1]
                }
                self.m_map.m_creator=self
                return
            }
        }
            else:
                if self.m_map==None:
                    point=NetP(name,self.m_symbol.m_text)
                    point.m_pos=self.m_symbol.m_pos.copy()
                    point.m_building=True
                    point.m_needed=self
                    self.map(point)
                    return
                else:
                    self.m_map.m_needed=None
                    self.m_map.delete()
                    self.map(None)
                    return
        self.map(None)
    }
    
    nextInlist(point,list_pt) {
        if(list_pt==[]) {
            return None
        }
        if(point==None) {
            return list_pt[0]
        }
    }
        try:
            i=list_pt.index(point)
        except:
            return None
        if i+1>=len(list_pt):
            return None
        else:
            return list_pt[i+1]
    
    clearAll() {
        self.m_map=None
        self.m_stage=0
        self.m_interp=False
        self.m_reState=''
        self.m_choose=True
        self.m_eoi=0
        if(self.m_restricted==False) {
            del self.m_listMP
            self.m_listMP=None
        }
        
        for(var i=0;i<self.m_clause.length;i++) {
            var clause=self.m_clause[i];
            clause.clearAll()
        }
        
        for(var i=0;i<self.m_noe.length;i++) {
            var end=self.m_noe[i];
            end.clearAll()
        }
        
        for(var i=0;i<self.m_yese.length;i++) {
            var end=self.m_yese[i];
            end.clearAll()
        }
    }
    
    map(point) {
        self.clearAll()
        self.m_map=point
        if(self.m_map!=None) {
            cause=self.m_cause
            
            while(cause!=None) {
                if(cause.needBuildRelation()) {
                    if(cause.m_map.m_needed==None or cause.m_map.m_needed==cause) {
                        if(cause.m_symbol.m_db[0]==self.m_symbol) {
                            cause.m_map.connect(self.m_map,0)
                        }
                        if(cause.m_symbol.m_db[1]==self.m_symbol) {
                            cause.m_map.connect(self.m_map,1)
                        }
                    }
                }
                if(self.needBuildRelation()) {
                    if(self.m_map.m_needed==None or self.m_map.m_needed==self) {
                        if(self.m_symbol.m_db[0]==cause.m_symbol) {
                            self.m_map.connect(cause.m_map,0)
                        }
                        if(self.m_symbol.m_db[1]==cause.m_symbol) {
                            self.m_map.connect(cause.m_map,1)
                        }
                    }
                }
                cause=cause.m_cause
            }
        }
    }
    
    buildingNewMap() {
        if(self.m_map==None) {
            return False
        }
        
        elif(self.m_buildMode==False) {
            return False
        }
        
        else {
            if(self.m_map.m_needed==None) {
                return True
            }
        }
        return False
    }
    
    needBuildRelation() {
        if(self.buildingNewMap()) {
            return True
        }
        
        elif(self.isFunctionPoint()!=0) {
            return True
        }
        return False
    }
    
    selfType() {
        name=self.m_symbol.m_name
        if(name=='') {
            return "实链节"
        }
        
        elif(name[0]=='_') {
            return "实万用链节"
        }
        
        elif(name[0]=='~') {
            return "实否定链节"
        }
        
        elif(name[0]=='[' and name[-1]==']') {
            return "虚链节"
        }
        return "实链节"
    }
    
    isVirtual() {
        name=self.m_symbol.m_name
        if(len(name)>1 and name[0]=='[' and name[-1]==']') {
            return True
        }
        
        elif(self.isSpaceRelation()) {
            return True
        }
        
        else {
            return False
        }
    }
    
    isPreDefined() {
        name=self.m_symbol.m_name
        if(name=='[is]' or name=='[eq]' or name=='[那]' or name=='[]') {
            return True
        }
        
        elif(self.isSpaceRelation()) {
            return True
        }
        
        else {
            return False
        }
    }
    
    isSpecialRanger() {
        name=self.m_symbol.m_name
        if(name=='[is]' or name=='[那]') {
            return True
        }
        return False
    }
    
    isType(str_type) {
        name=self.m_symbol.m_name
        if(infoInStr('引用',str_type)) {
            if(not self.isVirtual() or self.m_buildMode==True) {
                return False
            }
        }
        if(infoInStr('新建',str_type)) {
            if(infoInStr('非新建',str_type)) {
                if(self.m_buildMode==True) {
                    return False
                }
            }
            
            elif(self.m_buildMode==False) {
                return False
            }
        }
        if(infoInStr('动作',str_type)) {
            if(not self.isVirtual() or self.m_buildMode==False) {
                return False
            }
        }
        if(infoInStr('内置',str_type)) {
            if(not self.isPreDefined()) {
                return False
            }
        }
        if(infoInStr('特殊范围',str_type)) {
            if(not self.isSpecialRanger()) {
                return False
            }
        }
        if(infoInStr('否定',str_type)) {
            if(name=='' or name[0]!='~') {
                return False
            }
        }
        if(infoInStr('通用',str_type)) {
            if(name=='' or name[0]!='_') {
                return False
            }
        }
        if(infoInStr('普通',str_type)) {
            if(self.isVirtual()) {
                return False
            }
        }
        if(infoInStr('端点',str_type)) {
            if(infoInStr('非端点',str_type)) {
                if(self.m_ranger==None) {
                    return False
                }
            }
            
            elif(self.m_ranger!=None) {
                return False
            }
        }
        if(infoInStr('回答',str_type)) {
            an_type=True
            if(self.m_map==None or self.m_map.m_needed==self or self.m_map.m_needed==None) {
                an_type=False
            }
            if(infoInStr('非回答',str_type)) {
                if(an_type) {
                    return False
                }
            }
            
            elif(not an_type) {
                return False
            }
        }
        if(infoInStr('限制',str_type)) {
            if(self.m_restricted==False) {
                return False
            }
        }
        return True
    }
    
    isFunctionPoint() {
        if(self.m_symbol.m_name=='') {
            return 0
        }
        
        elif(self.m_symbol.m_name=='[eq]' or self.m_symbol.m_name=='[同名]') {
            return 1
        }
        
        elif(self.m_symbol.m_name=='[is]' or self.m_symbol.m_name=='[是]') {
            return 1
        }
        
        elif(self.m_symbol.m_name=='[那]') {
            return 1
        }
        
        elif(self.m_symbol.m_name=='[]') {
            return 1
        }
        
        elif(self.isSpaceRelation()) {
            return 1
        }
        
        elif(self.m_symbol.m_name[0]=='[' and self.m_symbol.m_name[-1]==']') {
            return 2
        }
        return 0
    }
    
    isSpaceRelation() {
        if(self.m_buildMode==True) {
            return False
        }
        name=self.m_symbol.m_name
        if(name=='[上面]' or name=='[下面]' or name=='[左面]' or name=='[右面]') {
            return True
        }
        
        elif(name=='[正上面]' or name=='[正下面]' or name=='[正左面]' or name=='[正右面]') {
            return True
        }
        
        elif(name=='[当地]') {
            return True
        }
        
        elif(name=='[up]' or name=='[down]' or name=='[left]' or name=='[right]') {
            return True
        }
        
        elif(name=='[Up]' or name=='[Down]' or name=='[Left]' or name=='[Right]') {
            return True
        }
        
        elif(name=='[here]') {
            return True
        }
        return False
    }
    
    Reason_iterative(pool,list_new=None) {
        if(list_new==None) {
            list_new=[]
        }
        
        while(True) {
            [change,list_pt]=self.Reason_oneStep(pool)
            if(self.m_stage==2) {
                
                for(var i=0;i<self.m_clause.length;i++) {
                    var clause=self.m_clause[i];
                    clause.Reason_iterative(pool)
                }
            }
            
            elif(self.m_stage==3) {
                
                for(var i=0;i<self.m_noe.length;i++) {
                    var end=self.m_noe[i];
                    end.Reason_iterative(pool)
                }
                
                for(var i=0;i<self.m_yese.length;i++) {
                    var end=self.m_yese[i];
                    end.Reason_iterative(pool)
                }
            }
            
            elif(self.m_stage==5) {
                break
            }
        }
        return [self.m_reState,list_new]
    }
    
    isChosen() {
        if(self.m_cause==None) {
            return False
        }
        if(self.m_cause.m_choose==False) {
            return self in self.m_cause.m_noe
        }
        
        else {
            return self in self.m_cause.m_yese
        }
    }
    
    Reason_oneStep(pool) {
        list_new=[]
        areaType=self.areaType()
        change=False
        if(self.m_stage==0) {
            if(self.m_cause!=None) {
                if(self in self.m_cause.m_clause) {
                    if(self.m_cause.m_stage==2) {
                        self.m_stage=1
                        change=True
                    }
                }
            }
        }
        if(self.m_stage==1) {
            
            while(True) {
                if(self.stateSelf()!='blue') {
                    self.newMap(pool,areaType,list_new)
                }
                
                else {
                    self.m_interp=False
                }
                change=True
                if(self.stateRelation()==False) {
                    continue
                }
                
                elif(self.stateSelf()=='red') {
                    continue
                }
                
                elif(self.stateSelf()=='yellow') {
                    self.m_stage=5
                    if(self.m_no==False) {
                        self.m_reState='dark yellow'
                        return [change,list_new]
                    }
                    
                    else {
                        self.m_reState='dark green'
                        return [change,list_new]
                    }
                }
                
                elif(self.stateSelf()=='blue') {
                    self.m_stage=1
                    return [change,list_new]
                }
                
                else {
                    self.m_stage=2
                    break
                }
            }
        }
        if(self.m_stage==2) {
            if(self.m_clause==[]) {
                self.m_choose=True
                self.m_stage=3
                change=True
            }
            
            else {
                self.m_choose=self.m_clauseAnd
                keep=False
            }
            
            for(var i=0;i<self.m_clause.length;i++) {
                var clause=self.m_clause[i];
                if(self.m_clauseAnd==True) {
                    if(clause.m_reState=='dark yellow') {
                        self.m_choose=False
                        self.m_stage=3
                        change=True
                        self.m_clauseOut=True
                        break
                    }
                    
                    elif(clause.m_reState=='') {
                        keep=True
                    }
                }
                
                else {
                    if(clause.m_reState=='dark green') {
                        self.m_choose=True
                        self.m_stage=3
                        change=True
                        self.m_clauseOut=True
                        break
                    }
                    
                    elif(clause.m_reState=='') {
                        keep=True
                    }
                }
            }
            if(self.m_clause!=[] and keep==False) {
                self.m_stage=3
                change=True
                self.m_clauseOut=True
            }
        }
        if(self.m_stage==3) {
            if(self.m_choose==False) {
                if(self.m_noe==[]) {
                    self.m_stage=1
                    change=True
                    return [change,list_new]
                }
                i=self.m_eoi
                end=self.m_noe[i]
                if(end.m_stage==0) {
                    end.m_stage=1
                    change=True
                }
                
                elif(end.m_reState=='dark yellow') {
                    if(self.m_noAnd==True) {
                        self.m_stage=1
                        change=True
                    }
                    
                    else {
                        i+=1
                        change=True
                        if(i==len(self.m_noe)) {
                            self.m_stage=1
                            self.m_eoi=0
                        }
                        
                        else {
                            self.m_eoi=i
                        }
                    }
                }
                
                elif(end.m_reState=='dark green') {
                    if(self.m_noAnd!=True) {
                        self.m_stage=4
                        change=True
                    }
                    
                    else {
                        i+=1
                        change=True
                        if(i==len(self.m_noe)) {
                            self.m_stage=4
                            self.m_eoi=0
                        }
                        
                        else {
                            self.m_eoi=i
                        }
                    }
                }
            }
            
            else {
                if(self.m_yese==[] and self.m_noe==[]) {
                    self.m_stage=4
                    change=True
                }
                
                elif(self.m_yese==[]) {
                    self.m_stage=1
                    change=True
                    return [change,list_new]
                }
                
                else {
                    i=self.m_eoi
                    end=self.m_yese[i]
                    if(end.m_stage==0) {
                        end.m_stage=1
                        change=True
                    }
                    
                    elif(end.m_reState=='dark yellow') {
                        if(self.m_yesAnd==True) {
                            self.m_stage=1
                            change=True
                        }
                        
                        else {
                            i+=1
                            change=True
                            if(i==len(self.m_yese)) {
                                self.m_stage=1
                                self.m_eoi=0
                            }
                            
                            else {
                                self.m_eoi=i
                            }
                        }
                    }
                    
                    elif(end.m_reState=='dark green') {
                        if(self.m_yesAnd!=True) {
                            self.m_stage=4
                            change=True
                        }
                        
                        else {
                            i+=1
                            change=True
                            if(i==len(self.m_yese)) {
                                self.m_stage=4
                                self.m_eoi=0
                            }
                            
                            else {
                                self.m_eoi=i
                            }
                        }
                    }
                }
            }
        }
        if(self.m_stage==4) {
            if(self.m_clauseNew!=[] or self.m_clauseOut==True) {
                self.m_clauseCollect=True
            }
            if((self.m_buildMode==True or self.isFunctionPoint()==1) and self.m_map!=None and self.m_map not in list_new) {
                list_new.append(self.m_map)
            }
            self.m_stage=5
            if(self.m_no==True) {
                self.m_reState='dark yellow'
                change=True
                return [change,list_new]
            }
            
            else {
                self.m_reState='dark green'
                change=True
                return [change,list_new]
            }
        }
        return [change,list_new]
    }
    
    areaType() {
        aType=True
        cause=self
        
        while(True) {
            if(cause.m_no==True) {
                aType=not aType
            }
            if(cause.m_cause==None) {
                return aType
            }
            
            else {
                cause=cause.m_cause
            }
        }
    }
    
    build(code,points) {
        wait_list=[]
        last=self
        connection=None
        exp='(->>|=>>|->|=>|{[ \t\n]*|[ \t\n]*}|,[ \t\n]*|;[ \t\n]*|:[ \t\n]*)'
        units=re.split(exp,code)
    }
        for unit in units:
            if unit=='':
                continue
            elif unit=='->' or unit=='=>' or unit=='->>' or unit=='=>>':
                connection=unit
            elif unit[0]=='{':
                wait_list.append(['clause_splitting',last])
            elif unit[0]==':':
                wait_list.append(['end_splitting',last])
            elif unit[0]==',':
                last=wait_list[-1][1]
            elif unit[0]==';':
                if wait_list[-1][0]=='end_splitting':
                    wait_list.pop()
                if wait_list!=[]:
                    last=wait_list[-1][1]
            elif unit[-1]=='}':
                last=wait_list[-1][1]
                wait_list.pop()
            else:
                current=Karma(points[int(unit)])
                current.m_cause=last
                if connection=='->':
                    current.m_no=False
                    last.m_yese.append(current)
                elif connection=='->>':
                    current.m_no=False
                    last.m_noe.append(current)
                elif connection=='=>':
                    current.m_no=True
                    last.m_yese.append(current)
                elif connection=='=>>':
                    current.m_no=True
                    last.m_noe.append(current)
                else:
                    last.m_clause.append(current)
                connection=''
                last=current
    
    info_cause() {
        info=''
        karma=self
        
        while(True) {
            if(karma.m_symbol!=None) {
                info=karma.m_symbol.m_name+info
            }
            if(karma.m_cause==None) {
                break
            }
            if(karma in karma.m_cause.m_yese) {
                if(karma.m_no==True) {
                    info='=>'+info
                }
                
                else {
                    info='->'+info
                }
            }
            
            elif(karma in karma.m_cause.m_noe) {
                if(karma.m_no==True) {
                    info='=>>'+info
                }
                
                else {
                    info='->>'+info
                }
            }
            
            elif(karma in karma.m_cause.m_clause) {
                info='=='+info
            }
            karma=karma.m_cause
        }
        print(info)
        return info
    }
    
    allEffects() {
        list_effects=[self]
        
        for(var i=0;i<self.m_clause.length;i++) {
            var karma=self.m_clause[i];
            list_effects+=karma.allEffects()
        }
        
        for(var i=0;i<self.m_noe.length;i++) {
            var karma=self.m_noe[i];
            list_effects+=karma.allEffects()
        }
        
        for(var i=0;i<self.m_yese.length;i++) {
            var karma=self.m_yese[i];
            list_effects+=karma.allEffects()
        }
        return list_effects
    }
    
    setRangers(causes=None) {
        connecting=None
        connected=None
        caseNo=100
        if(causes==None) {
            causes=[]
        }
    }
        elif self.isType('非新建普通链节'):
            for cause in causes:
                if cause.m_symbol.m_db[0]==self.m_symbol or cause.m_symbol.m_db[1]==self.m_symbol:
                    if cause.isType('特殊范围'):
                        connected=cause
                        break
                    elif cause.isType('普通非新建') and caseNo>3:
                        connected=cause
                        caseNo=3
                    elif cause.isType('新建') and caseNo>5:
                        connected=cause
                        caseNo=5
                elif self.m_symbol.m_db[0]==cause.m_symbol or self.m_symbol.m_db[1]==cause.m_symbol:
                    if cause.isType('引用') and caseNo>2:
                        connecting=cause
                        caseNo=2
                    elif cause.isType('普通非新建') and caseNo>4:
                        connecting=cause
                        caseNo=4
                    elif cause.isType('新建') and caseNo>6:
                        connecting=cause
                        caseNo=6
            if connected!=None:
                self.m_ranger=connected
            elif connecting!=None:
                self.m_ranger=connecting
                self.m_rangType=True
        causes=causes[:]+[self]
        for con in self.m_clause:
            con.setRangers(causes)
        for end in self.m_yese:
            end.setRangers(causes)
        for end in self.m_noe:
            end.setRangers(causes)
    
    causeEnd() {
        cause=self
        
        while(cause.m_cause!=None) {
            cause=cause.m_cause
        }
        return cause
    }
    
    allCauses() {
        cause=self
        list_km=[]
        
        while(cause.m_cause!=None) {
            cause=cause.m_cause
            list_km.append(cause)
        }
        return list_km
    }
    
    addKarma(karma,con_type='肯定') {
        
        while(karma.m_cause!=None) {
            karma=karma.m_cause
        }
        if(con_type=="clause" or con_type=="从句") {
            self.m_clause.append(karma)
        }
        
        elif(con_type=="no" or con_type=="否定") {
            self.m_noe.append(karma)
        }
        
        else {
            self.m_yese.append(karma)
        }
        karma.m_cause=self
    }
    
    __str__() {
        return self.info_karma()
    }
    
    info_karma(info='',head=0,type_info=0) {
        if(info=='' and self.m_no==True) {
            info='[]=>'
        }
        if(self.m_ranger!=None and type_info==0) {
            ranger=self.m_ranger.m_symbol.info("不显示位置不显示内容")
            info+='['+ranger+']'
            head+=len(ranger)+2
        }
        info+=self.m_symbol.info("不显示位置不显示内容")
        head+=len(self.m_symbol.info("不显示位置不显示内容"))
        if(self.m_clause!=[]) {
            info+='{'
            head+=1
            
            for(var i=0;i<self.m_clause.length;i++) {
                var clause=self.m_clause[i];
                info+='\n'+''.rjust(head)
                info=clause.info_karma(info,head,type_info)
                if(clause!=self.m_clause[-1]) {
                    info+=','
                }
            }
            info+='\n'+'}'.rjust(head-1)
        }
        n=0
        if(len(self.m_noe)+len(self.m_yese)>1) {
            info+=':'
        }
        
        for(var i=0;i<self.m_yese.length;i++) {
            var end=self.m_yese[i];
            if(n==0) {
                if(end.m_no==False) {
                    info+='->'
                }
                
                else {
                    info+='=>'
                }
                info=end.info_karma(info,head+2,type_info)
                n+=1
            }
            
            else {
                if(end.m_no==False) {
                    info+='\n'+'->'.rjust(head+2)
                }
                
                else {
                    info+='\n'+'=>'.rjust(head+2)
                }
                info=end.info_karma(info,head,type_info)
            }
            if(end!=self.m_yese[-1] or self.m_noe!=[]) {
                info+=','
            }
        }
        
        for(var i=0;i<self.m_noe.length;i++) {
            var end=self.m_noe[i];
            if(n==0) {
                if(end.m_no==False) {
                    info+='->>'
                }
                
                else {
                    info+='=>>'
                }
                info=end.info_karma(info,head+3,type_info)
                n+=1
            }
            
            else {
                if(end.m_no==False) {
                    info+='\n'+'->>'.rjust(head+3)
                }
                
                else {
                    info+='\n'+'=>>'.rjust(head+3)
                }
                info=end.info_karma(info,head,type_info)
            }
            if(end!=self.m_noe[-1]) {
                info+=','
            }
        }
        return info
    }
}

function printPtList(list_pt) {
    info_pt='['
    
    for(var i=0;i<list_pt.length;i++) {
        var pt=list_pt[i];
        info_pt+=pt.info(show_info='不显示文本')
        if(pt!=list_pt[-1]) {
            info_pt+=', '
        }
        
        else {
            info_pt+=';'
        }
    }
    info_pt+=']'
    print(info_pt)
}

function infoInStr(string,str_info) {
    a=str_info.find(string)
    return a!=-1
}
if(__name__=='__main__') {
    result=infoInStr('新建','新建')
    print(result)
}
## end
#680, 44959:
起点#0""(,块#1)
块#1"\"\"\"
JS版本:...
\"\"\"
import sys,re
"(,)
块#2""(,)
然后#3""(块#1,块#2)
块#4"sys.path.append(sys.path[0]+'\\..')
"(,)
if#5"__name__=='__main__'"(块#2,块#4)
eof#6""(,)
然后#7""(块#4,eof#6)
块#8"from body.bone import NetP
from body.soul import Karma
from tools import tools_basic
word_order=0
"(,)
然后#9""(块#2,块#8)
块#10""(,)
然后#11""(块#8,块#10)
块#12"n=word_in_dict(code,dict_助词)
"(,)
func#13"fun_助词(code)"(块#10,块#12)
块#14""(,)
然后#15""(块#12,块#14)
块#16"pt=NetP(code[0:n])
pt0=NetP(\"助词\").con(0,pt)
return code[n:],pt0
"(,)
if#17"n!=0"(块#14,块#16)
eof#18""(,)
然后#19""(块#16,eof#18)
块#20"return code,None
"(,)
然后#21""(块#14,块#20)
eof#22""(,)
然后#23""(块#20,eof#22)
块#24""(,)
然后#25""(块#10,块#24)
块#26"n=word_in_dict(code,dict_连词)
"(,)
func#27"fun_连词(code)"(块#24,块#26)
块#28""(,)
然后#29""(块#26,块#28)
块#30"pt=NetP(code[0:n])
pt0=NetP(\"连词\").con(0,pt)
return code[n:],pt0
"(,)
if#31"n!=0"(块#28,块#30)
eof#32""(,)
然后#33""(块#30,eof#32)
块#34"return code,None
"(,)
然后#35""(块#28,块#34)
eof#36""(,)
然后#37""(块#34,eof#36)
块#38""(,)
然后#39""(块#24,块#38)
块#40"n=word_in_dict(code,dict_介词)
"(,)
func#41"fun_介词(code)"(块#38,块#40)
块#42""(,)
然后#43""(块#40,块#42)
块#44"pt=NetP(code[0:n])
pt0=NetP(\"介词\").con(0,pt)
return code[n:],pt0
"(,)
if#45"n!=0"(块#42,块#44)
eof#46""(,)
然后#47""(块#44,eof#46)
块#48"return code,None
"(,)
然后#49""(块#42,块#48)
eof#50""(,)
然后#51""(块#48,eof#50)
块#52"import re
"(,)
然后#53""(块#38,块#52)
块#54""(,)
然后#55""(块#52,块#54)
块#56"n_type=0
"(,)
func#57"fun_数量词(code)"(块#54,块#56)
块#58""(,)
然后#59""(块#56,块#58)
块#60"n_type=1
code=code[1:]
"(,)
if#61"len(code)>0 and code[0]=='第'"(块#58,块#60)
eof#62""(,)
然后#63""(块#60,eof#62)
块#64"result=re.match('\d+|几',code)
"(,)
然后#65""(块#58,块#64)
块#66""(,)
然后#67""(块#64,块#66)
块#68"return code,None
"(,)
if#69"result==None"(块#66,块#68)
eof#70""(,)
然后#71""(块#68,eof#70)
块#72"数目=NetP(result.group())
code=code[result.span()[1]:]
n=word_in_dict(code,dict_数量词)
"(,)
然后#73""(块#66,块#72)
块#74""(,)
然后#75""(块#72,块#74)
块#76"pt=NetP(code[0:n]).con(数目,0)
pt0=NetP(\"数量词\").con(0,数目)
NetP(\"的\").con(pt0,pt)
"(,)
if#77"n!=0"(块#74,块#76)
块#78""(,)
然后#79""(块#76,块#78)
块#80"pt1=NetP('第').con(数目,0)
NetP(\"的\").con(pt0,pt1)
"(,)
if#81"n_type==1"(块#78,块#80)
eof#82""(,)
然后#83""(块#80,eof#82)
块#84"return code[n:],pt0
"(,)
然后#85""(块#78,块#84)
eof#86""(,)
然后#87""(块#84,eof#86)
块#88"return code,None
"(,)
然后#89""(块#74,块#88)
eof#90""(,)
然后#91""(块#88,eof#90)
块#92""(,)
然后#93""(块#54,块#92)
块#94"n=word_in_dict(code,dict_副词)
"(,)
func#95"fun_副词(code)"(块#92,块#94)
块#96""(,)
然后#97""(块#94,块#96)
块#98"pt=NetP(code[0:n])
pt0=NetP(\"副词\").con(0,pt)
return code[n:],pt0
"(,)
if#99"n!=0"(块#96,块#98)
eof#100""(,)
然后#101""(块#98,eof#100)
块#102"return code,None
"(,)
然后#103""(块#96,块#102)
eof#104""(,)
然后#105""(块#102,eof#104)
块#106""(,)
然后#107""(块#92,块#106)
块#108"n=word_in_dict(code,dict_代词)
"(,)
func#109"fun_代词(code)"(块#106,块#108)
块#110""(,)
然后#111""(块#108,块#110)
块#112"pt=NetP(code[0:n])
pt0=NetP(\"代词\").con(0,pt)
return code[n:],pt0
"(,)
if#113"n!=0"(块#110,块#112)
eof#114""(,)
然后#115""(块#112,eof#114)
块#116"return code,None
"(,)
然后#117""(块#110,块#116)
eof#118""(,)
然后#119""(块#116,eof#118)
块#120""(,)
然后#121""(块#106,块#120)
块#122"n=word_in_dict(code,dict_形容词)
"(,)
func#123"fun_形容词(code)"(块#120,块#122)
块#124""(,)
然后#125""(块#122,块#124)
块#126"print(code[0:n])
pt=NetP(code[0:n])
pt0=NetP(\"形容词\").con(0,pt)
return code[n:],pt0
"(,)
if#127"n!=0"(块#124,块#126)
eof#128""(,)
然后#129""(块#126,eof#128)
块#130"return code,None
"(,)
然后#131""(块#124,块#130)
eof#132""(,)
然后#133""(块#130,eof#132)
块#134""(,)
然后#135""(块#120,块#134)
块#136""(,)
func#137"fun_名词(code)"(块#134,块#136)
块#138"return '',None
"(,)
if#139"len(code)==0"(块#136,块#138)
eof#140""(,)
然后#141""(块#138,eof#140)
块#142"global word_order
name=''
"(,)
然后#143""(块#136,块#142)
块#144""(,)
然后#145""(块#142,块#144)
块#146"n=word_in_dict(code[i:],dict_动词)+word_in_dict(code[i:],dict_助词)+word_in_dict(code[i:],dict_连词)+word_in_dict(code[i:],dict_介词)+word_in_dict(code[i:],dict_副词)+word_in_dict(code[i:],dict_标点)
"(,)
for#147"range(len(code))"(块#144,块#146)
变量#148"i"(for#147,)
块#149""(,)
然后#150""(块#146,块#149)
块#151""(,)
if#152"n!=0"(块#149,块#151)
块#153"name=code[0:i]
break
"(,)
if#154"i!=0"(块#151,块#153)
eof#155""(,)
然后#156""(块#153,eof#155)
块#157"return code,None
"(,)
else#158""(if#154,块#157)
eof#159""(,)
然后#160""(块#157,eof#159)
eof#161""(,)
然后#162""(块#151,eof#161)
块#163""(,)
然后#164""(块#149,块#163)
块#165""(,)
if#166"code[i]=='\"'"(块#163,块#165)
块#167"name=\"临时文本\"
"(,)
if#168"i==0"(块#165,块#167)
eof#169""(,)
然后#170""(块#167,eof#169)
块#171"name=code[0:i]
"(,)
else#172""(if#168,块#171)
eof#173""(,)
然后#174""(块#171,eof#173)
块#175"break
"(,)
然后#176""(块#165,块#175)
eof#177""(,)
然后#178""(块#175,eof#177)
eof#179""(,)
然后#180""(块#163,eof#179)
块#181""(,)
然后#182""(块#144,块#181)
块#183"name=code
"(,)
if#184"name==''"(块#181,块#183)
eof#185""(,)
然后#186""(块#183,eof#185)
块#187"code=code[i:]
text=''
pat1=r'\"[^\"]+\"'
result=re.match(pat1,code)
"(,)
然后#188""(块#181,块#187)
块#189""(,)
然后#190""(块#187,块#189)
块#191"text=result.group()[1:-1]
n=result.span()[1]
code=code[n:]
"(,)
if#192"result!=None"(块#189,块#191)
eof#193""(,)
然后#194""(块#191,eof#193)
块#195"pt=NetP(name,text)
pt0=NetP(\"名词\").con(0,pt)
NetP(\"的\").con(pt0,NetP(\"序号\",str(word_order)))
word_order+=1
return code,pt0
"(,)
然后#196""(块#189,块#195)
eof#197""(,)
然后#198""(块#195,eof#197)
块#199""(,)
然后#200""(块#134,块#199)
块#201"n=word_in_dict(code,dict_words)
"(,)
func#202"fun_dict(code,dict_words,type_word)"(块#199,块#201)
块#203""(,)
然后#204""(块#201,块#203)
块#205"pt=NetP(code[0:n])
pt0=NetP(type_word).con(0,pt)
return code[n:],pt0
"(,)
if#206"n!=0"(块#203,块#205)
eof#207""(,)
然后#208""(块#205,eof#207)
块#209"return code,None
"(,)
然后#210""(块#203,块#209)
eof#211""(,)
然后#212""(块#209,eof#211)
块#213""(,)
然后#214""(块#199,块#213)
块#215"n=min(20,len(code))
"(,)
func#216"word_in_dict(code,words)"(块#213,块#215)
块#217""(,)
然后#218""(块#215,块#217)
块#219""(,)
for#220"range(n)"(块#217,块#219)
变量#221"i"(for#220,)
块#222"return n-i
"(,)
if#223"code[0:n-i] in words"(块#219,块#222)
eof#224""(,)
然后#225""(块#222,eof#224)
eof#226""(,)
然后#227""(块#219,eof#226)
块#228"return 0
"(,)
然后#229""(块#217,块#228)
eof#230""(,)
然后#231""(块#228,eof#230)
块#232""(,)
然后#233""(块#213,块#232)
块#234"n=word_in_dict(code,dict_动词)
"(,)
func#235"fun_动词(code)"(块#232,块#234)
块#236""(,)
然后#237""(块#234,块#236)
块#238"pt=NetP(code[0:n])
pt0=NetP(\"动词\").con(0,pt)
return code[n:],pt0
"(,)
if#239"n!=0"(块#236,块#238)
eof#240""(,)
然后#241""(块#238,eof#240)
块#242"return code,None
"(,)
然后#243""(块#236,块#242)
eof#244""(,)
然后#245""(块#242,eof#244)
块#246""(,)
然后#247""(块#232,块#246)
块#248""(,)
func#249"fun_谓语(code)"(块#246,块#248)
块#250"return code,None
"(,)
if#251"code==\"\""(块#248,块#250)
eof#252""(,)
然后#253""(块#250,eof#252)
块#254"code_save=code
sent_type=0
code,状语=fun_状语(code)
"(,)
然后#255""(块#248,块#254)
块#256""(,)
然后#257""(块#254,块#256)
块#258"code,动词=fun_动词(code[1:])
sent_type=1
"(,)
if#259"len(code)>0 and code[0]=='被'"(块#256,块#258)
eof#260""(,)
然后#261""(块#258,eof#260)
块#262"code,动词=fun_动词(code)
"(,)
else#263""(if#259,块#262)
eof#264""(,)
然后#265""(块#262,eof#264)
块#266""(,)
然后#267""(块#256,块#266)
块#268"状语=None
code,动词=fun_动词(code_save)
"(,)
if#269"动词==None"(块#266,块#268)
eof#270""(,)
然后#271""(块#268,eof#270)
块#272""(,)
然后#273""(块#266,块#272)
块#274"return code,None
"(,)
if#275"动词==None"(块#272,块#274)
eof#276""(,)
然后#277""(块#274,eof#276)
块#278"谓语=NetP(\"谓语\")
谓语.m_db[1]=动词.m_db[1]
Karma(谓语.m_db[1])
NetP('的').con(谓语,动词)
"(,)
然后#279""(块#272,块#278)
块#280""(,)
然后#281""(块#278,块#280)
块#282"被=NetP('被').con(None,动词)
NetP('的').con(谓语,被)
"(,)
if#283"sent_type==1"(块#280,块#282)
eof#284""(,)
然后#285""(块#282,eof#284)
块#286""(,)
然后#287""(块#280,块#286)
块#288"NetP('的').con(谓语,状语)
状语.m_db[1].con(动词.m_db[1],0)
"(,)
if#289"状语!=None"(块#286,块#288)
eof#290""(,)
然后#291""(块#288,eof#290)
块#292"return code,谓语
"(,)
然后#293""(块#286,块#292)
eof#294""(,)
然后#295""(块#292,eof#294)
块#296""(,)
然后#297""(块#246,块#296)
块#298""(,)
func#299"fun_主语(code)"(块#296,块#298)
块#300"return code,None
"(,)
if#301"code==\"\""(块#298,块#300)
eof#302""(,)
然后#303""(块#300,eof#302)
块#304"code_save=code
code,定语=fun_定语(code)
"(,)
然后#305""(块#298,块#304)
块#306""(,)
然后#307""(块#304,块#306)
块#308"code,名词=fun_名词(code)
"(,)
if#309"定语!=None"(块#306,块#308)
块#310""(,)
然后#311""(块#308,块#310)
块#312"主语=NetP(\"主语\")
主语.m_db[1]=名词.m_db[1]
Karma(主语.m_db[1])
"(,)
if#313"名词!=None"(块#310,块#312)
块#314""(,)
然后#315""(块#312,块#314)
块#316""(,)
if#317"定语.m_db[1].m_name in dict_动词"(块#314,块#316)
块#318"定语.m_db[1].con(0,名词.m_db[1])
"(,)
if#319"定语.m_db[1].m_db[0]!=None"(块#316,块#318)
eof#320""(,)
然后#321""(块#318,eof#320)
块#322"定语.m_db[1].con(名词.m_db[1],0)
"(,)
else#323""(if#319,块#322)
eof#324""(,)
然后#325""(块#322,eof#324)
eof#326""(,)
然后#327""(块#316,eof#326)
块#328"定语.m_db[1].con(0,名词.m_db[1])
"(,)
if#329"定语.m_db[1].m_db[0]!=None"(块#338,块#328)
eof#330""(,)
然后#331""(块#328,eof#330)
块#332"定语.m_db[1].con(名词.m_db[1],0)
"(,)
else#333""(if#329,块#332)
eof#334""(,)
然后#335""(块#332,eof#334)
eof#336""(,)
然后#337""(块#338,eof#336)
块#338""(,)
elif#339"定语.m_db[1].m_name in dict_副词"(if#317,块#338)
块#340"定语.m_db[1].con(名词.m_db[1],0)
"(,)
else#341""(if#317,块#340)
eof#342""(,)
然后#343""(块#340,eof#342)
块#344"NetP('的').con(主语,定语)
NetP('的').con(主语,名词)
return code,主语
"(,)
然后#345""(块#314,块#344)
eof#346""(,)
然后#347""(块#344,eof#346)
eof#348""(,)
然后#349""(块#310,eof#348)
块#350"code=code_save
code,名词=fun_名词(code)
"(,)
然后#351""(块#306,块#350)
块#352""(,)
然后#353""(块#350,块#352)
块#354"主语=NetP(\"主语\")
主语.m_db[1]=名词.m_db[1]
Karma(主语.m_db[1])
NetP('的').con(主语,名词)
return code,主语
"(,)
if#355"名词!=None"(块#352,块#354)
eof#356""(,)
然后#357""(块#354,eof#356)
块#358"code=code_save
return code,None
"(,)
然后#359""(块#352,块#358)
eof#360""(,)
然后#361""(块#358,eof#360)
块#362""(,)
然后#363""(块#296,块#362)
块#364"pat=re.sub('%\[句子[^\[^\]]*\]',r'(.+)',pat0)
result=re.match(pat,code)
"(,)
func#365"sent_pat(code,pat0)"(块#362,块#364)
块#366""(,)
然后#367""(块#364,块#366)
块#368"return False
"(,)
if#369"result==None"(块#366,块#368)
eof#370""(,)
然后#371""(块#368,eof#370)
块#372"return True
"(,)
else#373""(if#369,块#372)
eof#374""(,)
然后#375""(块#372,eof#374)
eof#376""(,)
然后#377""(块#366,eof#376)
块#378""(,)
然后#379""(块#362,块#378)
块#380""(,)
func#381"fun_复句(code)"(块#378,块#380)
块#382"return code,None
"(,)
if#383"code==\"\""(块#380,块#382)
eof#384""(,)
然后#385""(块#382,eof#384)
块#386"code_save=code
"(,)
然后#387""(块#380,块#386)
块#388""(,)
然后#389""(块#386,块#388)
块#390"code,复句=fun_因果复句(code)
return code,复句
"(,)
if#391"sent_pat(code,\"因为%[句子], 所以%[句子]\")"(块#388,块#390)
eof#392""(,)
然后#393""(块#390,eof#392)
eof#394""(,)
然后#395""(块#396,eof#394)
块#396"code,复句=fun_状语复句(code)
return code,复句
"(,)
elif#397"sent_pat(code,\"当%[句子], %[句子]\")"(if#391,块#396)
eof#398""(,)
然后#399""(块#400,eof#398)
块#400"code,复句=fun_然后复句(code)
return code,复句
"(,)
elif#401"sent_pat(code,\"%[句子], 然后, %[句子]\")"(elif#397,块#400)
块#402"return code,None
"(,)
然后#403""(块#388,块#402)
eof#404""(,)
然后#405""(块#402,eof#404)
块#406""(,)
然后#407""(块#378,块#406)
块#408""(,)
func#409"fun_因果复句(code)"(块#406,块#408)
块#410"return code,None
"(,)
if#411"code==\"\""(块#408,块#410)
eof#412""(,)
然后#413""(块#410,eof#412)
块#414"code_save=code
"(,)
然后#415""(块#408,块#414)
块#416""(,)
然后#417""(块#414,块#416)
块#418"code,句子1=fun_句子(code[2:])
"(,)
if#419"code[0:2]=='因为'"(块#416,块#418)
eof#420""(,)
然后#421""(块#418,eof#420)
块#422"return code_save,None
"(,)
else#423""(if#419,块#422)
eof#424""(,)
然后#425""(块#422,eof#424)
块#426""(,)
然后#427""(块#416,块#426)
块#428"code,句子2=fun_句子(code[4:])
"(,)
if#429"code[0:4]==', 所以'"(块#426,块#428)
eof#430""(,)
然后#431""(块#428,eof#430)
块#432"return code_save,None
"(,)
else#433""(if#429,块#432)
eof#434""(,)
然后#435""(块#432,eof#434)
块#436""(,)
然后#437""(块#426,块#436)
块#438"return code_save,None
"(,)
if#439"句子1==None or 句子2==None"(块#436,块#438)
eof#440""(,)
然后#441""(块#438,eof#440)
块#442"因果句=NetP('因果复句')
因为=NetP('因为').con(因果句,句子1)
所以=NetP('所以').con(因果句,句子2)
NetP('的').con(因果句,句子1)
NetP('的').con(因果句,句子2)
return code,因果句
"(,)
然后#443""(块#436,块#442)
eof#444""(,)
然后#445""(块#442,eof#444)
块#446""(,)
然后#447""(块#406,块#446)
块#448""(,)
func#449"fun_状语复句(code)"(块#446,块#448)
块#450"return code,None
"(,)
if#451"code==\"\""(块#448,块#450)
eof#452""(,)
然后#453""(块#450,eof#452)
块#454"code_save=code
"(,)
然后#455""(块#448,块#454)
块#456""(,)
然后#457""(块#454,块#456)
块#458"code,句子1=fun_句子(code[1:])
"(,)
if#459"code[0]=='当'"(块#456,块#458)
eof#460""(,)
然后#461""(块#458,eof#460)
块#462"return code_save,None
"(,)
else#463""(if#459,块#462)
eof#464""(,)
然后#465""(块#462,eof#464)
块#466""(,)
然后#467""(块#456,块#466)
块#468"code,句子2=fun_句子(code[2:])
"(,)
if#469"code[0:2]==', '"(块#466,块#468)
eof#470""(,)
然后#471""(块#468,eof#470)
块#472"return code_save,None
"(,)
else#473""(if#469,块#472)
eof#474""(,)
然后#475""(块#472,eof#474)
块#476""(,)
然后#477""(块#466,块#476)
块#478"return code_save,None
"(,)
if#479"句子1==None or 句子2==None"(块#476,块#478)
eof#480""(,)
然后#481""(块#478,eof#480)
块#482"复句=NetP('状语复句')
条件=NetP('条件').con(复句,句子1)
结果=NetP('结果').con(复句,句子2)
NetP('的').con(复句,句子1)
NetP('的').con(复句,句子2)
return code,复句
"(,)
然后#483""(块#476,块#482)
eof#484""(,)
然后#485""(块#482,eof#484)
块#486""(,)
然后#487""(块#446,块#486)
块#488""(,)
func#489"fun_然后复句(code)"(块#486,块#488)
块#490"return code,None
"(,)
if#491"code==\"\""(块#488,块#490)
eof#492""(,)
然后#493""(块#490,eof#492)
块#494"code_save=code
code,句子1=fun_单句(code)
"(,)
然后#495""(块#488,块#494)
块#496""(,)
然后#497""(块#494,块#496)
块#498"code,句子2=fun_单句(code[6:])
"(,)
if#499"code[0:6]==', 然后, '"(块#496,块#498)
eof#500""(,)
然后#501""(块#498,eof#500)
块#502"return code_save,None
"(,)
else#503""(if#499,块#502)
eof#504""(,)
然后#505""(块#502,eof#504)
块#506""(,)
然后#507""(块#496,块#506)
块#508"return code_save,None
"(,)
if#509"句子1==None or 句子2==None"(块#506,块#508)
eof#510""(,)
然后#511""(块#508,eof#510)
块#512"复句=NetP('然后复句')
之前=NetP('之前').con(复句,句子1)
之后=NetP('之后').con(复句,句子2)
NetP('的').con(复句,句子1)
NetP('的').con(复句,句子2)
return code,复句
"(,)
然后#513""(块#506,块#512)
eof#514""(,)
然后#515""(块#512,eof#514)
块#516""(,)
然后#517""(块#486,块#516)
块#518""(,)
func#519"fun_句子(code)"(块#516,块#518)
块#520"return code,None
"(,)
if#521"code==\"\""(块#518,块#520)
eof#522""(,)
然后#523""(块#520,eof#522)
块#524"code_save=code
global word_order
word_order=0
code,句子=fun_复句(code)
"(,)
然后#525""(块#518,块#524)
块#526""(,)
然后#527""(块#524,块#526)
块#528"return code,句子
"(,)
if#529"句子!=None"(块#526,块#528)
eof#530""(,)
然后#531""(块#528,eof#530)
块#532""(,)
然后#533""(块#526,块#532)
块#534"code,句子=fun_被动句(code)
"(,)
块#535"code=code_save
句子=None
"(,)
try#536""(块#532,块#534)
except#537""(try#536,块#535)
eof#538""(,)
然后#539""(块#534,eof#538)
eof#540""(,)
然后#541""(块#535,eof#540)
块#542""(,)
然后#543""(块#532,块#542)
块#544"return code,句子
"(,)
if#545"句子!=None"(块#542,块#544)
eof#546""(,)
然后#547""(块#544,eof#546)
块#548""(,)
然后#549""(块#542,块#548)
块#550"code,句子=fun_把字句(code)
"(,)
块#551"code=code_save
句子=None
"(,)
try#552""(块#548,块#550)
except#553""(try#552,块#551)
eof#554""(,)
然后#555""(块#550,eof#554)
eof#556""(,)
然后#557""(块#551,eof#556)
块#558""(,)
然后#559""(块#548,块#558)
块#560"return code,句子
"(,)
if#561"句子!=None"(块#558,块#560)
eof#562""(,)
然后#563""(块#560,eof#562)
块#564""(,)
然后#565""(块#558,块#564)
块#566"code,句子=fun_普通句(code)
"(,)
块#567"code=code_save
句子=None
"(,)
try#568""(块#564,块#566)
except#569""(try#568,块#567)
eof#570""(,)
然后#571""(块#566,eof#570)
eof#572""(,)
然后#573""(块#567,eof#572)
块#574"return code,句子
"(,)
然后#575""(块#564,块#574)
eof#576""(,)
然后#577""(块#574,eof#576)
块#578""(,)
然后#579""(块#516,块#578)
块#580""(,)
func#581"fun_单句(code)"(块#578,块#580)
块#582"return code,None
"(,)
if#583"code==\"\""(块#580,块#582)
eof#584""(,)
然后#585""(块#582,eof#584)
块#586"code_save=code
global word_order
word_order=0
"(,)
然后#587""(块#580,块#586)
块#588""(,)
然后#589""(块#586,块#588)
块#590"code,句子=fun_被动句(code)
"(,)
块#591"code=code_save
句子=None
"(,)
try#592""(块#588,块#590)
except#593""(try#592,块#591)
eof#594""(,)
然后#595""(块#590,eof#594)
eof#596""(,)
然后#597""(块#591,eof#596)
块#598""(,)
然后#599""(块#588,块#598)
块#600"return code,句子
"(,)
if#601"句子!=None"(块#598,块#600)
eof#602""(,)
然后#603""(块#600,eof#602)
块#604""(,)
然后#605""(块#598,块#604)
块#606"code,句子=fun_把字句(code)
"(,)
块#607"code=code_save
句子=None
"(,)
try#608""(块#604,块#606)
except#609""(try#608,块#607)
eof#610""(,)
然后#611""(块#606,eof#610)
eof#612""(,)
然后#613""(块#607,eof#612)
块#614""(,)
然后#615""(块#604,块#614)
块#616"return code,句子
"(,)
if#617"句子!=None"(块#614,块#616)
eof#618""(,)
然后#619""(块#616,eof#618)
块#620""(,)
然后#621""(块#614,块#620)
块#622"code,句子=fun_普通句(code)
"(,)
块#623"code=code_save
句子=None
"(,)
try#624""(块#620,块#622)
except#625""(try#624,块#623)
eof#626""(,)
然后#627""(块#622,eof#626)
eof#628""(,)
然后#629""(块#623,eof#628)
块#630"return code,句子
"(,)
然后#631""(块#620,块#630)
eof#632""(,)
然后#633""(块#630,eof#632)
块#634""(,)
然后#635""(块#578,块#634)
块#636""(,)
func#637"fun_普通句(code)"(块#634,块#636)
块#638"return code,None
"(,)
if#639"code==\"\""(块#636,块#638)
eof#640""(,)
然后#641""(块#638,eof#640)
块#642"code_save=code
code1,介宾短语=fun_介宾短语(code)
"(,)
然后#643""(块#636,块#642)
块#644""(,)
然后#645""(块#642,块#644)
块#646""(,)
if#647"介宾短语!=None"(块#644,块#646)
块#648"code=code1[2:]
"(,)
if#649"code1[0:2]==', '"(块#646,块#648)
eof#650""(,)
然后#651""(块#648,eof#650)
块#652"介宾短语=None
"(,)
else#653""(if#649,块#652)
eof#654""(,)
然后#655""(块#652,eof#654)
eof#656""(,)
然后#657""(块#646,eof#656)
块#658"code1,主语=fun_主语(code)
code1,谓语=fun_谓语(code1)
"(,)
然后#659""(块#644,块#658)
块#660""(,)
然后#661""(块#658,块#660)
块#662"code=code1
"(,)
if#663"谓语!=None"(块#660,块#662)
eof#664""(,)
然后#665""(块#662,eof#664)
块#666"主语=None
code,谓语=fun_谓语(code)
"(,)
else#667""(if#663,块#666)
eof#668""(,)
然后#669""(块#666,eof#668)
块#670"code,宾语=fun_宾语(code)
"(,)
然后#671""(块#660,块#670)
块#672""(,)
然后#673""(块#670,块#672)
块#674"return code,None
"(,)
if#675"谓语==None"(块#672,块#674)
eof#676""(,)
然后#677""(块#674,eof#676)
块#678"句子=NetP(\"句子\")
句子.m_db[1]=谓语.m_db[1]
NetP('的').con(句子,谓语)
"(,)
然后#679""(块#672,块#678)
块#680""(,)
然后#681""(块#678,块#680)
块#682"介宾短语.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,介宾短语)
NetP('的').con(谓语,介宾短语)
"(,)
if#683"介宾短语!=None"(块#680,块#682)
eof#684""(,)
然后#685""(块#682,eof#684)
块#686""(,)
然后#687""(块#680,块#686)
块#688"谓语.m_db[1].con(主语.m_db[1],0)
NetP('的').con(句子,主语)
"(,)
if#689"主语!=None"(块#686,块#688)
eof#690""(,)
然后#691""(块#688,eof#690)
块#692""(,)
然后#693""(块#686,块#692)
块#694"谓语.m_db[1].con(0,宾语.m_db[1])
NetP('的').con(句子,宾语)
"(,)
if#695"宾语!=None"(块#692,块#694)
eof#696""(,)
然后#697""(块#694,eof#696)
块#698"code1,副词=fun_副词(code)
"(,)
然后#699""(块#692,块#698)
块#700""(,)
然后#701""(块#698,块#700)
块#702"副词.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,副词)
NetP('的').con(谓语,副词)
return code1,句子
"(,)
if#703"副词!=None"(块#700,块#702)
eof#704""(,)
然后#705""(块#702,eof#704)
块#706"code1,补语=fun_补语(code)
"(,)
然后#707""(块#700,块#706)
块#708""(,)
然后#709""(块#706,块#708)
块#710"补语.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,补语)
NetP('的').con(谓语,补语)
return code1,句子
"(,)
if#711"补语!=None"(块#708,块#710)
eof#712""(,)
然后#713""(块#710,eof#712)
块#714"return code,句子
"(,)
然后#715""(块#708,块#714)
eof#716""(,)
然后#717""(块#714,eof#716)
块#718""(,)
然后#719""(块#634,块#718)
块#720""(,)
func#721"fun_被动句(code)"(块#718,块#720)
块#722"return code,None
"(,)
if#723"code==\"\""(块#720,块#722)
eof#724""(,)
然后#725""(块#722,eof#724)
块#726"code_save=code
code1,状语=fun_介宾短语(code)
"(,)
然后#727""(块#720,块#726)
块#728""(,)
然后#729""(块#726,块#728)
块#730""(,)
if#731"状语!=None"(块#728,块#730)
块#732"code=code1[2:]
"(,)
if#733"code1[0:2]==', '"(块#730,块#732)
eof#734""(,)
然后#735""(块#732,eof#734)
块#736"状语=None
"(,)
else#737""(if#733,块#736)
eof#738""(,)
然后#739""(块#736,eof#738)
eof#740""(,)
然后#741""(块#730,eof#740)
块#742"code,宾语=fun_宾语(code)
code,状语2=fun_状语(code)
"(,)
然后#743""(块#728,块#742)
块#744""(,)
然后#745""(块#742,块#744)
块#746"return code_save,None
"(,)
if#747"code[0]!='被'"(块#744,块#746)
eof#748""(,)
然后#749""(块#746,eof#748)
块#750"code=code[1:]
"(,)
else#751""(if#747,块#750)
eof#752""(,)
然后#753""(块#750,eof#752)
块#754"code,主语=fun_主语(code)
code,谓语=fun_谓语(code)
"(,)
然后#755""(块#744,块#754)
块#756""(,)
然后#757""(块#754,块#756)
块#758"return code,None
"(,)
if#759"谓语==None"(块#756,块#758)
eof#760""(,)
然后#761""(块#758,eof#760)
块#762"句子=NetP(\"句子\")
句子.m_db[1]=谓语.m_db[1]
NetP('的').con(句子,谓语)
NetP('被').con(谓语,谓语.m_db[1])
"(,)
然后#763""(块#756,块#762)
块#764""(,)
然后#765""(块#762,块#764)
块#766"状语.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,状语)
NetP('的').con(谓语,状语)
"(,)
if#767"状语!=None"(块#764,块#766)
eof#768""(,)
然后#769""(块#766,eof#768)
块#770""(,)
然后#771""(块#764,块#770)
块#772"状语2.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,状语2)
NetP('的').con(谓语,状语2)
状语2.m_name='状语'
"(,)
if#773"状语2!=None"(块#770,块#772)
eof#774""(,)
然后#775""(块#772,eof#774)
块#776""(,)
然后#777""(块#770,块#776)
块#778"谓语.m_db[1].con(主语.m_db[1],0)
NetP('的').con(句子,主语)
"(,)
if#779"主语!=None"(块#776,块#778)
eof#780""(,)
然后#781""(块#778,eof#780)
块#782""(,)
然后#783""(块#776,块#782)
块#784"谓语.m_db[1].con(0,宾语.m_db[1])
NetP('的').con(句子,宾语)
"(,)
if#785"宾语!=None"(块#782,块#784)
eof#786""(,)
然后#787""(块#784,eof#786)
块#788"code1,副词=fun_副词(code)
"(,)
然后#789""(块#782,块#788)
块#790""(,)
然后#791""(块#788,块#790)
块#792"副词.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,副词)
NetP('的').con(谓语,副词)
return code1,句子
"(,)
if#793"副词!=None"(块#790,块#792)
eof#794""(,)
然后#795""(块#792,eof#794)
块#796"code1,补语=fun_补语(code)
"(,)
然后#797""(块#790,块#796)
块#798""(,)
然后#799""(块#796,块#798)
块#800"补语.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,补语)
NetP('的').con(谓语,补语)
return code1,句子
"(,)
if#801"补语!=None"(块#798,块#800)
eof#802""(,)
然后#803""(块#800,eof#802)
块#804"return code,句子
"(,)
然后#805""(块#798,块#804)
eof#806""(,)
然后#807""(块#804,eof#806)
块#808""(,)
然后#809""(块#718,块#808)
块#810""(,)
func#811"fun_把字句(code)"(块#808,块#810)
块#812"return code,None
"(,)
if#813"code==\"\""(块#810,块#812)
eof#814""(,)
然后#815""(块#812,eof#814)
块#816"code_save=code
code1,状语=fun_介宾短语(code)
"(,)
然后#817""(块#810,块#816)
块#818""(,)
然后#819""(块#816,块#818)
块#820""(,)
if#821"状语!=None"(块#818,块#820)
块#822"code=code1[2:]
"(,)
if#823"code1[0:2]==', '"(块#820,块#822)
eof#824""(,)
然后#825""(块#822,eof#824)
块#826"状语=None
"(,)
else#827""(if#823,块#826)
eof#828""(,)
然后#829""(块#826,eof#828)
eof#830""(,)
然后#831""(块#820,eof#830)
块#832"code,主语=fun_主语(code)
code,状语2=fun_状语(code)
"(,)
然后#833""(块#818,块#832)
块#834""(,)
然后#835""(块#832,块#834)
块#836"return code_save,None
"(,)
if#837"code[0]!='把' and code[0]!='将'"(块#834,块#836)
eof#838""(,)
然后#839""(块#836,eof#838)
块#840"code=code[1:]
"(,)
else#841""(if#837,块#840)
eof#842""(,)
然后#843""(块#840,eof#842)
块#844"code,宾语=fun_宾语(code)
code,谓语=fun_谓语(code)
"(,)
然后#845""(块#834,块#844)
块#846""(,)
然后#847""(块#844,块#846)
块#848"return code,None
"(,)
if#849"谓语==None"(块#846,块#848)
eof#850""(,)
然后#851""(块#848,eof#850)
块#852"句子=NetP(\"句子\")
句子.m_db[1]=谓语.m_db[1]
NetP('的').con(句子,谓语)
NetP('把').con(谓语,谓语.m_db[1])
"(,)
然后#853""(块#846,块#852)
块#854""(,)
然后#855""(块#852,块#854)
块#856"状语.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,状语)
NetP('的').con(谓语,状语)
"(,)
if#857"状语!=None"(块#854,块#856)
eof#858""(,)
然后#859""(块#856,eof#858)
块#860""(,)
然后#861""(块#854,块#860)
块#862"状语2.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,状语2)
NetP('的').con(谓语,状语2)
状语2.m_name='状语'
"(,)
if#863"状语2!=None"(块#860,块#862)
eof#864""(,)
然后#865""(块#862,eof#864)
块#866""(,)
然后#867""(块#860,块#866)
块#868"谓语.m_db[1].con(主语.m_db[1],0)
NetP('的').con(句子,主语)
"(,)
if#869"主语!=None"(块#866,块#868)
eof#870""(,)
然后#871""(块#868,eof#870)
块#872""(,)
然后#873""(块#866,块#872)
块#874"谓语.m_db[1].con(0,宾语.m_db[1])
NetP('的').con(句子,宾语)
"(,)
if#875"宾语!=None"(块#872,块#874)
eof#876""(,)
然后#877""(块#874,eof#876)
块#878"code1,副词=fun_副词(code)
"(,)
然后#879""(块#872,块#878)
块#880""(,)
然后#881""(块#878,块#880)
块#882"副词.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,副词)
NetP('的').con(谓语,副词)
return code1,句子
"(,)
if#883"副词!=None"(块#880,块#882)
eof#884""(,)
然后#885""(块#882,eof#884)
块#886"code1,补语=fun_补语(code)
"(,)
然后#887""(块#880,块#886)
块#888""(,)
然后#889""(块#886,块#888)
块#890"补语.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,补语)
NetP('的').con(谓语,补语)
return code1,句子
"(,)
if#891"补语!=None"(块#888,块#890)
eof#892""(,)
然后#893""(块#890,eof#892)
块#894"return code,句子
"(,)
然后#895""(块#888,块#894)
eof#896""(,)
然后#897""(块#894,eof#896)
块#898""(,)
然后#899""(块#808,块#898)
块#900""(,)
func#901"fun_宾语(code)"(块#898,块#900)
块#902"return code,None
"(,)
if#903"code==\"\""(块#900,块#902)
eof#904""(,)
然后#905""(块#902,eof#904)
块#906"code_save=code
code,定语=fun_定语(code)
"(,)
然后#907""(块#900,块#906)
块#908""(,)
然后#909""(块#906,块#908)
块#910"code,名词=fun_名词(code)
"(,)
if#911"定语!=None"(块#908,块#910)
块#912""(,)
然后#913""(块#910,块#912)
块#914"宾语=NetP(\"宾语\")
宾语.m_db[1]=名词.m_db[1]
Karma(宾语.m_db[1])
"(,)
if#915"名词!=None"(块#912,块#914)
块#916""(,)
然后#917""(块#914,块#916)
块#918""(,)
if#919"定语.m_db[1].m_name in dict_动词"(块#916,块#918)
块#920"定语.m_db[1].con(0,名词.m_db[1])
"(,)
if#921"定语.m_db[1].m_db[0]!=None"(块#918,块#920)
eof#922""(,)
然后#923""(块#920,eof#922)
块#924"定语.m_db[1].con(名词.m_db[1],0)
"(,)
else#925""(if#921,块#924)
eof#926""(,)
然后#927""(块#924,eof#926)
eof#928""(,)
然后#929""(块#918,eof#928)
块#930"定语.m_db[1].con(0,名词.m_db[1])
"(,)
if#931"定语.m_db[1].m_db[0]!=None"(块#940,块#930)
eof#932""(,)
然后#933""(块#930,eof#932)
块#934"定语.m_db[1].con(名词.m_db[1],0)
"(,)
else#935""(if#931,块#934)
eof#936""(,)
然后#937""(块#934,eof#936)
eof#938""(,)
然后#939""(块#940,eof#938)
块#940""(,)
elif#941"定语.m_db[1].m_name in dict_副词"(if#919,块#940)
块#942"定语.m_db[1].con(名词.m_db[1],0)
"(,)
else#943""(if#919,块#942)
eof#944""(,)
然后#945""(块#942,eof#944)
块#946"NetP('的').con(宾语,定语)
NetP('的').con(宾语,名词)
return code,宾语
"(,)
然后#947""(块#916,块#946)
eof#948""(,)
然后#949""(块#946,eof#948)
eof#950""(,)
然后#951""(块#912,eof#950)
块#952"code=code_save
code,名词=fun_名词(code)
"(,)
然后#953""(块#908,块#952)
块#954""(,)
然后#955""(块#952,块#954)
块#956"宾语=NetP(\"宾语\")
宾语.m_db[1]=名词.m_db[1]
Karma(宾语.m_db[1])
NetP('的').con(宾语,名词)
return code,宾语
"(,)
if#957"名词!=None"(块#954,块#956)
eof#958""(,)
然后#959""(块#956,eof#958)
块#960"code=code_save
return code,None
"(,)
然后#961""(块#954,块#960)
eof#962""(,)
然后#963""(块#960,eof#962)
块#964""(,)
然后#965""(块#898,块#964)
块#966""(,)
func#967"fun_定语(code)"(块#964,块#966)
块#968"return code,None
"(,)
if#969"code==\"\""(块#966,块#968)
eof#970""(,)
然后#971""(块#968,eof#970)
块#972"code_save=code
code,短语=fun_短语(code)
"(,)
然后#973""(块#966,块#972)
块#974""(,)
然后#975""(块#972,块#974)
块#976"print(短语,code)
code,助词=fun_dict(code,{'的'},'助词')
"(,)
if#977"短语!=None"(块#974,块#976)
块#978""(,)
然后#979""(块#976,块#978)
块#980"定语=NetP(\"定语\")
定语.m_db[1]=短语.m_db[1]
NetP('的').con(定语,短语)
NetP('的').con(定语,助词)
return code,定语
"(,)
if#981"助词!=None"(块#978,块#980)
eof#982""(,)
然后#983""(块#980,eof#982)
eof#984""(,)
然后#985""(块#978,eof#984)
块#986"code=code_save
code,形容词=fun_形容词(code)
"(,)
然后#987""(块#974,块#986)
块#988""(,)
然后#989""(块#986,块#988)
块#990"定语=NetP(\"定语\")
定语.m_db[1]=形容词.m_db[1]
NetP('的').con(定语,形容词)
code,助词=fun_dict(code,{'的'},'助词')
"(,)
if#991"形容词!=None"(块#988,块#990)
块#992""(,)
然后#993""(块#990,块#992)
块#994"NetP('的').con(定语,助词)
"(,)
if#995"助词!=None"(块#992,块#994)
eof#996""(,)
然后#997""(块#994,eof#996)
块#998"return code,定语
"(,)
然后#999""(块#992,块#998)
eof#1000""(,)
然后#1001""(块#998,eof#1000)
块#1002"code=code_save
code,数量词=fun_数量词(code)
"(,)
然后#1003""(块#988,块#1002)
块#1004""(,)
然后#1005""(块#1002,块#1004)
块#1006"定语=NetP(\"定语\")
定语.m_db[1]=数量词.m_db[1]
Karma(定语.m_db[1])
NetP('的').con(定语,数量词)
return code,定语
"(,)
if#1007"数量词!=None"(块#1004,块#1006)
eof#1008""(,)
然后#1009""(块#1006,eof#1008)
块#1010"code=code_save
code,名词=fun_名词(code)
"(,)
然后#1011""(块#1004,块#1010)
块#1012""(,)
然后#1013""(块#1010,块#1012)
块#1014"code,助词=fun_dict(code,{'的'},'助词')
"(,)
if#1015"名词!=None"(块#1012,块#1014)
块#1016""(,)
然后#1017""(块#1014,块#1016)
块#1018"定语=NetP(\"定语\")
定语.m_db[1]=名词.m_db[1]
Karma(定语.m_db[1])
NetP('的').con(定语,名词)
NetP('的').con(定语,助词)
return code,定语
"(,)
if#1019"助词!=None"(块#1016,块#1018)
eof#1020""(,)
然后#1021""(块#1018,eof#1020)
eof#1022""(,)
然后#1023""(块#1016,eof#1022)
块#1024"code=code_save
return code,None
"(,)
然后#1025""(块#1012,块#1024)
eof#1026""(,)
然后#1027""(块#1024,eof#1026)
块#1028""(,)
然后#1029""(块#964,块#1028)
块#1030""(,)
func#1031"fun_状语(code)"(块#1028,块#1030)
块#1032"return code,None
"(,)
if#1033"code==\"\""(块#1030,块#1032)
eof#1034""(,)
然后#1035""(块#1032,eof#1034)
块#1036"code_save=code
code,并列短语=fun_并列短语(code)
"(,)
然后#1037""(块#1030,块#1036)
块#1038""(,)
然后#1039""(块#1036,块#1038)
块#1040"状语=NetP(\"状语\")
状语.m_db[1]=并列短语.m_db[1]
NetP('的').con(状语,并列短语)
return code,状语
"(,)
if#1041"并列短语!=None"(块#1038,块#1040)
eof#1042""(,)
然后#1043""(块#1040,eof#1042)
块#1044"code=code_save
code,介宾短语=fun_介宾短语(code)
"(,)
然后#1045""(块#1038,块#1044)
块#1046""(,)
然后#1047""(块#1044,块#1046)
块#1048"状语=NetP(\"状语\")
状语.m_db[1]=介宾短语.m_db[1]
NetP('的').con(状语,介宾短语)
return code,状语
"(,)
if#1049"介宾短语!=None"(块#1046,块#1048)
eof#1050""(,)
然后#1051""(块#1048,eof#1050)
块#1052"code=code_save
code,副词=fun_副词(code)
"(,)
然后#1053""(块#1046,块#1052)
块#1054""(,)
然后#1055""(块#1052,块#1054)
块#1056"状语=NetP(\"状语\")
状语.m_db[1]=副词.m_db[1]
NetP('的').con(状语,副词)
return code,状语
"(,)
if#1057"副词!=None"(块#1054,块#1056)
eof#1058""(,)
然后#1059""(块#1056,eof#1058)
块#1060"code=code_save
code,形容词=fun_形容词(code)
"(,)
然后#1061""(块#1054,块#1060)
块#1062""(,)
然后#1063""(块#1060,块#1062)
块#1064"状语=NetP(\"状语\")
状语.m_db[1]=形容词.m_db[1]
NetP('的').con(状语,形容词)
return code,状语
"(,)
if#1065"形容词!=None"(块#1062,块#1064)
eof#1066""(,)
然后#1067""(块#1064,eof#1066)
块#1068"code=code_save
code,代词=fun_代词(code)
"(,)
然后#1069""(块#1062,块#1068)
块#1070""(,)
然后#1071""(块#1068,块#1070)
块#1072"状语=NetP(\"状语\")
状语.m_db[1]=代词.m_db[1]
NetP('的').con(状语,代词)
return code,状语
"(,)
if#1073"代词!=None"(块#1070,块#1072)
eof#1074""(,)
然后#1075""(块#1072,eof#1074)
块#1076"code=code_save
return code,None
"(,)
然后#1077""(块#1070,块#1076)
eof#1078""(,)
然后#1079""(块#1076,eof#1078)
块#1080""(,)
然后#1081""(块#1028,块#1080)
块#1082""(,)
func#1083"fun_补语(code)"(块#1080,块#1082)
块#1084"return code,None
"(,)
if#1085"code==\"\""(块#1082,块#1084)
eof#1086""(,)
然后#1087""(块#1084,eof#1086)
块#1088"code_save=code
code,并列短语=fun_并列短语(code)
"(,)
然后#1089""(块#1082,块#1088)
块#1090""(,)
然后#1091""(块#1088,块#1090)
块#1092"补语=NetP(\"补语\")
补语.m_db[1]=并列短语.m_db[1]
NetP('的').con(补语,并列短语)
return code,补语
"(,)
if#1093"并列短语!=None"(块#1090,块#1092)
eof#1094""(,)
然后#1095""(块#1092,eof#1094)
块#1096"code=code_save
code,介宾短语=fun_介宾短语(code)
"(,)
然后#1097""(块#1090,块#1096)
块#1098""(,)
然后#1099""(块#1096,块#1098)
块#1100"补语=NetP(\"补语\")
补语.m_db[1]=介宾短语.m_db[1]
NetP('的').con(补语,介宾短语)
return code,补语
"(,)
if#1101"介宾短语!=None"(块#1098,块#1100)
eof#1102""(,)
然后#1103""(块#1100,eof#1102)
块#1104"code=code_save
code,述宾短语=fun_述宾短语(code)
"(,)
然后#1105""(块#1098,块#1104)
块#1106""(,)
然后#1107""(块#1104,块#1106)
块#1108"补语=NetP(\"补语\")
补语.m_db[1]=述宾短语.m_db[1]
NetP('的').con(补语,述宾短语)
return code,补语
"(,)
if#1109"述宾短语!=None"(块#1106,块#1108)
eof#1110""(,)
然后#1111""(块#1108,eof#1110)
块#1112"code=code_save
code,形容词=fun_形容词(code)
"(,)
然后#1113""(块#1106,块#1112)
块#1114""(,)
然后#1115""(块#1112,块#1114)
块#1116"补语=NetP(\"补语\")
补语.m_db[1]=形容词.m_db[1]
NetP('的').con(补语,形容词)
return code,补语
"(,)
if#1117"形容词!=None"(块#1114,块#1116)
eof#1118""(,)
然后#1119""(块#1116,eof#1118)
块#1120"code=code_save
code,数量词=fun_数量词(code)
"(,)
然后#1121""(块#1114,块#1120)
块#1122""(,)
然后#1123""(块#1120,块#1122)
块#1124"补语=NetP(\"补语\")
补语.m_db[1]=数量词.m_db[1]
NetP('的').con(补语,数量词)
return code,补语
"(,)
if#1125"数量词!=None"(块#1122,块#1124)
eof#1126""(,)
然后#1127""(块#1124,eof#1126)
块#1128"code=code_save
code,代词=fun_代词(code)
"(,)
然后#1129""(块#1122,块#1128)
块#1130""(,)
然后#1131""(块#1128,块#1130)
块#1132"补语=NetP(\"补语\")
补语.m_db[1]=代词.m_db[1]
NetP('的').con(补语,代词)
return code,补语
"(,)
if#1133"代词!=None"(块#1130,块#1132)
eof#1134""(,)
然后#1135""(块#1132,eof#1134)
块#1136"code=code_save
return code,None
"(,)
然后#1137""(块#1130,块#1136)
eof#1138""(,)
然后#1139""(块#1136,eof#1138)
块#1140""(,)
然后#1141""(块#1080,块#1140)
块#1142""(,)
func#1143"fun_短语(code)"(块#1140,块#1142)
块#1144"return code,None
"(,)
if#1145"code==\"\""(块#1142,块#1144)
eof#1146""(,)
然后#1147""(块#1144,eof#1146)
块#1148"code_save=code
code,并列短语=fun_并列短语(code)
"(,)
然后#1149""(块#1142,块#1148)
块#1150""(,)
然后#1151""(块#1148,块#1150)
块#1152"print('并列短语',code)
return code,并列短语
"(,)
if#1153"并列短语!=None"(块#1150,块#1152)
eof#1154""(,)
然后#1155""(块#1152,eof#1154)
块#1156"code=code_save
code,偏正短语=fun_偏正短语(code)
"(,)
然后#1157""(块#1150,块#1156)
块#1158""(,)
然后#1159""(块#1156,块#1158)
块#1160"print('偏正短语',code)
return code,偏正短语
"(,)
if#1161"偏正短语!=None"(块#1158,块#1160)
eof#1162""(,)
然后#1163""(块#1160,eof#1162)
块#1164"code=code_save
code,介宾短语=fun_介宾短语(code)
"(,)
然后#1165""(块#1158,块#1164)
块#1166""(,)
然后#1167""(块#1164,块#1166)
块#1168"print('介宾短语',code)
return code,介宾短语
"(,)
if#1169"介宾短语!=None"(块#1166,块#1168)
eof#1170""(,)
然后#1171""(块#1168,eof#1170)
块#1172"code=code_save
code,述宾短语=fun_述宾短语(code)
"(,)
然后#1173""(块#1166,块#1172)
块#1174""(,)
然后#1175""(块#1172,块#1174)
块#1176"return code,述宾短语
"(,)
if#1177"述宾短语!=None"(块#1174,块#1176)
eof#1178""(,)
然后#1179""(块#1176,eof#1178)
块#1180"code=code_save
code,述补短语=fun_述补短语(code)
"(,)
然后#1181""(块#1174,块#1180)
块#1182""(,)
然后#1183""(块#1180,块#1182)
块#1184"print('述补短语',code)
return code,述补短语
"(,)
if#1185"述补短语!=None"(块#1182,块#1184)
eof#1186""(,)
然后#1187""(块#1184,eof#1186)
块#1188"code=code_save
code,主谓短语=fun_主谓短语(code)
"(,)
然后#1189""(块#1182,块#1188)
块#1190""(,)
然后#1191""(块#1188,块#1190)
块#1192"print('主谓短语',code)
return code,主谓短语
"(,)
if#1193"主谓短语!=None"(块#1190,块#1192)
eof#1194""(,)
然后#1195""(块#1192,eof#1194)
块#1196"code=code_save
return code,None
"(,)
然后#1197""(块#1190,块#1196)
eof#1198""(,)
然后#1199""(块#1196,eof#1198)
块#1200""(,)
然后#1201""(块#1140,块#1200)
块#1202""(,)
func#1203"fun_并列短语(code)"(块#1200,块#1202)
块#1204"return code,None
"(,)
if#1205"code==\"\""(块#1202,块#1204)
eof#1206""(,)
然后#1207""(块#1204,eof#1206)
块#1208"code_save=code
code,形容词=fun_形容词(code)
"(,)
然后#1209""(块#1202,块#1208)
块#1210""(,)
然后#1211""(块#1208,块#1210)
块#1212"code,连词=fun_连词(code)
"(,)
if#1213"形容词!=None"(块#1210,块#1212)
块#1214""(,)
然后#1215""(块#1212,块#1214)
块#1216"code,并列短语=fun_并列短语(code)
"(,)
if#1217"连词!=None"(块#1214,块#1216)
块#1218""(,)
然后#1219""(块#1216,块#1218)
块#1220"并列短语_0=NetP(\"并列短语\")
连词.m_db[1].con(形容词.m_db[1],并列短语.m_db[1])
并列短语_0.m_db[1]=形容词.m_db[1]
NetP('的').con(并列短语_0,形容词)
NetP('的').con(并列短语_0,连词)
NetP('的').con(并列短语_0,并列短语)
return code,并列短语_0
"(,)
if#1221"并列短语!=None"(块#1218,块#1220)
eof#1222""(,)
然后#1223""(块#1220,eof#1222)
eof#1224""(,)
然后#1225""(块#1218,eof#1224)
eof#1226""(,)
然后#1227""(块#1214,eof#1226)
块#1228"code=code_save
code,名词=fun_名词(code)
"(,)
然后#1229""(块#1210,块#1228)
块#1230""(,)
然后#1231""(块#1228,块#1230)
块#1232"code,连词=fun_连词(code)
"(,)
if#1233"名词!=None"(块#1230,块#1232)
块#1234""(,)
然后#1235""(块#1232,块#1234)
块#1236"code,并列短语=fun_并列短语(code)
"(,)
if#1237"连词!=None"(块#1234,块#1236)
块#1238""(,)
然后#1239""(块#1236,块#1238)
块#1240"并列短语_0=NetP(\"并列短语\")
连词.m_db[1].con(名词.m_db[1],并列短语.m_db[1])
并列短语_0.m_db[1]=名词.m_db[1]
NetP('的').con(并列短语_0,名词)
NetP('的').con(并列短语_0,连词)
NetP('的').con(并列短语_0,并列短语)
return code,并列短语_0
"(,)
if#1241"并列短语!=None"(块#1238,块#1240)
eof#1242""(,)
然后#1243""(块#1240,eof#1242)
eof#1244""(,)
然后#1245""(块#1238,eof#1244)
eof#1246""(,)
然后#1247""(块#1234,eof#1246)
块#1248"code=code_save
code,名词_0=fun_名词(code)
"(,)
然后#1249""(块#1230,块#1248)
块#1250""(,)
然后#1251""(块#1248,块#1250)
块#1252"code,连词=fun_连词(code)
"(,)
if#1253"名词_0!=None"(块#1250,块#1252)
块#1254""(,)
然后#1255""(块#1252,块#1254)
块#1256"code,名词_1=fun_名词(code)
"(,)
if#1257"连词!=None"(块#1254,块#1256)
块#1258""(,)
然后#1259""(块#1256,块#1258)
块#1260"并列短语=NetP(\"并列短语\")
连词.m_db[1].con(名词_0.m_db[1],名词_1.m_db[1])
并列短语.m_db[1]=名词_0.m_db[1]
NetP('的').con(并列短语,名词_0)
NetP('的').con(并列短语,连词)
NetP('的').con(并列短语,名词_1)
return code,并列短语
"(,)
if#1261"名词_1!=None"(块#1258,块#1260)
eof#1262""(,)
然后#1263""(块#1260,eof#1262)
eof#1264""(,)
然后#1265""(块#1258,eof#1264)
eof#1266""(,)
然后#1267""(块#1254,eof#1266)
块#1268"code=code_save
code,形容词=fun_形容词(code)
"(,)
然后#1269""(块#1250,块#1268)
块#1270""(,)
然后#1271""(块#1268,块#1270)
块#1272"code,连词=fun_连词(code)
"(,)
if#1273"形容词!=None"(块#1270,块#1272)
块#1274""(,)
然后#1275""(块#1272,块#1274)
块#1276"code,名词=fun_名词(code)
"(,)
if#1277"连词!=None"(块#1274,块#1276)
块#1278""(,)
然后#1279""(块#1276,块#1278)
块#1280"并列短语=NetP(\"并列短语\")
连词.m_db[1].con(形容词.m_db[1],名词.m_db[1])
并列短语.m_db[1]=形容词.m_db[1]
NetP('的').con(并列短语,形容词)
NetP('的').con(并列短语,连词)
NetP('的').con(并列短语,名词)
return code,并列短语
"(,)
if#1281"名词!=None"(块#1278,块#1280)
eof#1282""(,)
然后#1283""(块#1280,eof#1282)
eof#1284""(,)
然后#1285""(块#1278,eof#1284)
eof#1286""(,)
然后#1287""(块#1274,eof#1286)
块#1288"code=code_save
code,名词=fun_名词(code)
"(,)
然后#1289""(块#1270,块#1288)
块#1290""(,)
然后#1291""(块#1288,块#1290)
块#1292"code,连词=fun_连词(code)
"(,)
if#1293"名词!=None"(块#1290,块#1292)
块#1294""(,)
然后#1295""(块#1292,块#1294)
块#1296"code,形容词=fun_形容词(code)
"(,)
if#1297"连词!=None"(块#1294,块#1296)
块#1298""(,)
然后#1299""(块#1296,块#1298)
块#1300"并列短语=NetP(\"并列短语\")
连词.m_db[1].con(名词.m_db[1],形容词.m_db[1])
并列短语.m_db[1]=名词.m_db[1]
NetP('的').con(并列短语,名词)
NetP('的').con(并列短语,连词)
NetP('的').con(并列短语,形容词)
return code,并列短语
"(,)
if#1301"形容词!=None"(块#1298,块#1300)
eof#1302""(,)
然后#1303""(块#1300,eof#1302)
eof#1304""(,)
然后#1305""(块#1298,eof#1304)
eof#1306""(,)
然后#1307""(块#1294,eof#1306)
块#1308"code=code_save
code,形容词_0=fun_形容词(code)
"(,)
然后#1309""(块#1290,块#1308)
块#1310""(,)
然后#1311""(块#1308,块#1310)
块#1312"code,连词=fun_连词(code)
"(,)
if#1313"形容词_0!=None"(块#1310,块#1312)
块#1314""(,)
然后#1315""(块#1312,块#1314)
块#1316"code,形容词_1=fun_形容词(code)
"(,)
if#1317"连词!=None"(块#1314,块#1316)
块#1318""(,)
然后#1319""(块#1316,块#1318)
块#1320"并列短语=NetP(\"并列短语\")
连词.m_db[1].con(形容词_0.m_db[1],形容词_1.m_db[1])
并列短语.m_db[1]=形容词_0.m_db[1]
NetP('的').con(并列短语,形容词)
NetP('的').con(并列短语,连词)
NetP('的').con(并列短语,形容词)
return code,并列短语
"(,)
if#1321"形容词_1!=None"(块#1318,块#1320)
eof#1322""(,)
然后#1323""(块#1320,eof#1322)
eof#1324""(,)
然后#1325""(块#1318,eof#1324)
eof#1326""(,)
然后#1327""(块#1314,eof#1326)
块#1328"code=code_save
return code,None
"(,)
然后#1329""(块#1310,块#1328)
eof#1330""(,)
然后#1331""(块#1328,eof#1330)
块#1332""(,)
然后#1333""(块#1200,块#1332)
块#1334""(,)
func#1335"fun_偏正短语(code)"(块#1332,块#1334)
块#1336"return code,None
"(,)
if#1337"code==\"\""(块#1334,块#1336)
eof#1338""(,)
然后#1339""(块#1336,eof#1338)
块#1340"code_save=code
code,名词_0=fun_名词(code)
"(,)
然后#1341""(块#1334,块#1340)
块#1342""(,)
然后#1343""(块#1340,块#1342)
块#1344"code,名词_1=fun_名词(code)
"(,)
if#1345"名词_0!=None"(块#1342,块#1344)
块#1346""(,)
然后#1347""(块#1344,块#1346)
块#1348"偏正短语=NetP(\"偏正短语\")
偏正短语.m_db[1]=名词_1.m_db[1]
print(名词_0,名词_1)
pt_de=NetP('的').con(名词_0.m_db[1],名词_1.m_db[1])
Karma(名词_0.m_db[1])
Karma(名词_1.m_db[1])
Karma(pt_de)
NetP('的').con(偏正短语,名词_0)
NetP('的').con(偏正短语,pt_de)
NetP('的').con(偏正短语,名词_1)
return code,偏正短语
"(,)
if#1349"名词_1!=None"(块#1346,块#1348)
eof#1350""(,)
然后#1351""(块#1348,eof#1350)
eof#1352""(,)
然后#1353""(块#1346,eof#1352)
块#1354"code=code_save
code,形容词=fun_形容词(code)
"(,)
然后#1355""(块#1342,块#1354)
块#1356""(,)
然后#1357""(块#1354,块#1356)
块#1358"code,动词=fun_动词(code)
"(,)
if#1359"形容词!=None"(块#1356,块#1358)
块#1360""(,)
然后#1361""(块#1358,块#1360)
块#1362"偏正短语=NetP(\"偏正短语\")
偏正短语.m_db[1]=动词.m_db[1]
形容词.m_db[1].con(动词.m_db[1],0)
Karma(动词.m_db[1])
Karma(形容词.m_db[1])
NetP('的').con(偏正短语,形容词)
NetP('的').con(偏正短语,动词)
return code,偏正短语
"(,)
if#1363"动词!=None"(块#1360,块#1362)
eof#1364""(,)
然后#1365""(块#1362,eof#1364)
eof#1366""(,)
然后#1367""(块#1360,eof#1366)
块#1368"code=code_save
code,形容词=fun_形容词(code)
"(,)
然后#1369""(块#1356,块#1368)
块#1370""(,)
然后#1371""(块#1368,块#1370)
块#1372"code,名词=fun_名词(code)
"(,)
if#1373"形容词!=None"(块#1370,块#1372)
块#1374""(,)
然后#1375""(块#1372,块#1374)
块#1376"偏正短语=NetP(\"偏正短语\")
偏正短语.m_db[1]=名词.m_db[1]
形容词.m_db[1].con(名词.m_db[1],0)
Karma(形容词.m_db[1])
Karma(名词.m_db[1])
NetP('的').con(偏正短语,形容词)
NetP('的').con(偏正短语,名词)
return code,偏正短语
"(,)
if#1377"名词!=None"(块#1374,块#1376)
eof#1378""(,)
然后#1379""(块#1376,eof#1378)
eof#1380""(,)
然后#1381""(块#1374,eof#1380)
块#1382"code=code_save
return code,None
"(,)
然后#1383""(块#1370,块#1382)
eof#1384""(,)
然后#1385""(块#1382,eof#1384)
块#1386""(,)
然后#1387""(块#1332,块#1386)
块#1388""(,)
func#1389"fun_述宾短语(code)"(块#1386,块#1388)
块#1390"return code,None
"(,)
if#1391"code==\"\""(块#1388,块#1390)
eof#1392""(,)
然后#1393""(块#1390,eof#1392)
块#1394"code_save=code
code,动词=fun_动词(code)
"(,)
然后#1395""(块#1388,块#1394)
块#1396""(,)
然后#1397""(块#1394,块#1396)
块#1398"code,名词=fun_名词(code)
"(,)
if#1399"动词!=None"(块#1396,块#1398)
块#1400""(,)
然后#1401""(块#1398,块#1400)
块#1402"述宾短语=NetP(\"述宾短语\")
述宾短语.m_db[1]=动词.m_db[1]
动词.m_db[1].con(0,名词.m_db[1])
Karma(动词.m_db[1])
Karma(名词.m_db[1])
NetP('的').con(述宾短语,动词)
NetP('的').con(述宾短语,名词)
return code,述宾短语
"(,)
if#1403"名词!=None"(块#1400,块#1402)
eof#1404""(,)
然后#1405""(块#1402,eof#1404)
eof#1406""(,)
然后#1407""(块#1400,eof#1406)
块#1408"code=code_save
return code,None
"(,)
然后#1409""(块#1396,块#1408)
eof#1410""(,)
然后#1411""(块#1408,eof#1410)
块#1412""(,)
然后#1413""(块#1386,块#1412)
块#1414""(,)
func#1415"fun_述补短语(code)"(块#1412,块#1414)
块#1416"return code,None
"(,)
if#1417"code==\"\""(块#1414,块#1416)
eof#1418""(,)
然后#1419""(块#1416,eof#1418)
块#1420"code_save=code
code,动词=fun_动词(code)
"(,)
然后#1421""(块#1414,块#1420)
块#1422""(,)
然后#1423""(块#1420,块#1422)
块#1424"code,形容词=fun_形容词(code)
"(,)
if#1425"动词!=None"(块#1422,块#1424)
块#1426""(,)
然后#1427""(块#1424,块#1426)
块#1428"述补短语=NetP(\"述补短语\")
述补短语.m_db[1]=动词.m_db[1]
形容词.m_db[1].con(动词.m_db[1],0)
Karma(动词.m_db[1])
Karma(形容词.m_db[1])
NetP('的').con(述补短语,动词)
NetP('的').con(述补短语,形容词)
return code,述补短语
"(,)
if#1429"形容词!=None"(块#1426,块#1428)
eof#1430""(,)
然后#1431""(块#1428,eof#1430)
eof#1432""(,)
然后#1433""(块#1426,eof#1432)
块#1434"code=code_save
return code,None
"(,)
然后#1435""(块#1422,块#1434)
eof#1436""(,)
然后#1437""(块#1434,eof#1436)
块#1438""(,)
然后#1439""(块#1412,块#1438)
块#1440""(,)
func#1441"fun_主谓短语(code)"(块#1438,块#1440)
块#1442"return code,None
"(,)
if#1443"code==\"\""(块#1440,块#1442)
eof#1444""(,)
然后#1445""(块#1442,eof#1444)
块#1446"code_save=code
code,名词=fun_名词(code)
"(,)
然后#1447""(块#1440,块#1446)
块#1448""(,)
然后#1449""(块#1446,块#1448)
块#1450"return code_save, None
"(,)
if#1451"名词==None"(块#1448,块#1450)
eof#1452""(,)
然后#1453""(块#1450,eof#1452)
块#1454"主谓短语=NetP(\"主谓短语\")
NetP('的').con(主谓短语,名词)
Karma(名词.m_db[1])
code,动词=fun_动词(code)
"(,)
然后#1455""(块#1448,块#1454)
块#1456""(,)
然后#1457""(块#1454,块#1456)
块#1458"动词.m_db[1].con(名词.m_db[1],0)
主谓短语.m_db[1]=动词.m_db[1]
Karma(动词.m_db[1])
NetP('的').con(主谓短语,动词)
"(,)
if#1459"动词!=None"(块#1456,块#1458)
eof#1460""(,)
然后#1461""(块#1458,eof#1460)
块#1462"code,副词=fun_副词(code)
"(,)
else#1463""(if#1459,块#1462)
块#1464""(,)
然后#1465""(块#1462,块#1464)
块#1466"副词.m_db[1].con(名词.m_db[1],0)
主谓短语.m_db[1]=副词.m_db[1]
Karma(副词.m_db[1])
NetP('的').con(主谓短语,副词)
"(,)
if#1467"副词!=None"(块#1464,块#1466)
eof#1468""(,)
然后#1469""(块#1466,eof#1468)
块#1470"return code_save,None
"(,)
else#1471""(if#1467,块#1470)
eof#1472""(,)
然后#1473""(块#1470,eof#1472)
eof#1474""(,)
然后#1475""(块#1464,eof#1474)
块#1476"return code,主谓短语
"(,)
然后#1477""(块#1456,块#1476)
eof#1478""(,)
然后#1479""(块#1476,eof#1478)
块#1480""(,)
然后#1481""(块#1438,块#1480)
块#1482""(,)
func#1483"fun_介宾短语(code)"(块#1480,块#1482)
块#1484"return code,None
"(,)
if#1485"code==\"\""(块#1482,块#1484)
eof#1486""(,)
然后#1487""(块#1484,eof#1486)
块#1488"code_save=code
code,介词=fun_介词(code)
code,宾语=fun_名词(code)
介宾短语=NetP(\"介宾短语\")
"(,)
然后#1489""(块#1482,块#1488)
块#1490""(,)
然后#1491""(块#1488,块#1490)
块#1492"介宾短语.m_db[1]=介词.m_db[1]
介词.m_db[1].con(0,宾语.m_db[1])
Karma(介词.m_db[1])
NetP('的').con(介宾短语,宾语)
NetP('的').con(介宾短语,介词)
"(,)
if#1493"宾语!=None and 介词!=None"(块#1490,块#1492)
eof#1494""(,)
然后#1495""(块#1492,eof#1494)
块#1496"code=code_save
return code,None
"(,)
else#1497""(if#1493,块#1496)
eof#1498""(,)
然后#1499""(块#1496,eof#1498)
块#1500"code,副词=fun_副词(code)
"(,)
然后#1501""(块#1490,块#1500)
块#1502""(,)
然后#1503""(块#1500,块#1502)
块#1504"副词.m_db[1].con(介词.m_db[1],0)
NetP('的').con(介宾短语,副词)
"(,)
if#1505"副词!=None"(块#1502,块#1504)
eof#1506""(,)
然后#1507""(块#1504,eof#1506)
块#1508"return code,介宾短语
"(,)
然后#1509""(块#1502,块#1508)
eof#1510""(,)
然后#1511""(块#1508,eof#1510)
块#1512""(,)
然后#1513""(块#1480,块#1512)
块#1514""(,)
func#1515"collectPts(pt,list_pt=None)"(块#1512,块#1514)
块#1516"list_pt=[]
"(,)
if#1517"list_pt==None"(块#1514,块#1516)
eof#1518""(,)
然后#1519""(块#1516,eof#1518)
块#1520""(,)
然后#1521""(块#1514,块#1520)
块#1522"list_pt.append(pt)
"(,)
if#1523"pt not in list_pt"(块#1520,块#1522)
eof#1524""(,)
然后#1525""(块#1522,eof#1524)
块#1526""(,)
然后#1527""(块#1520,块#1526)
块#1528""(,)
for#1529"pt.m_con"(块#1526,块#1528)
变量#1530"con"(for#1529,)
块#1531""(,)
if#1532"con.m_db[0]==pt"(块#1528,块#1531)
块#1533"list_pt.append(con)
"(,)
if#1534"con not in list_pt"(块#1531,块#1533)
eof#1535""(,)
然后#1536""(块#1533,eof#1535)
块#1537""(,)
然后#1538""(块#1531,块#1537)
块#1539"collectPts(con.m_db[1],list_pt)
"(,)
if#1540"con.m_name==\"的\" and con.m_db[1]!=None"(块#1537,块#1539)
eof#1541""(,)
然后#1542""(块#1539,eof#1541)
eof#1543""(,)
然后#1544""(块#1537,eof#1543)
eof#1545""(,)
然后#1546""(块#1528,eof#1545)
块#1547""(,)
然后#1548""(块#1526,块#1547)
块#1549""(,)
if#1550"pt.m_db[0]!=None"(块#1547,块#1549)
块#1551"list_pt.append(pt.m_db[0])
"(,)
if#1552"pt.m_db[0] not in list_pt"(块#1549,块#1551)
eof#1553""(,)
然后#1554""(块#1551,eof#1553)
eof#1555""(,)
然后#1556""(块#1549,eof#1555)
块#1557""(,)
然后#1558""(块#1547,块#1557)
块#1559""(,)
if#1560"pt.m_db[1]!=None"(块#1557,块#1559)
块#1561"list_pt.append(pt.m_db[1])
"(,)
if#1562"pt.m_db[1] not in list_pt"(块#1559,块#1561)
eof#1563""(,)
然后#1564""(块#1561,eof#1563)
eof#1565""(,)
然后#1566""(块#1559,eof#1565)
块#1567"return list_pt
"(,)
然后#1568""(块#1557,块#1567)
eof#1569""(,)
然后#1570""(块#1567,eof#1569)
块#1571""(,)
然后#1572""(块#1512,块#1571)
块#1573"pt0=NetP('^起点').con(0,pt)
list_pt=[pt0]
list_pt+=collectPts(pt)
return tools_basic.writeStdCode([],list_pt)
"(,)
func#1574"sentStruct(pt)"(块#1571,块#1573)
eof#1575""(,)
然后#1576""(块#1573,eof#1575)
块#1577""(,)
然后#1578""(块#1571,块#1577)
块#1579"code,pt=fun_句子(sent)
"(,)
func#1580"sent2Struct(sent)"(块#1577,块#1579)
块#1581""(,)
然后#1582""(块#1579,块#1581)
块#1583"return ''
"(,)
if#1584"pt==None"(块#1581,块#1583)
eof#1585""(,)
然后#1586""(块#1583,eof#1585)
块#1587"return sentStruct(pt),code
"(,)
else#1588""(if#1584,块#1587)
eof#1589""(,)
然后#1590""(块#1587,eof#1589)
eof#1591""(,)
然后#1592""(块#1581,eof#1591)
eof#1593""(,)
然后#1594""(块#1577,eof#1593)

## end
#681, 3:
706
## end
#684, 108:
"""


"""

+引用(_函数1,_函数2)->+[del](,+引用):
    ->引用(_函数1,_函数2)->[]{[]=>[is](+引用,引用)},
    ->+引用#2(_函数1,_函数2)


## end
#686, 16:
Nini, "引用"是什么词性?
## end
#689, 580:
/*
记住"自然语言"
+[J函数](,测试)
+[设置结构](,测试)

测试等于:...
测试变量:...
测试map:...
测试newMap:...
测试re:...
测试stateSelf:...
测试stateSelf_eq:...
测试stateSelf_is:...
测试stateRelation:...
测试流程:...
测试copy:...
测试isType:...
(在Parser的测试中有setRanger的测试)

+[新建阅读窗口](,测试流程)

存档1:...

name_m
+[J函数](,测试)
*/


var A0=new NetP('A','test');
var A1=new NetP('[A]');
var A2=new NetP('[is]');
var A3=new NetP('_B');
var A4=new NetP('~A');
var A5=new NetP('A','test');

var karma1=new Karma(A2);
//karma1.m_buildMode=true;

print(karma1.info());
print(karma1.isType('特殊范围'));
print(karma1.isVirtual());


/*
+[J函数](,测试)
*/
## end
#693, 174:
/*
+[J函数](,测试等于)
*/

var a=[[2,3,4,1,2],[1,4]];
print(a[0].length)
print([]==[])
print([]===[])
print([].length)
print(''=='')
print(''==[])
print([]=='')
print(''.length)



## end
#695, 61:
/*
+[J函数](,测试变量)
*/

var a={'ab':[1,2,3,4]};
print(a['ab'])


## end
#697, 439:
/*
记住"自然语言"
+[J函数](,测试)

测试等于:...
测试变量:...

存档1:
*/


var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C)
print(B.info())

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

karma1.addKarma(karma2)
karma2.addKarma(karma3,'否定')

karma3.info_cause()

karma1.m_stage=4
karma1.Reason_oneStep({})
print(karma1.stateSelf(),karma1.m_stage,karma1.m_reState)
print(karma2.m_reState)

/*
+[J函数](,测试)
*/
## end
#698, 3:
703
## end
#701, 34434:
"""
JS版本(J函数):...
+[新建阅读窗口](,JS版本)
将JS版本的"len\(%[变量]\)"替换为"%[变量].length"
将JS版本的"%[变量]\[%[1]:\]"替换为"%[变量].slice(%[1],%[变量].length)"
将JS版本的"%[变量]\(\)\[%[1]:\]"替换为"%[变量]().slice(%[1],%[变量]().length)"
将JS版本的"%[变量]\[%[1]:%[n]\]"替换为"%[变量].slice(%[1],%[n])"
将JS版本的"%[变量]\[%[1]:-%[n]\]"替换为"%[变量].slice(%[1],%[变量].length-%[n])"
将JS版本的"%[变量]\(\)\[%[1]:-%[n]\]"替换为"%[变量]().slice(%[1],%[变量]().length-%[n])"
将JS版本的"%[变量]\[-%[n]\]"替换为"%[变量][%[变量].length-%[n]]"

将JS版本的"code=re.sub\(r'"替换为"code.replace(/"
将JS版本的"','',code\)"替换为"/,'')"

将JS版本的"%[变量]=re.sub\(%[pat],'',%[变量]\)"替换为"%[变量].replace(%[pat],'')"
将JS版本的"%[变量]=re.match\(%[pat],%[code]\).group\(\)"替换为"%[变量]=%[code].match(%[pat])"

将JS版本的"\(%[var] in %[list]\)"替换为"(%[list].includes(%[var]))"

将JS版本的" raise"替换为" //raise"
将JS版本的"//raise Exception\('%[句子]'\)"替换为" throw '%[句子]'"
将JS版本的"//raise Exception\("替换为"throw "

在JS版本中, 将光标移动到"');"

记住"自然语言"
Nini, 打开动作(库)
Nini, 打开花园(文件)

NetPStack
removeComment

[那]

"""


import sys, re, logging
if __name__=='__main__':
    sys.path.append(sys.path[0]+'\\..')
from body.bone import NetP
from body.soul import Karma



def printNList(list_pt):
    string=''
    n=0
    print(list_pt)
    for point in list_pt:
        string=string+str(n)+'.'+point.info()+'\n'
        n=n+1
    print(string)
        


def writeStdCode(karmas,list_pt):
    code=''
    i=0
    for point in list_pt:
        point.m_name+='#'+str(i)
        i=i+1
    for point in list_pt:
        code+=point.info_saving()+'\n'
    for karma in karmas:
        code+='\n_____________________________\n'
        [text,list_pt]=writeStdCode_karma(karma,list_pt)
        code+=text
    for point in list_pt:
        point.m_name=re.sub(r'#.*$',"",point.m_name)
    return code


def writeStdCode_karma(karma,list_pt):
    karma_code=''


    if karma==None:
        return [karma_code,list_pt]
    
    if karma.m_symbol not in list_pt:
        list_pt.append(karma.m_symbol)
    if karma.m_buildMode==True:
        karma_code+='+'
    karma_code+=str(list_pt.index(karma.m_symbol))


    if karma.m_clause!=[]:
        if karma.m_clauseAnd==False:
            karma_code+='|'
        karma_code+='{'
        for clause in karma.m_clause:
            [text,list_pt]=writeStdCode_karma(clause,list_pt)
            karma_code+=text
            if clause!=karma.m_clause[-1]:
                karma_code+=','
        karma_code+='}'


    if len(karma.m_yese)+len(karma.m_noe)>1:
        if karma.m_yesAnd==True:
            karma_code+='&'
        karma_code+=':'
    for end in karma.m_yese:
        if end.m_no==False:
            karma_code+='->'
        else:
            karma_code+='=>'
        [text,list_pt]=writeStdCode_karma(end,list_pt)
        karma_code+=text
        if end!=karma.m_yese[-1]:
            karma_code+=','
    for end in karma.m_noe:
        if end.m_no==False:
            karma_code+='->>'
        else:
            karma_code+='=>>'
        [text,list_pt]=writeStdCode_karma(end,list_pt)
        karma_code+=text
        if end!=karma.m_noe[-1]:
            karma_code+=','
    if len(karma.m_yese)+len(karma.m_noe)>1:
        karma_code+=';'


    return [karma_code,list_pt]



def listToDict(list_pt):
    dict_pt={}
    for point in list_pt:
        name=point.m_name
        if len(name)>2 and name[0]=='[' and name[-1]==']':
            name=name[1:-1]
        term=dict_pt.get(name,[])
        term.append(point)
        dict_pt.update({name:term})
    return dict_pt
    
def listToKeyDict(list_pt):
    dict_pt={}
    for point in list_pt:
        dict_pt.update({point.m_name:point})
    return dict_pt


def dictToList(dict_pt):
    list_pt=[]
    for term in dict_pt:
        list_pt+=dict_pt[term]
    return list_pt


def ptToDict(point):
    dict_con={}
    for con in point.m_con:
        if con.m_db[0]==point:
            dict_con.update({con.m_name:con})
    return dict_con


def ptDeToDict(point):
    dict_de={}
    for con in point.m_con:
        if con.m_name=='的' and con.m_db[0]==point and con.m_db[1]!=None:
            dict_de.update({con.m_db[1].m_name:con.m_db[1]})
    return dict_de


            
def runKarmaByOneStep(karma,pool,n=1):
    head=karma
    list_km=karma.allEffects()
    if karma.m_stage==0:
        karma.m_stage=1
    for i in range(n):
        for km in list_km:
            change,list_new=km.Reason_oneStep(pool)
            if change:
                break
        showKarmaState(karma)
        print('__________')


def showKarmaState(karma):
    list_km=karma.allEffects()
    for km in list_km:
        print(km.m_symbol.m_name,km.m_stage)


def pointsInChain(karma):
    list_km=karma.allEffects()
    list_pt=[]
    for km in list_km:
        list_pt.append(km.m_symbol)
    return list_pt


def pt2Var(point,device=None):
    if point.m_name=='list':
        device=getPointByFormat(point,'list')
        point.m_dev=device
        return device
    for con in point.m_con:
        if con.m_db[0]!=point or con.m_db[1]==None:
            continue
        elif con.m_name[0:2]=='m_':
            if device==None:
                device=empty()
                device.m_self=point
            dev_next=pt2Var(con.m_db[1],con.m_db[1].m_dev)
            if dev_next==None:
                setattr(device,con.m_name,con.m_db[1])
            else:
                setattr(device,con.m_name,dev_next)
        elif con.m_db[1].m_name=='function':
            eng={}
            pythonCodeEval(eng,con.m_db[1].m_text)
            f=eng.get(con.m_name,None)
            if f==None:
                continue
            if device==None:
                device=empty()
                device.m_self=point
            setattr(device,con.m_name,f)
    point.m_dev=device
    return device



def getAllSystemPt(point,list_pt=None):
    if list_pt==None:
        list_pt=[]
    list_pt+=[point]
    for con in point.m_con:
        if con.m_permission==0 and con.m_db[0]==point:
            list_pt.append(con)
            if con.m_db[1]!=None and con.m_db[1] not in list_pt:
                if con.m_db[1].m_permission==0:
                    getAllSystemPt(con.m_db[1],list_pt)
                else:
                    list_pt+=[con.m_db[1]]
    return list_pt


def getPoint(point,key,default='',con_permission=0,pt_permission=-1):
    dict_pt=ptToDict(point)
    con=dict_pt.get(key,None)
    if con==None:
        if default!=None:
            con=NetP(key).con(point,NetP(default))
        else:
            return None
    con.m_permission=con_permission
    pt=con.m_db[1]
    if pt_permission==-1:
        pass
    else:
        pt.m_permission=pt_permission
    return pt


def getVarFromPt(point,key,list_pt=None):
    dict_pt=ptDeToDict(point)
    con=dict_pt.get(key,None)
    if con==None:
        de=NetP('的').con(point,NetP(key))
        con=de.m_db[1]
        de.m_permission=0
        con.m_permission=0
        if list_pt!=None:
            list_pt.append(de)
            list_pt.append(con)
    return con



def setPoint(point,key,value):
    for con in point.m_con:
        if con.m_db[0]==point and con.m_name==key:
            if value!=0:
                con.con(point,value)
            else:
                con.delete()
                del con
            return
    if value!=0:
        connect=NetP(key).con(point,value)
        connect.m_permission=0


def getPointByFormat(point,type_pt):
    list_pt=[]
    set_pt=set()
    if point==None:
        return list_pt
    if type_pt=='list':
        for con in point.m_con:
            if con.m_name=='的' and con.m_db[0]==point:
                if  con.m_db[1]!=None:
                    list_pt.append(con.m_db[1])
                else:
                    con.delete()
    elif type_pt=='set':
        for con in point.m_con:
            if con.m_name=='的' and con.m_db[0]==point:
                if  con.m_db[1]!=None:
                    set_pt.update([con.m_db[1]])
                else:
                    con.delete()
        list_pt=list(set_pt)
    return list_pt


def setPointByFormat(point,type_pt,value=None):
    if type_pt=='list.append':
        con=NetP('的').con(point,value)
        con.m_permission=0
    elif type_pt=='list.insertHead':
        con=NetP('的').con(point,value)
        con.m_permission=0
        point.m_con.remove(con)
        point.m_con.insert(0,con)
    elif type_pt=='list.+=':
        for pt in value:
            con=NetP('的').con(point,pt)
            con.m_permission=0
    elif type_pt=='list.clear':
        list_del=[]
        for con in point.m_con:
            if con.m_name=='的' and con.m_db[0]==point and con.m_db[1]!=None:
                list_del.append(con)
        for pt in list_del:
            pt.delete()
        del list_del[:]
    elif type_pt=='list.pop':
        list_pt=getPointByFormat(point,'list')
        pt=list_pt[-1]
        for con in pt.m_con:
            if con.m_name=='的' and con.m_db[0]==point and con .m_db[1]==pt:
                con.delete()
                del con
        del pt
    elif type_pt=='list.remove':
        list_pt=getPointByFormat(point,'list')
        if value in list_pt:
            for con in value.m_con:
                if con.m_name=='的' and con.m_db[0]==point and con .m_db[1]==value:
                    con.delete()
                    del con
    elif type_pt=='list.removeByName':
        list_pt=getPointByFormat(point,'list')
        for pt in list_pt:
            if pt.m_name==value:
                setPointByFormat(point,'list.remove',pt)
                break
    elif type_pt=='list.replace':
        list_pt=getPointByFormat(point,'list')
        for pt in list_pt:
            if pt.m_name==value.m_name:
                setPointByFormat(point,'list.remove',pt)
                break
        setPointByFormat(point,'list.append',value)


def checkPointByFormat(point,type_pt,value=None):
    if type_pt=='list.isempty':
        list_pt=getPointByFormat(point,'list')
        return list_pt==[]
    elif type_pt=='list.in':
        list_pt=getPointByFormat(point,'list')
        return value in list_pt
    return True


def checkPtsRelation(pt,relationship,value):
    dict_pt=ptToDict(pt)
    if relationship=='property':
        return value in dict_pt
    


def printPointByFormat(point,type_pt):
    if type_pt=='list':
        list_pt=getPointByFormat(point,type_pt)
        print([pt.info() for pt in list_pt])


def printPoint(point):
    print(point.info(),'{')
    for con in point.m_con:
        if con.m_db[0]==point:
            print(con.m_name+':',con.m_db[1].info())
    print('}')


def printPtList(list_pt):
    info_pt='['
    for pt in list_pt:
        info_pt+=pt.info("不显示文本")
        if pt!=list_pt[-1]:
            info_pt+=', '
    info_pt+=']'
    print(info_pt)


def readFile(fileName):
    f=open(fileName,encoding='utf-8')
    try:
        textUtf=f.read()
        f.close()
        return textUtf
    except:
        f.close()
    f=open(fileName,encoding='gbk')
    try:
        textGbk=f.read()
        f.close()
        return textGbk
    except:
        f.close()
        return ''


def writeFile(fileName,text,cover=True):
    if fileName==None:
        return
    try:
        text_old=readFile(fileName)
    except Exception as e:
        logging.exception(e)
        text_old=''
    try:
        if cover:
            f=open(fileName,'w',encoding='utf-8')
        else:
            f=open(fileName,'a',encoding='utf-8')
    except:
        print('Error! Invalid file address!')
        return
    try:
        f.write(text)
    except Exception as e:
        f.write(text_old)
        print("Save failed!")
        logging.exception(e)
    f.close()



def copyKarma(karma):
    list_km=karma.allEffects()
    i=0
    for km in list_km:
        km.m_symbol.m_name+='#'+str(i)
        i+=1
    info_str=karma.info_karma(type_info=1)
    for km in list_km:
        j=km.m_symbol.m_name.rfind('#')
        km.m_symbol.m_name=km.m_symbol.m_name[0:j]
    karmas_copy=readSubCode_tokener(info_str)
    return karmas_copy[0]


def karmaToStr(karma):
    list_km=karma.allEffects()
    i=0
    for km in list_km:
        km.m_symbol.m_name+='#'+str(i)
        i+=1
        if km.m_buildMode==True:
            km.m_symbol.m_name='+'+km.m_symbol.m_name
    info_str=karma.info_karma(type_info=1)
    for km in list_km:
        j=km.m_symbol.m_name.rfind('#')
        km.m_symbol.m_name=km.m_symbol.m_name[0:j]
        if km.m_buildMode==True:
            km.m_symbol.m_name=km.m_symbol.m_name[1:]
    return info_str



def newKarmaOnPts(list_pt,type_new=False):
    list_km=[]
    for pt in list_pt:
        km=Karma(pt)
        if list_km!=[]:
            list_km[-1].m_yese.append(km)
            km.m_cause=list_km[-1]
        list_km.append(km)
        km.m_buildMode=type_new
    return list_km


def insertPtIntotKarma_back(km0,netP):
    km_new=Karma(netP)
    if len(netP.m_name)>1 and netP.m_name[0]=='+':
        netP.m_name=netP.m_name[1:]
        km_new.m_buildMode=True
    for km in km0.m_clause:
        km.m_cause=km_new
    for km in km0.m_yese:
        km.m_cause=km_new
    for km in km0.m_noe:
        km.m_cause=km_new
    km_new.m_clause=km0.m_clause
    km_new.m_yese=km0.m_yese
    km_new.m_noe=km0.m_noe
    km0.m_yese=[km_new]
    km0.m_noe=[]
    km_new.m_cause=km0


def insertPtIntotKarma_front(km0,netP):
    km_new=Karma(netP)
    if len(netP.m_name)>1 and netP.m_name[0]=='+':
        netP.m_name=netP.m_name[1:]
        km_new.m_buildMode=True
    if km0.m_cause!=None:
        cause=km0.m_cause
        km_new.m_cause=cause
        if km0 in cause.m_clause:
            cause.m_clause.remove(km0)
            cause.m_clause.append(km_new)
        elif km0 in cause.m_yese:
            cause.m_yese.remove(km0)
            cause.m_yese.append(km_new)
        elif km0 in cause.m_noe:
            cause.m_noe.remove(km0)
            cause.m_noe.append(km_new)
        else:
            print("Warning! The karma:"+km0.m_symbol.info()+", has a weird cause karma.")
    km0.m_cause=km_new
    km_new.m_yese=[km0]
    if km0.m_no==True:
        km0.m_no=False
        km_new.m_no=True
    
def insertPtIntotKarma(km0,netP):
    if km0.m_symbol.m_db[0]==netP:
        otherP=km0.m_symbol.m_db[1]
    elif km0.m_symbol.m_db[1]==netP:
        otherP=km0.m_symbol.m_db[0]
    else:
        return
    if km0.isType('新建') or km0.m_symbol.m_name=='[那]':
        insertPtIntotKarma_back(km0,netP)
    elif km0.isType('普通非新建') or km0.m_symbol.m_name=='[is]':
        if otherP==None or otherP.m_master==None:
            insertPtIntotKarma_back(km0,netP)
        elif otherP.m_master in km0.allCauses():
            insertPtIntotKarma_back(km0,netP)
        else:
            insertPtIntotKarma_front(km0,netP)
    elif km0.isType('引用'):
        insertPtIntotKarma_front(km0,netP)
    





def runCode(code,list_pt):
    try:
        karmas=readSubCode_tokener(code)
    except:
        return []
    pool=listToDict(list_pt)
    results=[]
    for karma in karmas:
        karma.m_stage=1
        result,list_new=karma.Reason_iterative(pool)
        results.append(result)
    return [results,karmas]
    
def runKarma(karma,list_pt):
    pool=listToDict(list_pt)
    karma.m_stage=1
    result,list_new=karma.Reason_iterative(pool)
    return result



def codeBlock(code):
    try:
        print(code)
        var={}
        exec(code,{},var)
        return var['result']
    except Exception as e:
        print("Error! Something is wrong when compiling the code.")
        logging.exception(e)
    return None


def pythonCodeEval(eng,code):
    try:
        exec(code,eng)
    except Exception as e:
        logging.exception(e)
        return False
    return True


def karma2Pts(karma,list_pt):
    pt_km=NetP('链节')
    list_pt.append(pt_km)
    km=karma
    pt_con=NetP('m_symbol').con(pt_km,km.m_symbol)
    list_pt.append(pt_con)
    list_pt.append(km.m_symbol)
    for clause in km.m_clause:
        pt_cla=karma2Pts(clause,list_pt)
        pt_con1=NetP('从句').con(pt_km,pt_cla)
        list_pt.append(pt_con1)
    list_end=km.m_yese+km.m_noe
    for end in list_end:
        pt_end=karma2Pts(end,list_pt)
        pt_con2=NetP('因果').con(pt_km,pt_end)
        list_pt.append(pt_con2)
    return pt_km


class NetPStack:
    def __init__(self):
        self.m_builtStack=[{}]
        self.m_undefinedStack=[{}]


    def popBuilt(self):
        return self.m_builtStack.pop()


    def popUndefined(self):
        return self.m_undefinedStack.pop()


    def pushBuilt(self,built):
        self.m_builtStack.append(built)


    def pushUndefined(self,undefined):
        self.m_undefinedStack.append(undefined)


    def enterClause(self):
        self.m_builtStack.append(self.m_builtStack[-1].copy())
        self.m_undefinedStack.append(self.m_undefinedStack[-1].copy())


    def leaveClause(self):
        if len(self.m_undefinedStack)==1:
            if self.m_undefinedStack[-1]!={}:
                for term in self.m_undefinedStack[-1]:
                    pt=self.m_undefinedStack[-1][term]
                    if pt.m_master==None:
                        km_head=pt.m_con[0].m_master
                        insertPtIntotKarma(km_head,pt)
        elif len(self.m_undefinedStack[-1])>len(self.m_undefinedStack[-2]):
            for term in self.m_undefinedStack[-1]:
                if term not in self.m_undefinedStack[-2]:
                    pt=self.m_undefinedStack[-1][term]
                    if pt.m_master==None:
                        km_head=pt.m_con[0].m_master
                        insertPtIntotKarma(km_head,pt)
        self.m_builtStack.pop()
        self.m_undefinedStack.pop()


    def popUndefinedName(self,name):
        for stack in self.m_undefinedStack:
            stack.pop(name)


    def buildNetP(self,name,con0_name='',con1_name=''):
        recent=self.m_builtStack[-1]
        undefined=self.m_undefinedStack[-1]


        point=undefined.get(name,None)
        if point==None:
            point=NetP(re.sub(r'#.*$','',name))
            recent.update({name:point})
        else:
            undefined.pop(name)


        if con1_name!='':
            con1=recent.get(con1_name,None)
            if con1==None:
                con1=NetP(re.sub(r'#.*$','',con1_name))
                recent.update({con1_name:con1})
                undefined.update({con1_name:con1})
            point.connect(con1,1)
        if con0_name!='':
            con0=recent.get(con0_name,None)
            if con0==None:
                con0=NetP(re.sub(r'#.*$','',con0_name))
                recent.update({con0_name:con0})
                undefined.update({con0_name:con0})
            point.connect(con0,0)
        return point


def removeComment(code):
    if len(code)==0:
        return code,False
    elif code[0]=='#':
        code=re.sub(r'^#.*','',code)
    elif code[0:3]=='"""':
        code=code[3:]
        while True:
            if len(code)<3:
                code=''
                break
            elif code[0:3]=='"""':
                break
            else:
                code=re.sub(r'^.*\n?','',code)
        code=code[3:]
    else:
        return code,False
    return code,True
def buildPoints_quick(code):
    list_pt=[]
    dict_con={}
    list_del=[]


    code=re.sub(r'^[ \t\n]*','',code)
    L=len(code)
    progress=0
    N=0
    while code!='':
        code,netP,n0,n1,del_flag=netPToken_quick(code)
        list_pt.append(netP)
        progress=(L-len(code))/L*100
        if progress >= N:
            print("进度: %.2f"%(progress)+"%")
            N+=10
        code=re.sub(r'^[ \t\n;]*','',code)
        if n0!=None or n1!=None:
            dict_con.update({netP:[n0,n1]})
        if del_flag:
            list_del.append(len(list_pt)-1)
    
    for pt in dict_con:
        n0,n1=dict_con[pt]
        if n0!=None:
            pt0=list_pt[n0]
            pt.con(pt0,0)
        if n1!=None:
            pt1=list_pt[n1]
            pt.con(0,pt1)


    if len(list_del)>0:
        print('There are %d invalid points!'%(len(list_del)))
        list_del.reverse()
        for i in list_del:
            print('Deleting %s...'%(list_pt[i].info()))
            list_pt.pop(i)
    return list_pt



def netPToken_quick(code):
    title=r'^[\w \[\]~#.+=\-^/*\\!<\']*|^\[>=?\]'
    order=r'#.*$'


    name=re.match(title,code).group()
    code=re.sub(title,'',code)
    if name=='':
        print('\n\n\nError! Invalid name.\nCode:',code)
        raise Exception('Error! Invalid name.')
    if name[-1]=='=' or name[-1]=='-':
        if len(code)>0 and code[0]=='>':
            code=name[-1]+code
            name=name[0:-1]
    con0_name=''
    con1_name=''
    text=''
    if code!='' and code[0]=='\"':
        code=code[1:]
        [code,text]=textToken(code)
        if code=='' or code[0]!='\"':
            print(code)
            raise Exception('Error! Unbalanced quote!')
        code=code[1:]
    if code!='' and code[0]=='(':
        code=code[1:]
        con0_name=re.match(title,code).group()
        code=re.sub(title,'',code)
        if code=='' or code[0]!=',':
            print(code)
            raise Exception('Error! Ilegal net point format. A net point must be title"text"(title,title)')
        code=code[1:]
        con1_name=re.match(title,code).group()
        code=re.sub(title,'',code)
        if code=='' or code[0]!=')':
            raise Exception('Error! Unbalanced bracket in a net point format!')
        code=code[1:]
    if name=='':
        print('Warning! There is a point without a name!')
    n=re.search(order,name)
    if n==None:
        raise Exception('Error! It\'s not a TOP.')
    else:
        n=n.group()[1:]
        int(n)


    name=re.sub(order,'',name)
    netP=NetP(name,text)


    posFormat=r'^\[(-?\d+), *(-?\d+)\]'
    pos=re.findall(posFormat,code)
    if pos!=[]:
        x=int(pos[0][0])
        y=int(pos[0][1])
        netP.m_pos=[x,y]
        code=re.sub(r'^\[-?\d+, *-?\d+\]','',code)


    del_flag=False


    n0=None
    try:
        if con0_name!='':
            str_n0=re.search(order,con0_name).group()
            if len(str_n0)>1:
                n0=int(str_n0[1:])
    except:
        print('Warning! The %s(%s,%s) connects an invalid point'%(name,con0_name,con1_name))
        del_flag=True


    n1=None
    try:
        if con1_name!='':
            str_n1=re.search(order,con1_name).group()
            if len(str_n1)>1:
                n1=int(str_n1[1:])
    except:
        print('Warning! The %s(%s,%s) connects an invalid point'%(name,con0_name,con1_name))
        del_flag=True


    return [code,netP,n0,n1,del_flag]

def readSubCode_tokener(code):
    list_karma=[]
    while code!='':
        code=re.sub(r'^[ \t\n]*','',code)
        if code=='':
            break
        code,result=removeComment(code)
        if result==True:
            continue
        else:
            [code,karma,pointStack]=chainToken(code)
            pointStack.leaveClause()
            karma=karma.causeEnd()
            karma.setRangers()
            list_karma.append(karma)
            if code!='' and code[0]==';':
                code=code[1:]
    return list_karma


def buildPoints_tokener(code):
    list_pt=[]
    code=re.sub(r'^[ \t\n]*','',code)
    pointStack=NetPStack()
    L=len(code)
    progress=0
    N=0
    while code!='':
        code,netP,pointStack=netPToken(code,pointStack)
        list_pt.append(netP)
        progress=(L-len(code))/L*100
        if progress >= N:
            print("进度: %.2f"%(progress)+"%")
            N+=10
        code=re.sub(r'^[ \t\n;]*','',code)
    return list_pt


def divideSents_tokener(code):
    list_sent=[]
    while code!='':
        code=re.sub(r'^[ \t\n]*','',code)
        if code=='':
            break
        code,result=removeComment(code)
        if result==True:
            continue
        
        code_keep=code
        [code,karma,pointStack]=chainToken(code)
        si=code_keep.rfind(code)
        text=code_keep[0:si]
        if code!='' and code[0]==';':
            code=code[1:]
        sent=NetP(karma.m_symbol.m_name,text)
        list_sent.append(sent)
    return list_sent


def chainToken(code,pointStack=None):
    if pointStack==None:
        pointStack=NetPStack()
    [code,karma,pointStack]=karmaToken(code,pointStack)
    if code=='' or code[0]==';' or code[0]=='\n' or code[0]=='}':
        return [code,karma,pointStack]
    elif code[0]==',':
        return [code,karma,pointStack]
    elif code[0]==':':
        code=code[1:]
        [code,karma,pointStack]=splitToken(code,karma,pointStack)
    elif code[0]=='|' or code[0]=='&':
        typeSub=code[0]
        code=code[1:]
        if code!='' and code[0]==':':
            if typeSub=='|':
                karma.m_noAnd=False
                karma.m_yesAnd=False
            else:
                karma.m_noAnd=True
                karma.m_yesAnd=True
            code=code[1:]
            [code,karma,pointStack]=splitToken(code,karma,pointStack)
    else:
        [code,typeCon]=conToken(code)
        [code,effect,pointStack]=chainToken(code,pointStack)
        buildRelation(karma,typeCon,effect)
    return [code,karma,pointStack]



def conToken(code):
    while len(code)>3 and code[0:3]=='...':
        code=re.sub(r'^\.\.\..*[\n\t ]*','',code)
    code=re.sub(r'^[ \t]*','',code)
    if len(code)>2 and code[0:3]=='->>':
        typeCon=code[0:3]
        code=code[3:]
    elif len(code)>2 and code[0:3]=='=>>':
        typeCon=code[0:3]
        code=code[3:]
    elif len(code)>1 and code[0:2]=='->':
        typeCon=code[0:2]
        code=code[2:]
    elif len(code)>1 and code[0:2]=='=>':
        typeCon=code[0:2]
        code=code[2:]
    else:
        print('\n\n\nIllegal connection symbol!\nCode:',code)
        raise Exception('Illegal connection symbol!')
    code=re.sub(r'^[ \t]*','',code)
    return [code,typeCon]


def clauseToken(code,karma,pointStack):
    pointStack.enterClause()
    while True:
        code=re.sub(r'^[ \t\n]*','',code)
        if code=='':
            raise Exception('Error! Unbalanced bracket!')
        elif code[0]=='}':
            break
        else:
            [code,clause,pointStack]=chainToken(code,pointStack)
            karma.m_clause.append(clause)
            clause.m_cause=karma
            if code!='' and code[0]!=',':
                break
            elif code!='':
                code=code[1:]
    pointStack.leaveClause()
    return [code,karma,pointStack]


def splitToken(code,karma,pointStack):
    while True:
        code=re.sub(r'^[ \t\n]*','',code)
        [code,typeCon]=conToken(code)
        [code,effect,pointStack]=chainToken(code,pointStack)
        buildRelation(karma,typeCon,effect)
        code=re.sub(r'^[ \t\n]*','',code)
        if code=='' or code[0]==';' or code[0]=='}':
            break
        elif code[0]!=',':
            print('\n\n\n\nError! Ilegal splitting type!\nCode:',code)
            raise Exception('Error! Ilegal splitting type!')
        else:
            code=code[1:]
    return [code,karma,pointStack]


def karmaToken(code,pointStack):
    if code=='':
        raise Exception('Error! Invalid karma detected!')
    buildType=False
    karma=None
    if code[0]=='+':
        buildType=True
    [code,netP,pointStack]=netPToken(code,pointStack)
    karma=Karma(netP)
    if buildType==True and netP.m_name!='+':
        netP.m_name=netP.m_name[1:]
        karma.m_buildMode=True
    if code!='' and code[0]=='{':
        code=code[1:]
        [code,karma,pointStack]=clauseToken(code,karma,pointStack)
        code=re.sub(r'^[\n\t ]*','',code)
        if code=='' or code[0]!='}':
            print('\n\n\nError! Unbalanced bracket.\nCode:',code)
            raise Exception('Error! Unbalanced bracket.')
        else:
            code=code[1:]
    elif code!='' and (code[0]=='|' or code[0]=='&'):
        typeSub=code[0]
        code=code[1:]
        if code!='' and code[0]=='{':
            if typeSub=='|':
                karma.m_clauseAnd=False
            else:
                karma.m_clauseAnd=True
            code=code[1:]
            [code,karma,pointStack]=clauseToken(code,karma,pointStack)
            code=re.sub(r'^[\n\t ]*','',code)
            if code=='' or code[0]!='}':
                raise Exception('Error! Unbalanced bracket.')
            else:
                code=code[1:]
        else:
            code=typeSub+code
    return [code,karma,pointStack]


def netPToken(code,pointStack):
    title=r'^[\w \[\]~#.+=\-^/*\\!<\']*|^\[>=?\]'
    name=re.match(title,code).group()
    code=re.sub(title,'',code)
    if name=='':
        print('\n\n\nError! Invalid name.\nCode:',code)
        raise Exception('Error! Invalid name.')
    if name[-1]=='=' or name[-1]=='-':
        if len(code)>0 and code[0]=='>':
            code=name[-1]+code
            name=name[0:-1]
    con0_name=''
    con1_name=''
    text=''
    if code!='' and code[0]=='\"':
        code=code[1:]
        [code,text]=textToken(code)
        if code=='' or code[0]!='\"':
            print(code)
            raise Exception('Error! Unbalanced quote!')
        code=code[1:]
    if code!='' and code[0]=='(':
        code=code[1:]
        con0_name=re.match(title,code).group()
        code=re.sub(title,'',code)
        if code=='' or code[0]!=',':
            print(code)
            raise Exception('Error! Ilegal net point format. A net point must be title"text"(title,title)')
        code=code[1:]
        con1_name=re.match(title,code).group()
        code=re.sub(title,'',code)
        if code=='' or code[0]!=')':
            raise Exception('Error! Unbalanced bracket in a net point format!')
        code=code[1:]
    if name=='':
        print('Warning! There is a point without a name!')
    netP=pointStack.buildNetP(name,con0_name,con1_name)
    posFormat=r'^\[(-?\d+), *(-?\d+)\]'
    pos=re.findall(posFormat,code)
    if pos!=[]:
        x=int(pos[0][0])
        y=int(pos[0][1])
        netP.m_pos=[x,y]
        code=re.sub(r'^\[-?\d+, *-?\d+\]','',code)
    netP.m_text=text
    return [code,netP,pointStack]


def textToken(code):
    text=''
    preEnd=True
    while True:
        if code=='':
            break
        elif len(code)>1 and code[0:2]=='\\"':
            preEnd=False
        elif code[0]=='\"' and preEnd==True:
            break
        else:
            text+=code[0]
            preEnd=True
        code=code[1:]
    return [code,text]


def buildRelation(karma,typeCon,effect):
    if typeCon=='->':
        karma.m_yese.append(effect)
    elif typeCon=='->>':
        karma.m_noe.append(effect)
    elif typeCon=='=>':
        karma.m_yese.append(effect)
        effect.m_no=True
    elif typeCon=='=>>':
        karma.m_noe.append(effect)
        effect.m_no=True
    else:
        raise Exception('Error! Ilegal connection type!')
    effect.m_cause=karma
def genFCode(list_pt):
    fcode_pt="### 节点\n"
    fcode_con="### 关联\n"
    fcode_text="### 内容\n"


    i=0
    for pt in list_pt:
        fcode_pt+=pt.m_name+", "
        pt.m_name+="#%d"%(i)
        length=len(pt.m_text)
        if length!=0:
            fcode_text+="#%d, %d:\n%s\n## end\n"%(i,length,pt.m_text)
        i+=1


    for pt in list_pt:
        con1=""
        if pt.m_db[0]!=None:
            i=pt.m_db[0].m_name.rfind('#')
            if i!=-1:
                con1=pt.m_db[0].m_name[i+1:]
            else:
                con1="del"


        con2="#"
        if pt.m_db[1]!=None:
            i=pt.m_db[1].m_name.rfind('#')
            if i!=-1:
                con2=pt.m_db[1].m_name[i:]
            else:
                con2="#del"
        
        fcode_con+="%s%s, "%(con1,con2)


    for pt in list_pt:
        i=pt.m_name.find('#')
        pt.m_name=pt.m_name[0:i]


    fcode=fcode_pt+"\n"+fcode_con+"\n"+fcode_text+"### 结束"
    return fcode



def loadFCode(fcode):
    list_pt=[]
    list_del=[]


    code=fcode
    if code[0:7]!="### 节点\n":
        raise("错误! 没有检测到节点段落. ")
    code=code[7:]


    print("开始输入节点... ")
    i=-2
    while True:
        code=code[i+2:]
        if code=='':
            break
        elif code[0]=='\n':
            code=code[1:]
            break
        i=code.find(", ")
        if i==-1:
            raise("错误! 节点段落没有恰当地终止! ")
        list_pt.append(NetP(code[0:i]))


    print("完成节点输入! ")
    print("开始构建关联... ")


    if code[0:7]!="### 关联\n":
        raise("错误! 没有检测到关联段落. ")
    code=code[7:]


    i=-2
    n=-1
    while True:
        n+=1
        code=code[i+2:]
        if code=='':
            break
        elif code[0]=='\n':
            code=code[1:]
            break
        i=code.find(", ")
        if i==-1:
            raise("错误! 关联段落没有恰当地终止! ")
        con=code[:i]
        j=con.find('#')
        if j==-1:
            print("警告! 第%d个节点关联的格式有误, 该节点将被删除! "%(n))
            list_del.append(n)
            continue
        num0=con[0:j]
        num1=con[j+1:]
        if num0=="del" or num1=="del":
            list_del.append(n)
            continue


        con0=None
        if num0!='':
            try:
                con0=list_pt[int(num0)]
            except:
                list_del.append(n)
                continue
        con1=None
        if num1!='':
            try:
                con1=list_pt[int(num1)]
            except:
                list_del.append(n)
                continue
        list_pt[n].con(con0,con1)


        
    print("构建关联完成! ")
    print("开始读取内容... ")


    if code[0:7]!="### 内容\n":
        raise("错误! 没有检测到内容段落. ")
    code=code[7:]


    while True:
        result=re.match(r'#([\d]*), ([\d]*):\n',code)
        if result==None:
            if code!='' and code=="### 结束":
                break
            else:
                raise("错误! 内容的格式不正确. ")
        n=int(result.group(1))
        length=int(result.group(2))
        i=result.span()[1]
        code=code[i:]
        text=code[0:length]
        list_pt[n].m_text=text


        code=code[length:]
        if code[0:8]!='\n## end\n':
            raise("错误! 内容的格式不正确")
        code=code[8:]


    print("内容读取完成! ")
        
    if len(list_del)>0:
        print('There are %d invalid points!'%(len(list_del)))
        list_del.reverse()
        for i in list_del:
            print('Deleting %s...'%(list_pt[i].info()))
            list_pt.pop(i)


    return list_pt





if __name__=='__main__':
    list_km=readSubCode_tokener('test(,_a)->_a')
    karma=list_km[0].causeEnd()
    karma.setRangers()
    list_km[0].m_symbol.print()
    print(karma.info_karma())



## end
#702, 3:
709
## end
#706, 3:
733
## end
#709, 21843:
/*
+[J函数](,JS版本)

测试:...
测试list:...
+[新建阅读窗口](,测试)
Object

保存:...
+[新建阅读窗口](,保存)
setRange
readSubCode_tokener
buildPoints_tokener
removeComment
try
oneStep
*/



function writeStdCode_karma(karma,list_pt) {
    var karma_code='',text='';

    if(karma=='') {
        return [karma_code,list_pt];
    }
    if(!list_pt.includes(karma.m_symbol)) {
        list_pt.push(karma.m_symbol);
    }
    if(karma.m_buildMode==true) {
        karma_code+='+';
    }
    // var n=list_pt.indexOf(karma.m_symbol);
    // karma_code+=(list_pt.indexOf(karma.m_symbol)).toString();
    karma_code+=karma.m_symbol.info();
    if(karma.m_clause.length!=0) {
        if(karma.m_clauseAnd==false) {
            karma_code+='|';
        }
        karma_code+='{';
        
        for(var i=0;i<karma.m_clause.length;i++) {
            var clause=karma.m_clause[i];
            [text,list_pt]=writeStdCode_karma(clause,list_pt);
            karma_code+=text;
            if(clause!=karma.m_clause[karma.m_clause.length-1]) {
                karma_code+=',';
            }
        }
        karma_code+='}';
    }
    if(karma.m_yese.length+karma.m_noe.length>1) {
        if(karma.m_yesAnd==true) {
            karma_code+='&';
        }
        karma_code+=':';
    }
    
    for(var i=0;i<karma.m_yese.length;i++) {
        var end=karma.m_yese[i];
        if(end.m_no==false) {
            karma_code+='->';
        }
        
        else {
            karma_code+='=>';
        }
        [text,list_pt]=writeStdCode_karma(end,list_pt);
        karma_code+=text;
        if(end!=karma.m_yese[karma.m_yese.length-1]) {
            karma_code+=',';
        }
    }
    
    for(var i=0;i<karma.m_noe.length;i++) {
        var end=karma.m_noe[i];
        if (karma.m_yese.length!=0) {
            karma_code+=',';
        }
        if(end.m_no==false) {
            karma_code+='->>';
        }
        
        else {
            karma_code+='=>>';
        }
        [text,list_pt]=writeStdCode_karma(end,list_pt);
        karma_code+=text;
        if(end!=karma.m_noe[karma.m_noe.length-1]) {
            karma_code+=',';
        }
    }
    if(karma.m_yese.length+karma.m_noe.length>1) {
        karma_code+=';';
    }
    return [karma_code,list_pt];
}

/*
do
保存NetPStack:...
*/

class NetPStack {
    
    constructor() {
        this.m_builtStack=[{}];
        this.m_undefinedStack=[{}];
    }

    info() {
        var info='',info_stack='';
        
        info+='Built: ';
        for(var i in this.m_builtStack) {
            info_stack=''
            for(var key in this.m_builtStack[i]) {
                info_stack+=`${key}:${this.m_builtStack[i][key].info()},`;
            }
            info+=`{${info_stack}},`;
        }
        
        info+='<br>Undefined: ';
        for(var i in this.m_undefinedStack) {
            info_stack=''
            for(var key in this.m_undefinedStack[i]) {
                info_stack+=`${key}:${this.m_undefinedStack[i][key].info()},`;
            }
            info+=`{${info_stack}},`;
        }
        info+=`<br>`;
        return info;
    
    }

    popBuilt() {
        return this.m_builtStack.pop();
    }
    
    popUndefined() {
        return this.m_undefinedStack.pop();
    }
    
    pushBuilt(built) {
        this.m_builtStack.push(built);
    }
    
    pushUndefined(undefined_pt) {
        this.m_undefinedStack.push(undefined_pt);
    }
    
    enterClause() {
        var copy0={},copy1={};

        Object.assign(copy0,this.m_builtStack[this.m_builtStack.length-1]);
        this.m_builtStack.push(copy0);

        Object.assign(copy1,this.m_undefinedStack[this.m_undefinedStack.length-1]);
        this.m_undefinedStack.push(copy1);
    }


    insertPtIntotKarma_back(km0,netP) {
        var km_new=new Karma(netP),km;
        if(netP.m_name.length>1 & netP.m_name[0]=='+') {
            netP.m_name=netP.m_name.slice(1,netP.m_name.length);
            km_new.m_buildMode=true;
        }
        
        for(var i=0;i<km0.m_clause.length;i++) {
            km=km0.m_clause[i];
            km.m_cause=km_new;
        }
        
        for(var i=0;i<km0.m_yese.length;i++) {
            km=km0.m_yese[i];
            km.m_cause=km_new;
        }
        
        for(var i=0;i<km0.m_noe.length;i++) {
            km=km0.m_noe[i];
            km.m_cause=km_new;
        }
        km_new.m_clause=km0.m_clause;
        km_new.m_yese=km0.m_yese;
        km_new.m_noe=km0.m_noe;
        km0.m_yese=[km_new];
        km0.m_noe=[];
        km_new.m_cause=km0;
    }
    

    insertPtIntotKarma_front(km0,netP) {
        var i;
        var km_new=new Karma(netP);
        if(netP.m_name.length>1 & netP.m_name[0]=='+') {
            netP.m_name=netP.m_name.slice(1,netP.m_name.length);
            km_new.m_buildMode=true;
        }
        if(km0.m_cause!='') {
            var cause=km0.m_cause;
            km_new.m_cause=cause;
            if(cause.m_clause.includes(km0)) {
                i=cause.m_clause.indexOf(km0);
                cause.m_clause.splice(i,1);
                cause.m_clause.push(km_new);
            }
            
            else if(cause.m_yese.includes(km0)) {
                i=cause.m_yese.indexOf(km0);
                cause.m_yese.splice(i,1);
                cause.m_yese.push(km_new);
            }
            
            else if(cause.m_noe.includes(km0)) {
                i=cause.m_noe.indexOf(km0);
                cause.m_noe.splice(i,1);
                cause.m_noe.push(km_new);
            }
            
            else {
                print("Warning! The karma:"+km0.m_symbol.info()+", has a weird cause karma.");
            }
        }
        km0.m_cause=km_new;
        km_new.m_yese=[km0];
        if(km0.m_no==true) {
            km0.m_no=false;
            km_new.m_no=true;
        }
    }


    insertPtIntotKarma(km0,netP) {
        var otherP;
        if(km0.m_symbol.m_db[0]==netP) {
            otherP=km0.m_symbol.m_db[1];
        }
        
        else if(km0.m_symbol.m_db[1]==netP) {
            otherP=km0.m_symbol.m_db[0];
        }
        
        else {
            return;
        }

        if(km0.isType('新建') | km0.m_symbol.m_name=='[那]') {
            this.insertPtIntotKarma_back(km0,netP);
        }
        
        else if(km0.isType('普通非新建') | km0.m_symbol.m_name=='[is]') {
            if(otherP=='' | otherP.m_master=='') {
                this.insertPtIntotKarma_back(km0,netP);
            }
            
            else if(km0.allCauses().includes(otherP.m_master)) {
                this.insertPtIntotKarma_back(km0,netP);
            }
            
            else {
                this.insertPtIntotKarma_front(km0,netP);
            }
        }
        else if(km0.isType('引用')) {
        //else {
            this.insertPtIntotKarma_front(km0,netP);
        }
    }



    leaveClause() {
        var dict_len=0,dict_undef={};
        var dict_len2=0,dict_undef2={};
        var pt,km_head;
        if(this.m_undefinedStack.length==1) {
            dict_undef=this.m_undefinedStack[this.m_undefinedStack.length-1];
            dict_len=Object.keys(dict_undef).length;
            if(dict_len!=0) {
                for(var term in dict_undef) {
                    pt=dict_undef[term];
                    if(pt.m_master=='') {
                        km_head=pt.m_con[0].m_master;
                        this.insertPtIntotKarma(km_head,pt);
                    }
                }
            }
        }
        
        else {
            dict_undef=this.m_undefinedStack[this.m_undefinedStack.length-1];
            dict_len=Object.keys(dict_undef).length;

            dict_undef2=this.m_undefinedStack[this.m_undefinedStack.length-2];
            dict_len2=Object.keys(dict_undef2).length;

            if(dict_len>dict_len2) {
                for(var term in dict_undef) {
                    if(dict_undef2[term]==undefined) {
                        pt=dict_undef[term];
                        if(pt.m_master=='') {
                            km_head=pt.m_con[0].m_master;
                            this.insertPtIntotKarma(km_head,pt);
                        }
                    }
                }
            }
        }

        this.m_builtStack.pop();
        this.m_undefinedStack.pop();
    }
    
    popUndefinedName(name) {
        
        for(var i=0;i<this.m_undefinedStack.length;i++) {
            var stack=this.m_undefinedStack[i];
            delete stack[name];
        }
    }
    
    buildNetP(name,con0_name='',con1_name='') {
        var recent=this.m_builtStack[this.m_builtStack.length-1];
        var undefined_pt=this.m_undefinedStack[this.m_undefinedStack.length-1];
        var point=undefined_pt[name];
        if(point==undefined) {
            var name0=name;
            point=new NetP(name.replace(/#.*$/,''));
            recent[name0]=point;
        }
        
        else {
            delete undefined_pt[name];
        }
        if(con1_name!='') {
            var con1=recent[con1_name];
            if(con1==undefined) {
                var con1_name0=con1_name;
                con1=new NetP(con1_name.replace(/#.*$/,''));
                recent[con1_name0]=con1;
                undefined_pt[con1_name0]=con1;
            }
            point.connect(con1,1);
        }
        if(con0_name!='') {
            var con0=recent[con0_name];
            if(con0==undefined) {
                var con0_name0=con0_name;
                con0=new NetP(con0_name.replace(/#.*$/,''));
                recent[con0_name0]=con0;
                undefined_pt[con0_name]=con0;
            }
            point.connect(con0,0);
        }
        return point;
    }




}



class Parser {

    readSubCode_tokener(code) {
        var list_karma=[];
        var karma,pointStack;
        var result=true;
        
        while(code!='') {
            code=code.replace(/^[ \t\n]+/,'');
            if(code=='') {
                break;
            }

            [code,result]=this.removeComment(code);
            if(result==true) {
                continue;
            }
            
            else {
                [code,karma,pointStack]=this.chainToken(code);
                pointStack.leaveClause();
                karma=karma.causeEnd();
                karma.setRangers();
                list_karma.push(karma);
                if(code!='' & code[0]==';') {
                    code=code.slice(1,code.length);
                }
            }
        }
        return list_karma;
    }

/*
buildNetP
*/

    buildPoints_tokener(code) {
        code=code.replace(/^[ \t\n\r]*/,'');

        var list_pt=[],netP;
        var pointStack=new NetPStack();

        while(code!='') {
            [code,netP,pointStack]=this.netPToken(code,pointStack);
            list_pt.push(netP);
            code=code.replace(/^\[-?\d+,-?\d+\]/,'');
            code=code.replace(/^[ \t\n\r;]*/,'');

        }
        return list_pt;
    }


    removeComment(code) {
        if(code.length==0) {
            return [code,false];
        }
        
        else if(code[0]=='#') {
            code=code.replace(/^#.*/,'');
        }
        
        else if(code.slice(0,3)=='"""') {
            code=code.slice(3,code.length);
            
            while(true) {
                if(code.length<3) {
                    code='';
                    break;
                }
                
                else if(code.slice(0,3)=='"""') {
                    break;
                }
                
                else {
                    code=code.replace(/^.*\n?/,'');
                }
            }
            code=code.slice(3,code.length);
        }
        
        else {
            return [code,false];
        }
        return [code,true];
    }


    chainToken(code,pointStack='') {
        var karma;
        if(pointStack=='') {
            pointStack=new NetPStack();
        }
        [code,karma,pointStack]=this.karmaToken(code,pointStack);
        if(code=='' | code[0]==';' | code[0]=='\n' | code[0]=='}') {
            return [code,karma,pointStack];
        }
        
        else if(code[0]==',') {
            return [code,karma,pointStack];
        }
        
        else if(code[0]==':') {
            code=code.slice(1,code.length);
            [code,karma,pointStack]=this.splitToken(code,karma,pointStack);
        }
        
        else if(code[0]=='|' | code[0]=='&') {
            var typeSub=code[0];
            code=code.slice(1,code.length);
            if(code!='' & code[0]==':') {
                if(typeSub=='|') {
                    karma.m_noAnd=false;
                    karma.m_yesAnd=false;
                }
                
                else {
                    karma.m_noAnd=true;
                    karma.m_yesAnd=true;
                }
                code=code.slice(1,code.length);
                [code,karma,pointStack]=this.splitToken(code,karma,pointStack);
            }
        }
        
        else {
            var typeCon,effect;
            [code,typeCon]=this.conToken(code);
            [code,effect,pointStack]=this.chainToken(code,pointStack);
            this.buildRelation(karma,typeCon,effect);
        }
        return [code,karma,pointStack];
    }


    conToken(code) {
        var typeCon;
        while(code.length>3 & code.slice(0,3)=='...') {
            code=code.replace(/^\.\.\..*[\n\t ]*/,'');
        }
        code=code.replace(/^[ \t]*/,'');
        if(code.length>2 & code.slice(0,3)=='->>') {
            typeCon=code.slice(0,3);
            code=code.slice(3,code.length);
        }
        
        else if(code.length>2 & code.slice(0,3)=='=>>') {
            typeCon=code.slice(0,3);
            code=code.slice(3,code.length);
        }
        
        else if(code.length>1 & code.slice(0,2)=='->') {
            typeCon=code.slice(0,2);
            code=code.slice(2,code.length);
        }
        
        else if(code.length>1 & code.slice(0,2)=='=>') {
            typeCon=code.slice(0,2);
            code=code.slice(2,code.length);
        }
        
        else {
            print('\n\n\nIllegal connection symbol!\nCode:',code);
            throw 'Illegal connection symbol!';
        }
        code=code.replace(/^[ \t]*/,'');
        return [code,typeCon];
    }


    clauseToken(code,karma,pointStack) {
        pointStack.enterClause();
        var clause;

        while(true) {
            code=code.replace(/^[ \t\n]*/,'');
            if(code=='') {
                throw 'Error! Unbalanced bracket!';
            }
            
            else if(code[0]=='}') {
                break;
            }
            
            else {
                [code,clause,pointStack]=this.chainToken(code,pointStack);
                karma.m_clause.push(clause);
                clause.m_cause=karma;
                if(code!='' & code[0]!=',') {
                    break;
                }
                
                else if(code!='') {
                    code=code.slice(1,code.length);
                }
            }
        }
//print(pointStack.info());
        pointStack.leaveClause();
        return [code,karma,pointStack];
    }

/*
leaveClause
*/

    splitToken(code,karma,pointStack) {
        var typeCon,effect;

        while(true) {
            code=code.replace(/^[ \t\n]*/,'');
            [code,typeCon]=this.conToken(code);
            [code,effect,pointStack]=this.chainToken(code,pointStack);
            this.buildRelation(karma,typeCon,effect);
            code=code.replace(/^[ \t\n]*/,'');
            if(code=='' | code[0]==';' | code[0]=='}') {
                break;
            }
            
            else if(code[0]!=',') {
                print('\n\n\n\nError! Ilegal splitting type!\nCode:',code);
                throw 'Error! Ilegal splitting type!';
            }
            
            else {
                code=code.slice(1,code.length);
            }
        }
        return [code,karma,pointStack];
    }



    karmaToken(code,pointStack) {
        if(code=='') {
            throw 'Error! Invalid karma detected!';
        }

        var buildType=false;
        var karma='';
        var netP;

        if(code[0]=='+') {
            buildType=true;
        }
        [code,netP,pointStack]=this.netPToken(code,pointStack);
        karma=new Karma(netP);
        if(buildType==true & netP.m_name!='+') {
            netP.m_name=netP.m_name.slice(1,netP.m_name.length);
            karma.m_buildMode=true;
        }

        if(code!='' & code[0]=='{') {
            code=code.slice(1,code.length);
            [code,karma,pointStack]=this.clauseToken(code,karma,pointStack);
            code=code.replace(/^[\n\t ]*/,'');
            if(code=='' | code[0]!='}') {
                print('\n\n\nError! Unbalanced bracket.\nCode:',code);
                throw 'Error! Unbalanced bracket.';
            }
            
            else {
                code=code.slice(1,code.length);
            }
        }

        return [code,karma,pointStack];
    }


    netPToken(code,pointStack) {
        var title=/^[\w\u3000\u3400-\u4DBF\u4E00-\u9FFF \[\]~#.+=\-^/*\\!<\']*|^\[>=?\]/;
        var name=code.match(title)[0];
        code=code.replace(title,'');
        if(name=='') {
            print('\n\n\nError! Invalid name.\nCode:',code);
            throw 'Error! Invalid name.';
        }


        if(name[name.length-1]=='=' | name[name.length-1]=='-') {
            if(code.length>0 & code[0]=='>') {
                code=name[name.length-1]+code;
                name=name.slice(0,name.length-1);
            }
        }

        var con0_name='';
        var con1_name='';
        var text='';
        if(code!='' & code[0]=='\"') {
            code=code.slice(1,code.length);
            [code,text]=this.textToken(code);
            if(code=='' | code[0]!='\"') {
                print(code);
                throw 'Error! Unbalanced quote!';
            }
            code=code.slice(1,code.length);
        }
        if(code!='' & code[0]=='(') {
            code=code.slice(1,code.length);
            con0_name=code.match(title)[0];
            code=code.replace(title,'');
            if(code=='' | code[0]!=',') {
                print(code);
                throw 'Error! Ilegal net point format. A net point must be title"text"(title,title)';
            }
            code=code.slice(1,code.length);
            con1_name=code.match(title)[0];
            code=code.replace(title,'');
            if(code=='' | code[0]!=')') {
                throw 'Error! Unbalanced bracket in a net point format!';
            }
            code=code.slice(1,code.length);
        }
        if(name=='') {
            print('Warning! There is a point without a name!');
        }
        var netP=pointStack.buildNetP(name,con0_name,con1_name);
        //var netP=new NetP(name,text);
        netP.m_text=text;
        return [code,netP,pointStack];
    }



    textToken(code) {
        var text='';
        var preEnd=true;
        
        while(true) {
            if(code=='') {
                break;
            }
            
            else if(code.length>1 & code.slice(0,2)=='\\"') {
                preEnd=false;
            }
            
            else if(code[0]=='\"' & preEnd==true) {
                break;
            }
            
            else {
                text+=code[0];
                preEnd=true;
            }
            code=code.slice(1,code.length);
        }
        return [code,text];
    }


    buildRelation(karma,typeCon,effect) {
        if(typeCon=='->') {
            karma.m_yese.push(effect);
        }
        
        else if(typeCon=='->>') {
            karma.m_noe.push(effect);
        }
        
        else if(typeCon=='=>') {
            karma.m_yese.push(effect);
            effect.m_no=true;
        }
        
        else if(typeCon=='=>>') {
            karma.m_noe.push(effect);
            effect.m_no=true;
        }
        
        else {
            throw 'Error! Ilegal connection type!';
        }
        effect.m_cause=karma;
    }

}


function info_PtList(list_pt) {
    var info_pt='';
    for(var i=0;i<list_pt.length;i++) {
        var pt=list_pt[i];
        info_pt+=pt.info()+','
    }

    return `[${info_pt}]`;
}


function info_PtPool(pool_pt) {
    var info_pt='';
    for(var key in pool_pt) {
        var list_pt=pool_pt[key];
        info_pt+=key+`: ${info_PtList(list_pt)},`;
    }

    return `{${info_pt}}`;
}

function printPtList(list_pt) {
    print(info_PtList(list_pt));
}

function printPtPool(pool_pt) {
    print(info_PtPool(pool_pt));
}


function mergeArrays(list0,list1) {
    for(var j=0;j<list1.length;j++) {
        if(!list0.includes(list1[j])) {
            list0.push(list1[j]);
        }
    }
}

/*
+[J函数](,JS版本)

保存run_code:...
*/

function run_code_line(km,list_pt) {
    var code,list_km,list_new;

    //[code,km]=parser.chainToken(code0);
    list_km=km.allEffects();
    
    list_km[0].m_stage=1;
    var change=true,change1;
    
    while(change) {
        change=false;
        for(var i=0;i<list_km.length;i++) {
            [change1,list_new]=list_km[i].Reason_oneStep(list_pt);
            karma=list_km[i];
            //print(karma.info(),list_new.length);
            mergeArrays(list_pt,list_new);
    
            if(change1 & !change) {
                change=true;
            }
        }
        //printPtList(list_pt);
        //print(change);
        //print();
    }
    return code;
}

function run_code(code0,list_pt) {
    var code1=code0;
    var parser=new Parser();
    list_km=parser.readSubCode_tokener(code0);

    for(var i in list_km) {
        run_code_line(list_km[i],list_pt);
    }

    return code0;
}



/*
readSubCode
+[J函数](,JS版本)
测试stdCode:...
测试Parser:...
测试:...
+[J函数](,测试)
+[新建阅读窗口](,测试)
*/
## end
#713, 55:


list_index:...
多输出:...
字符串:...
regex:...
dict:...




## end
#715, 340:
/*
+[J函数](,list_index)
*/


var list_pt=[1,2,5,4];
list_pt=list_pt.concat([12,23]);

print(list_pt);
print(list_pt.indexOf(5));
print(list_pt.slice(0,3));
print(list_pt[list_pt.length-1]);
print(!list_pt.includes(0));
print(list_pt.includes(0));

print(undefined==undefined);

for (var pt in list_pt) {
    print('pt:',pt,list_pt[pt]);
}



## end
#717, 112:
/*
+[J函数](,多输出)
*/

function foo(a,b) {
    return [a,[a,b]];
}

var A,B;
[A,B]=foo(1,2);
print(A);
print(B);



## end
#719, 114:
/*
+[J函数](,字符串)
*/

var A='123',B,C;
A+='4344';
B=(1+3).toString();
C=`小明:${A};小红:${A}`;

print(A,B);
print(C);



## end
#721, 379:
/*
记住"自然语言"
+[J函数](,测试stdCode)
*/


var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C)
print(B.info())

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

karma1.addKarma(karma2);
karma2.addKarma(karma3,'从句');

karma3.info_cause();

list_km=[karma1,karma2,karma3];
print(writeStdCode_karma(karma1,[]));




/*
+[J函数](,测试stdCode)
*/
## end
#723, 285:
/*
+[J函数](,regex)
Nini, 打开JS编译器(文件)

参考::https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
+[打开](,参考)

测试match:...
*/

var text='AAAA(B,C)->C(A,B)';
print(text.replace(/^\w*/,'test'));
print(text);
print(text.split(/\w*/));
print(text);
print(text[1]);

## end
#725, 81:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
## end
#726, 4:
1108
## end
#729, 15900:
/*
+[J函数](,JS版本)

测试list:...
+[新建阅读窗口](,测试list)
str

保存:...
*/



function writeStdCode_karma(karma,list_pt) {
    var karma_code='',text='';

    if(karma=='') {
        return [karma_code,list_pt];
    }
    if(!list_pt.includes(karma.m_symbol)) {
        list_pt.push(karma.m_symbol);
    }
    if(karma.m_buildMode==true) {
        karma_code+='+';
    }
    // var n=list_pt.indexOf(karma.m_symbol);
    karma_code+=(list_pt.indexOf(karma.m_symbol)).toString();
    if(karma.m_clause.length!=0) {
        if(karma.m_clauseAnd==false) {
            karma_code+='|';
        }
        karma_code+='{';
        
        for(var i=0;i<karma.m_clause.length;i++) {
            var clause=karma.m_clause[i];
            [text,list_pt]=writeStdCode_karma(clause,list_pt);
            karma_code+=text;
            if(clause!=karma.m_clause[karma.m_clause.length-1]) {
                karma_code+=',';
            }
        }
        karma_code+='}';
    }
    if(karma.m_yese.length+karma.m_noe.length>1) {
        if(karma.m_yesAnd==true) {
            karma_code+='&';
        }
        karma_code+=':';
    }
    
    for(var i=0;i<karma.m_yese.length;i++) {
        var end=karma.m_yese[i];
        if(end.m_no==false) {
            karma_code+='->';
        }
        
        else {
            karma_code+='=>';
        }
        [text,list_pt]=writeStdCode_karma(end,list_pt);
        karma_code+=text;
        if(end!=karma.m_yese[karma.m_yese.length-1]) {
            karma_code+=',';
        }
    }
    
    for(var i=0;i<karma.m_noe.length;i++) {
        var end=karma.m_noe[i];
        if(end.m_no==false) {
            karma_code+='->>';
        }
        
        else {
            karma_code+='=>>';
        }
        [text,list_pt]=writeStdCode_karma(end,list_pt);
        karma_code+=text;
        if(end!=karma.m_noe[karma.m_noe.length-1]) {
            karma_code+=',';
        }
    }
    if(karma.m_yese.length+karma.m_noe.length>1) {
        karma_code+=';';
    }
    return [karma_code,list_pt];
}


class NetPStack {
    
    constructor() {
        this.m_builtStack=[{}];
        this.m_undefinedStack=[{}];
    }
}


/*
    popBuilt() {
        return this.m_builtStack.pop();
    }
    
    popUndefined() {
        return this.m_undefinedStack.pop();
    }
    
    pushBuilt(built) {
        this.m_builtStack.push(built);
    }
    
    pushUndefined(undefined) {
        this.m_undefinedStack.push(undefined);
    }
    
    enterClause() {
        this.m_builtStack.push(this.m_builtStack[this.m_builtStack.length-1].copy());
        this.m_undefinedStack.push(this.m_undefinedStack[this.m_undefinedStack.length-1].copy());
    }
    
    leaveClause() {
        if(len(this.m_undefinedStack)==1) {
            if(this.m_undefinedStack[this.m_undefinedStack.length-1]!={}) {
                
                for(var i=0;i<this.m_undefinedStack[this.m_undefinedStack.length-1].length;i++) {
                    var term=this.m_undefinedStack[this.m_undefinedStack.length-1][i];
                    pt=this.m_undefinedStack[this.m_undefinedStack.length-1][term];
                    if(pt.m_master=='') {
                        km_head=pt.m_con[0].m_master;
                        insertPtIntotKarma(km_head,pt);
                    }
                }
            }
        }
        
        else if(len(this.m_undefinedStack[this.m_undefinedStack.length-1])>len(this.m_undefinedStack[this.m_undefinedStack.length-2])) {
            
            for(var i=0;i<this.m_undefinedStack[this.m_undefinedStack.length-1].length;i++) {
                var term=this.m_undefinedStack[this.m_undefinedStack.length-1][i];
                if(term not in this.m_undefinedStack[this.m_undefinedStack.length-2]) {
                    pt=this.m_undefinedStack[this.m_undefinedStack.length-1][term];
                    if(pt.m_master=='') {
                        km_head=pt.m_con[0].m_master;
                        insertPtIntotKarma(km_head,pt);
                    }
                }
            }
        }
        this.m_builtStack.pop();
        this.m_undefinedStack.pop();
    }
    
    popUndefinedName(name) {
        
        for(var i=0;i<this.m_undefinedStack.length;i++) {
            var stack=this.m_undefinedStack[i];
            stack.pop(name);
        }
    }
    
    buildNetP(name,con0_name='',con1_name='') {
        recent=this.m_builtStack[this.m_builtStack.length-1];
        undefined=this.m_undefinedStack[this.m_undefinedStack.length-1];
        point=undefined.get(name,'');
        if(point=='') {
            point=NetP(re.sub(r'#.*$','',name));
            recent.update({name:point});
        }
        
        else {
            undefined.pop(name);
        }
        if(con1_name!='') {
            con1=recent.get(con1_name,'');
            if(con1=='') {
                con1=NetP(re.sub(r'#.*$','',con1_name));
                recent.update({con1_name:con1});
                undefined.update({con1_name:con1});
            }
            point.connect(con1,1);
        }
        if(con0_name!='') {
            con0=recent.get(con0_name,'');
            if(con0=='') {
                con0=NetP(re.sub(r'#.*$','',con0_name));
                recent.update({con0_name:con0});
                undefined.update({con0_name:con0});
            }
            point.connect(con0,0);
        }
        return point;
    }
}
*/


Class Parser {
    chainToken(code,pointStack='') {
        var karma;
        if(pointStack=='') {
            pointStack=new NetPStack();
        }
        [code,karma,pointStack]=this.karmaToken(code,pointStack);
        if(code=='' | code[0]==';' | code[0]=='\n' | code[0]=='}') {
            return [code,karma,pointStack];
        }
        
        else if(code[0]==',') {
            return [code,karma,pointStack];
        }
        
        else if(code[0]==':') {
            code=code.slice(1,code.length);
            [code,karma,pointStack]=this.splitToken(code,karma,pointStack);
        }
        
        else if(code[0]=='|' | code[0]=='&') {
            var typeSub=code[0];
            code=code.slice(1,code.length);
            if(code!='' & code[0]==':') {
                if(typeSub=='|') {
                    karma.m_noAnd=false;
                    karma.m_yesAnd=false;
                }
                
                else {
                    karma.m_noAnd=true;
                    karma.m_yesAnd=true;
                }
                code=code.slice(1,code.length);
                [code,karma,pointStack]=this.splitToken(code,karma,pointStack);
            }
        }
        
        else {
            var typeCon,effect;
            [code,typeCon]=this.conToken(code);
            [code,effect,pointStack]=this.chainToken(code,pointStack);
            this.buildRelation(karma,typeCon,effect);
        }
        return [code,karma,pointStack];
    }


    conToken(code) {
        var typeCon;
        while(code.length>3 & code.slice(0,3)=='...') {
            code.replace(/^\.\.\..*[\n\t ]*/,'');
        }
        code.replace(/^[ \t]*/,'');
        if(code.length>2 & code.slice(0,3)=='->>') {
            typeCon=code.slice(0,3);
            code=code.slice(3,code.length);
        }
        
        else if(code.length>2 & code.slice(0,3)=='=>>') {
            typeCon=code.slice(0,3);
            code=code.slice(3,code.length);
        }
        
        else if(code.length>1 & code.slice(0,2)=='->') {
            typeCon=code.slice(0,2);
            code=code.slice(2,code.length);
        }
        
        else if(code.length>1 & code.slice(0,2)=='=>') {
            typeCon=code.slice(0,2);
            code=code.slice(2,code.length);
        }
        
        else {
            print('\n\n\nIllegal connection symbol!\nCode:',code);
            //raise Exception('Illegal connection symbol!');
        }
        code.replace(/^[ \t]*/,'');
        return [code,typeCon];
    }


    clauseToken(code,karma,pointStack) {
        //pointStack.enterClause();
        
        while(true) {
            code.replace(/^[ \t\n]*/,'');
            if(code=='') {
                //raise Exception('Error! Unbalanced bracket!');
            }
            
            else if(code[0]=='}') {
                break;
            }
            
            else {
                [code,clause,pointStack]=chainToken(code,pointStack);
                karma.m_clause.push(clause);
                clause.m_cause=karma;
                if(code!='' & code[0]!=',') {
                    break;
                }
                
                else if(code!='') {
                    code=code.slice(1,code.length);
                }
            }
        }
        //pointStack.leaveClause();
        return [code,karma,pointStack];
    }


    splitToken(code,karma,pointStack) {
        
        while(true) {
            code.replace(/^[ \t\n]*/,'');
            [code,typeCon]=conToken(code);
            [code,effect,pointStack]=chainToken(code,pointStack);
            buildRelation(karma,typeCon,effect);
            code.replace(/^[ \t\n]*/,'');
            if(code=='' | code[0]==';' | code[0]=='}') {
                break;
            }
            
            else if(code[0]!=',') {
                print('\n\n\n\nError! Ilegal splitting type!\nCode:',code);
                //raise Exception('Error! Ilegal splitting type!');
            }
            
            else {
                code=code.slice(1,code.length);
            }
        }
        return [code,karma,pointStack];
    }

    karmaToken(code,pointStack) {
        if(code=='') {
            //raise Exception('Error! Invalid karma detected!');
        }
        buildType=false;
        karma='';
        if(code[0]=='+') {
            buildType=true;
        }
        [code,netP,pointStack]=netPToken(code,pointStack);
        karma=Karma(netP);
        if(buildType==true & netP.m_name!='+') {
            netP.m_name=netP.m_name.slice(1,netP.m_name.length);
            karma.m_buildMode=true;
        }
        if(code!='' & code[0]=='{') {
            code=code.slice(1,code.length);
            [code,karma,pointStack]=clauseToken(code,karma,pointStack);
            code.replace(/^[\n\t ]*/,'');
            if(code=='' | code[0]!='}') {
                print('\n\n\nError! Unbalanced bracket.\nCode:',code);
                //raise Exception('Error! Unbalanced bracket.');
            }
            
            else {
                code=code.slice(1,code.length);
            }
        }
        
        else if(code!='' & (code[0]=='|' | code[0]=='&')) {
            typeSub=code[0];
            code=code.slice(1,code.length);
            if(code!='' & code[0]=='{') {
                if(typeSub=='|') {
                    karma.m_clauseAnd=false;
                }
                
                else {
                    karma.m_clauseAnd=true;
                }
                code=code.slice(1,code.length);
                [code,karma,pointStack]=clauseToken(code,karma,pointStack);
                code.replace(/^[\n\t ]*/,'');
                if(code=='' | code[0]!='}') {
                    //raise Exception('Error! Unbalanced bracket.');
                }
                
                else {
                    code=code.slice(1,code.length);
                }
            }
            
            else {
                code=typeSub+code;
            }
        }
        return [code,karma,pointStack];
    }


    netPToken_quick(code) {
        title=r'^[\w \[\]~#.+=\-^/*\\!<\']*|^\[>=?\]';
        order=r'#.*$';
        name=re.match(title,code).group();
        code=re.sub(title,'',code);
        if(name=='') {
            print('\n\n\nError! Invalid name.\nCode:',code);
            //raise Exception('Error! Invalid name.');
        }
        if(name[name.length-1]=='=' | name[name.length-1]=='-') {
            if(len(code)>0 & code[0]=='>') {
                code=name[name.length-1]+code;
                name=name.slice(0,name.length-1);
            }
        }
        con0_name='';
        con1_name='';
        text='';
        if(code!='' & code[0]=='\"') {
            code=code.slice(1,code.length);
            [code,text]=textToken(code);
            if(code=='' | code[0]!='\"') {
                print(code);
                //raise Exception('Error! Unbalanced quote!');
            }
            code=code.slice(1,code.length);
        }
        if(code!='' & code[0]=='(') {
            code=code.slice(1,code.length);
            con0_name=re.match(title,code).group();
            code=re.sub(title,'',code);
            if(code=='' | code[0]!=',') {
                print(code);
                //raise Exception('Error! Ilegal net point format. A net point must be title"text"(title,title)');
            }
            code=code.slice(1,code.length);
            con1_name=re.match(title,code).group();
            code=re.sub(title,'',code);
            if(code=='' | code[0]!=')') {
                //raise Exception('Error! Unbalanced bracket in a net point format!');
            }
            code=code.slice(1,code.length);
        }
        if(name=='') {
            print('Warning! There is a point without a name!');
        }
        n=re.search(order,name);
        if(n=='') {
            //raise Exception('Error! It\'s not a TOP.');
        }
        
        else {
            n=n.group()[1:];
            int(n);
        }
        name=re.sub(order,'',name);
        netP=NetP(name,text);
        posFormat=r'^\[(-?\d+), *(-?\d+)\]';
        pos=re.findall(posFormat,code);
        if(pos.length!=0) {
            x=int(pos[0][0]);
            y=int(pos[0][1]);
            netP.m_pos=[x,y];
            code=re.sub(r'^\[-?\d+, *-?\d+\]','',code);
        }
        del_flag=false;
        n0='';
        
        try {
            if(con0_name!='') {
                str_n0=re.search(order,con0_name).group();
                if(len(str_n0)>1) {
                    n0=int(str_n0.slice(1,str_n0.length));
                }
            }
        } catch(e) {
            print('Warning! The %s(%s,%s) connects an invalid point'%(name,con0_name,con1_name));
            del_flag=true;
        }
        n1='';
        
        try {
            if(con1_name!='') {
                str_n1=re.search(order,con1_name).group();
                if(len(str_n1)>1) {
                    n1=int(str_n1.slice(1,str_n1.length));
                }
            }
        } catch(e) {
            print('Warning! The %s(%s,%s) connects an invalid point'%(name,con0_name,con1_name));
            del_flag=true;
        }
        return [code,netP,n0,n1,del_flag];
    }



    textToken(code) {
        text='';
        preEnd=true;
        
        while(true) {
            if(code=='') {
                break;
            }
            
            else if(len(code)>1 & code.slice(0,2)=='\\"') {
                preEnd=false;
            }
            
            else if(code[0]=='\"' & preEnd==true) {
                break;
            }
            
            else {
                text+=code[0];
                preEnd=true;
            }
            code=code.slice(1,code.length);
        }
        return [code,text];
    }


    buildRelation(karma,typeCon,effect) {
        if(typeCon=='->') {
            karma.m_yese.push(effect);
        }
        
        else if(typeCon=='->>') {
            karma.m_noe.push(effect);
        }
        
        else if(typeCon=='=>') {
            karma.m_yese.push(effect);
            effect.m_no=true;
        }
        
        else if(typeCon=='=>>') {
            karma.m_noe.push(effect);
            effect.m_no=true;
        }
        
        else {
            //raise Exception('Error! Ilegal connection type!');
        }
        effect.m_cause=karma;
    }


}




/*
+[J函数](,JS版本)
测试stdCode:...
测试Parser:...
+[新建阅读窗口](,测试Parser)
*/
## end
#730, 178:
+[调用词典动词](+[做],+替换)->+[做](,+[临时文本]#7)...
->+[临时文本]#8"%[变量][%[变量].length-%[n]]"->+为(+[做],+[临时文本]#8)...
    ->+[del](,+为)->[]->[]->+[.](JS版本#6,+[临时文本]#7)->+[临时文本]#7"%[变量]\[-%[n]\]"
## end
#731, 23:
4.7, 3.6500000000000004
## end
#732, 23:
6.9, 3.6500000000000004
## end
#733, 23:
9.1, 3.6500000000000004
## end
#734, 24:
13.499999999999998, 7.25
## end
#735, 24:
13.499999999999998, 7.25
## end
#736, 24:
13.499999999999998, 7.25
## end
#737, 24:
13.499999999999998, 7.25
## end
#738, 24:
13.499999999999998, 7.25
## end
#739, 24:
13.499999999999998, 7.25
## end
#740, 24:
13.499999999999998, 7.25
## end
#741, 24:
13.499999999999998, 7.25
## end
#742, 24:
13.499999999999998, 7.25
## end
#743, 24:
13.499999999999998, 7.25
## end
#744, 24:
13.499999999999998, 7.25
## end
#745, 24:
13.499999999999998, 7.25
## end
#746, 24:
13.499999999999998, 7.25
## end
#747, 24:
13.499999999999998, 7.25
## end
#748, 23:
2.2, 1.1500000000000001
## end
#749, 23:
4.4, 1.1500000000000001
## end
#750, 23:
6.6, 1.1500000000000001
## end
#751, 38:
10.999999999999998, 4.8500000000000005
## end
#752, 38:
10.999999999999998, 4.8500000000000005
## end
#753, 38:
10.999999999999998, 4.8500000000000005
## end
#754, 38:
10.999999999999998, 4.8500000000000005
## end
#755, 38:
10.999999999999998, 4.8500000000000005
## end
#756, 38:
10.999999999999998, 4.8500000000000005
## end
#757, 38:
10.999999999999998, 4.8500000000000005
## end
#758, 38:
10.999999999999998, 4.8500000000000005
## end
#759, 38:
10.999999999999998, 4.8500000000000005
## end
#760, 23:
2.2, 1.1500000000000001
## end
#761, 23:
2.2, 1.1500000000000001
## end
#762, 8:
9.2, 6.1
## end
#763, 8:
9.2, 6.1
## end
#764, 8:
9.2, 6.1
## end
#765, 8:
9.2, 6.1
## end
#766, 8:
9.2, 6.1
## end
#767, 8:
9.2, 6.1
## end
#768, 8:
9.2, 6.1
## end
#769, 8:
9.2, 6.1
## end
#770, 8:
9.2, 6.1
## end
#771, 8:
9.2, 6.1
## end
#772, 8:
6.8, 4.9
## end
#773, 24:
11.399999999999999, 12.1
## end
#774, 24:
11.399999999999999, 12.1
## end
#775, 24:
11.399999999999999, 12.1
## end
#776, 24:
11.399999999999999, 12.1
## end
#777, 24:
11.399999999999999, 12.1
## end
#778, 24:
11.399999999999999, 12.1
## end
#779, 24:
11.399999999999999, 12.1
## end
#780, 24:
11.399999999999999, 12.1
## end
#781, 24:
11.399999999999999, 12.1
## end
#782, 24:
11.399999999999999, 12.1
## end
#783, 24:
11.399999999999999, 12.1
## end
#784, 24:
11.399999999999999, 12.1
## end
#785, 24:
11.399999999999999, 12.1
## end
#786, 24:
11.399999999999999, 12.1
## end
#787, 24:
11.399999999999999, 12.1
## end
#788, 24:
11.399999999999999, 12.1
## end
#789, 24:
11.399999999999999, 12.1
## end
#790, 24:
11.399999999999999, 12.1
## end
#791, 24:
11.399999999999999, 12.1
## end
#792, 24:
11.399999999999999, 12.1
## end
#793, 24:
11.399999999999999, 12.1
## end
#794, 24:
11.399999999999999, 12.1
## end
#795, 24:
11.399999999999999, 12.1
## end
#797, 415:
/*
+[J函数](,测试Parser)

保存karma:...
conToken:...
Parser语句:...

测试
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var code,text,list_pt,list_km;

code="C(A,B)->A->B{[]=>1}:=>>D1,->D2";
[code,km]=parser.chainToken(code);
list_km=km.allEffects();
print(list_km,list_km.length);

[code1,list_pt]=writeStdCode_karma(km,[]);
print(code1);



/*
+[J函数](,测试Parser)
*/
## end
#798, 24:
11.399999999999999, 12.1
## end
#799, 24:
11.399999999999999, 12.1
## end
#800, 24:
11.399999999999999, 12.1
## end
#801, 24:
11.399999999999999, 12.1
## end
#802, 24:
11.399999999999999, 12.1
## end
#803, 24:
11.399999999999999, 12.1
## end
#804, 24:
11.399999999999999, 12.1
## end
#805, 24:
11.399999999999999, 12.1
## end
#806, 24:
11.399999999999999, 12.1
## end
#807, 24:
11.399999999999999, 12.1
## end
#808, 24:
11.399999999999999, 12.1
## end
#809, 24:
11.399999999999999, 12.1
## end
#810, 24:
11.399999999999999, 12.1
## end
#811, 24:
11.399999999999999, 12.1
## end
#812, 24:
11.399999999999999, 12.1
## end
#813, 24:
11.399999999999999, 12.1
## end
#814, 24:
11.399999999999999, 12.1
## end
#815, 24:
11.399999999999999, 12.1
## end
#816, 24:
11.399999999999999, 12.1
## end
#817, 24:
11.399999999999999, 12.1
## end
#818, 24:
11.399999999999999, 12.1
## end
#819, 24:
11.399999999999999, 12.1
## end
#820, 24:
11.399999999999999, 12.1
## end
#822, 254:
/*
+[J函数](,测试match)
*/

var title=/^[\w \[\]~#.+=\-^/*\\!<\']*|^\[>=?\]/;
var order=/#(.*)$/;
var code='+ABCDD#12#3"12323"(A,B)';

name=code.match(title);
print(name);
print(code);
n=name.search(order);
print(name[n],n,name.match(order));
print(name);



## end
#823, 159:
+[调用词典动词](+[做],+转换)->+[做](+[函数]#26,)...
->+[Javascript]#28->+为(+[做],+[Javascript]#28)...
    ->+[del](,+为)->[]->+[.](测试结构#25,+[函数]#26)->+[函数]#26"netPToken"->[]
## end
#825, 634:
/*
+[J函数](,测试Parser)

保存karma:...
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

var code,text,list_pt;

print('????');
code="C(A,B)->A->B";
parser.buildRelation(karma1,'->>',karma2);
parser.buildRelation(karma1,'=>>',karma3);
//[code,pt]=parser.netPToken(code);
//[code,km]=parser.karmaToken(code);
[code,km]=parser.chainToken(code);

print(code,karma1.m_cause);
//print(km,km.m_symbol.info());

print('!???!');
//[code1,list_pt]=writeStdCode_karma(km,[]);
//print(code1);



/*
+[J函数](,测试Parser)
*/
## end
#827, 649:
/*
+[J函数](,测试Parser)

保存karma:...
conToken:...
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

var code,text,list_pt;

print('????');
code="C(A,B)->A->B";
parser.buildRelation(karma1,'->>',karma2);
parser.buildRelation(karma1,'=>>',karma3);
//[code,pt]=parser.netPToken(code);
[code,km]=parser.karmaToken(code);
[code,typeCon]=parser.conToken(code);

print(code);
print(typeCon);
//print(km,km.m_symbol.info());

print('!???!');
//[code1,list_pt]=writeStdCode_karma(km,[]);
//print(code1);



/*
+[J函数](,测试Parser)
*/
## end
#829, 530:
/*
+[J函数](,dict)
*/

var foo=function() {return 0};
var a={};
var dict={"test":[1,2,3],"name": "Xiantao Cheng",foo:1,a:2,1:"num"};
dict["test"].push(1);
dict["city"]="Bengbu";
print(dict["name"],dict.name)
print(foo)
print(dict[foo],dict.foo)
print(dict[a],dict.a)
print(dict[1],dict["1"],dict[2])
print(dict["history"]==undefined)
print(Object.keys({}).length)
print()
for(var key in dict) {
    print(key,':',dict[key]);
}
print();
delete dict['city'];
for(var key in dict) {
    print(key,':',dict[key]);
}

/*
+[J函数](,dict)
*/
## end
#831, 3598:
/*

*/
class NetPStack {
    
    constructor() {
        this.m_builtStack=[{}];
        this.m_undefinedStack=[{}];
    }

    popBuilt() {
        return this.m_builtStack.pop();
    }
    
    popUndefined() {
        return this.m_undefinedStack.pop();
    }
    
    pushBuilt(built) {
        this.m_builtStack.push(built);
    }
    
    pushUndefined(undefined_pt) {
        this.m_undefinedStack.push(undefined_pt);
    }
    
    enterClause() {
        var copy0={},copy1={};

        Object.assign(copy0,this.m_builtStack[this.m_builtStack.length-1]);
        this.m_builtStack.push(copy0);

        Object.assign(this.m_undefinedStack[this.m_undefinedStack.length-1],copy1);
        this.m_undefinedStack.push(copy1);
    }
    
    leaveClause() {
        var dict_len=0,dict_undef={};
        if(this.m_undefinedStack.length==1) {
            dict_undef=this.m_undefinedStack[this.m_undefinedStack.length-1];
            dict_len=Object.keys(dict_undef).length;
            if(dict_len!=0) {
                
                for(var i=0;i<this.m_undefinedStack[this.m_undefinedStack.length-1].length;i++) {
                    var term=this.m_undefinedStack[this.m_undefinedStack.length-1][i];
                    pt=this.m_undefinedStack[this.m_undefinedStack.length-1][term];
                    if(pt.m_master=='') {
                        km_head=pt.m_con[0].m_master;
                        insertPtIntotKarma(km_head,pt);
                    }
                }
            }
        }
        
        else if(len(this.m_undefinedStack[this.m_undefinedStack.length-1])>len(this.m_undefinedStack[this.m_undefinedStack.length-2])) {
            
            for(var i=0;i<this.m_undefinedStack[this.m_undefinedStack.length-1].length;i++) {
                var term=this.m_undefinedStack[this.m_undefinedStack.length-1][i];
                if(term not in this.m_undefinedStack[this.m_undefinedStack.length-2]) {
                    pt=this.m_undefinedStack[this.m_undefinedStack.length-1][term];
                    if(pt.m_master=='') {
                        km_head=pt.m_con[0].m_master;
                        insertPtIntotKarma(km_head,pt);
                    }
                }
            }
        }
        this.m_builtStack.pop();
        this.m_undefinedStack.pop();
    }
    
    popUndefinedName(name) {
        
        for(var i=0;i<this.m_undefinedStack.length;i++) {
            var stack=this.m_undefinedStack[i];
            stack.pop(name);
        }
    }
    
    buildNetP(name,con0_name='',con1_name='') {
        recent=this.m_builtStack[this.m_builtStack.length-1];
        undefined_pt=this.m_undefinedStack[this.m_undefinedStack.length-1];
        point=undefined_pt.get(name,'');
        if(point=='') {
            point=NetP(re.sub(/#.*$/,'',name));
            recent.update({name:point});
        }
        
        else {
            undefined_pt.pop(name);
        }
        if(con1_name!='') {
            con1=recent.get(con1_name,'');
            if(con1=='') {
                con1=NetP(re.sub(/#.*$/,'',con1_name));
                recent.update({con1_name:con1});
                undefined_pt.update({con1_name:con1});
            }
            point.connect(con1,1);
        }
        if(con0_name!='') {
            con0=recent.get(con0_name,'');
            if(con0=='') {
                con0=NetP(re.sub(/#.*$/,'',con0_name));
                recent.update({con0_name:con0});
                undefined_pt.update({con0_name:con0});
            }
            point.connect(con0,0);
        }
        return point;
    }
}






## end
#833, 467:
/*
+[J函数](,测试Parser)

保存karma:...
conToken:...
Parser语句
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

var code,text,list_pt;

print('????');
code="C(A,B)->A->B{[]=>1}:=>>D1,->D2";
[code,km]=parser.chainToken(code);
print(code,km);


print('!???!');
[code1,list_pt]=writeStdCode_karma(km,[]);
print(code1);



/*
+[J函数](,测试Parser)
*/
## end
#834, 4:
1010
## end
#836, 23:
4.5, 3.5000000000000004
## end
#837, 24:
14.1, 14.549999999999999
## end
#838, 24:
14.1, 14.549999999999999
## end
#839, 24:
14.1, 14.549999999999999
## end
#840, 24:
14.1, 14.549999999999999
## end
#841, 24:
14.1, 14.549999999999999
## end
#842, 24:
14.1, 14.549999999999999
## end
#843, 24:
14.1, 14.549999999999999
## end
#844, 24:
14.1, 14.549999999999999
## end
#845, 24:
14.1, 14.549999999999999
## end
#846, 24:
14.1, 14.549999999999999
## end
#847, 24:
14.1, 14.549999999999999
## end
#848, 24:
14.1, 14.549999999999999
## end
#849, 24:
14.1, 14.549999999999999
## end
#850, 24:
14.1, 14.549999999999999
## end
#851, 24:
14.1, 14.549999999999999
## end
#852, 24:
14.1, 14.549999999999999
## end
#853, 24:
14.1, 14.549999999999999
## end
#854, 24:
14.1, 14.549999999999999
## end
#855, 24:
14.1, 14.549999999999999
## end
#856, 24:
14.1, 14.549999999999999
## end
#857, 24:
14.1, 14.549999999999999
## end
#858, 24:
14.1, 14.549999999999999
## end
#859, 24:
14.1, 14.549999999999999
## end
#860, 24:
14.1, 14.549999999999999
## end
#861, 24:
14.1, 14.549999999999999
## end
#862, 24:
14.1, 14.549999999999999
## end
#863, 24:
14.1, 14.549999999999999
## end
#864, 24:
14.1, 14.549999999999999
## end
#865, 24:
14.1, 14.549999999999999
## end
#866, 24:
14.1, 14.549999999999999
## end
#867, 24:
14.1, 14.549999999999999
## end
#868, 24:
14.1, 14.549999999999999
## end
#869, 24:
14.1, 14.549999999999999
## end
#870, 82:
+[调用词典动词](+[做],+查看)->+[做](,+[类]#13)->[]->[]->+[.](测试结构#12,+[类]#13)->+[类]#13"Karma"
## end
#872, 3447:

    newMap(pool,areaType,list_new) {
        list_map=this.rangeList(pool,areaType,list_new);
        if(this.m_buildMode==false | areaType==false) {
            name=this.m_symbol.m_name;
            if(this.isPreDefined()) {
                if(this.m_map=='') {
                    point=NetP(name,this.m_symbol.m_text);
                    point.m_pos=this.m_symbol.m_pos.copy();
                    point.m_needed=this;
                    point.m_creator=this;
                    this.map(point);
                }
                
                else {
                    this.m_map.delete();
                    delete this.m_map;
                    this.map('');
                }
                return;
            }
            
            else if(this.isFunctionPoint()==2) {
                if(this.m_map=='') {
                    point=NetP(name,this.m_symbol.m_text);
                    point.m_needed=this;
                    this.map(point);
                }
                
                else {
                    this.map(this.m_map);
                }
                this.m_interp=true;
                return;
            }
            list_have=list_map;
            mp=this.m_map;
            this.map(this.nextInlist(mp,list_have));
            return;
        }
        
        else {
            name=this.m_symbol.m_name;
            if(name!='' & (name[0]!='[' | name[name.length-1]!=']')) {
                if(this.m_map!='') {
                    this.m_map.m_creator='';
                    if(this.m_map.m_needed=='') {
                        this.m_map.delete();
                        this.map('');
                        return;
                    }
                    
                    else {
                        this.m_map.m_name='['+this.m_map.m_name+']';
                    }
                }
                list_need=[];
                
                for(var i=0;i<list_map.length;i++) {
                    var point=list_map[i];
                    if(point.m_creator=='' & point.m_needed!='') {
                        list_need.push(point);
                    }
                }
                point=this.m_map;
                this.map(this.nextInlist(point,list_need));
                if(this.m_map=='') {
                    if(this.m_restricted==true) {
                        this.map('');
                        return;
                    }
                    point=NetP(this.m_symbol.m_name,this.m_symbol.m_text);
                    point.m_pos=this.m_symbol.m_pos.copy();
                    point.m_building=true;
                    this.map(point);
                }
                
                else {
                    this.m_map.m_building=true;
                    this.m_map.m_name=this.m_map.m_name[1:-1];
                }
                this.m_map.m_creator=this;
                return;
            }
        }
            else:;
                if this.m_map=='':;
                    point=NetP(name,this.m_symbol.m_text);
                    point.m_pos=this.m_symbol.m_pos.copy();
                    point.m_building=true;
                    point.m_needed=this;
                    this.map(point);
                    return;
                else:;
                    this.m_map.m_needed='';
                    this.m_map.delete();
                    this.map('');
                    return;
        this.map('');
    }


## end
#873, 23:
2.2, 1.1500000000000001
## end
#874, 37:
4.500000000000001, 2.4000000000000004
## end
#875, 37:
4.500000000000001, 2.4000000000000004
## end
#876, 37:
4.500000000000001, 2.4000000000000004
## end
#877, 23:
2.2, 1.1500000000000001
## end
#878, 37:
6.800000000000002, 2.5500000000000003
## end
#879, 37:
6.800000000000002, 2.5500000000000003
## end
#880, 37:
6.800000000000002, 2.5500000000000003
## end
#881, 37:
6.800000000000002, 2.5500000000000003
## end
#882, 37:
6.800000000000002, 2.5500000000000003
## end
#883, 164:
+[调用词典动词](+[做],+转换)->+[做](+[函数]#26,)...
->+[Javascript]#28->+为(+[做],+[Javascript]#28)...
    ->+[del](,+为)->[]->+[.](测试结构#25,+[函数]#26)->+[函数]#26"buildingNewMap"->[]
## end
#884, 9:
4.4, 5.05
## end
#885, 9:
4.4, 5.05
## end
#886, 9:
4.4, 5.05
## end
#887, 9:
4.4, 5.05
## end
#888, 9:
4.4, 5.05
## end
#889, 9:
4.4, 5.05
## end
#890, 9:
4.4, 5.05
## end
#892, 665:
/*
记住"自然语言"
+[J函数](,测试)

存档1:...
concat
*/


var A=new NetP('A','test');
var A1=new NetP('[A]');
var B=new NetP('[is]');
var B1=new NetP('B');
var C=new NetP('A');
var C1=new NetP('A','test');

B.con(A,C)
B1.con(A1,C1)
print(B.info())

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

karma1.addKarma(karma2);
karma2.addKarma(karma3);
print(karma3.info_cause());


list_km=[karma1,karma2,karma3];

var pool=[A1,B1,C1];
karma1.m_stage=1;

for(var j=0;j<4;j++) {
    for(var i=0;i<list_km.length;i++) {
        list_km[i].Reason_oneStep(pool);
        karma=list_km[i];
        print(karma.info());
    }
    print();
}



/*
+[J函数](,测试)
*/
## end
#894, 789:
/*
记住"自然语言"
+[J函数](,测试)

测试等于:...
测试变量:...
测试流程:...
测试map:...

存档1:...
concat
*/


var A=new NetP('A');
var A1=new NetP('A1');
var B=new NetP('B');
var B1=new NetP('B1');
var C=new NetP('C');
var C1=new NetP('C1');

B.con(A,C)
print(B.info())

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

karma1.addKarma(karma2);
karma2.addKarma(karma3,'从句');
karma3.info_cause();
list_km=[karma1,karma2,karma3];


karma2.map(B1);
karma3.map(C1);
karma1.m_stage=1;
karma1.m_reState='dark green';
karma2.m_stage=1;
karma2.m_reState='dark green';
karma3.m_stage=4;
karma3.m_reState='dark yellow';

print(karma1.info());
print(karma2.info());
print(karma3.info());
print();

karma1.map(A1);
print(karma1.info());
print(karma2.info());
print(karma3.info());



/*
+[J函数](,测试)
*/
## end
#895, 4:
1036
## end
#898, 708:
/*
记住"自然语言"
+[J函数](,测试)

测试等于:...
测试变量:...
测试流程:...
测试map:...
测试newMap:...

存档1:...
concat
*/


var A=new NetP('A');
var A1=new NetP('A1');
var B=new NetP('B');
var B1=new NetP('B1');
var C=new NetP('C');
var C1=new NetP('C1');

B.con(A,C)
print(B.info())

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

karma1.addKarma(karma2);
karma2.addKarma(karma3,'从句');
karma3.info_cause();
list_km=[karma1,karma2,karma3];
list_pt=[A1,B1,C1];

print(karma1.info());
karma1.newMap(list_pt,1,[]);
print(karma1.info());
karma1.newMap(list_pt,1,[]);
print(karma1.info());
karma1.newMap(list_pt,1,[]);
print(karma1.info());
karma1.newMap(list_pt,1,[]);
print(karma1.info());



/*
+[J函数](,测试)
*/
## end
#899, 82:
+[调用词典动词](+[做],+查看)->+[做](,+[类]#13)->[]->[]->+[.](测试结构#12,+[类]#13)->+[类]#13"Karma"
## end
#900, 184:
+[调用词典动词](+[做],+替换)->+[做](,+[临时文本]#7)...
->+[临时文本]#8"%[变量].slice(%[1],%[变量].length)"->+为(+[做],+[临时文本]#8)...
    ->+[del](,+为)->[]->[]->+[.](JS版本#6,+[临时文本]#7)->+[临时文本]#7"%[变量]\[%[1]:\]"
## end
#902, 525:
/*
+[J函数](,测试re)

参考::https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
参考test::https://www.codegrepper.com/code-examples/javascript/regex+empty+string+or+null
+[打开](,参考)

测试match:...
测试中文:...
*/

var text='AAAA(B,C->C(A,B)';
var pat_str='\\(\\w,\\w\\)';
var pat=new RegExp(pat_str);

//name=text.match(pat_str);
name=pat.test(text);
print(text,pat);
print(name,name=="null",[""]===[""],typeof(name),typeof(null));
if(name) {
    print('1',null,!null);
} else {
    print('2',null,!null);
}



## end
#904, 81:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
## end
#906, 437:
/*
+[J函数](,测试re)

参考::https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
+[打开](,参考)

测试match:...
*/

var text='AAAA(B,C->C(A,B';
var pat_str='\\(\\w,\\w\\)';
var pat=new RegExp(pat_str);

//name=text.match(pat_str);
name=text.match(pat);
print(text,pat);
print(name,name=="null",[""]===[""],typeof(name),typeof(null));
if(name==="null") {
    print('1',null,!null);
} else {
    print('2',null,!null);
}



## end
#908, 443:
/*
记住"自然语言"
+[J函数](,测试)

测试等于:...
测试变量:...
测试流程:...
测试map:...
测试newMap:...
测试re:...
测试stateSelf:...

存档1:...

name_m
+[J函数](,测试)
*/


var A=new NetP('A','test');
var A1=new NetP('[A]','test');
var B=new NetP('B');
var B1=new NetP('B');
var C=new NetP('C');
var C1=new NetP('C1');

B.con(A,C)
print(B.info())

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

karma1.map(A1);
print(karma1.info());



/*
+[J函数](,测试)
*/
## end
#910, 496:
/*
记住"自然语言"
+[J函数](,测试)

测试等于:...
测试变量:...
测试流程:...
测试map:...
测试newMap:...
测试re:...
测试stateSelf:...
测试stateSelf_eq:...

存档1:...

name_m
+[J函数](,测试)
*/


var A=new NetP('A','test');
var A1=new NetP('[A]','test');
var B=new NetP('[eq]');
var B1=new NetP('B');
var C=new NetP('C');
var C1=new NetP('A');

B.con(A,C)
print(B.info())

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

karma1.map(A1);
karma2.map(B1);
karma3.map(C1);
print(karma2.info());



/*
+[J函数](,测试)
*/
## end
#912, 518:
/*
记住"自然语言"
+[J函数](,测试)

测试等于:...
测试变量:...
测试流程:...
测试map:...
测试newMap:...
测试re:...
测试stateSelf:...
测试stateSelf_eq:...

存档1:...

name_m
+[J函数](,测试)
*/


var A=new NetP('A','test');
var A1=new NetP('[A]','test');
var B=new NetP('[is]');
var B1=new NetP('B');
var C=new NetP('C');
var C1=new NetP('A');

B.con(A,C)
print(B.info())

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

karma1.map(A1);
karma2.map(B1);
karma3.map(A1);
//karma3.map(C1);
print(B.m_master.info());



/*
+[J函数](,测试)
*/
## end
#914, 691:
/*
记住"自然语言"
+[J函数](,测试)

测试等于:...
测试变量:...
测试流程:...
测试map:...
测试newMap:...
测试re:...
测试stateSelf:...
测试stateSelf_eq:...
测试stateSelf_is:...
测试stateRelation:

存档1:...

name_m
+[J函数](,测试)
*/


var A=new NetP('A','test');
var A1=new NetP('[A]','test');
var B=new NetP('[is]');
var B1=new NetP('B');
var C=new NetP('C');
var C1=new NetP('A');

B.con(A,C)
B1.con(A1,C1)
print(B.info())

var karma1=new Karma(A);
var karma2=new Karma(B);
var karma3=new Karma(C);

karma1.addKarma(karma2);
karma2.addKarma(karma3);
print(karma3.info_cause());

karma1.map(A1);
karma2.map(B1);
karma3.map(A1);
//karma3.map(C1);

print(C.info(),C.m_master.stateRelation());
print(B.m_master.info());


/*
+[J函数](,测试)
*/
## end
#916, 721:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...
测试setRanger:...
测试rangeList:...
测试rangeList2:...
测试rangeList3:...

测试缩写2:...
测试流程2:...

测试节点构造:...
测试限制匹配:...

测试readSubCode_tokener2:...
测试缩写3:...

+[新建阅读窗口](,测试一般匹配)
Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var code0;
var karma,pointStack;

code0=`+[del](,+消息窗口)->[]{+[消息窗口](,+B)};
`;

print(code0);
[code0,karma,pointStack]=parser.chainToken(code0);
pointStack.leaveClause();
karma=karma.causeEnd();
karma.setRangers();
print(writeStdCode_karma(karma,[]));
print(pointStack.info())


/*
+[J函数](,测试)
*/
## end
#918, 530:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:

*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var code0,code,text,list_pt,list_km;

code0=`B(A,C)->A->C:
    =>>D1,->[]`;


[code,km]=parser.chainToken(code0);
list_km=km.allEffects();
list_pt=[A,B,C];

list_km[0].m_stage=1;

for(var j=0;j<4;j++) {
    for(var i=0;i<list_km.length;i++) {
        list_km[i].Reason_oneStep(list_pt);
        karma=list_km[i];
        print(karma.info());
    }
    print();
}


/*
+[J函数](,测试)
*/
## end
#920, 161:
/*
+[J函数](,测试concat)
*/

var list0=[12,3,4];
var list1=[5,3,4];
var list2=[...list0,...list1];
var list3;

list3=list0.concat(list1);

print(list2)
print(list3)

## end
#922, 1020:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点

*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var code0,code,text,list_pt,list_km,list_new;

code0=`+[D](A,C)->A->C`;


[code,km]=parser.chainToken(code0);
list_km=km.allEffects();
list_pt=[A,B,C];

list_km[0].m_stage=1;
var change=false;

function printPtList(list_pt) {
    var info_pt='';
    for(var i=0;i<list_pt.length;i++) {
        var pt=list_pt[i];
        info_pt+=pt.info()+','
    }

    print(`[${info_pt}]`);
}

function mergeArrays(list0,list1) {
    for(var j=0;j<list1.length;j++) {
        if(!list0.includes(list1[j])) {
            list0.push(list1[j]);
        }
    }
}

for(var j=0;j<4;j++) {
    for(var i=0;i<list_km.length;i++) {
        [change,list_new]=list_km[i].Reason_oneStep(list_pt);
        karma=list_km[i];
        print(karma.info(),list_new.length);
        mergeArrays(list_pt,list_new);
    }
    printPtList(list_pt);
    print();
}


/*
+[J函数](,测试)
*/
## end
#924, 366:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...

*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var code0,list_pt;

code0=`+[D](A,C)->A->C`;
list_pt=[A,B,C];
run_code(code0,list_pt);
printPtList(list_pt);
run_code(code0,list_pt);
printPtList(list_pt);



/*
+[J函数](,测试)
*/
## end
#926, 401:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试action:...

*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var code0,list_pt;

code0=`+[test]"test"(A,C)->A->C`;
print('??!!')
list_pt=[A,B,C];
run_code(code0,list_pt);
printPtList(list_pt);
run_code(code0,list_pt);
printPtList(list_pt);


/*
+[J函数](,测试)
*/
## end
#928, 487:
/*
+[J函数](,测试中文)
[ A-Za-z\u3000\u3400-\u4DBF\u4E00-\u9FFF]
*/

var text='中文(中文,C)->C(A,B';
//var pat_str='\\(\\w,\\w\\)';
var pat_str='\\([ A-Za-z\\u3000\\u3400-\\u4DBF\\u4E00-\\u9FFF]*,[ A-Za-z\\u3000\\u3400-\\u4DBF\\u4E00-\\u9FFF]*\\)';
var pat=new RegExp(pat_str);

//name=text.match(pat_str);
name=text.match(pat);
print(text,pat);
print(name,name=="null",[""]===[""],typeof(name),typeof(null));
if(name==="null") {
    print('1',null,!null);
} else {
    print('2',null,!null);
}



## end
#930, 504:
/*
+[J函数](,测试throw)

参考::https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw
+[打开网页](,参考)
*/

function getRectArea(width, height) {
  if (isNaN(width) || isNaN(height)) {
    throw 'Parameter is not a number!';
  }
}

print('23333');

try {
    print('start!');
  getRectArea(3, 'A');
    print('?????');
} catch (e) {
  console.error(e);
    print('!!!!');
  // expected output: "Parameter is not a number!"
}

getRectArea(3, 'A');
print('23333');


/*
+[J函数](,测试throw)
*/
## end
#932, 82:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw
## end
#934, 179:
+[调用词典动词](+[做],+移动)->+[做](,+[光标]#9)...
->+在(+[做],JS版本#1)->+[del](,+在)...
    ->+中(+在,)->+[del](,+中)...
->+[临时文本]#10"');"->+到(+[做],+[临时文本]#10)...
    ->+[del](,+到)->[]->[]->+[光标]#9
## end
#936, 487:
/*
+[J函数](,测试中文)
[ A-Za-z\u3000\u3400-\u4DBF\u4E00-\u9FFF]
*/

var text='中文(中文,C)->C(A,B';
//var pat_str='\\(\\w,\\w\\)';
var pat_str='\\([ A-Za-z\\u3000\\u3400-\\u4DBF\\u4E00-\\u9FFF]*,[ A-Za-z\\u3000\\u3400-\\u4DBF\\u4E00-\\u9FFF]*\\)';
var pat=new RegExp(pat_str);

//name=text.match(pat_str);
name=text.match(pat);
print(text,pat);
print(name,name=="null",[""]===[""],typeof(name),typeof(null));
if(name==="null") {
    print('1',null,!null);
} else {
    print('2',null,!null);
}



## end
#938, 627:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试action:...
测试throw:...
测试中文match:...
测试中文匹配:...

*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var code0,code,text,list_pt,list_km;

code0=`+[消息窗口](A,C)->A->C:
    =>>D1,->[]`;


[code,km]=parser.chainToken(code0);
list_km=km.allEffects();
list_pt=[A,B,C];

list_km[0].m_stage=1;

for(var j=0;j<4;j++) {
    for(var i=0;i<list_km.length;i++) {
        list_km[i].Reason_oneStep(list_pt);
        karma=list_km[i];
        print(karma.info());
    }
    print();
}

/*
+[J函数](,测试)
*/
## end
#939, 4:
1038
## end
#942, 151:
/*
+[J函数](,测试)

测试con:...
*/
var a=new NetP('a');
var b=new NetP('b');
var c=new NetP('c');

a.con(c,b);
print(a.info())
a.con('',0);
print(a.info())


## end
#943, 4:
1069
## end
#946, 2304:
<!--
Nini, 打开网页画板(文件)
+[H函数](,S编辑器)
参考1::https://www.w3schools.com/tags/tag_textarea.asp
参考2_innerHTML::https://www.w3schools.com/js/js_htmldom_html.asp
参考3_math::https://stackoverflow.com/questions/32239378/using-mathjax-in-an-updating-sequence-in-javascript
+[打开网页](,参考1)

保存:

测试场景(核心结构):...
+[新建阅读窗口](,测试场景)
-->

<textarea id='edit_box' rows=20 cols=50>
+A->+B->+C
</textarea>

<br>
<button onclick="onRunBtn()">run</button>
<br>

<p id='stat_box'>
</p>

<p id='show_box'>
</p>

%测试场景

<p id="cmd_window">Hellow world!</p>

<script>
var list_pt=[];
var list_km=[];

var pt_ground=new NetP('大地');
var pt_core=new NetP('核心');
var pt_mm=new NetP('记忆');
var pt_edit=new NetP('编辑框');
var pt_show=new NetP('显示屏');

pt_mm.con(pt_core,0);
pt_edit.con(pt_core,pt_ground);
pt_show.con(pt_core,0);

list_pt.push(pt_ground);
list_pt.push(pt_core);
list_pt.push(pt_mm);
list_pt.push(pt_edit);
list_pt.push(pt_show);

var edit_box=document.getElementById("edit_box");
var show_box=document.getElementById("show_box");
var stat_box=document.getElementById("stat_box");

code=st_core.textContent;
Nini.make(code,pt_ground);
print(code)

function runCode() {
    code=edit_box.value;
    if(pt_edit.m_db[1]=='') {
        pt_edit.con(0,pt_ground);
    }
//    [code,list_km]=Nini.do(code,pt_edit.m_db[1],list_pt);
    Nini.do(code,pt_edit.m_db[1],list_pt);
}

function updatePts() {
    pt_edit.m_db[1].m_text=edit_box.value;
}

function updateBox() {
    edit_box.value=pt_edit.m_db[1].m_text;

    if(pt_show.m_db[1]!='') {
        show_box.innerHTML=pt_show.m_db[1].m_text;
    }
    else {
        show_box.innerHTML=pt_show.m_text;
    }

    stat_box.innerHTML=`
<br>
全局: ${info_PtList(list_pt)}<br>
${pt_edit.m_db[1].m_name}: ${info_PtList(listFromPt(pt_edit.m_db[1]))}<br>
Code: ${writeStdCode_karma(list_km[0],[])[0]}
`;

    MathJax.Hub.Queue(["Typeset", MathJax.Hub, 'show_box']);
}

function onRunBtn() {
    updatePts();
    runCode();
    updateBox();
}


edit_box.ondragover = edit_box.ondragenter = function(evt) {
  evt.preventDefault();
};


var fr=new FileReader();
fr.onload=function(){
    Nini.make(fr.result,pt_ground);
}
edit_box.ondrop = function(evt) {
    var files= evt.dataTransfer.files;
    fr.readAsText(files[0]);

    evt.preventDefault();
};


</script>


<!--
do(
+[H函数](,S编辑器)
-->
## end
#951, 46:
JS版本(J函数):...
+[新建阅读窗口](,JS版本)

J函数(JS版本,)




## end
#953, 17973:
/*
+[J函数](,JS版本)
[m_name]
obj.print
+[新建阅读窗口](,测试)
[JS]
try

init
*/

function listFromPt(pt) {
    var list_pt=[];

    if(pt=='') {
        return list_pt;
    }

    for(var i=0;i<pt.m_con.length;i++) {
        if(pt.m_con[i].m_name=='的' & pt.m_con[i].m_db[1]!='' & pt.m_con[i].m_db[1]!=pt) {
            list_pt.push(pt.m_con[i].m_db[1]);
        }
    }
    return list_pt;
}


class StCore {
    constructor() {
        this.m_parser=new Parser();

        this.m_self='';
        this.m_lib='';
        this.m_idea='';
        this.m_hear='';
        this.m_speak='';
    }

/*
[增加内容]
+[J函数](,测试)
*/

    init(code) {
        code=code.split("&gt;").join(">");
        code=code.split("&lt;").join("<");
        var list_pt0=this.make(code),list_pt=[];

        for(var i in list_pt0) {
            var pt=list_pt0[i];
            if(pt.m_name==='Nini') {
                this.m_self=pt;
                pt.m_permission=0;
            }
        }
        //this.m_self=list_pt0[0];
        //this.m_self.m_permission=0;

        list_pt=listFromPt(this.m_self);

        for(var i in list_pt) {
            var pt=list_pt[i];
            if(pt.m_name==='m_lib') {
                this.m_lib=pt;
                pt.m_permission=0;
            }
            else if(pt.m_name==='m_idea') {
                this.m_idea=pt;
                pt.m_permission=0;
            }
            else if(pt.m_name==='听') {
                this.m_hear=pt;
                pt.m_permission=0;
            }
            else if(pt.m_name==='说') {
                this.m_speak=pt;
                pt.m_permission=0;
            }
        }

        if(this.m_hear=='') {
            this.m_hear=new NetP('听');
            new NetP('的').con(this.m_self,this.m_hear);
            this.m_hear.m_permission=0;
        }
        if(this.m_speak=='') {
            this.m_speak=new NetP('说');
            new NetP('的').con(this.m_self,this.m_speak);
            this.m_speak.m_permission=0;
        }

        return list_pt;
    }

    do(code,pt_in='',list_global=[]) {
        var list_pt=listFromPt(pt_in)
        var list_new=[];
        var list_km=[];

        mergeArrays(list_pt,list_global);
        if(!list_pt.includes(pt_in) & pt_in!='') {
            list_pt.push(pt_in);
        }

        [code,list_km]=this.run_code(code,list_pt,list_new);
        this.operation(list_new);
        
        for(var i=0;i<list_new.length;i++) {
            var pt=list_new[i],pt_de;
            pt_de=new NetP('的');
            pt_de.con(pt_in,pt);
        }
    
        return [code,list_km];
    }

    make(code,pt_in='') {
        var list_pt=this.m_parser.buildPoints_tokener(code);
        if(pt_in==='') {
            return list_pt
        }
        for(var i in list_pt) {
            var pt=list_pt[i];
            new NetP('的').con(pt_in,pt);
        }
        return list_pt;
    }

/*
保存run_code_line:...
think
*/

    run_code_line(km,list_pt,list_ns) {
        var code,list_km,list_new,list_del=[];
        var karma,int_result=false;
        var pool=listPt2poolPt(list_pt);

        list_km=km.allEffects();
        
        list_km[0].m_stage=1;
        var change=true,change1;

        while(change) {
            change=false;
            for(var i=0;i<list_km.length;i++) {
                [change1,list_new]=list_km[i].Reason_oneStep(pool);
                karma=list_km[i];

//print(karma.info(),karma.m_interp);
                if(karma.m_interp) {
                    int_result=this.think(karma.m_map);
                    list_del.push(karma.m_map);
//print(int_result);
                    if(!int_result) {
                        karma.m_map='';
                    }
                }

//printPtList(karma.m_listMP)
//printPtList(list_new);
                listPtIntoPoolPt(pool,list_new);
                mergeArrays(list_pt,list_new);
                mergeArrays(list_ns,list_new);
        
                if(change1 & !change) {
                    change=true;
                }
            }
        }

        for(var i=0;i<list_del.length;i++) {
            list_del[i].delete();
        }

        return true;
    }
    
    run_code(code0,list_pt,list_ns=[]) {
        var code1=code0,list_km;
        var parser=this.m_parser;

        list_km=parser.readSubCode_tokener(code0);

        for(var i in list_km) {
            this.run_code_line(list_km[i],list_pt,list_ns);
        }

        return [code0,list_km];
    }

    act(pt_code,pt) {
        var code1=pt_code.m_text;
        var list_km=[],list_new=[],result=false;
        var parser=this.m_parser;

        list_km=parser.readSubCode_tokener(code1);
//print(writeStdCode_karma(list_km[0],[]));
    
        list_km[0].m_listMP=[pt];
        list_km[0].m_restricted=true;

        result=this.run_code_line(list_km[0],[pt_code],list_new);
        if(result) {
            this.operation(list_new);
        }
        return result;
    }

    reorder_ops(list_pt) {
        list_pt.sort(function(a,b){return b.m_time-a.m_time;});
    }

    operation(list_pt) {
//printPtList(list_pt);
        var list_del=[];
        this.reorder_ops(list_pt);
        for(var i=list_pt.length-1;i>=0;i--) {
            var pt=list_pt[i];
            var operated=false;
            var sbj=pt.m_db[0],obj=pt.m_db[1];

            if(pt.m_name=='[del]') {
                this.opDel(pt,list_pt,list_del);
                operated=true;
            }
            else if(pt.m_name=='[左连]') {
                this.opConnect(sbj,obj,0);
                operated=true;
            }
            else if(pt.m_name=='[右连]') {
                this.opConnect(sbj,obj,1);
                operated=true;
            }

            else if(pt.m_name=='[消息窗口]') {
                this.opMsgWin(pt);
                operated=true;
            }
            else if(pt.m_name=='[修改内容]') {
                this.opWriteText(sbj,obj,pt);
                operated=true;
            }
            else if(pt.m_name=='[增加内容]') {
                this.opAddToText(sbj,obj,pt);
                operated=true;
            }
            else if(pt.m_name=='[标题]') {
                this.opName(sbj,pt);
                operated=true;
            }
            else if(pt.m_name=='[模板文本]') {
                this.opTempText(sbj,obj,pt);
                operated=true;
            }

            else if(pt.m_name=='[做]') {
                this.opDo(pt);
                operated=true;
            }
            else if(pt.m_name=='[JS]') {
                this.opJs(obj,pt);
                operated=true;
            }

            else if(pt.m_name=='[临时文本]') {
                operated=true;
            }

            else if(pt.m_name.length>1 & pt.m_name[0]=='[' & pt.m_name[pt.m_name.length-1]==']') {
                this.opLibDefined(pt);
                operated=true;
            }
            if(operated) {
                list_del.push(i);
            }
        }

        for(var i=0;i<list_del.length;i++) {
            var i_del=list_del[i];
            var pt_del=list_pt[i_del];
            list_pt.splice(i_del,1);
            pt_del.delete();
            //delete pt_del;
        }
    }
    
    opMsgWin(action) {
        var obj=action.m_db[1];
        var name,text;
        if(obj=='' & action.m_text=='') {
            return;
        }
        else if(obj!=='') {
            name=obj.info();
            text=obj.m_text;
        }
        else {
            name='消息';
            text=action.m_text;
        }
        alert(`${name}: ${text}`);
    }

/*
replace
*/

    opDo(action) {
        var con_de='';
        for(var i in action.m_con) {
            var con=action.m_con[i];
            if(con.m_name=='[code]' | con.m_name=='code') {
                if(con.m_db[1]!='' & con.m_db[1]!=action) {
                    con_de=con.m_db[1];
                }
            }
        }
        
        if(con_de!=='') {
            action.m_name='['+con_de.m_name+']';
            this.act(con_de,action);
        }
    }

/*
+[新建阅读窗口](,测试)
*/

    opJs(obj,action) {
        var code=action.m_text;
        var var_name='';
        var code_out=`\nvar outs_in_JS={`;
        var outs,outs_var={},outs_var_v={};
        
        for(var i in action.m_con) {
            var pt=action.m_con[i];
            if(pt.m_name=='code' | pt.m_name=='[code]') {
                if(pt.m_db[1]!='' & pt.m_db[1]!=action) {
                    code=pt.m_db[1].m_text;
                }
                break;
            }
        }
        
        if(obj!=='') {
            code_out+="'ans':`${ans}`,";
            outs_var['ans']=obj;
        }

        for(var i in action.m_con) {
            var pt=action.m_con[i];
            if(pt.m_name=='.' | pt.m_name=='[.]' | pt.m_name=='o' | pt.m_name=='[o]') {
                if(pt.m_db[1]!='' & pt.m_db[1]!=action) {
                    if(pt.m_text!='') {
                        var_name=pt.m_text;
                    }
                    else {
                        var_name=pt.m_db[1].m_name;
                    }
                    code=code.split('%'+var_name).join(pt.m_db[1].m_text);
                }
            }

            if(pt.m_name=='o' | pt.m_name=='[o]') {
                if(pt.m_db[1]!='' & pt.m_db[1]!=action) {
                    if(pt.m_text!='') {
                        var_name=pt.m_text;
                    }
                    else {
                        var_name=pt.m_db[1].m_name;
                    }
                    code_out+="'"+var_name+"':`${"+var_name+"}`,";
                    outs_var[var_name]=pt.m_db[1];
                }
            }
            else if(pt.m_name=='v' | pt.m_name=='[v]') {
                if(pt.m_db[1]!='' & pt.m_db[1]!=action) {
                    if(pt.m_text!='') {
                        var_name=pt.m_text;
                    }
                    else {
                        var_name=pt.m_db[1].m_name;
                    }
                    window[var_name]=pt.m_db[1].m_var;
                    outs_var_v[var_name]=pt.m_db[1];
                }
            }

        }
        code_out+='};outs_in_JS';

        "use strict";
        try {
            outs=eval(code+code_out);
            for(var key in outs) {
                outs_var[key].m_text=outs[key];
            }
            for(var key in outs_var_v) {
                outs_var_v[key].m_var=window[key];
            }
        } catch(e) {
            print(e);
        }

    }

    opWriteText(sbj,obj,action) {
        if(obj==='') {
            return;
        }
        else if(obj.m_permission==0) {
            //print();
        }
        
        var text='',con='';
        if(sbj=='' & action.m_text==='') {
            return;
        }
        else if(action.m_text==='') {
            text=sbj.m_text;
        }
        else if(sbj==='') {
            text=action.m_text;
        }
        else {
            con=sbj.m_text;
            text=action.m_text+con;
        }
        obj.m_text=text;
    }

    opAddToText(sbj,obj,action) {
        if(obj=='') {
            return;
        }
        else if(obj.m_permission==0) {
            //obj.print();
        }
    
        var text,con;
        if(sbj=='' & action.m_text=='') {
            return;
        }
        else if(action.m_text=='') {
            text=sbj.m_text;
        }
        else if(sbj=='') {
            text=action.m_text;
        }
        else {
            con=sbj.m_text;
            text=action.m_text+con;
        }
        obj.m_text+=text;
    }

    opName(sbj,action) {
        if(sbj==='') {
            return
        }
        action.m_text=sbj.m_name;
    }

    opTempText(sbj,obj,action) {
        var text=action.m_text;
        var text_name;
        
        if(sbj!='') {
            text=sbj.m_text;
        }
        else {
            for(var i in action.m_con) {
                var pt=action.m_con[i];
                if(pt.m_name=='code' | pt.m_name=='[code]') {
                    if(pt.m_db[1]!='' & pt.m_db[1]!=action) {
                        text=pt.m_db[1].m_text;
                    }
                    break;
                }
            }
        }
        
        for(var i in action.m_con) {
            var pt=action.m_con[i];
            if(pt.m_name=='.' | pt.m_name=='[.]') {
                if(pt.m_db[1]!='' & pt.m_db[1]!=action) {
                    if(pt.m_text!='') {
                        text_name=pt.m_text;
                    }
                    else {
                        text_name=pt.m_db[1].m_name;
                    }
                    text=text.split('%'+text_name).join(pt.m_db[1].m_text);
                }
            }
        }
        obj.m_text=text;
    }
    
    opDel(action,list_pt,list_del) {
        if(action.m_db[1]=='') {
            return;
        }
        var pt_del=action.m_db[1];
        pt_del.delete()

        if(pt_del in list_del) {
            return;
        }
        else {
            list_del.push(list_pt.indexOf(pt_del));
        }
    }

    opConnect(sbj,obj,i) {
        if(sbj=='') {
            return;
        }
        sbj.disconnect_i(i);
        sbj.connect(obj,i);
    }

    opLibDefined(action) {
        var list_pt=listFromPt(this.m_lib);
        var name=action.m_name.slice(1,action.m_name.length-1);
        var result=false;

        for(var i in list_pt) {
            var pt=list_pt[i];
            if(name===list_pt[i].m_name) {
                //result=this.act(list_pt[i].m_text,action);
                result=this.act(pt,action);
                if(result) {
                    break;
                }
            }
        }
    }

    think(question,list_new) {
        var result=false;
        var list_pt=listFromPt(this.m_idea);
        var name=question.m_name.slice(1,question.m_name.length-1);
    
        for(var i in list_pt) {
            var pt=list_pt[i];
            if(name===list_pt[i].m_name) {
                result=this.match(list_pt[i],question);
                if(result) {
                    return true;
                }
            }
        }
        result=this.termBuiltin(question);
        return result;
    }
    
    match(pt_A,pt_Q) {
        var code1=pt_A.m_text;
        var list_km=[],list_new=[],result=false;
        var parser=this.m_parser;

        list_km=parser.readSubCode_tokener(code1);
    
        list_km[0].m_listMP=[pt_Q];
        list_km[0].m_restricted=true;
        this.run_code_line(list_km[0],[pt_A],list_new);

        if(list_km[0].m_reState==='dark green') {
            result=true;
        }
        else {
            result=false;
        }

        return result;
    }
    
    termBuiltin(question) {
        var sbj,obj;
        sbj=question.m_db[0];
        obj=question.m_db[1];
        
        if(question.m_name=='[m_name]') {
            return this.tpName(sbj,obj,question);
        }
        else if(question.m_name=='[m_text]') {
            return this.tpText(sbj,obj,question);
        }
        else if(question.m_name=='[==]') {
            return this.tpEqual(sbj,obj,question);
        }
        
        return false;
    }
    
    tpName(sbj,obj,question) {
        if(question.m_db[0]==='' | question.m_db[1]==='') {
            return false;
        }
        var name=question.m_db[0].m_name;
    
        if(name[0]==='[' & name[name.length-1]===']') {
            name=name.slice(1,name.length-1);
        }
        if(name==='') {
            print('Error! Name can\'t be empty');
            return false;
        }
    
        if(question.m_db[1].m_building==true) {
            question.m_db[1].m_name=name;
        }
        else {
            print("Error! [m_name] can only set a new point's m_name.",question.m_db[1].info(),"isn't a new point.");
        }
        this.answerQuestion(question)
        return true
    }
    
    tpText(sbj,obj,question) {
        if(question.m_db[0]==='' | question.m_db[1]==='') {
            return false;
        }
        var text=question.m_db[0].m_text;
    
        if(question.m_db[1].m_building==true) {
            question.m_db[1].m_text=text;
        }
        else {
            print("Error! [m_text] can only set a new point's m_text.",question.m_db[1].info(),"isn't a new point.");
        }
        this.answerQuestion(question)
        return true
    }

    tpEqual(sbj,obj,question) {
        if(obj==='') {
            return false;
        }
        if(sbj==='') {
            if(obj.m_text===question.m_text) {
                this.answerQuestion(question);
                return true;
            }
        }
        else if(obj.m_text===sbj.m_text) {
            this.answerQuestion(question);
            return true;
        }
        return false;
    }

    answerQuestion(question) {
        var name=question.m_name;
        if(name.length<2) {
            return false;
        }
        if(name[0]==='[' & name[name.length-1]===']') {
            question.m_name=name.slice(1,name.length-1);
            question.m_creator='Nini';
        }
        return true;
    }

}

function listPt2poolPt(list_pt) {
    var pool={};
    
    for(var i=0;i<list_pt.length;i++) {
        var pt=list_pt[i];
        var name=pt.m_name;
        
        if(pool[name]===undefined) {
            pool[name]=[pt];
        }
        else {
            pool[name].push(pt);
        }
    }

    return pool;
}

function listPtIntoPoolPt(pool,list_pt) {
    for(var i=0;i<list_pt.length;i++) {
        var pt=list_pt[i];
        var name=pt.m_name;
        
        if(pool[name]===undefined) {
            pool[name]=[pt];
        }
        else if(!pool[name].includes(pt)) {
            pool[name].push(pt);
        }
    }

    return pool;
}

function poolPt2listPt(pool) {
    var list_pt=[];
    
    for(var key in pool) {
        list_pt=[...list_pt,...pool[key]];
    }
    
    return list_pt;
}

var Nini=new StCore();


/*
opDo
+[J函数](,JS版本)
测试:...
测试页面:...
+[新建阅读窗口](,测试)
+[新建阅读窗口](,测试页面)
*/
## end
#960, 854:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
测试内置动词:...
测试JS:...

测试定义条目:...
测试动作排序:...

测试var:...
测试JS_v:...

测试m_text保持问题:...
(原因是从 st_core.textContent 获取内容的时候, <u>被删除了...)
(解决方案是在init前加了两句话, 把&gt;变成了>)
*/

var list_pt=[];

Nini.init(st_core.innerHTML);
//Nini.init(st_core.textContent);
print(st_core.textContent);
print(st_core.innerHTML);

alert(st_core.textContent);
alert(st_core.innerHTML);

list_pt=listFromPt(Nini.m_lib);
printPtList(list_pt);

Nini.do(`+[消息窗口]"<u>!!!</u>"`);
Nini.do(`+[修改内容]"<u>!!!</u>"(,+[消息窗口])`);
Nini.do(`+[测试]->+[消息窗口]"<u>!!!</u>"`);

printPtList(list_pt);
print(list_pt[0].m_text,list_pt[0].m_text.length);



/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
+[复制结构](,场景测试)
*/
## end
#964, 200:
/*
+[J函数](,测试)

测试listFromPt:...
*/


var list_pt=[];
Nini.run_code("+A->+B->+C->+的(+A,+B)->+的(+A,+C)",list_pt);
printPtList(list_pt);
Nini.operation(list_pt);

printPtList(listFromPt(list_pt[4]));



## end
#966, 762:

    run_code_line(code0,list_pt,list_ns) {
        var code,list_km,list_new
        var km,karma;
        var parser=this.m_parser;

        [code,km]=parser.chainToken(code0);
        list_km=km.allEffects();
        
        list_km[0].m_stage=1;
        var change=true,change1;

        while(change) {
            change=false;
            for(var i=0;i<list_km.length;i++) {
                [change1,list_new]=list_km[i].Reason_oneStep(list_pt);
                karma=list_km[i];
//printPtList(list_new);
                mergeArrays(list_pt,list_new);
                mergeArrays(list_ns,list_new);
        
                if(change1 & !change) {
                    change=true;
                }
            }
        }
        return code;
    }
    
## end
#968, 297:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
*/


var list_pt=[],list_new=[];
Nini.run_code("+A->+B->+C->+的(+A,+B)->+的(+A,+C)",list_pt,list_new);
printPtList(list_pt);
printPtList(list_new);
//Nini.operation(list_pt);
//Nini.do(list_pt[4],'+A1->+A2');

//printPtList(listFromPt(list_pt[4]));



## end
#970, 318:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
*/


var list_pt=[],list_new=[];
Nini.run_code("+A->+B->+C->+的(+A,+B)->+的(+A,+C)",list_pt,list_new);
printPtList(list_pt);
printPtList(list_new);
Nini.operation(list_pt);
Nini.do('+A1->+A2->B->C->+[左连](B,C)',list_pt[4]);

printPtList(listFromPt(list_pt[4]));



## end
#971, 4:
1088
## end
#974, 1516:
<!--
Nini, 打开网页画板(文件)
+[H函数](,S编辑器)
参考1::https://www.w3schools.com/tags/tag_textarea.asp
参考2_innerHTML::https://www.w3schools.com/js/js_htmldom_html.asp
参考3_math::https://stackoverflow.com/questions/32239378/using-mathjax-in-an-updating-sequence-in-javascript
+[打开网页](,参考1)

保存:
-->

<textarea id='edit_box' rows=20 cols=50>
+A"
<br>
1234
<br>
\(x^2=1\)
<SVG>
<rect width=50 height=50 x=100 y=70 fill=#ffffff stroke=#000000></rect>
</SVG>
"
</textarea>

<br>
<button onclick="onRunBtn()">run</button>
<br>

<p id='show_box'>
$$x^2=1$$

</p>

<p id="cmd_window">Hellow world!</p>

<script>
var list_pt=[];
var parser=new Parser();

var pt_core=new NetP('核心');
var pt_mm=new NetP('记忆');
var pt_edit=new NetP('编辑框');
var pt_show=new NetP('显示屏');

pt_mm.con(pt_core,0);
pt_edit.con(pt_core,pt_mm);
pt_show.con(pt_core,0);
list_pt.push(pt_core);
list_pt.push(pt_mm);
list_pt.push(pt_edit);
list_pt.push(pt_show);

var edit_box=document.getElementById("edit_box");
var show_box=document.getElementById("show_box");

function runCode() {
    code=edit_box.value;
    Nini.run_code(code,list_pt);
    Nini.operation(list_pt);
    pt_show.m_text=info_PtList(list_pt);
}

function updatePts() {
    pt_edit.m_db[1].m_text=edit_box.value;
}

function updateBox() {
    edit_box.value=pt_edit.m_db[1].m_text;
    show_box.innerHTML=pt_edit.m_db[1].m_text;
    MathJax.Hub.Queue(["Typeset", MathJax.Hub, 'show_box']);
}

function onRunBtn() {
    updatePts();
    runCode();
    updateBox();
}

</script>


<!--
+[H函数](,S编辑器)
-->
## end
#976, 533:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...

Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);
list_pt=[A,B,C];

var code0,code,text,list_pt,list_km,km;

code0=`B(A,C)->A;
`;


[code,km]=parser.chainToken(code0);
list_km=km.allEffects();

print(list_km.length);
for(var i=0;i<list_km.length;i++) {
    km=list_km[i];
    print(km.info());
}



/*
+[J函数](,测试)
*/
## end
#978, 609:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...

Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);
list_pt=[A,B,C];

var pointStack=new NetPStack();
print(pointStack.infoStack());
pointStack.buildNetP('A','B');
print(pointStack.infoStack());

pointStack.enterClause();
pointStack.buildNetP('D','C');
print(pointStack.infoStack());

pointStack.leaveClause();
pointStack.buildNetP('B','C');
print(pointStack.infoStack());




/*
+[J函数](,测试)
*/
## end
#980, 725:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...

Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);
list_pt=[A,B,C];

var code0,code,text,list_pt,list_km,km,stack;

code0=`B(A,C)->A;
`;


[code,km,stack]=parser.chainToken(code0);
print(stack.info());

list_km=km.causeEnd().allEffects();
print(list_km.length,list_km[1].info());

var pt=stack.m_undefinedStack[0]['C'];
var km_head=pt.m_con[0].m_master;
stack.insertPtIntotKarma_back(km_head,pt);
print(pt.m_master.info());

print(writeStdCode_karma(km_head,[]))




/*
+[J函数](,测试)
*/
## end
#982, 508:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...

Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);
list_pt=[A,B,C];

var code0,list_km;
code0=`
B(A,C)->A;
`;

list_km=parser.readSubCode_tokener(code0);
print(list_km[0].info());
print(writeStdCode_karma(list_km[0],[]))



/*
+[J函数](,测试)
*/
## end
#984, 1059:

function run_code_line(code0,list_pt) {
    var code,list_km,list_new;
    var parser=new Parser();

    [code,km]=parser.chainToken(code0);
    list_km=km.allEffects();
    
    list_km[0].m_stage=1;
    var change=true,change1;
    
    while(change) {
        change=false;
        for(var i=0;i<list_km.length;i++) {
            [change1,list_new]=list_km[i].Reason_oneStep(list_pt);
            karma=list_km[i];
            //print(karma.info(),list_new.length);
            mergeArrays(list_pt,list_new);
    
            if(change1 & !change) {
                change=true;
            }
        }
        //printPtList(list_pt);
        //print(change);
        //print();
    }
    return code;
}

function run_code(code0,list_pt) {
    var code1=code0;
    while(true) {
        code0=code0.replace(/^;?[ \t\n]*/,'');
        if(code0=='') {
            break;
        }
        code0=run_code_line(code0,list_pt);
        if(code0==code1) {
            break;
        }
        else {
            code1=code0;
        }
    }
    return code0;
}

## end
#986, 453:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...

Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);
list_pt=[A,B,C];

var code0,list_km;
code0=`
B(A,C)->A->+D(,C);
`;

run_code(code0,list_pt);
printPtList(list_pt);



/*
+[J函数](,测试)
*/
## end
#988, 309:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
*/


var list_pt=[],list_new=[];
Nini.run_code("+的(+A,+B)->+的(+A,+C)",list_pt,list_new);
printPtList(list_pt);
printPtList(list_new);
Nini.operation(list_pt);
Nini.do(list_pt[3],'+A1->+A2->+[左连](B,C)');

printPtList(listFromPt(list_pt[3]));



## end
#989, 4:
1099
## end
#992, 83:
https://www.freecodecamp.org/news/how-to-clone-an-array-in-javascript-1d3183468f6a/
## end
#994, 73:
/*
+[J函数](,测试copy)
*/


var a=[1,2,3,4];
var b=[...a,4,...a];

print(b)


## end
#996, 536:
/*
记住"自然语言"
+[J函数](,测试)

测试等于:...
测试变量:...
测试map:...
测试newMap:...
测试re:...
测试stateSelf:...
测试stateSelf_eq:...
测试stateSelf_is:...
测试stateRelation:...
测试流程:...
测试copy:...
测试isType:
+[新建阅读窗口](,测试流程)

存档1:...

name_m
+[J函数](,测试)
*/


var A0=new NetP('A','test');
var A1=new NetP('[A]');
var A2=new NetP('[is]');
var A3=new NetP('_B');
var A4=new NetP('~A');
var A5=new NetP('A','test');

var karma1=new Karma(A2);
//karma1.m_buildMode=true;

print(karma1.info());
print(karma1.isType('特殊范围'));
print(karma1.isVirtual());


/*
+[J函数](,测试)
*/
## end
#998, 745:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...

Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);
list_pt=[A,B,C];

var code0,list_km;
code0=`
B(A,C)->A->+D(,C);
`;

list_km=parser.readSubCode_tokener(code0);
print(writeStdCode_karma(list_km[0],[]));

list_km[0].setRangers();
list_ef=list_km[0].allEffects();
for(var i in list_ef) {
var km=list_ef[i];
if(km.m_ranger=='') {
    print(km.m_symbol.info()+':','无');
}
else {
    print(km.m_symbol.info()+':',km.m_ranger.m_symbol.info());
}
}


/*
+[J函数](,测试)
*/
## end
#999, 82:
+[调用词典动词](+[做],+查看)->+[做](,+[类]#13)->[]->[]->+[.](测试结构#12,+[类]#13)->+[类]#13"Karma"
## end
#1000, 4:
1109
## end
#1003, 916:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...
测试setRanger:...

Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);
var list_pt=[A,B,C];
var pool={'A':[A,B],'B':[B],'C':[C,B]};

var code0,list_km;
code0=`
B(A,C)->A->D(,C);
`;

list_km=parser.readSubCode_tokener(code0);
print(writeStdCode_karma(list_km[0],[]));

list_km[0].setRangers();
list_ef=list_km[0].allEffects();
for(var i in list_ef) {
    var km=list_ef[i];
    if(km.m_ranger=='') {
        print(km.m_symbol.info()+':','无');
    }
    else {
        print(km.m_symbol.info()+':',km.m_ranger.m_symbol.info());
    }
}


printPtPool(pool);
var list_rn=list_km[0].rangeList(pool);
printPtList(list_rn);



/*
+[J函数](,测试)
*/
## end
#1005, 871:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...
测试setRanger:...
测试rangeList:...

Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
var D=new NetP('D');

B.con(C,A);
D.con(0,C);
var pool={'A':[A],'B':[B],'C':[C],'D':[D]};

var code0,list_km;
code0=`
B(A,C)->A->D(,C);
`;

list_km=parser.readSubCode_tokener(code0);
print(writeStdCode_karma(list_km[0],[]));

list_km[0].setRangers();
list_ef=list_km[0].allEffects();
list_ef[0].map(C);
list_ef[1].map(B);
list_ef[2].map(A);
list_ef[3].map(D);


B.con(A,C);
D.con(0,C);
j=0;
printPtPool(pool);
print(list_ef[j].info())
var list_rn=list_ef[j].rangeList(pool);
printPtList(list_rn);



/*
+[J函数](,测试)
*/
## end
#1007, 1188:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...
测试setRanger:...
测试rangeList:...
测试rangeList2:...

Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
var D=new NetP('D');

B.con(C,A);
D.con(0,C);
var pool={'A':[A],'B':[B],'C':[C],'D':[D]};

var code0,list_km,list_pt=[];
code0=`
B(A,C)->+A->+D(,C);
`;

list_km=parser.readSubCode_tokener(code0);
print(writeStdCode_karma(list_km[0],[]));

list_km[0].setRangers();
list_ef=list_km[0].allEffects();

B.con(A,C);
D.con(0,C);
pool={'C':[C],'A':[A]};

j=0;
printPtPool(pool);
print(list_ef[j].info())
var list_rn=list_ef[j].rangeList(pool);
printPtList(list_rn);


list_km=list_ef;

list_km[0].m_stage=1;
var change=false;

for(var j=0;j<4;j++) {
    for(var i=0;i<list_km.length;i++) {
        [change,list_new]=list_km[i].Reason_oneStep(pool);
        karma=list_km[i];
        print(karma.info(),list_new.length);
        mergeArrays(list_pt,list_new);
    }
    printPtList(list_pt);
    print();
}


/*
+[J函数](,测试)
*/
## end
#1009, 400:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:
*/

var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
var C1=new NetP('C');
var D=new NetP('D');

B.con(C,A);
D.con(0,C);

var list_pt=[A,B,C,D,C1],list_pt1;
var pool=listPt2poolPt(list_pt);
list_pt1=poolPt2listPt(pool);

printPtList(list_pt);
printPtList(list_pt1);
printPtPool(pool);

/*
+[J函数](,测试)
*/
## end
#1010, 4:
1106
## end
#1013, 399:

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);
list_pt=[A,B,C];

var code0,code,text,list_pt,list_km,km;

code0=`+[右连](编辑框,A);
`;


kms=parser.readSubCode_tokener(code0);
list_km=kms[0].allEffects();

print(writeStdCode_karma(list_km[0],[]))

print(list_km.length);
for(var i=0;i<list_km.length;i++) {
    km=list_km[i];
    print(km.info());
}

## end
#1014, 4:
1125
## end
#1017, 925:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...
测试setRanger:...
测试rangeList:...
测试rangeList2:...
测试rangeList3:...

测试缩写2:...
测试流程2:

+[新建阅读窗口](,测试一般匹配)
Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var code0,code,text,list_pt,list_km,km;
list_pt=[A,B,C];
var pool={'A':[A],'B':[B],'C':[C]};

code0=`B->+[右连](B,A);
`;


kms=parser.readSubCode_tokener(code0);
list_km=kms[0].allEffects();

print(writeStdCode_karma(list_km[0],[]))

list_km[0].m_stage=1;
print('测试开始')
printPtPool(pool);
for(var j=0;j<4;j++) {
    for(var i=0;i<list_km.length;i++) {
        list_km[i].Reason_oneStep(pool);
        karma=list_km[i];
        print(karma.info());
    }
    print();
}



/*
+[J函数](,测试)
*/
## end
#1019, 568:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...
测试setRanger:...
测试rangeList:...
测试rangeList2:...
测试rangeList3:...

测试缩写2:...
测试流程2:...

测试节点构造:

+[新建阅读窗口](,测试一般匹配)
Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var code='A(B,C);B(,);C(A,)';
var list_pt=parser.buildPoints_tokener(code);

printPtList(list_pt);


/*
+[J函数](,测试)
*/
## end
#1023, 280:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
*/

var list_pt=[];
list_pt=Nini.make(`
A(B,C);
B(,);
C(,)`);
Nini.make('A1(B1,C1);B1(,);C1(,)',list_pt[0]);

printPtList(list_pt);
printPtList(list_pt[0].m_con);


/*
+[J函数](,测试)
*/
## end
#1025, 37:
+[显示星图](,测试场景)


+A(+B,+C)->+B(,+C)


## end
#1033, 4:
1127
## end
#1035, 4:
1147
## end
#1038, 29:


修改compiler:...
(20220618)


## end
#1040, 523:

关于body_compiler, 简单说一下之前做的是什么. 
所以m_tmpNew, m_answer, m_mapDict, m_outputs, Karma.m_clauseNew, Karma.m_clauseCollect, Karma.m_clauseOut, Karma.m_clauseIn都是为了修改一轮匹配中的入口节点而存在的
m_questions是一个已经被废掉的变量
然后, 在匹配过程中产生的内部节点是会被调用节点所需要的, 但是在完成匹配后就应该被删掉了. 所以要有一个think. 而think会传出所有新产生的节点

那么这一轮的修改建议如下:
1.并不需要修改匹配的入口节点, 所以, 所有的相关变量和函数一律删除; 
2.不需要设置m_running来保存链的匹配状态, 因为因果链本身就完美记录了当前的匹配状态. 我只需要保证能找到需要的那个因果链就可以了; 
3.关于节点定义中的分号用法, 我建议暂时删除, 因为确实用得不多. 而且对长句子不算很方便. 完全可以用同名节点或者子节点+自动分拆节点来实现同样效果. 我想把这部分的复杂性加到节点结构上; 
4.加一个链节和产生节点之间的关联吧





## end
#1042, 348:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...
*/

var list_pt=[];
var pt_lib=new NetP('操作');
Nini.m_lib=pt_lib;
Nini.make(`测试"+测试(,_A)->+[消息窗口](,_A)"`,pt_lib);

list_pt=listFromPt(pt_lib);
printPtList(list_pt)

Nini.do('+[测试](,+A)');




/*
+[J函数](,测试)
*/
## end
#1044, 58:
/*
+[J函数](,测试等于)
*/

print([]!=='')



/*
+[J函数](,测试等于)
*/
## end
#1046, 998:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...
测试setRanger:...
测试rangeList:...
测试rangeList2:...
测试rangeList3:...

测试缩写2:...
测试流程2:...

测试节点构造:...

+[新建阅读窗口](,测试一般匹配)
Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);

var code0,code,text,list_pt,list_km,km;
list_pt=[A,B,C];
var pool={'A':[A],'B':[B],'C':[C]};

code0=`B->+[右连](B,A);
`;


kms=parser.readSubCode_tokener(code0);
list_km=kms[0].allEffects();

print(writeStdCode_karma(list_km[0],[]))

list_km[0].m_stage=1;
list_km[0].m_restricted=true;
list_km[0].m_listMP=[B];
print('测试开始');
printPtPool(pool);


for(var j=0;j<4;j++) {
    for(var i=0;i<list_km.length;i++) {
        list_km[i].Reason_oneStep(pool);
        karma=list_km[i];
        print(karma.info());
    }
    print();
}



/*
+[J函数](,测试)
*/
## end
#1048, 360:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
*/

var list_pt=[];
var pt_lib=new NetP('操作');
Nini.m_lib=pt_lib;
Nini.make(`测试"+测试(,_A)->+[消息窗口](,_A)"`,pt_lib);

list_pt=Nini.make(`测试(,A);A(,)`);
printPtList(list_pt);
Nini.act('测试->+[消息窗口]"2333"',list_pt[0]);


/*
+[J函数](,测试)
*/
## end
#1050, 414:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
*/

var list_pt=[];
var pt_lib=new NetP('操作');
Nini.m_lib=pt_lib;
Nini.make(`测试"+测试(,_A)->+[消息窗口](,_A)"`,pt_lib);

list_pt=Nini.make(`[测试](,A);A(,)`);
printPtList(list_pt);
print(list_pt[0].info());
list_pt[0].m_needed=1;

Nini.act('+测试->+[消息窗口]"2333"',list_pt[0]);



/*
+[J函数](,测试)
*/
## end
#1051, 4:
1167
## end
#1054, 371:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
*/

var list_pt=[];
var pt_lib=new NetP('操作');
Nini.m_lib=pt_lib;
Nini.make(`测试"+测试(,_A)->+[消息窗口](,_A)"`,pt_lib);

list_pt=listFromPt(pt_lib);
printPtList(list_pt)

Nini.do('+[测试](,+A)->[m_name1]');




/*
+[J函数](,测试)
*/
## end
#1056, 17:
文档\S应用\网页聊天框.ftxt
## end
#1058, 17:
文档\S应用\网页聊天框.ftxt
## end
#1060, 6272:
<!--
+[H函数](,Nini聊天框)

emoji::https://unicode.org/emoji/charts/full-emoji-list.html#1f92b

-->

%Nini本体

<style>
.window {
  position: relative;
  width: 90%;
  #overflow: hidden;
  overflow: auto;
  # padding-top: 20%;
  left: 5%;
  border: 2px solid #888888;
}

.window.history {
  height: 60%;
  background-color: lightgrey;
}

.window.draw {
    height: 60%;
    background-color: white;
    display: none
}

.window.me {
  background-color: white;
}

.chat-bubble {
    margin: 10px;
    display: inline-block;
    position: relative;
    width: auto;
    height: auto;
}

.chat-bubble.Nini {
    float: left;
    clear: both;
    background-color: white;
}

.chat-bubble.me {
    float: right;
    clear: both;
    background-color: lightgreen;
}

.talktext{
    padding: 1em;
    text-align: left;
    line-height: 1.5em;
}

</style>

<!--
+[H函数](,Nini聊天框)
&#129409
&#x1f611
&#x1f612
&#x1f623
&#x1f603
-->

<h1 id='Nini_face'>Nini: 
<span onmousedown="changeWnd('')">&#x1f603</span>
</h1>

<div id="chat_history" class="window history">

<!--
+[H函数](,Nini聊天框)
-->

<div class="chat-bubble Nini">
    <div class="talktext">
你好! 点击<span onmousedown="changeWnd('')">&#x1f603</span>, 可以返回聊天窗口
    </div>
</div>

</div>

<!--
+[H函数](,Nini聊天框)
-->

<div id="draw_window" class="window draw">
<svg width=100%  viewBox="0 0 1000 1000" id='display_window'></svg>
</div>
<div id="world_3d_scene" class="window history" display="none"></div>

<br>

<textarea class="window me" id='edit_box' rows=4>A0是长方形"20,100"</textarea>


<p id='cmd_window'></p>

<script>

var face_normal='&#x1f611';
var face_see='&#x1f612';
var face_bad='&#x1f623';
var face_happy='&#x1f603';

Nini.init(st_core.textContent);
//Nini.init(st_core.innerHTML);
var pt_Nini=Nini.m_self;
var echo_sent=[];

var show_index=0;

window.addEventListener("keydown", function (event) {
  if (event.defaultPrevented) {
    return;
  }

  switch (event.key) {
    case "Escape":
      changeWnd('');
      break;
    default:
      return; // Quit when this doesn't handle the key event.
  }

  event.preventDefault();
}, true);

edit_box.addEventListener("keydown", function (event) {
    if(event.key==='Enter') {
        var code=edit_box.value;
        edit_box.value='';
        event.preventDefault();
        updateChatHistory(code);
        runCode_Nini(code);
    }
});


function changeWnd(i) {
    if(i==='') {
        show_index=0;
    }
    else {
        show_index+=i;
    }
    show_index=(show_index)%3;
    if(show_index==0) {
        chat_history.style.display="block";
        draw_window.style.display="none";
        world_3d_scene.style.display="none";
    }
    else if(show_index==1) {
        world_3d_scene.style.display="block";
        chat_history.style.display="none";
        draw_window.style.display="none";
    }
    else {
        chat_history.style.display="none";
        draw_window.style.display="block";
        world_3d_scene.style.display="none";
    }
}

function talkToNini(code) {
    updateChatHistory(code);
    runCode_Nini(code);
}

function updateChatHistory(code,speaker='me') {
    if(code==='%三维画板') {
    chat_history.innerHTML+=`
<div class="chat-bubble ${speaker}">
    <div class="talktext">
<span onmousedown='changeWnd(1)'><b><u>点击这里</u></b></span>
    </div>
</div>
`;
    }
    else if(code==='%网页画板') {
        chat_history.innerHTML+=`
<div class="chat-bubble ${speaker}">
    <div class="talktext">
<span onmousedown='changeWnd(2)'><b><u>点击这里</u></b></span>
    </div>
</div>
`;
    }
    else {
        chat_history.innerHTML+=`
<div class="chat-bubble ${speaker}">
    <div class="talktext">
${code}
    </div>
</div>
`;
    }

    chat_history.scrollTop = chat_history.scrollHeight;

}

function runCode_Nini(code) {
    understandHear(code)
    Nini.do('+[自我意识](Nini,)->+[更新意境](Nini,)',pt_Nini);
    if(Nini.m_speak.m_text!=='') {
        updateChatHistory(Nini.m_speak.m_text,speaker='Nini');
        Nini.m_speak.m_text='';
    }
}

function understandHear(code) {
    var list_pt,pt0,pt_con,pt_hear;
    var list_del=[];
    pt_hear=Nini.m_hear;
    pt_hear.m_text=code;

    for(var i=0;i<pt_hear.m_con.length;i++) {
        pt_con=pt_hear.m_con[i];
        if(pt_con.m_name=='^起点') {
            list_del.push(pt_con);
        }
//print(pt_con.info());
    }
    for(var i=0;i<list_del.length;i++) {
        list_del[i].con('',0);
    }

    [list_pt,code]=NLP.sent2Struct(code);
    if(list_pt.length==0) {
        return;
    }
    else {
        pt0=list_pt[0];
        pt0.con(pt_hear,0)
    }

}


world_3D.init('world_3d_scene');
animate_3D();
changeWnd(0);


talkToNini('车身是立方体（300,100,100）');
talkToNini('前轮1是圆柱体(20,20)');
talkToNini('前轮2是圆柱体(20,20)');
talkToNini('后轮2是圆柱体(20,20)');
talkToNini('后轮1是圆柱体(20,20)');

talkToNini('车身在"0,65,-100"');
talkToNini('前轮1距离车身为(100,-45,-50)');
talkToNini('前轮2距离前轮1为(0,0,100)');
talkToNini('前轮1朝向(0,90,0)');
talkToNini('前轮2朝向(0,90,0)');

talkToNini('后轮2距离前轮2为(-200,0,0)');
talkToNini('后轮1距离前轮1为(-200,0,0)');
talkToNini('后轮1朝向(0,90,0)');
talkToNini('后轮2朝向(0,90,0)');

talkToNini('有公交车');
talkToNini('公交车有车身');
talkToNini('公交车有前轮1');
talkToNini('公交车有前轮2');
talkToNini('公交车有后轮1');
talkToNini('公交车有后轮2');



talkToNini('驾驶舱是球体(50)');
talkToNini('浮游泡1是球体(30)');
talkToNini('浮游泡2是球体(30)');
talkToNini('浮游泡3是球体(30)');
talkToNini('浮游泡4是球体(30)');
talkToNini('船体是圆柱体(150,30)');

talkToNini('驾驶舱在(200,350,0)');
talkToNini('船体距离驾驶舱为(0,-20/2,0)');
talkToNini('浮游泡1距离船体为(80,-20,0)');
talkToNini('浮游泡2距离船体为(-80,-20,0)');
talkToNini('浮游泡3距离船体为(0,-20,80)');
talkToNini('浮游泡4距离船体为(0,-20,-80)');

talkToNini('绕船体, 浮游泡1沿Y方向旋转"33"');
talkToNini('绕船体, 浮游泡2沿Y方向旋转"33"');
talkToNini('绕船体, 浮游泡3沿Y方向旋转"33"');
talkToNini('绕船体, 浮游泡4沿Y方向旋转"33"');



talkToNini('头是球体(5)');
talkToNini('身子是立方体(7,25,15)');
talkToNini('手臂1是立方体(4,30,4)');
talkToNini('手臂2是立方体(4,30,4)');
talkToNini('腿1是立方体(6,30,6)');
talkToNini('腿2是立方体(6,30,6)');

talkToNini('头距离船体为(0,-100,0)');
talkToNini('身子距离头为(0,-25/2-5,0)');
talkToNini('手臂1距离身子为(0,25/2-30/2-1,15/2+6/2+1)');
talkToNini('手臂2距离手臂1为(0,0,-15-6-2)');
talkToNini('腿1距离身子为(0,-25/2-30/2-1,15/4)');
talkToNini('腿2距离腿1为(0,0,-15/2)');



talkToNini('有相机');
talkToNini('相机朝向头');


talkToNini('显示三维画板');


</script>


<!--
ESC
你好!
Nini, 打开网页画板(文件)
Nini本体(核心结构):...
+[新建阅读窗口](,Nini本体)
+[H函数](,Nini聊天框)
-->
## end
#1065, 59:
https://unicode.org/emoji/charts/full-emoji-list.html#1f92b
## end
#1066, 4:
1229
## end
#1069, 608:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
*/

var list_pt=[];
var pt_lib=new NetP('操作');
Nini.m_lib=pt_lib;
var pt_idea=new NetP('想法');
Nini.m_idea=pt_idea;

Nini.make(`测试"+测试(,_A)->+[消息窗口](,_A)"`,pt_lib);
//Nini.make(`测试"+测试(_A,_B)->+是(_A,_B)"`,pt_idea);
Nini.make(`测试"+测试->+是(+A,+B)"`,pt_idea);

list_pt=listFromPt(pt_lib);
printPtList(list_pt)
printPtList(listFromPt(pt_idea))

Nini.do('+[测试](,+A)->[测试]');

/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
*/
## end
#1071, 105:
+[显示星图](,场景测试)

Nini::
+的(Nini,+m_lib)->+的(Nini,+m_idea)

m_lib:...
m_idea:...

+[结构HTML](场景测试,+[消息窗口])


## end
#1079, 7:


A:...
## end
#1081, 9:


测试:...

## end
#1084, 34:
"""


"""

+A(_A,_B)->A1(_A,_B)



## end
#1085, 136:
<st id='st_core' style='display:none'>
Nini#0""(,)
m_idea#1"

A:..."(,)
的#2""(Nini#0,m_idea#1)
m_lib#3""(,)
的#4""(Nini#0,m_lib#3)

</st>
## end
#1086, 136:
<st id='st_core' style='display:none'>
Nini#0""(,)
m_idea#1"

A:..."(,)
的#2""(Nini#0,m_idea#1)
m_lib#3""(,)
的#4""(Nini#0,m_lib#3)

</st>
## end
#1087, 136:
<st id='st_core' style='display:none'>
Nini#0""(,)
m_idea#1"

A:..."(,)
的#2""(Nini#0,m_idea#1)
m_lib#3""(,)
的#4""(Nini#0,m_lib#3)

</st>
## end
#1088, 136:
<st id='st_core' style='display:none'>
Nini#0""(,)
m_idea#1"

A:..."(,)
的#2""(Nini#0,m_idea#1)
m_lib#3""(,)
的#4""(Nini#0,m_lib#3)

</st>
## end
#1089, 136:
<st id='st_core' style='display:none'>
Nini#0""(,)
m_idea#1"

A:..."(,)
的#2""(Nini#0,m_idea#1)
m_lib#3""(,)
的#4""(Nini#0,m_lib#3)

</st>
## end
#1091, 121:
"""
显示::<u>哈哈哈哈!!!</u>
测试动作:...

"""

+测试->+[del](,+测试)...
->的(测试,显示)->的(测试,测试动作)...
->+[消息窗口](,显示)->+[消息窗口]"<u>!!!</u>"

## end
#1093, 562:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
*/

var list_pt0=[],list_pt=[],list_km=[];
var pt_lib=new NetP('操作');
Nini.m_lib=pt_lib;
var pt_idea=new NetP('想法');
Nini.m_idea=pt_idea;

list_pt0=Nini.init(st_core.textContent);
list_pt=listFromPt(Nini.m_lib);

printPtList(Nini.m_lib.m_con)
printPtList(list_pt);
printPtList(list_pt0);

Nini.do('+[消息窗口]"2333"->+[测试]')


/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
*/
## end
#1095, 690:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...
测试setRanger:...
测试rangeList:...
测试rangeList2:...
测试rangeList3:...

测试缩写2:...
测试流程2:...

测试节点构造:...
测试限制匹配:...

+[新建阅读窗口](,测试一般匹配)
Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var A=new NetP('A');
var B=new NetP('B');
var C=new NetP('C');
B.con(A,C);
list_pt=[A,B,C];

var code0,list_km;
code0=`+测试->+[del](,+测试)->+[消息窗口]"2333"->+[消息窗口]"2333"
`;

list_km=parser.readSubCode_tokener(code0);
print(list_km[0].info());
print(writeStdCode_karma(list_km[0],[]))




/*
+[J函数](,测试)
*/
## end
#1097, 595:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
测试内置动词:...
*/

var list_pt0=[],list_pt=[],list_km=[];

list_pt0=Nini.init(st_core.textContent);
Nini.do('+[修改内容]"123"(,+C)->+[增加内容]"123"(,+C)->+[消息窗口](,+C)')
Nini.do(`
+[模板文本]"%1%1"(,+[消息窗口])...
->+[.]"1"(+[模板文本],+[临时文本])->+[临时文本]"2333"
`)
Nini.do(`
+A"2":->[==]"1"(,+A)->+[消息窗口]"好!",
    ->+[消息窗口]"不好!"
`)
Nini.do(`
+[JS]"print('123');alert('!!!')"
`);


/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
*/
## end
#1101, 113:
"""
显示::<u>哈哈哈哈</u>
+的(显示,+B)
的(显示,B)->+[del](,B)

"""

+测试动作->+[del](,+测试动作)...
->的(测试动作,显示)...
->+[消息窗口](,显示)


## end
#1103, 11:
<u>哈哈哈哈</u>
## end
#1105, 446:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
测试内置动词:...
*/

var list_pt0=[],list_pt=[],list_km=[];

list_pt0=Nini.init(st_core.textContent);
Nini.do(`
+[JS]"var b='1234!!!';"->+[o]"b"(+[JS],+[消息窗口])
`);
Nini.do(`
+[JS]"var ans='1234';"(,+[消息窗口])
`);


/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
*/
## end
#1107, 26610:
"""
JS版本(J函数):...
将JS版本的"len\(%[变量]\)"替换为"%[变量].length"
将JS版本的"%[变量]\[%[1]:%[n]\]"替换为"%[变量].slice(%[1],%[n])"
将JS版本的"%[变量]\[%[1]:\]"替换为"%[变量].slice(%[1],%[变量].length)"
将JS版本的"%[变量]\[%[1]:-%[n]\]"替换为"%[变量].slice(%[1],%[变量].length-%[n])"
将JS版本的"%[变量]\(\)\[%[1]:-%[n]\]"替换为"%[变量]().slice(%[1],%[变量]().length-%[n])"
将JS版本的"Karma"替换为"new Karma"
将JS版本的"new Karma"替换为"//new Karma"

将JS版本的"return %[变量1],%[变量2];"替换为"return [%[变量1],%[变量2]];"
将JS版本的"return %[变量1],'';"替换为"return [%[变量1],''];"
将JS版本的"return '','';"替换为"return ['',''];"

将JS版本的"%[变量1],%[变量2]="替换为"[%[变量1],%[变量2]]="

将JS版本的"=fun_"替换为"=this.fun_"
将JS版本的"=word_in_dict"替换为"=this.word_in_dict"
将JS版本的"function "替换为""
将JS版本的"word_order"替换为"this.m_word_order"
将JS版本的"this.m_word_order;"替换为""
将JS版本的"pt0=new"替换为"var pt0=new"
将JS版本的"var var"替换为"var"

将JS版本的"dict_"替换为"this.m_dict_"
将JS版本的"this.m_this.m_dict_"替换为"this.m_dict_"
将JS版本的"  code_save=code;"替换为"  var code_save=code;"
将JS版本的"print\("替换为"//print("


"""


import sys,re
if __name__=='__main__':
    sys.path.append(sys.path[0]+'\\..')



from body.bone import NetP
from body.soul import Karma
from tools import tools_basic

word_order=0

def fun_助词(code):
    n=word_in_dict(code,dict_助词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("助词").con(0,pt)
        return code[n:],pt0
    return code,None


def fun_连词(code):
    n=word_in_dict(code,dict_连词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("连词").con(0,pt)
        return code[n:],pt0
    return code,None


def fun_介词(code):
    n=word_in_dict(code,dict_介词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("介词").con(0,pt)
        return code[n:],pt0
    return code,None



def fun_数量词(code):
    n_type=0
    if len(code)>0 and code[0]=='第':
        n_type=1
        code=code[1:]

    result=re.match('\d+|几',code)
    if result==None:
        return code,None

    数目=NetP(result.group())
    code=code[result.span()[1]:]

    n=word_in_dict(code,dict_数量词)
    if n!=0:
        pt=NetP(code[0:n]).con(数目,0)
        pt0=NetP("数量词").con(0,数目)
        NetP("的").con(pt0,pt)
        if n_type==1:
            pt1=NetP('第').con(数目,0)
            NetP("的").con(pt0,pt1)

        return code[n:],pt0
    return code,None



def fun_副词(code):
    n=word_in_dict(code,dict_副词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("副词").con(0,pt)
        return code[n:],pt0
    return code,None



def fun_代词(code):
    n=word_in_dict(code,dict_代词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("代词").con(0,pt)
        return code[n:],pt0
    return code,None



def fun_形容词(code):
    n=word_in_dict(code,dict_形容词)
    if n!=0:
        print(code[0:n])
        pt=NetP(code[0:n])
        pt0=NetP("形容词").con(0,pt)
        return code[n:],pt0
    return code,None


def fun_名词(code):
    if len(code)==0:
        return '',None
    global word_order
    name=''
    for i in range(len(code)):
        n=word_in_dict(code[i:],dict_动词)+word_in_dict(code[i:],dict_助词)+word_in_dict(code[i:],dict_连词)+word_in_dict(code[i:],dict_介词)+word_in_dict(code[i:],dict_副词)+word_in_dict(code[i:],dict_标点)
        if n!=0:
            if i!=0:
                name=code[0:i]
                break
            else:
                return code,None
        if code[i]=='"':
            if i==0:
                name="临时文本"
            else:
                name=code[0:i]
            break
    if name=='':
        name=code
    code=code[i:]
    text=''
    pat1=r'"[^"]+"'
    result=re.match(pat1,code)
    if result!=None:
        text=result.group()[1:-1]
        n=result.span()[1]
        code=code[n:]

    pt=NetP(name,text)
    pt0=NetP("名词").con(0,pt)
    NetP("的").con(pt0,NetP("序号",str(word_order)))
    word_order+=1
    return code,pt0


def fun_dict(code,dict_words,type_word):
    n=word_in_dict(code,dict_words)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP(type_word).con(0,pt)
        return code[n:],pt0
    return code,None



def word_in_dict(code,words):
    n=min(20,len(code))
    for i in range(n):
        if code[0:n-i] in words:
            return n-i
    return 0

def fun_动词(code):
    n=word_in_dict(code,dict_动词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("动词").con(0,pt)
        return code[n:],pt0
    return code,None



def fun_谓语(code):
    if code=="":
        return code,None
    code_save=code

    sent_type=0

    code,状语=fun_状语(code)
    if len(code)>0 and code[0]=='被':
        code,动词=fun_动词(code[1:])
        sent_type=1
    else:
        code,动词=fun_动词(code)

    if 动词==None:
        状语=None
        code,动词=fun_动词(code_save)
    if 动词==None:
        return code,None

    谓语=NetP("谓语")
    谓语.m_db[1]=动词.m_db[1]
    Karma(谓语.m_db[1])
    NetP('的').con(谓语,动词)
    if sent_type==1:
        被=NetP('被').con(None,动词)
        NetP('的').con(谓语,被)

    if 状语!=None:
        NetP('的').con(谓语,状语)
        状语.m_db[1].con(动词.m_db[1],0)
    
    return code,谓语


def fun_主语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,定语=fun_定语(code)
    if 定语!=None:
        code,名词=fun_名词(code)
        if 名词!=None:
            主语=NetP("主语")
            主语.m_db[1]=名词.m_db[1]
            
            Karma(主语.m_db[1])
            if 定语.m_db[1].m_name in dict_动词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            elif 定语.m_db[1].m_name in dict_副词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            else:
                定语.m_db[1].con(名词.m_db[1],0)
            
            NetP('的').con(主语,定语)
            NetP('的').con(主语,名词)
            return code,主语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        主语=NetP("主语")
        主语.m_db[1]=名词.m_db[1]
        
        Karma(主语.m_db[1])
        
        NetP('的').con(主语,名词)
        return code,主语
    code=code_save
    
    return code,None



def sent_pat(code,pat0):
    pat=re.sub('%\[句子[^\[^\]]*\]',r'(.+)',pat0)
    result=re.match(pat,code)
    if result==None:
        return False
    else:
        return True

def fun_复句(code):
    if code=="":
        return code,None
    code_save=code

    if sent_pat(code,"因为%[句子], 所以%[句子]"):
        code,复句=fun_因果复句(code)
        return code,复句
    elif sent_pat(code,"当%[句子], %[句子]"):
        code,复句=fun_状语复句(code)
        return code,复句
    elif sent_pat(code,"%[句子], 然后, %[句子]"):
        code,复句=fun_然后复句(code)
        return code,复句
    return code,None



def fun_因果复句(code):
    if code=="":
        return code,None
    code_save=code

    if code[0:2]=='因为':
        code,句子1=fun_句子(code[2:])
    else:
        return code_save,None

    if code[0:4]==', 所以':
        code,句子2=fun_句子(code[4:])
    else:
        return code_save,None

    if 句子1==None or 句子2==None:
        return code_save,None

    因果句=NetP('因果复句')
    因为=NetP('因为').con(因果句,句子1)
    所以=NetP('所以').con(因果句,句子2)
    NetP('的').con(因果句,句子1)
    NetP('的').con(因果句,句子2)

    return code,因果句


def fun_状语复句(code):
    if code=="":
        return code,None
    code_save=code

    if code[0]=='当':
        code,句子1=fun_句子(code[1:])
    else:
        return code_save,None

    if code[0:2]==', ':
        code,句子2=fun_句子(code[2:])
    else:
        return code_save,None

    if 句子1==None or 句子2==None:
        return code_save,None

    复句=NetP('状语复句')
    条件=NetP('条件').con(复句,句子1)
    结果=NetP('结果').con(复句,句子2)
    NetP('的').con(复句,句子1)
    NetP('的').con(复句,句子2)

    return code,复句



def fun_然后复句(code):
    if code=="":
        return code,None
    code_save=code

    code,句子1=fun_单句(code)

    if code[0:6]==', 然后, ':
        code,句子2=fun_单句(code[6:])
    else:
        return code_save,None

    if 句子1==None or 句子2==None:
        return code_save,None

    复句=NetP('然后复句')
    之前=NetP('之前').con(复句,句子1)
    之后=NetP('之后').con(复句,句子2)
    NetP('的').con(复句,句子1)
    NetP('的').con(复句,句子2)

    return code,复句


def fun_句子(code):
    if code=="":
        return code,None
    code_save=code
    global word_order
    word_order=0

    code,句子=fun_复句(code)
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_被动句(code)
    except:
        code=code_save
        句子=None
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_把字句(code)
    except:
        code=code_save
        句子=None
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_普通句(code)
    except:
        code=code_save
        句子=None
    return code,句子


def fun_单句(code):
    if code=="":
        return code,None
    code_save=code
    global word_order
    word_order=0

    try:
        code,句子=fun_被动句(code)
    except:
        code=code_save
        句子=None
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_把字句(code)
    except:
        code=code_save
        句子=None
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_普通句(code)
    except:
        code=code_save
        句子=None
    return code,句子


def fun_普通句(code):
    if code=="":
        return code,None
    code_save=code

    code1,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        if code1[0:2]==', ':
            code=code1[2:]
        else:
            介宾短语=None

    code1,主语=fun_主语(code)
    code1,谓语=fun_谓语(code1)
    if 谓语!=None:
        code=code1
    else:
        主语=None
        code,谓语=fun_谓语(code)

    code,宾语=fun_宾语(code)

    if 谓语==None:
        return code,None

    
    句子=NetP("句子")
    句子.m_db[1]=谓语.m_db[1]
    NetP('的').con(句子,谓语)
    

    if 介宾短语!=None:
        介宾短语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,介宾短语)
        NetP('的').con(谓语,介宾短语)

    if 主语!=None:
        谓语.m_db[1].con(主语.m_db[1],0)
        NetP('的').con(句子,主语)
        
    if 宾语!=None:
        谓语.m_db[1].con(0,宾语.m_db[1])
        NetP('的').con(句子,宾语)
        

    code1,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,副词)
        NetP('的').con(谓语,副词)
        return code1,句子

    code1,补语=fun_补语(code)
    if 补语!=None:
        补语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,补语)
        NetP('的').con(谓语,补语)
        return code1,句子


    return code,句子



def fun_被动句(code):
    if code=="":
        return code,None
    code_save=code

    code1,状语=fun_介宾短语(code)
    if 状语!=None:
        if code1[0:2]==', ':
            code=code1[2:]
        else:
            状语=None

    code,宾语=fun_宾语(code)
    code,状语2=fun_状语(code)
    if code[0]!='被':
        return code_save,None
    else:
        code=code[1:]
    code,主语=fun_主语(code)
    code,谓语=fun_谓语(code)

    if 谓语==None:
        return code,None
    
    句子=NetP("句子")
    句子.m_db[1]=谓语.m_db[1]
    NetP('的').con(句子,谓语)
    NetP('被').con(谓语,谓语.m_db[1])

    if 状语!=None:
        状语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,状语)
        NetP('的').con(谓语,状语)

    if 状语2!=None:
        状语2.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,状语2)
        NetP('的').con(谓语,状语2)
        状语2.m_name='状语'

    if 主语!=None:
        谓语.m_db[1].con(主语.m_db[1],0)
        NetP('的').con(句子,主语)
        
    if 宾语!=None:
        谓语.m_db[1].con(0,宾语.m_db[1])
        NetP('的').con(句子,宾语)


    code1,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,副词)
        NetP('的').con(谓语,副词)
        return code1,句子

    code1,补语=fun_补语(code)
    if 补语!=None:
        补语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,补语)
        NetP('的').con(谓语,补语)
        return code1,句子
        

    return code,句子


def fun_把字句(code):
    if code=="":
        return code,None
    code_save=code

    code1,状语=fun_介宾短语(code)
    if 状语!=None:
        if code1[0:2]==', ':
            code=code1[2:]
        else:
            状语=None

    code,主语=fun_主语(code)
    code,状语2=fun_状语(code)
    if code[0]!='把' and code[0]!='将':
        return code_save,None
    else:
        code=code[1:]
    code,宾语=fun_宾语(code)
    code,谓语=fun_谓语(code)

    if 谓语==None:
        return code,None
    
    句子=NetP("句子")
    句子.m_db[1]=谓语.m_db[1]
    NetP('的').con(句子,谓语)
    NetP('把').con(谓语,谓语.m_db[1])

    if 状语!=None:
        状语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,状语)
        NetP('的').con(谓语,状语)

    if 状语2!=None:
        状语2.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,状语2)
        NetP('的').con(谓语,状语2)
        状语2.m_name='状语'

    if 主语!=None:
        谓语.m_db[1].con(主语.m_db[1],0)
        NetP('的').con(句子,主语)
        
    if 宾语!=None:
        谓语.m_db[1].con(0,宾语.m_db[1])
        NetP('的').con(句子,宾语)


    code1,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,副词)
        NetP('的').con(谓语,副词)
        return code1,句子

    code1,补语=fun_补语(code)
    if 补语!=None:
        补语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,补语)
        NetP('的').con(谓语,补语)
        return code1,句子
        

    return code,句子



def fun_宾语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,定语=fun_定语(code)
    if 定语!=None:
        
        code,名词=fun_名词(code)
        if 名词!=None:
                
            
            宾语=NetP("宾语")
            宾语.m_db[1]=名词.m_db[1]
            
            Karma(宾语.m_db[1])
            if 定语.m_db[1].m_name in dict_动词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            elif 定语.m_db[1].m_name in dict_副词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            else:
                定语.m_db[1].con(名词.m_db[1],0)
            
            
            NetP('的').con(宾语,定语)
            NetP('的').con(宾语,名词)
            return code,宾语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        
        
        宾语=NetP("宾语")
        宾语.m_db[1]=名词.m_db[1]
        
        Karma(宾语.m_db[1])
        
        NetP('的').con(宾语,名词)
        return code,宾语
    code=code_save
    
    return code,None



def fun_定语(code):
    if code=="":
        return code,None
    code_save=code
    code,短语=fun_短语(code)
    if 短语!=None:
        print(短语,code)
        code,助词=fun_dict(code,{'的'},'助词')
        if 助词!=None:
            定语=NetP("定语")
            定语.m_db[1]=短语.m_db[1]
            
            NetP('的').con(定语,短语)
            NetP('的').con(定语,助词)
            return code,定语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        定语=NetP("定语")
        定语.m_db[1]=形容词.m_db[1]
        NetP('的').con(定语,形容词)

        code,助词=fun_dict(code,{'的'},'助词')
        if 助词!=None:
            NetP('的').con(定语,助词)

        return code,定语
    code=code_save
    
    code,数量词=fun_数量词(code)
    if 数量词!=None:
        定语=NetP("定语")
        定语.m_db[1]=数量词.m_db[1]
        Karma(定语.m_db[1])
        NetP('的').con(定语,数量词)
        return code,定语

    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        code,助词=fun_dict(code,{'的'},'助词')
        if 助词!=None:
            定语=NetP("定语")
            定语.m_db[1]=名词.m_db[1]
            
            Karma(定语.m_db[1])
            
            NetP('的').con(定语,名词)
            NetP('的').con(定语,助词)
            return code,定语
    code=code_save
    
    return code,None



def fun_状语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        
        
        状语=NetP("状语")
        状语.m_db[1]=并列短语.m_db[1]
        NetP('的').con(状语,并列短语)
        return code,状语
    code=code_save
    
    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        
        
        状语=NetP("状语")
        状语.m_db[1]=介宾短语.m_db[1]
        NetP('的').con(状语,介宾短语)
        return code,状语
    code=code_save
    
    code,副词=fun_副词(code)
    if 副词!=None:
        状语=NetP("状语")
        状语.m_db[1]=副词.m_db[1]
        NetP('的').con(状语,副词)
        return code,状语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        状语=NetP("状语")
        状语.m_db[1]=形容词.m_db[1]
        NetP('的').con(状语,形容词)
        return code,状语
    code=code_save
    
    code,代词=fun_代词(code)
    if 代词!=None:
        
        
        状语=NetP("状语")
        状语.m_db[1]=代词.m_db[1]
        NetP('的').con(状语,代词)
        return code,状语
    code=code_save
    
    return code,None



def fun_补语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        补语=NetP("补语")
        补语.m_db[1]=并列短语.m_db[1]
        NetP('的').con(补语,并列短语)
        return code,补语
    code=code_save
    
    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        补语=NetP("补语")
        补语.m_db[1]=介宾短语.m_db[1]
        NetP('的').con(补语,介宾短语)
        return code,补语
    code=code_save
    
    code,述宾短语=fun_述宾短语(code)
    if 述宾短语!=None:
        补语=NetP("补语")
        补语.m_db[1]=述宾短语.m_db[1]
        NetP('的').con(补语,述宾短语)
        return code,补语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        补语=NetP("补语")
        补语.m_db[1]=形容词.m_db[1]
        NetP('的').con(补语,形容词)
        return code,补语
    code=code_save
    
    code,数量词=fun_数量词(code)
    if 数量词!=None:
        补语=NetP("补语")
        补语.m_db[1]=数量词.m_db[1]
        NetP('的').con(补语,数量词)
        return code,补语
    code=code_save
    
    code,代词=fun_代词(code)
    if 代词!=None:
        补语=NetP("补语")
        补语.m_db[1]=代词.m_db[1]
        NetP('的').con(补语,代词)
        return code,补语
    code=code_save
    
    return code,None


def fun_短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        print('并列短语',code)
        return code,并列短语
    code=code_save
    
    code,偏正短语=fun_偏正短语(code)
    if 偏正短语!=None:
        print('偏正短语',code)
        return code,偏正短语
    code=code_save
    
    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        print('介宾短语',code)
        return code,介宾短语
    code=code_save
    
    code,述宾短语=fun_述宾短语(code)
    if 述宾短语!=None:
        return code,述宾短语
    code=code_save
    
    code,述补短语=fun_述补短语(code)
    if 述补短语!=None:
        print('述补短语',code)
        return code,述补短语
    code=code_save
    
    code,主谓短语=fun_主谓短语(code)
    if 主谓短语!=None:
        print('主谓短语',code)
        return code,主谓短语
    code=code_save
    
    return code,None



def fun_并列短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,并列短语=fun_并列短语(code)
            if 并列短语!=None:
                        
                
                并列短语_0=NetP("并列短语")
                连词.m_db[1].con(形容词.m_db[1],并列短语.m_db[1])
                并列短语_0.m_db[1]=形容词.m_db[1]
                
                NetP('的').con(并列短语_0,形容词)
                NetP('的').con(并列短语_0,连词)
                NetP('的').con(并列短语_0,并列短语)
                return code,并列短语_0
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,并列短语=fun_并列短语(code)
            if 并列短语!=None:
                        
                
                并列短语_0=NetP("并列短语")
                连词.m_db[1].con(名词.m_db[1],并列短语.m_db[1])
                并列短语_0.m_db[1]=名词.m_db[1]
                
                NetP('的').con(并列短语_0,名词)
                NetP('的').con(并列短语_0,连词)
                NetP('的').con(并列短语_0,并列短语)
                return code,并列短语_0
    code=code_save
    
    code,名词_0=fun_名词(code)
    if 名词_0!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,名词_1=fun_名词(code)
            if 名词_1!=None:
                        
                
                并列短语=NetP("并列短语")
                连词.m_db[1].con(名词_0.m_db[1],名词_1.m_db[1])
                并列短语.m_db[1]=名词_0.m_db[1]
                
                NetP('的').con(并列短语,名词_0)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,名词_1)
                return code,并列短语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,名词=fun_名词(code)
            if 名词!=None:
                        
                
                并列短语=NetP("并列短语")
                连词.m_db[1].con(形容词.m_db[1],名词.m_db[1])
                并列短语.m_db[1]=形容词.m_db[1]
                
                NetP('的').con(并列短语,形容词)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,名词)
                return code,并列短语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,形容词=fun_形容词(code)
            if 形容词!=None:
                        
                
                并列短语=NetP("并列短语")
                连词.m_db[1].con(名词.m_db[1],形容词.m_db[1])
                并列短语.m_db[1]=名词.m_db[1]
                
                NetP('的').con(并列短语,名词)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,形容词)
                return code,并列短语
    code=code_save
    
    code,形容词_0=fun_形容词(code)
    if 形容词_0!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,形容词_1=fun_形容词(code)
            if 形容词_1!=None:
                        
                
                并列短语=NetP("并列短语")
                连词.m_db[1].con(形容词_0.m_db[1],形容词_1.m_db[1])
                并列短语.m_db[1]=形容词_0.m_db[1]
                
                NetP('的').con(并列短语,形容词)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,形容词)
                return code,并列短语
    code=code_save
    
    return code,None



def fun_偏正短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,名词_0=fun_名词(code)
    if 名词_0!=None:
        
        code,名词_1=fun_名词(code)
        if 名词_1!=None:
                
            
            偏正短语=NetP("偏正短语")
            偏正短语.m_db[1]=名词_1.m_db[1]
            print(名词_0,名词_1)
            pt_de=NetP('的').con(名词_0.m_db[1],名词_1.m_db[1])
            Karma(名词_0.m_db[1])
            Karma(名词_1.m_db[1])
            Karma(pt_de)
            
            NetP('的').con(偏正短语,名词_0)
            NetP('的').con(偏正短语,pt_de)
            NetP('的').con(偏正短语,名词_1)
            return code,偏正短语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,动词=fun_动词(code)
        if 动词!=None:
                
            
            偏正短语=NetP("偏正短语")
            偏正短语.m_db[1]=动词.m_db[1]
            形容词.m_db[1].con(动词.m_db[1],0)
            
            Karma(动词.m_db[1])
            Karma(形容词.m_db[1])
            
            NetP('的').con(偏正短语,形容词)
            NetP('的').con(偏正短语,动词)
            return code,偏正短语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,名词=fun_名词(code)
        if 名词!=None:
                
            
            偏正短语=NetP("偏正短语")
            偏正短语.m_db[1]=名词.m_db[1]
            形容词.m_db[1].con(名词.m_db[1],0)
            
            Karma(形容词.m_db[1])
            Karma(名词.m_db[1])
            
            NetP('的').con(偏正短语,形容词)
            NetP('的').con(偏正短语,名词)
            return code,偏正短语
    code=code_save
    
    return code,None


def fun_述宾短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,动词=fun_动词(code)
    if 动词!=None:
        code,名词=fun_名词(code)
        if 名词!=None:
            述宾短语=NetP("述宾短语")
            述宾短语.m_db[1]=动词.m_db[1]
            动词.m_db[1].con(0,名词.m_db[1])
            
            Karma(动词.m_db[1])
            Karma(名词.m_db[1])
            
            NetP('的').con(述宾短语,动词)
            NetP('的').con(述宾短语,名词)
            return code,述宾短语
    code=code_save
    
    return code,None



def fun_述补短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,动词=fun_动词(code)
    if 动词!=None:
        
        code,形容词=fun_形容词(code)
        if 形容词!=None:
                
            
            述补短语=NetP("述补短语")
            述补短语.m_db[1]=动词.m_db[1]
            形容词.m_db[1].con(动词.m_db[1],0)
            
            Karma(动词.m_db[1])
            Karma(形容词.m_db[1])
            
            NetP('的').con(述补短语,动词)
            NetP('的').con(述补短语,形容词)
            return code,述补短语
    code=code_save
    
    return code,None



def fun_主谓短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,名词=fun_名词(code)
    if 名词==None:
        return code_save, None

    主谓短语=NetP("主谓短语")
    NetP('的').con(主谓短语,名词)
    Karma(名词.m_db[1])

    code,动词=fun_动词(code)
    if 动词!=None:
        动词.m_db[1].con(名词.m_db[1],0)
        主谓短语.m_db[1]=动词.m_db[1]
        Karma(动词.m_db[1])
        NetP('的').con(主谓短语,动词)
    else:
        code,副词=fun_副词(code)
        if 副词!=None:
            副词.m_db[1].con(名词.m_db[1],0)
            主谓短语.m_db[1]=副词.m_db[1]
            Karma(副词.m_db[1])
            NetP('的').con(主谓短语,副词)
        else:
            return code_save,None


    return code,主谓短语



def fun_介宾短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,介词=fun_介词(code)
    code,宾语=fun_名词(code)
    介宾短语=NetP("介宾短语")
    if 宾语!=None and 介词!=None:
        介宾短语.m_db[1]=介词.m_db[1]
        介词.m_db[1].con(0,宾语.m_db[1])
        
        Karma(介词.m_db[1])
        
        NetP('的').con(介宾短语,宾语)
        NetP('的').con(介宾短语,介词)
    else:
        code=code_save
        return code,None

    code,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(介词.m_db[1],0)
        NetP('的').con(介宾短语,副词)
    
    return code,介宾短语



def collectPts(pt,list_pt=None):
    if list_pt==None:
        list_pt=[]
    if pt not in list_pt:
        list_pt.append(pt)
    for con in pt.m_con:
        if con.m_db[0]==pt:
            if con not in list_pt:
                list_pt.append(con)
            if con.m_name=="的" and con.m_db[1]!=None:
                collectPts(con.m_db[1],list_pt)
    if pt.m_db[0]!=None:
        if pt.m_db[0] not in list_pt:
            list_pt.append(pt.m_db[0])
    if pt.m_db[1]!=None:
        if pt.m_db[1] not in list_pt:
            list_pt.append(pt.m_db[1])
    return list_pt

def sentStruct(pt):
    pt0=NetP('^起点').con(0,pt)
    list_pt=[pt0]
    list_pt+=collectPts(pt)
    return tools_basic.writeStdCode([],list_pt)

def sent2Struct(sent):
    code,pt=fun_句子(sent)
    if pt==None:
        return ''
    else:
        return sentStruct(pt),code




## end
#1109, 36887:
/*
+[J函数](,JS版本)
return
Karma
this.m_word_order
group

保存:...
+[新建阅读窗口](,保存)
fun_把字句
名词
*/


class NL_Parser {
    constructor() {
        this.m_word_order=0;

        this.m_dict_名词=['标记区域', '立方体', '波前', '波长', '圆柱体', '区域', '采样点', '截面分布', '参考面', '来源', '标记点', '类', '位置', '参数', 'Z方向', '成像示意图', '场强', '可见光', '函数', '方向', '衍射环', 'IP图像', 'X方向', '三维箭头', '二维函数', '光标', '变量', '平面', '红外线', '相位', '光强', '长度', 'Y坐标', '网格', '像', '多边形', '球体', '透镜组', '能谱', '倍率', '光栅压缩器', '反演', '光束传播图', '坐标', '顺序', '像距', '线段', 'X坐标', '范围', 'Javascript', '物', '光谱', '波包', '相机', '发射角分布', 'FROG', '圆形', '屏幕', 'Y方向', '程序流程图', '长方形'];

        this.m_dict_动词=['有', '玩耍', '替换', '相距', '到达', '离开', '挑衅', '获取', '进入', '复制', '拍摄', '查看', '准备', '添加', '到', '移动', '使用', '奔跑', '引用', '在', '反射', '裁剪', '转换', '吃', '修改', '为', '截取', '计算', '放映', '解析', '调换', '是', '清空', '旋转', '捕捉', '击败', '优化', '更新', '背向', '朝向', '显示', '分析', '跑', '结束', '距离'];
        this.m_dict_形容词=['所有', '什么样', '聪明', '勇敢', '单纯', '善良', '正义', '全部', '美丽', '天真'];

        this.m_dict_副词=['下', '右', '上', '都', '左', '中'];
        this.m_dict_数量词=['只', '号', '辆', '个'];
        this.m_dict_介词=['沿', '在', '绕', '从', '按', '根据'];
        this.m_dict_代词=[];
        this.m_dict_连词=['或者', '或', '和', '并且'];
        this.m_dict_助词=['把', '将', '的', '被'];
        this.m_dict_标点=[',', '\n', '，', '!', '。', '？', '.', '?', '！'];
    }
    
    fun_助词(code) {
        var n=this.word_in_dict(code,this.m_dict_助词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("助词").con(0,pt);
            return code.slice(n,code.length),pt0;
        }
        return [code,''];
    }
    
    fun_连词(code) {
        var n=this.word_in_dict(code,this.m_dict_连词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("连词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_介词(code) {
        var n=this.word_in_dict(code,this.m_dict_介词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("介词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    
    fun_数量词(code) {
        var n_type=0;
        if(code.length>0 & code[0]=='第') {
            n_type=1;
            code=code.slice(1,code.length);
        }
        var result=code.match('\d+|几');
        if(result==null) {
            return [code,''];
        }
        var 数目=new NetP(result.group());
        //code=code[result.span()[1]:];
        var n=this.word_in_dict(code,this.m_dict_数量词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n)).con(数目,0);
            var pt0=new NetP("数量词").con(0,数目);
            new NetP("的").con(pt0,pt);
            if(n_type==1) {
                var pt1=new NetP('第').con(数目,0);
                new NetP("的").con(pt0,pt1);
            }
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_副词(code) {
        var n=this.word_in_dict(code,this.m_dict_副词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("副词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_代词(code) {
        var n=this.word_in_dict(code,this.m_dict_代词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("代词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_形容词(code) {
        var n=this.word_in_dict(code,this.m_dict_形容词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("形容词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_名词(code) {
        if(code.length==0) {
            return ['',''];
        }
        
        var name='',n,head_type='no';
        
        for(var i=0;i<code.length;i++) {
            n=this.word_in_dict(code.slice(i,code.length),this.m_dict_动词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_助词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_连词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_介词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_副词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_标点);
            if(n!=0) {
                if(i!=0) {
                    name=code.slice(0,i);
                    break;
                }
                
                else {
                    return [code,''];
                }
            }
            if(code[i]=='"' | code[i]=='(' | code[i]=='“' | code[i]=='（') {
                head_type=code[i];
                if(i==0) {
                    name="临时文本";
                }
                
                else {
                    name=code.slice(0,i);
                }
                break;
            }
        }
        if(name=='') {
            name=code;
        }
        code=code.slice(i,code.length);
        var text='';
        var result=null;
        if(head_type==='"') {
            result=code.match(/^"[^"]+"/);
        }
        else if(head_type==='“') {
            result=code.match(/^“[^”]+”/);
        }
        else if(head_type==='(') {
            result=code.match(/^\([^)]+\)/);
        }
        else if(head_type==='（') {
            result=code.match(/^（[^）]+）/);
        }

        if(result!==null) {
            result=result[0];
            n=result.length;
            text=result.slice(1,result.length-1);
            code=code.slice(n,code.length);
        }

        var pt=new NetP(name,text);
        var pt0=new NetP("名词").con(0,pt);
        new NetP("的").con(pt0,new NetP("序号",`${this.m_word_order}`));
        this.m_word_order+=1;
        return [code,pt0];
    }
    
    fun_dict(code,dict_words,type_word) {
        var n=this.word_in_dict(code,dict_words);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP(type_word).con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    word_in_dict(code,words) {
        var n=Math.min(20,code.length);
        
        for(var i=0;i<n;i++) {
            if(words.includes(code.slice(0,n-i))) {
                return n-i;
            }
        }
        return 0;
    }
    
    fun_动词(code) {
        var n=this.word_in_dict(code,this.m_dict_动词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("动词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }


    fun_谓语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 状语,动词,谓语,被;

        var sent_type=0;
        [code,状语]=this.fun_状语(code);
        if(code.length>0 & code[0]=='被') {
            [code,动词]=this.fun_动词(code.slice(1,code.length));
            sent_type=1;
        }
        
        else {
            [code,动词]=this.fun_动词(code);
        }
        if(动词=='') {
            状语='';
            [code,动词]=this.fun_动词(code_save);
        }
        if(动词=='') {
            return [code,''];
        }
        谓语=new NetP("谓语");
        谓语.m_db[1]=动词.m_db[1];
        new NetP('的').con(谓语,动词);
        if(sent_type==1) {
            被=new NetP('被').con('',动词);
            new NetP('的').con(谓语,被);
        }
        if(状语!='') {
            new NetP('的').con(谓语,状语);
            状语.m_db[1].con(动词.m_db[1],0);
        }
        return [code,谓语];
    }

/*
fun_把字句
*/

    fun_主语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 定语,名词,主语;

        [code,定语]=this.fun_定语(code);

        if(定语!='') {
            [code,名词]=this.fun_名词(code);
            if(名词!='') {
                主语=new NetP("主语");
                主语.m_db[1]=名词.m_db[1];

                if(this.m_dict_动词.includes(定语.m_db[1].m_name)) {
                    if(定语.m_db[1].m_db[0]!='') {
                        定语.m_db[1].con(0,名词.m_db[1]);
                    }
                    
                    else {
                        定语.m_db[1].con(名词.m_db[1],0);
                    }
                }
                
                else if(this.m_dict_副词.includes(定语.m_db[1].m_name)) {
                    if(定语.m_db[1].m_db[0]!='') {
                        定语.m_db[1].con(0,名词.m_db[1]);
                    }
                    
                    else {
                        定语.m_db[1].con(名词.m_db[1],0);
                    }
                }
                
                else {
                    定语.m_db[1].con(名词.m_db[1],0);
                }
                new NetP('的').con(主语,定语);
                new NetP('的').con(主语,名词);

                return [code,主语];
            }
        }

        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            主语=new NetP("主语");
            主语.m_db[1]=名词.m_db[1];

            new NetP('的').con(主语,名词);
            return [code,主语];
        }
        code=code_save;
        return [code,''];
    }

/*
+[新建阅读窗口](,保存)
*/

    sent_pat(code,pat0) {
        var pat=pat0.replace(/%\[句子[^\[^\]]*\]/,'(.+)');
        var result=code.match(pat);
        if(result==null) {
            return false;
        }
        
        else {
            return true;
        }
    }
    
    fun_复句(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;

        if(this.sent_pat(code,"因为%[句子], 所以%[句子]")) {
            [code,复句]=this.fun_因果复句(code);
            return [code,复句];
        }
        
        else if(this.sent_pat(code,"当%[句子], %[句子]")) {
            [code,复句]=this.fun_状语复句(code);
            return [code,复句];
        }
        
        else if(this.sent_pat(code,"%[句子], 然后, %[句子]")) {
            [code,复句]=this.fun_然后复句(code);
            return [code,复句];
        }
        return [code,''];
    }
    
    fun_因果复句(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        if(code.slice(0,2)=='因为') {
            [code,句子1]=this.fun_句子(code.slice(2,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(code.slice(0,4)==', 所以') {
            [code,句子2]=this.fun_句子(code.slice(4,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(句子1=='' | 句子2=='') {
            return [code_save,''];
        }
        因果句=new NetP('因果复句');
        因为=new NetP('因为').con(因果句,句子1);
        所以=new NetP('所以').con(因果句,句子2);
        new NetP('的').con(因果句,句子1);
        new NetP('的').con(因果句,句子2);
        return [code,因果句];
    }
    
    fun_状语复句(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        if(code[0]=='当') {
            [code,句子1]=this.fun_句子(code.slice(1,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(code.slice(0,2)==', ') {
            [code,句子2]=this.fun_句子(code.slice(2,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(句子1=='' | 句子2=='') {
            return [code_save,''];
        }
        复句=new NetP('状语复句');
        条件=new NetP('条件').con(复句,句子1);
        结果=new NetP('结果').con(复句,句子2);
        new NetP('的').con(复句,句子1);
        new NetP('的').con(复句,句子2);
        return [code,复句];
    }
    
    fun_然后复句(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        [code,句子1]=this.fun_单句(code);
        if(code.slice(0,6)==', 然后, ') {
            [code,句子2]=this.fun_单句(code.slice(6,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(句子1=='' | 句子2=='') {
            return [code_save,''];
        }
        复句=new NetP('然后复句');
        之前=new NetP('之前').con(复句,句子1);
        之后=new NetP('之后').con(复句,句子2);
        new NetP('的').con(复句,句子1);
        new NetP('的').con(复句,句子2);
        return [code,复句];
    }
    
    fun_句子(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
var 句子;
        
        this.m_word_order=0;
        [code,句子]=this.fun_复句(code);
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_被动句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_把字句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_普通句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        return [code,句子];
    }
    
    fun_单句(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code, 句子;
        
        this.m_word_order=0;
        
        try {
            [code,句子]=this.fun_被动句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_把字句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_普通句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        return [code,句子];
    }

/*
fun_句子
+[新建阅读窗口](,保存)
*/
    
    fun_普通句(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 介宾短语,主语,谓语,句子,宾语,副词,补语;
        var code1;

        [code1,介宾短语]=this.fun_介宾短语(code);
        if(介宾短语!='') {
            if(code1.slice(0,2)==', ') {
                code=code1.slice(2,code1.length);
            }
            
            else {
                介宾短语='';
            }
        }
        [code1,主语]=this.fun_主语(code);
        [code1,谓语]=this.fun_谓语(code1);
        if(谓语!='') {
            code=code1;
        }
        
        else {
            主语='';
            [code,谓语]=this.fun_谓语(code);
        }
        [code,宾语]=this.fun_宾语(code);
        if(谓语=='') {
            return [code,''];
        }
        句子=new NetP("句子");
        句子.m_db[1]=谓语.m_db[1];
        new NetP('的').con(句子,谓语);
        if(介宾短语!='') {
            介宾短语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,介宾短语);
            new NetP('的').con(谓语,介宾短语);
        }
        if(主语!='') {
            谓语.m_db[1].con(主语.m_db[1],0);
            new NetP('的').con(句子,主语);
        }
        if(宾语!='') {
            谓语.m_db[1].con(0,宾语.m_db[1]);
            new NetP('的').con(句子,宾语);
        }
        [code1,副词]=this.fun_副词(code);
        if(副词!='') {
            副词.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,副词);
            new NetP('的').con(谓语,副词);
            return [code1,句子];
        }
        [code1,补语]=this.fun_补语(code);
        if(补语!='') {
            补语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,补语);
            new NetP('的').con(谓语,补语);
            return [code1,句子];
        }
        return [code,句子];
    }
    
    fun_被动句(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var code1,状语,状语2,宾语,主语,谓语,副词,补语,句子;

        [code1,状语]=this.fun_介宾短语(code);
        if(状语!='') {
            if(code1.slice(0,2)==', ') {
                code=code1.slice(2,code1.length);
            }
            
            else {
                状语='';
            }
        }
        [code,宾语]=this.fun_宾语(code);
        [code,状语2]=this.fun_状语(code);
        if(code[0]!='被') {
            return [code_save,''];
        }
        
        else {
            code=code.slice(1,code.length);
        }
        [code,主语]=this.fun_主语(code);
        [code,谓语]=this.fun_谓语(code);
        if(谓语=='') {
            return [code,''];
        }
        句子=new NetP("句子");
        句子.m_db[1]=谓语.m_db[1];
        new NetP('的').con(句子,谓语);
        new NetP('被').con(谓语,谓语.m_db[1]);
        if(状语!='') {
            状语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,状语);
            new NetP('的').con(谓语,状语);
        }
        if(状语2!='') {
            状语2.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,状语2);
            new NetP('的').con(谓语,状语2);
            状语2.m_name='状语';
        }
        if(主语!='') {
            谓语.m_db[1].con(主语.m_db[1],0);
            new NetP('的').con(句子,主语);
        }
        if(宾语!='') {
            谓语.m_db[1].con(0,宾语.m_db[1]);
            new NetP('的').con(句子,宾语);
        }
        [code1,副词]=this.fun_副词(code);
        if(副词!='') {
            副词.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,副词);
            new NetP('的').con(谓语,副词);
            return [code1,句子];
        }
        [code1,补语]=this.fun_补语(code);
        if(补语!='') {
            补语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,补语);
            new NetP('的').con(谓语,补语);
            return [code1,句子];
        }
        return [code,句子];
    }

/*
被动句
*/
    
    fun_把字句(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 状语,状语2,主语,宾语,谓语,句子,副词,补语;
        var code1;

        [code1,状语]=this.fun_介宾短语(code);
        if(状语!='') {
            if(code1.slice(0,2)==', ') {
                code=code1.slice(2,code1.length);
            }
            
            else {
                状语='';
            }
        }

        [code,主语]=this.fun_主语(code);
        [code,状语2]=this.fun_状语(code);
        if(code[0]!='把' & code[0]!='将') {
            return [code_save,''];
        }
        
        else {
            code=code.slice(1,code.length);
        }


        [code,宾语]=this.fun_宾语(code);
        [code,谓语]=this.fun_谓语(code);
        if(谓语=='') {
            return [code,''];
        }
        句子=new NetP("句子");
        句子.m_db[1]=谓语.m_db[1];
        new NetP('的').con(句子,谓语);
        new NetP('把').con(谓语,谓语.m_db[1]);
        if(状语!='') {
            状语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,状语);
            new NetP('的').con(谓语,状语);
        }
        if(状语2!='') {
            状语2.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,状语2);
            new NetP('的').con(谓语,状语2);
            状语2.m_name='状语';
        }
        if(主语!='') {
            谓语.m_db[1].con(主语.m_db[1],0);
            new NetP('的').con(句子,主语);
        }
        if(宾语!='') {
            谓语.m_db[1].con(0,宾语.m_db[1]);
            new NetP('的').con(句子,宾语);
        }
        [code1,副词]=this.fun_副词(code);
        if(副词!='') {
            副词.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,副词);
            new NetP('的').con(谓语,副词);
            return [code1,句子];
        }
        [code1,补语]=this.fun_补语(code);
        if(补语!='') {
            补语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,补语);
            new NetP('的').con(谓语,补语);
            return [code1,句子];
        }
        return [code,句子];
    }

/*
fun_偏正短语
*/

    fun_宾语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 定语,名词,宾语;

        [code,定语]=this.fun_定语(code);
        if(定语!='') {
            [code,名词]=this.fun_名词(code);
            if(名词!='') {
                宾语=new NetP("宾语");
                宾语.m_db[1]=名词.m_db[1];

                if(this.m_dict_动词.includes(定语.m_db[1].m_name)) {
                    if(定语.m_db[1].m_db[0]!='') {
                        定语.m_db[1].con(0,名词.m_db[1]);
                    }
                    
                    else {
                        定语.m_db[1].con(名词.m_db[1],0);
                    }
                }
                
                else if(this.m_dict_副词.includes(定语.m_db[1].m_name)) {
                    if(定语.m_db[1].m_db[0]!='') {
                        定语.m_db[1].con(0,名词.m_db[1]);
                    }
                    
                    else {
                        定语.m_db[1].con(名词.m_db[1],0);
                    }
                }
                
                else {
                    定语.m_db[1].con(名词.m_db[1],0);
                }
                new NetP('的').con(宾语,定语);
                new NetP('的').con(宾语,名词);
                return [code,宾语];
            }
        }
        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            宾语=new NetP("宾语");
            宾语.m_db[1]=名词.m_db[1];

            new NetP('的').con(宾语,名词);
            return [code,宾语];
        }
        code=code_save;
        return [code,''];
    }

/*
printPtList
*/

    fun_定语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 短语,助词,定语,形容词,数量词,名词;

        [code,短语]=this.fun_短语(code);
        if(短语!='') {
            //print(短语,code);
            [code,助词]=this.fun_dict(code,['的'],'助词');
            if(助词!='') {
                定语=new NetP("定语");
                定语.m_db[1]=短语.m_db[1];
                new NetP('的').con(定语,短语);
                new NetP('的').con(定语,助词);
                return [code,定语];
            }
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            定语=new NetP("定语");
            定语.m_db[1]=形容词.m_db[1];
            new NetP('的').con(定语,形容词);
            [code,助词]=this.fun_dict(code,['的'],'助词');
            if(助词!='') {
                new NetP('的').con(定语,助词);
            }
            return [code,定语];
        }
        code=code_save;
        [code,数量词]=this.fun_数量词(code);
        if(数量词!='') {
            定语=new NetP("定语");
            定语.m_db[1]=数量词.m_db[1];
            //new Karma(定语.m_db[1]);
            new NetP('的').con(定语,数量词);
            return [code,定语];
        }
        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            [code,助词]=this.fun_dict(code,['的'],'助词');
            if(助词!='') {
                定语=new NetP("定语");
                定语.m_db[1]=名词.m_db[1];
                //new Karma(定语.m_db[1]);
                new NetP('的').con(定语,名词);
                new NetP('的').con(定语,助词);
                return [code,定语];
            }
        }
        code=code_save;
        return [code,''];
    }

/*
fun_把字句
*/

    fun_状语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 并列短语,状语,介宾短语,副词,形容词,代词;

        [code,并列短语]=this.fun_并列短语(code);
        if(并列短语!='') {
            状语=new NetP("状语");
            状语.m_db[1]=并列短语.m_db[1];
            new NetP('的').con(状语,并列短语);
            return [code,状语];
        }
        code=code_save;
        [code,介宾短语]=this.fun_介宾短语(code);
        if(介宾短语!='') {
            状语=new NetP("状语");
            状语.m_db[1]=介宾短语.m_db[1];
            new NetP('的').con(状语,介宾短语);
            return [code,状语];
        }
        code=code_save;
        [code,副词]=this.fun_副词(code);
        if(副词!='') {
            状语=new NetP("状语");
            状语.m_db[1]=副词.m_db[1];
            new NetP('的').con(状语,副词);
            return [code,状语];
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            状语=new NetP("状语");
            状语.m_db[1]=形容词.m_db[1];
            new NetP('的').con(状语,形容词);
            return [code,状语];
        }
        code=code_save;
        [code,代词]=this.fun_代词(code);
        if(代词!='') {
            状语=new NetP("状语");
            状语.m_db[1]=代词.m_db[1];
            new NetP('的').con(状语,代词);
            return [code,状语];
        }
        code=code_save;
        return [code,''];
    }
/*
print
*/

    fun_补语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 并列短语,补语,介宾短语,述宾短语,形容词,数量词,代词;

        [code,并列短语]=this.fun_并列短语(code);
        if(并列短语!='') {
            补语=new NetP("补语");
            补语.m_db[1]=并列短语.m_db[1];
            new NetP('的').con(补语,并列短语);
            return [code,补语];
        }
        code=code_save;
        [code,介宾短语]=this.fun_介宾短语(code);
        if(介宾短语!='') {
            补语=new NetP("补语");
            补语.m_db[1]=介宾短语.m_db[1];
            new NetP('的').con(补语,介宾短语);
            return [code,补语];
        }
        code=code_save;
        [code,述宾短语]=this.fun_述宾短语(code);
        if(述宾短语!='') {
            补语=new NetP("补语");
            补语.m_db[1]=述宾短语.m_db[1];
            new NetP('的').con(补语,述宾短语);
            return [code,补语];
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            补语=new NetP("补语");
            补语.m_db[1]=形容词.m_db[1];
            new NetP('的').con(补语,形容词);
            return [code,补语];
        }
        code=code_save;
        [code,数量词]=this.fun_数量词(code);
        if(数量词!='') {
            补语=new NetP("补语");
            补语.m_db[1]=数量词.m_db[1];
            new NetP('的').con(补语,数量词);
            return [code,补语];
        }
        code=code_save;
        [code,代词]=this.fun_代词(code);
        if(代词!='') {
            补语=new NetP("补语");
            补语.m_db[1]=代词.m_db[1];
            new NetP('的').con(补语,代词);
            return [code,补语];
        }
        code=code_save;
        return [code,''];
    }

/*
fun_主语
print
*/
    
    fun_短语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 并列短语,偏正短语,介宾短语,述宾短语,述补短语,主谓短语;

        [code,并列短语]=this.fun_并列短语(code);
        if(并列短语!='') {
            //print('并列短语',code);
            return [code,并列短语];
        }
        code=code_save;
        [code,偏正短语]=this.fun_偏正短语(code);
        if(偏正短语!='') {
            //print('偏正短语',code);
            return [code,偏正短语];
        }
        code=code_save;
        [code,介宾短语]=this.fun_介宾短语(code);
        if(介宾短语!='') {
            //print('介宾短语',code);
            return [code,介宾短语];
        }
        code=code_save;
        [code,述宾短语]=this.fun_述宾短语(code);
        if(述宾短语!='') {
            return [code,述宾短语];
        }
        code=code_save;
        [code,述补短语]=this.fun_述补短语(code);
        if(述补短语!='') {
            //print('述补短语',code);
            return [code,述补短语];
        }
        code=code_save;
        [code,主谓短语]=this.fun_主谓短语(code);
        if(主谓短语!='') {
            //print('主谓短语',code);
            return [code,主谓短语];
        }
        code=code_save;
        return [code,''];
    }
    
    fun_并列短语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 形容词,形容词_0,形容词_1,连词,并列短语,并列短语_0,名词,名词_0,名词_1;

        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,并列短语]=this.fun_并列短语(code);
                if(并列短语!='') {
                    并列短语_0=new NetP("并列短语");
                    连词.m_db[1].con(形容词.m_db[1],并列短语.m_db[1]);
                    并列短语_0.m_db[1]=形容词.m_db[1];
                    new NetP('的').con(并列短语_0,形容词);
                    new NetP('的').con(并列短语_0,连词);
                    new NetP('的').con(并列短语_0,并列短语);
                    return [code,并列短语_0];
                }
            }
        }
        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,并列短语]=this.fun_并列短语(code);
                if(并列短语!='') {
                    并列短语_0=new NetP("并列短语");
                    连词.m_db[1].con(名词.m_db[1],并列短语.m_db[1]);
                    并列短语_0.m_db[1]=名词.m_db[1];
                    new NetP('的').con(并列短语_0,名词);
                    new NetP('的').con(并列短语_0,连词);
                    new NetP('的').con(并列短语_0,并列短语);
                    return [code,并列短语_0];
                }
            }
        }
        code=code_save;
        [code,名词_0]=this.fun_名词(code);
        if(名词_0!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,名词_1]=this.fun_名词(code);
                if(名词_1!='') {
                    并列短语=new NetP("并列短语");
                    连词.m_db[1].con(名词_0.m_db[1],名词_1.m_db[1]);
                    并列短语.m_db[1]=名词_0.m_db[1];
                    new NetP('的').con(并列短语,名词_0);
                    new NetP('的').con(并列短语,连词);
                    new NetP('的').con(并列短语,名词_1);
                    return [code,并列短语];
                }
            }
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,名词]=this.fun_名词(code);
                if(名词!='') {
                    并列短语=new NetP("并列短语");
                    连词.m_db[1].con(形容词.m_db[1],名词.m_db[1]);
                    并列短语.m_db[1]=形容词.m_db[1];
                    new NetP('的').con(并列短语,形容词);
                    new NetP('的').con(并列短语,连词);
                    new NetP('的').con(并列短语,名词);
                    return [code,并列短语];
                }
            }
        }
        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,形容词]=this.fun_形容词(code);
                if(形容词!='') {
                    并列短语=new NetP("并列短语");
                    连词.m_db[1].con(名词.m_db[1],形容词.m_db[1]);
                    并列短语.m_db[1]=名词.m_db[1];
                    new NetP('的').con(并列短语,名词);
                    new NetP('的').con(并列短语,连词);
                    new NetP('的').con(并列短语,形容词);
                    return [code,并列短语];
                }
            }
        }
        code=code_save;
        [code,形容词_0]=this.fun_形容词(code);
        if(形容词_0!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,形容词_1]=this.fun_形容词(code);
                if(形容词_1!='') {
                    并列短语=new NetP("并列短语");
                    连词.m_db[1].con(形容词_0.m_db[1],形容词_1.m_db[1]);
                    并列短语.m_db[1]=形容词_0.m_db[1];
                    new NetP('的').con(并列短语,形容词);
                    new NetP('的').con(并列短语,连词);
                    new NetP('的').con(并列短语,形容词);
                    return [code,并列短语];
                }
            }
        }
        code=code_save;
        return [code,''];
    }

/*
fun_定语
*/
    
    fun_偏正短语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 名词_0,名词_1,偏正短语,形容词,动词,pt_de;

        [code,名词_0]=this.fun_名词(code);
        if(名词_0!='') {
            [code,名词_1]=this.fun_名词(code);
            if(名词_1!='') {
                偏正短语=new NetP("偏正短语");
                偏正短语.m_db[1]=名词_1.m_db[1];

                pt_de=new NetP('的').con(名词_0.m_db[1],名词_1.m_db[1]);

                new NetP('的').con(偏正短语,名词_0);
                new NetP('的').con(偏正短语,pt_de);
                new NetP('的').con(偏正短语,名词_1);
                return [code,偏正短语];
            }
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            [code,动词]=this.fun_动词(code);
            if(动词!='') {
                偏正短语=new NetP("偏正短语");
                偏正短语.m_db[1]=动词.m_db[1];
                形容词.m_db[1].con(动词.m_db[1],0);
                //new Karma(动词.m_db[1]);
                //new Karma(形容词.m_db[1]);
                new NetP('的').con(偏正短语,形容词);
                new NetP('的').con(偏正短语,动词);
                return [code,偏正短语];
            }
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            [code,名词]=this.fun_名词(code);
            if(名词!='') {
                偏正短语=new NetP("偏正短语");
                偏正短语.m_db[1]=名词.m_db[1];
                形容词.m_db[1].con(名词.m_db[1],0);
                //new Karma(形容词.m_db[1]);
                //new Karma(名词.m_db[1]);
                new NetP('的').con(偏正短语,形容词);
                new NetP('的').con(偏正短语,名词);
                return [code,偏正短语];
            }
        }
        code=code_save;
        return [code,''];
    }
    
    fun_述宾短语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 动词,名词,述宾短语;

        [code,动词]=this.fun_动词(code);
        if(动词!='') {
            [code,名词]=this.fun_名词(code);
            if(名词!='') {
                述宾短语=new NetP("述宾短语");
                述宾短语.m_db[1]=动词.m_db[1];
                动词.m_db[1].con(0,名词.m_db[1]);

                new NetP('的').con(述宾短语,动词);
                new NetP('的').con(述宾短语,名词);
                return [code,述宾短语];
            }
        }
        code=code_save;
        return [code,''];
    }
    
    fun_述补短语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 动词,形容词,述补短语;

        [code,动词]=this.fun_动词(code);
        if(动词!='') {
            [code,形容词]=this.fun_形容词(code);
            if(形容词!='') {
                述补短语=new NetP("述补短语");
                述补短语.m_db[1]=动词.m_db[1];
                形容词.m_db[1].con(动词.m_db[1],0);
                //new Karma(动词.m_db[1]);
                //new Karma(形容词.m_db[1]);
                new NetP('的').con(述补短语,动词);
                new NetP('的').con(述补短语,形容词);
                return [code,述补短语];
            }
        }
        code=code_save;
        return [code,''];
    }
    
    fun_主谓短语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 名词,主谓短语,动词,副词;

        [code,名词]=this.fun_名词(code);
        if(名词=='') {
            return [code_save,''];
        }
        主谓短语=new NetP("主谓短语");
        new NetP('的').con(主谓短语,名词);

        [code,动词]=this.fun_动词(code);
        if(动词!='') {
            动词.m_db[1].con(名词.m_db[1],0);
            主谓短语.m_db[1]=动词.m_db[1];

            new NetP('的').con(主谓短语,动词);
        }
        
        else {
            [code,副词]=this.fun_副词(code);
            if(副词!='') {
                副词.m_db[1].con(名词.m_db[1],0);
                主谓短语.m_db[1]=副词.m_db[1];

                new NetP('的').con(主谓短语,副词);
            }
            
            else {
                return [code_save,''];
            }
        }
        return [code,主谓短语];
    }
    
    fun_介宾短语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var 介词,宾语,介宾短语,副词;

        [code,介词]=this.fun_介词(code);
        [code,宾语]=this.fun_名词(code);
        介宾短语=new NetP("介宾短语");
        if(宾语!='' & 介词!='') {
            介宾短语.m_db[1]=介词.m_db[1];
            介词.m_db[1].con(0,宾语.m_db[1]);
            //new Karma(介词.m_db[1]);
            new NetP('的').con(介宾短语,宾语);
            new NetP('的').con(介宾短语,介词);
        }
        
        else {
            code=code_save;
            return [code,''];
        }
        [code,副词]=this.fun_副词(code);
        if(副词!='') {
            副词.m_db[1].con(介词.m_db[1],0);
            new NetP('的').con(介宾短语,副词);
        }
        return [code,介宾短语];
    }

/*
并列短语
*/

    collectPts(pt,list_pt='') {
        if(list_pt=='') {
            list_pt=[];
        }
        if(!list_pt.includes(pt)) {
            list_pt.push(pt);
        }
        
        for(var i=0;i<pt.m_con.length;i++) {
            var con=pt.m_con[i];
            if(con.m_db[0]==pt) {
                if(!list_pt.includes(con)) {
                    list_pt.push(con);
                }
                if(con.m_name=="的" & con.m_db[1]!='') {
                    this.collectPts(con.m_db[1],list_pt);
                }
            }
        }
        if(pt.m_db[0]!='') {
            if(!list_pt.includes(pt.m_db[0])) {
                list_pt.push(pt.m_db[0]);
            }
        }
        if(pt.m_db[1]!='') {
            if(!list_pt.includes(pt.m_db[1])) {
                list_pt.push(pt.m_db[1]);
            }
        }
        return list_pt;
    }

    sentStruct(pt) {
        var pt0=new NetP('^起点').con(0,pt);
        var list_pt0,list_pt;
        list_pt0=this.collectPts(pt);
        list_pt=[pt0,...list_pt0];
        return list_pt;
    }
    
    sent2Struct(sent) {
        var code,pt,list_pt;
        [code,pt]=this.fun_句子(sent);
        if(pt=='') {
            return [[],code];
        }
        else {
            list_pt=this.sentStruct(pt);
            return [list_pt,code];
        }
    }

}


function info_PtList(list_pt) {
    var info_pt='';
    for(var i=0;i<list_pt.length;i++) {
        var pt=list_pt[i];
        info_pt+=pt.info()+','
    }

    return `[${info_pt}]`;
}

function printPtList(list_pt) {
    print(info_PtList(list_pt));
}

var NLP=new NL_Parser();


/*
fun_单句
测试(J函数):...
+[新建阅读窗口](,测试)
*/
## end
#1111, 869:
"""
JS版本:...



def collectPts(pt,list_pt=None):
    if list_pt==None:
        list_pt=[]
    if pt not in list_pt:
        list_pt.append(pt)
    for con in pt.m_con:
        if con.m_db[0]==pt:
            if con not in list_pt:
                list_pt.append(con)
            if con.m_name=="的" and con.m_db[1]!=None:
                collectPts(con.m_db[1],list_pt)
    if pt.m_db[0]!=None:
        if pt.m_db[0] not in list_pt:
            list_pt.append(pt.m_db[0])
    if pt.m_db[1]!=None:
        if pt.m_db[1] not in list_pt:
            list_pt.append(pt.m_db[1])
    return list_pt

def sentStruct(pt):
    pt0=NetP('^起点').con(0,pt)
    list_pt=[pt0]
    list_pt+=collectPts(pt)
    return tools_basic.writeStdCode([],list_pt)

def sent2Struct(sent):
    code,pt=fun_句子(sent)
    if pt==None:
        return ''
    else:
        return sentStruct(pt),code




## end
#1112, 4:
1491
## end
#1114, 38:
2.3000000000000003, 3.5000000000000004
## end
#1115, 38:
2.3000000000000003, 3.5000000000000004
## end
#1116, 38:
2.3000000000000003, 3.5000000000000004
## end
#1117, 9:
4.3, 11.0
## end
#1118, 9:
4.3, 11.0
## end
#1119, 9:
4.3, 11.0
## end
#1120, 9:
4.3, 11.0
## end
#1121, 9:
4.3, 11.0
## end
#1122, 9:
4.3, 11.0
## end
#1123, 9:
4.3, 11.0
## end
#1124, 9:
4.3, 11.0
## end
#1125, 9:
4.3, 11.0
## end
#1126, 9:
4.3, 11.0
## end
#1127, 9:
4.3, 11.0
## end
#1128, 9:
4.3, 11.0
## end
#1130, 3:
2,1
## end
#1132, 17:
return code,None

## end
#1133, 23:
2.1, 1.1500000000000001
## end
#1137, 2:
if
## end
#1138, 38:
2.3000000000000003, 1.1500000000000001
## end
#1140, 3:
2,1
## end
#1142, 41:
code_save=code
code1,介宾短语=fun_介宾短语(code)

## end
#1144, 3:
2,1
## end
#1146, 15:
code=code1[2:]

## end
#1147, 23:
2.1, 1.1500000000000001
## end
#1150, 3:
2,1
## end
#1152, 10:
介宾短语=None

## end
#1153, 23:
2.1, 1.1500000000000001
## end
#1157, 2:
if
## end
#1158, 23:
4.4, 1.1500000000000001
## end
#1159, 23:
4.4, 1.3000000000000003
## end
#1163, 2:
if
## end
#1164, 38:
4.6000000000000005, 1.3000000000000003
## end
#1166, 3:
2,1
## end
#1168, 45:
code1,主语=fun_主语(code)
code1,谓语=fun_谓语(code1)

## end
#1170, 3:
2,1
## end
#1172, 11:
code=code1

## end
#1173, 23:
2.1, 1.1500000000000001
## end
#1176, 3:
2,1
## end
#1178, 29:
主语=None
code,谓语=fun_谓语(code)

## end
#1179, 23:
2.1, 1.1500000000000001
## end
#1183, 2:
if
## end
#1184, 23:
4.4, 1.1500000000000001
## end
#1186, 3:
2,1
## end
#1188, 21:
code,宾语=fun_宾语(code)

## end
#1190, 3:
2,1
## end
#1192, 17:
return code,None

## end
#1193, 23:
2.1, 1.1500000000000001
## end
#1197, 2:
if
## end
#1198, 38:
2.3000000000000003, 1.1500000000000001
## end
#1200, 3:
2,1
## end
#1202, 57:
句子=NetP("句子")
句子.m_db[1]=谓语.m_db[1]
NetP('的').con(句子,谓语)

## end
#1204, 3:
2,1
## end
#1206, 77:
介宾短语.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,介宾短语)
NetP('的').con(谓语,介宾短语)

## end
#1207, 23:
2.1, 1.1500000000000001
## end
#1211, 2:
if
## end
#1212, 38:
2.3000000000000003, 1.1500000000000001
## end
#1214, 3:
2,1
## end
#1216, 50:
谓语.m_db[1].con(主语.m_db[1],0)
NetP('的').con(句子,主语)

## end
#1217, 23:
2.1, 1.1500000000000001
## end
#1221, 2:
if
## end
#1222, 38:
2.3000000000000003, 1.1500000000000001
## end
#1224, 3:
2,1
## end
#1226, 50:
谓语.m_db[1].con(0,宾语.m_db[1])
NetP('的').con(句子,宾语)

## end
#1227, 23:
2.1, 1.1500000000000001
## end
#1231, 2:
if
## end
#1232, 38:
2.3000000000000003, 1.1500000000000001
## end
#1234, 3:
2,1
## end
#1236, 22:
code1,副词=fun_副词(code)

## end
#1238, 3:
2,1
## end
#1240, 87:
副词.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,副词)
NetP('的').con(谓语,副词)
return code1,句子

## end
#1241, 23:
2.1, 1.1500000000000001
## end
#1245, 2:
if
## end
#1246, 38:
2.3000000000000003, 1.1500000000000001
## end
#1248, 3:
2,1
## end
#1250, 22:
code1,补语=fun_补语(code)

## end
#1252, 3:
2,1
## end
#1254, 87:
补语.m_db[1].con(谓语.m_db[1],0)
NetP('的').con(句子,补语)
NetP('的').con(谓语,补语)
return code1,句子

## end
#1255, 23:
2.1, 1.1500000000000001
## end
#1259, 2:
if
## end
#1260, 38:
2.3000000000000003, 1.1500000000000001
## end
#1262, 3:
2,1
## end
#1264, 15:
return code,句子

## end
#1265, 38:
4.6000000000000005, 19.150000000000002
## end
#1269, 9:
0.0, -1.1
## end
#1274, 4:
0, 0
## end
#1277, 25:
0.1, 0.050000000000000044
## end
#1279, 38:
4.6000000000000005, 19.150000000000002
## end
#1282, 24:
0.0, -2.5000000000000004
## end
#1284, 38:
4.6000000000000005, 19.150000000000002
## end
#1287, 24:
0.0, -3.6000000000000005
## end
#1289, 38:
4.6000000000000005, 19.150000000000002
## end
#1292, 10:
0.1, -2.45
## end
#1294, 38:
4.6000000000000005, 19.150000000000002
## end
#1297, 39:
2.3000000000000003, -2.4000000000000004
## end
#1301, 24:
0.2, -2.4000000000000004
## end
#1303, 38:
4.6000000000000005, 19.150000000000002
## end
#1304, 38:
4.6000000000000005, 19.150000000000002
## end
#1307, 24:
0.0, -4.8500000000000005
## end
#1309, 38:
4.6000000000000005, 19.150000000000002
## end
#1312, 10:
0.0, -5.95
## end
#1314, 38:
4.6000000000000005, 19.150000000000002
## end
#1317, 24:
2.1999999999999997, -4.8
## end
#1321, 9:
0.1, -4.8
## end
#1323, 38:
4.6000000000000005, 19.150000000000002
## end
#1324, 38:
4.6000000000000005, 19.150000000000002
## end
#1327, 9:
0.0, -7.2
## end
#1329, 38:
4.6000000000000005, 19.150000000000002
## end
#1332, 23:
0.0, -8.299999999999999
## end
#1334, 38:
4.6000000000000005, 19.150000000000002
## end
#1337, 24:
0.1, -7.1499999999999995
## end
#1339, 38:
4.6000000000000005, 19.150000000000002
## end
#1342, 23:
0.0, -9.549999999999999
## end
#1344, 38:
4.6000000000000005, 19.150000000000002
## end
#1347, 24:
0.0, -10.799999999999999
## end
#1349, 38:
4.6000000000000005, 19.150000000000002
## end
#1352, 23:
0.1, -9.499999999999998
## end
#1354, 38:
4.6000000000000005, 19.150000000000002
## end
#1357, 24:
0.0, -12.049999999999999
## end
#1359, 38:
4.6000000000000005, 19.150000000000002
## end
#1362, 24:
0.1, -10.749999999999998
## end
#1364, 38:
4.6000000000000005, 19.150000000000002
## end
#1367, 24:
0.0, -13.149999999999999
## end
#1369, 38:
4.6000000000000005, 19.150000000000002
## end
#1372, 24:
0.1, -11.999999999999998
## end
#1374, 38:
4.6000000000000005, 19.150000000000002
## end
#1377, 24:
0.0, -14.399999999999999
## end
#1379, 38:
4.6000000000000005, 19.150000000000002
## end
#1382, 24:
0.0, -15.499999999999998
## end
#1384, 38:
4.6000000000000005, 19.150000000000002
## end
#1387, 24:
0.1, -14.349999999999998
## end
#1389, 38:
4.6000000000000005, 19.150000000000002
## end
#1392, 11:
0.0, -16.75
## end
#1394, 38:
4.6000000000000005, 19.150000000000002
## end
#1397, 11:
0.0, -17.85
## end
#1399, 38:
4.6000000000000005, 19.150000000000002
## end
#1402, 24:
0.1, -16.700000000000003
## end
#1404, 38:
4.6000000000000005, 19.150000000000002
## end
#1405, 38:
4.6000000000000005, 19.150000000000002
## end
#1408, 353:
/*
+[J函数](,测试)
Nini, 打开词典的条目(节点)
Nini, 打开句子相关的模式(节点)

测试match:...
测试名词:...
测试动词:...
测试把字句:...
测试被动句:...
*/

var NLP=new NL_Parser();

var code='我"程先涛"的方程被方程"1234"的算式是';
var pt,list_pt;

[list_pt,code]=NLP.sent2Struct(code);
//print(list_pt)
printPtList(list_pt)

/*
Nini, 打开花园(文件)
+[J函数](,测试)
记住"Python"
import clipboard
clipboard.copy(str(dict_标点))

*/
## end
#1412, 34764:
/*
+[J函数](,JS版本)
return
Karma
this.m_word_order
group

保存:...
+[新建阅读窗口](,保存)

*/


class NL_Parser {
    constructor() {
        this.m_word_order=0;
        this.m_dict_名词=['我'];
        this.m_dict_动词=['是'];
        this.m_dict_形容词=['美丽'];
        this.m_dict_副词=['个'];
        this.m_dict_介词=['在'];
        this.m_dict_代词=['那个'];
        this.m_dict_连词=['和'];
        this.m_dict_助词=['的'];
        this.m_dict_标点=['. '];
    }
    
    fun_助词(code) {
        var n=this.word_in_dict(code,this.m_dict_助词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("助词").con(0,pt);
            return code.slice(n,code.length),pt0;
        }
        return [code,''];
    }
    
    fun_连词(code) {
        var n=this.word_in_dict(code,this.m_dict_连词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("连词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_介词(code) {
        var n=this.word_in_dict(code,this.m_dict_介词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("介词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    
    fun_数量词(code) {
        var n_type=0;
        if(code.length>0 & code[0]=='第') {
            n_type=1;
            code=code.slice(1,code.length);
        }
        var result=re.match('\d+|几',code);
        if(result=='') {
            return [code,''];
        }
        var 数目=new NetP(result.group());
        //code=code[result.span()[1]:];
        var n=this.word_in_dict(code,this.m_dict_数量词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n)).con(数目,0);
            var pt0=new NetP("数量词").con(0,数目);
            new NetP("的").con(pt0,pt);
            if(n_type==1) {
                var pt1=new NetP('第').con(数目,0);
                new NetP("的").con(pt0,pt1);
            }
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_副词(code) {
        var n=this.word_in_dict(code,this.m_dict_副词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("副词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_代词(code) {
        var n=this.word_in_dict(code,this.m_dict_代词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("代词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_形容词(code) {
        var n=this.word_in_dict(code,this.m_dict_形容词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("形容词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    fun_名词(code) {
        if(code.length==0) {
            return ['',''];
        }
        
        var name='',n;
        
        for(var i=0;i<code.length;i++) {
            n=this.word_in_dict(code.slice(i,code.length),this.m_dict_动词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_助词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_连词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_介词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_副词)+this.word_in_dict(code.slice(i,code.length),this.m_dict_标点);
            if(n!=0) {
                if(i!=0) {
                    name=code.slice(0,i);
                    break;
                }
                
                else {
                    return [code,''];
                }
            }
            if(code[i]=='"') {
                if(i==0) {
                    name="临时文本";
                }
                
                else {
                    name=code.slice(0,i);
                }
                break;
            }
        }
        if(name=='') {
            name=code;
        }
        code=code.slice(i,code.length);
        var text='';
        var result=code.match(/"[^"]+"/);

        if(result!==null) {
            result=result[0];
            n=result.length;
            text=result.slice(1,result.length-1);
            code=code.slice(n,code.length);
        }

        var pt=new NetP(name,text);
        var pt0=new NetP("名词").con(0,pt);
        new NetP("的").con(pt0,new NetP("序号",`${this.m_word_order}`));
        this.m_word_order+=1;
        return [code,pt0];
    }
    
    fun_dict(code,dict_words,type_word) {
        var n=this.word_in_dict(code,dict_words);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP(type_word).con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }
    
    word_in_dict(code,words) {
        var n=Math.min(20,code.length);
        
        for(var i=0;i<n;i++) {
            if(words.includes(code.slice(0,n-i))) {
                return n-i;
            }
        }
        return 0;
    }
    
    fun_动词(code) {
        var n=this.word_in_dict(code,this.m_dict_动词);
        if(n!=0) {
            var pt=new NetP(code.slice(0,n));
            var pt0=new NetP("动词").con(0,pt);
            return [code.slice(n,code.length),pt0];
        }
        return [code,''];
    }


    fun_谓语(code) {
        if(code=="") {
            return [code,''];
        }
        var code_save=code;
        var sent_type=0;
        [code,状语]=this.fun_状语(code);
        if(code.length>0 & code[0]=='被') {
            [code,动词]=this.fun_动词(code.slice(1,code.length));
            sent_type=1;
        }
        
        else {
            [code,动词]=this.fun_动词(code);
        }
        if(动词=='') {
            状语='';
            [code,动词]=this.fun_动词(code_save);
        }
        if(动词=='') {
            return [code,''];
        }
        谓语=new NetP("谓语");
        谓语.m_db[1]=动词.m_db[1];
        //new Karma(谓语.m_db[1]);
        new NetP('的').con(谓语,动词);
        if(sent_type==1) {
            被=new NetP('被').con('',动词);
            new NetP('的').con(谓语,被);
        }
        if(状语!='') {
            new NetP('的').con(谓语,状语);
            状语.m_db[1].con(动词.m_db[1],0);
        }
        return [code,谓语];
    }
    
    fun_主语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,定语]=this.fun_定语(code);
        if(定语!='') {
            [code,名词]=this.fun_名词(code);
            if(名词!='') {
                主语=new NetP("主语");
                主语.m_db[1]=名词.m_db[1];
                //new Karma(主语.m_db[1]);
                if(定语.m_db[1].m_name in dict_动词) {
                    if(定语.m_db[1].m_db[0]!='') {
                        定语.m_db[1].con(0,名词.m_db[1]);
                    }
                    
                    else {
                        定语.m_db[1].con(名词.m_db[1],0);
                    }
                }
                
                else if(定语.m_db[1].m_name in dict_副词) {
                    if(定语.m_db[1].m_db[0]!='') {
                        定语.m_db[1].con(0,名词.m_db[1]);
                    }
                    
                    else {
                        定语.m_db[1].con(名词.m_db[1],0);
                    }
                }
                
                else {
                    定语.m_db[1].con(名词.m_db[1],0);
                }
                new NetP('的').con(主语,定语);
                new NetP('的').con(主语,名词);
                return [code,主语];
            }
        }
        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            主语=new NetP("主语");
            主语.m_db[1]=名词.m_db[1];
            //new Karma(主语.m_db[1]);
            new NetP('的').con(主语,名词);
            return [code,主语];
        }
        code=code_save;
        return [code,''];
    }
    
    sent_pat(code,pat0) {
        pat=re.sub('%\[句子[^\[^\]]*\]',r'(.+)',pat0);
        result=re.match(pat,code);
        if(result=='') {
            return false;
        }
        
        else {
            return true;
        }
    }
    
    fun_复句(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        if(sent_pat(code,"因为%[句子], 所以%[句子]")) {
            [code,复句]=this.fun_因果复句(code);
            return [code,复句];
        }
        
        else if(sent_pat(code,"当%[句子], %[句子]")) {
            [code,复句]=this.fun_状语复句(code);
            return [code,复句];
        }
        
        else if(sent_pat(code,"%[句子], 然后, %[句子]")) {
            [code,复句]=this.fun_然后复句(code);
            return [code,复句];
        }
        return [code,''];
    }
    
    fun_因果复句(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        if(code.slice(0,2)=='因为') {
            [code,句子1]=this.fun_句子(code.slice(2,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(code.slice(0,4)==', 所以') {
            [code,句子2]=this.fun_句子(code.slice(4,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(句子1=='' | 句子2=='') {
            return [code_save,''];
        }
        因果句=new NetP('因果复句');
        因为=new NetP('因为').con(因果句,句子1);
        所以=new NetP('所以').con(因果句,句子2);
        new NetP('的').con(因果句,句子1);
        new NetP('的').con(因果句,句子2);
        return [code,因果句];
    }
    
    fun_状语复句(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        if(code[0]=='当') {
            [code,句子1]=this.fun_句子(code.slice(1,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(code.slice(0,2)==', ') {
            [code,句子2]=this.fun_句子(code.slice(2,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(句子1=='' | 句子2=='') {
            return [code_save,''];
        }
        复句=new NetP('状语复句');
        条件=new NetP('条件').con(复句,句子1);
        结果=new NetP('结果').con(复句,句子2);
        new NetP('的').con(复句,句子1);
        new NetP('的').con(复句,句子2);
        return [code,复句];
    }
    
    fun_然后复句(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,句子1]=this.fun_单句(code);
        if(code.slice(0,6)==', 然后, ') {
            [code,句子2]=this.fun_单句(code.slice(6,code.length));
        }
        
        else {
            return [code_save,''];
        }
        if(句子1=='' | 句子2=='') {
            return [code_save,''];
        }
        复句=new NetP('然后复句');
        之前=new NetP('之前').con(复句,句子1);
        之后=new NetP('之后').con(复句,句子2);
        new NetP('的').con(复句,句子1);
        new NetP('的').con(复句,句子2);
        return [code,复句];
    }
    
    fun_句子(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        
        this.m_word_order=0;
        [code,句子]=this.fun_复句(code);
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_被动句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_把字句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_普通句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        return [code,句子];
    }
    
    fun_单句(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        
        this.m_word_order=0;
        
        try {
            [code,句子]=this.fun_被动句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_把字句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        if(句子!='') {
            return [code,句子];
        }
        
        try {
            [code,句子]=this.fun_普通句(code);
        } catch(e) {
            code=code_save;
            句子='';
        }
        return [code,句子];
    }
    
    fun_普通句(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code1,介宾短语]=this.fun_介宾短语(code);
        if(介宾短语!='') {
            if(code1.slice(0,2)==', ') {
                code=code1.slice(2,code1.length);
            }
            
            else {
                介宾短语='';
            }
        }
        [code1,主语]=this.fun_主语(code);
        [code1,谓语]=this.fun_谓语(code1);
        if(谓语!='') {
            code=code1;
        }
        
        else {
            主语='';
            [code,谓语]=this.fun_谓语(code);
        }
        [code,宾语]=this.fun_宾语(code);
        if(谓语=='') {
            return [code,''];
        }
        句子=new NetP("句子");
        句子.m_db[1]=谓语.m_db[1];
        new NetP('的').con(句子,谓语);
        if(介宾短语!='') {
            介宾短语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,介宾短语);
            new NetP('的').con(谓语,介宾短语);
        }
        if(主语!='') {
            谓语.m_db[1].con(主语.m_db[1],0);
            new NetP('的').con(句子,主语);
        }
        if(宾语!='') {
            谓语.m_db[1].con(0,宾语.m_db[1]);
            new NetP('的').con(句子,宾语);
        }
        [code1,副词]=this.fun_副词(code);
        if(副词!='') {
            副词.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,副词);
            new NetP('的').con(谓语,副词);
            return [code1,句子];
        }
        [code1,补语]=this.fun_补语(code);
        if(补语!='') {
            补语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,补语);
            new NetP('的').con(谓语,补语);
            return [code1,句子];
        }
        return [code,句子];
    }
    
    fun_被动句(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code1,状语]=this.fun_介宾短语(code);
        if(状语!='') {
            if(code1.slice(0,2)==', ') {
                code=code1.slice(2,code1.length);
            }
            
            else {
                状语='';
            }
        }
        [code,宾语]=this.fun_宾语(code);
        [code,状语2]=this.fun_状语(code);
        if(code[0]!='被') {
            return [code_save,''];
        }
        
        else {
            code=code.slice(1,code.length);
        }
        [code,主语]=this.fun_主语(code);
        [code,谓语]=this.fun_谓语(code);
        if(谓语=='') {
            return [code,''];
        }
        句子=new NetP("句子");
        句子.m_db[1]=谓语.m_db[1];
        new NetP('的').con(句子,谓语);
        new NetP('被').con(谓语,谓语.m_db[1]);
        if(状语!='') {
            状语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,状语);
            new NetP('的').con(谓语,状语);
        }
        if(状语2!='') {
            状语2.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,状语2);
            new NetP('的').con(谓语,状语2);
            状语2.m_name='状语';
        }
        if(主语!='') {
            谓语.m_db[1].con(主语.m_db[1],0);
            new NetP('的').con(句子,主语);
        }
        if(宾语!='') {
            谓语.m_db[1].con(0,宾语.m_db[1]);
            new NetP('的').con(句子,宾语);
        }
        [code1,副词]=this.fun_副词(code);
        if(副词!='') {
            副词.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,副词);
            new NetP('的').con(谓语,副词);
            return [code1,句子];
        }
        [code1,补语]=this.fun_补语(code);
        if(补语!='') {
            补语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,补语);
            new NetP('的').con(谓语,补语);
            return [code1,句子];
        }
        return [code,句子];
    }
    
    fun_把字句(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code1,状语]=this.fun_介宾短语(code);
        if(状语!='') {
            if(code1.slice(0,2)==', ') {
                code=code1.slice(2,code1.length);
            }
            
            else {
                状语='';
            }
        }
        [code,主语]=this.fun_主语(code);
        [code,状语2]=this.fun_状语(code);
        if(code[0]!='把' & code[0]!='将') {
            return [code_save,''];
        }
        
        else {
            code=code.slice(1,code.length);
        }
        [code,宾语]=this.fun_宾语(code);
        [code,谓语]=this.fun_谓语(code);
        if(谓语=='') {
            return [code,''];
        }
        句子=new NetP("句子");
        句子.m_db[1]=谓语.m_db[1];
        new NetP('的').con(句子,谓语);
        new NetP('把').con(谓语,谓语.m_db[1]);
        if(状语!='') {
            状语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,状语);
            new NetP('的').con(谓语,状语);
        }
        if(状语2!='') {
            状语2.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,状语2);
            new NetP('的').con(谓语,状语2);
            状语2.m_name='状语';
        }
        if(主语!='') {
            谓语.m_db[1].con(主语.m_db[1],0);
            new NetP('的').con(句子,主语);
        }
        if(宾语!='') {
            谓语.m_db[1].con(0,宾语.m_db[1]);
            new NetP('的').con(句子,宾语);
        }
        [code1,副词]=this.fun_副词(code);
        if(副词!='') {
            副词.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,副词);
            new NetP('的').con(谓语,副词);
            return [code1,句子];
        }
        [code1,补语]=this.fun_补语(code);
        if(补语!='') {
            补语.m_db[1].con(谓语.m_db[1],0);
            new NetP('的').con(句子,补语);
            new NetP('的').con(谓语,补语);
            return [code1,句子];
        }
        return [code,句子];
    }
    
    fun_宾语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,定语]=this.fun_定语(code);
        if(定语!='') {
            [code,名词]=this.fun_名词(code);
            if(名词!='') {
                宾语=new NetP("宾语");
                宾语.m_db[1]=名词.m_db[1];
                //new Karma(宾语.m_db[1]);
                if(定语.m_db[1].m_name in dict_动词) {
                    if(定语.m_db[1].m_db[0]!='') {
                        定语.m_db[1].con(0,名词.m_db[1]);
                    }
                    
                    else {
                        定语.m_db[1].con(名词.m_db[1],0);
                    }
                }
                
                else if(定语.m_db[1].m_name in dict_副词) {
                    if(定语.m_db[1].m_db[0]!='') {
                        定语.m_db[1].con(0,名词.m_db[1]);
                    }
                    
                    else {
                        定语.m_db[1].con(名词.m_db[1],0);
                    }
                }
                
                else {
                    定语.m_db[1].con(名词.m_db[1],0);
                }
                new NetP('的').con(宾语,定语);
                new NetP('的').con(宾语,名词);
                return [code,宾语];
            }
        }
        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            宾语=new NetP("宾语");
            宾语.m_db[1]=名词.m_db[1];
            //new Karma(宾语.m_db[1]);
            new NetP('的').con(宾语,名词);
            return [code,宾语];
        }
        code=code_save;
        return [code,''];
    }
    
    fun_定语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,短语]=this.fun_短语(code);
        if(短语!='') {
            print(短语,code);
            [code,助词]=this.fun_dict(code,{'的'},'助词');
            if(助词!='') {
                定语=new NetP("定语");
                定语.m_db[1]=短语.m_db[1];
                new NetP('的').con(定语,短语);
                new NetP('的').con(定语,助词);
                return [code,定语];
            }
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            定语=new NetP("定语");
            定语.m_db[1]=形容词.m_db[1];
            new NetP('的').con(定语,形容词);
            [code,助词]=this.fun_dict(code,{'的'},'助词');
            if(助词!='') {
                new NetP('的').con(定语,助词);
            }
            return [code,定语];
        }
        code=code_save;
        [code,数量词]=this.fun_数量词(code);
        if(数量词!='') {
            定语=new NetP("定语");
            定语.m_db[1]=数量词.m_db[1];
            //new Karma(定语.m_db[1]);
            new NetP('的').con(定语,数量词);
            return [code,定语];
        }
        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            [code,助词]=this.fun_dict(code,{'的'},'助词');
            if(助词!='') {
                定语=new NetP("定语");
                定语.m_db[1]=名词.m_db[1];
                //new Karma(定语.m_db[1]);
                new NetP('的').con(定语,名词);
                new NetP('的').con(定语,助词);
                return [code,定语];
            }
        }
        code=code_save;
        return [code,''];
    }
    
    fun_状语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,并列短语]=this.fun_并列短语(code);
        if(并列短语!='') {
            状语=new NetP("状语");
            状语.m_db[1]=并列短语.m_db[1];
            new NetP('的').con(状语,并列短语);
            return [code,状语];
        }
        code=code_save;
        [code,介宾短语]=this.fun_介宾短语(code);
        if(介宾短语!='') {
            状语=new NetP("状语");
            状语.m_db[1]=介宾短语.m_db[1];
            new NetP('的').con(状语,介宾短语);
            return [code,状语];
        }
        code=code_save;
        [code,副词]=this.fun_副词(code);
        if(副词!='') {
            状语=new NetP("状语");
            状语.m_db[1]=副词.m_db[1];
            new NetP('的').con(状语,副词);
            return [code,状语];
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            状语=new NetP("状语");
            状语.m_db[1]=形容词.m_db[1];
            new NetP('的').con(状语,形容词);
            return [code,状语];
        }
        code=code_save;
        [code,代词]=this.fun_代词(code);
        if(代词!='') {
            状语=new NetP("状语");
            状语.m_db[1]=代词.m_db[1];
            new NetP('的').con(状语,代词);
            return [code,状语];
        }
        code=code_save;
        return [code,''];
    }
    
    fun_补语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,并列短语]=this.fun_并列短语(code);
        if(并列短语!='') {
            补语=new NetP("补语");
            补语.m_db[1]=并列短语.m_db[1];
            new NetP('的').con(补语,并列短语);
            return [code,补语];
        }
        code=code_save;
        [code,介宾短语]=this.fun_介宾短语(code);
        if(介宾短语!='') {
            补语=new NetP("补语");
            补语.m_db[1]=介宾短语.m_db[1];
            new NetP('的').con(补语,介宾短语);
            return [code,补语];
        }
        code=code_save;
        [code,述宾短语]=this.fun_述宾短语(code);
        if(述宾短语!='') {
            补语=new NetP("补语");
            补语.m_db[1]=述宾短语.m_db[1];
            new NetP('的').con(补语,述宾短语);
            return [code,补语];
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            补语=new NetP("补语");
            补语.m_db[1]=形容词.m_db[1];
            new NetP('的').con(补语,形容词);
            return [code,补语];
        }
        code=code_save;
        [code,数量词]=this.fun_数量词(code);
        if(数量词!='') {
            补语=new NetP("补语");
            补语.m_db[1]=数量词.m_db[1];
            new NetP('的').con(补语,数量词);
            return [code,补语];
        }
        code=code_save;
        [code,代词]=this.fun_代词(code);
        if(代词!='') {
            补语=new NetP("补语");
            补语.m_db[1]=代词.m_db[1];
            new NetP('的').con(补语,代词);
            return [code,补语];
        }
        code=code_save;
        return [code,''];
    }
    
    fun_短语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,并列短语]=this.fun_并列短语(code);
        if(并列短语!='') {
            print('并列短语',code);
            return [code,并列短语];
        }
        code=code_save;
        [code,偏正短语]=this.fun_偏正短语(code);
        if(偏正短语!='') {
            print('偏正短语',code);
            return [code,偏正短语];
        }
        code=code_save;
        [code,介宾短语]=this.fun_介宾短语(code);
        if(介宾短语!='') {
            print('介宾短语',code);
            return [code,介宾短语];
        }
        code=code_save;
        [code,述宾短语]=this.fun_述宾短语(code);
        if(述宾短语!='') {
            return [code,述宾短语];
        }
        code=code_save;
        [code,述补短语]=this.fun_述补短语(code);
        if(述补短语!='') {
            print('述补短语',code);
            return [code,述补短语];
        }
        code=code_save;
        [code,主谓短语]=this.fun_主谓短语(code);
        if(主谓短语!='') {
            print('主谓短语',code);
            return [code,主谓短语];
        }
        code=code_save;
        return [code,''];
    }
    
    fun_并列短语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,并列短语]=this.fun_并列短语(code);
                if(并列短语!='') {
                    并列短语_0=new NetP("并列短语");
                    连词.m_db[1].con(形容词.m_db[1],并列短语.m_db[1]);
                    并列短语_0.m_db[1]=形容词.m_db[1];
                    new NetP('的').con(并列短语_0,形容词);
                    new NetP('的').con(并列短语_0,连词);
                    new NetP('的').con(并列短语_0,并列短语);
                    return [code,并列短语_0];
                }
            }
        }
        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,并列短语]=this.fun_并列短语(code);
                if(并列短语!='') {
                    并列短语_0=new NetP("并列短语");
                    连词.m_db[1].con(名词.m_db[1],并列短语.m_db[1]);
                    并列短语_0.m_db[1]=名词.m_db[1];
                    new NetP('的').con(并列短语_0,名词);
                    new NetP('的').con(并列短语_0,连词);
                    new NetP('的').con(并列短语_0,并列短语);
                    return [code,并列短语_0];
                }
            }
        }
        code=code_save;
        [code,名词_0]=this.fun_名词(code);
        if(名词_0!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,名词_1]=this.fun_名词(code);
                if(名词_1!='') {
                    并列短语=new NetP("并列短语");
                    连词.m_db[1].con(名词_0.m_db[1],名词_1.m_db[1]);
                    并列短语.m_db[1]=名词_0.m_db[1];
                    new NetP('的').con(并列短语,名词_0);
                    new NetP('的').con(并列短语,连词);
                    new NetP('的').con(并列短语,名词_1);
                    return [code,并列短语];
                }
            }
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,名词]=this.fun_名词(code);
                if(名词!='') {
                    并列短语=new NetP("并列短语");
                    连词.m_db[1].con(形容词.m_db[1],名词.m_db[1]);
                    并列短语.m_db[1]=形容词.m_db[1];
                    new NetP('的').con(并列短语,形容词);
                    new NetP('的').con(并列短语,连词);
                    new NetP('的').con(并列短语,名词);
                    return [code,并列短语];
                }
            }
        }
        code=code_save;
        [code,名词]=this.fun_名词(code);
        if(名词!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,形容词]=this.fun_形容词(code);
                if(形容词!='') {
                    并列短语=new NetP("并列短语");
                    连词.m_db[1].con(名词.m_db[1],形容词.m_db[1]);
                    并列短语.m_db[1]=名词.m_db[1];
                    new NetP('的').con(并列短语,名词);
                    new NetP('的').con(并列短语,连词);
                    new NetP('的').con(并列短语,形容词);
                    return [code,并列短语];
                }
            }
        }
        code=code_save;
        [code,形容词_0]=this.fun_形容词(code);
        if(形容词_0!='') {
            [code,连词]=this.fun_连词(code);
            if(连词!='') {
                [code,形容词_1]=this.fun_形容词(code);
                if(形容词_1!='') {
                    并列短语=new NetP("并列短语");
                    连词.m_db[1].con(形容词_0.m_db[1],形容词_1.m_db[1]);
                    并列短语.m_db[1]=形容词_0.m_db[1];
                    new NetP('的').con(并列短语,形容词);
                    new NetP('的').con(并列短语,连词);
                    new NetP('的').con(并列短语,形容词);
                    return [code,并列短语];
                }
            }
        }
        code=code_save;
        return [code,''];
    }
    
    fun_偏正短语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,名词_0]=this.fun_名词(code);
        if(名词_0!='') {
            [code,名词_1]=this.fun_名词(code);
            if(名词_1!='') {
                偏正短语=new NetP("偏正短语");
                偏正短语.m_db[1]=名词_1.m_db[1];
                print(名词_0,名词_1);
                pt_de=new NetP('的').con(名词_0.m_db[1],名词_1.m_db[1]);
                //new Karma(名词_0.m_db[1]);
                //new Karma(名词_1.m_db[1]);
                //new Karma(pt_de);
                new NetP('的').con(偏正短语,名词_0);
                new NetP('的').con(偏正短语,pt_de);
                new NetP('的').con(偏正短语,名词_1);
                return [code,偏正短语];
            }
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            [code,动词]=this.fun_动词(code);
            if(动词!='') {
                偏正短语=new NetP("偏正短语");
                偏正短语.m_db[1]=动词.m_db[1];
                形容词.m_db[1].con(动词.m_db[1],0);
                //new Karma(动词.m_db[1]);
                //new Karma(形容词.m_db[1]);
                new NetP('的').con(偏正短语,形容词);
                new NetP('的').con(偏正短语,动词);
                return [code,偏正短语];
            }
        }
        code=code_save;
        [code,形容词]=this.fun_形容词(code);
        if(形容词!='') {
            [code,名词]=this.fun_名词(code);
            if(名词!='') {
                偏正短语=new NetP("偏正短语");
                偏正短语.m_db[1]=名词.m_db[1];
                形容词.m_db[1].con(名词.m_db[1],0);
                //new Karma(形容词.m_db[1]);
                //new Karma(名词.m_db[1]);
                new NetP('的').con(偏正短语,形容词);
                new NetP('的').con(偏正短语,名词);
                return [code,偏正短语];
            }
        }
        code=code_save;
        return [code,''];
    }
    
    fun_述宾短语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,动词]=this.fun_动词(code);
        if(动词!='') {
            [code,名词]=this.fun_名词(code);
            if(名词!='') {
                述宾短语=new NetP("述宾短语");
                述宾短语.m_db[1]=动词.m_db[1];
                动词.m_db[1].con(0,名词.m_db[1]);
                //new Karma(动词.m_db[1]);
                //new Karma(名词.m_db[1]);
                new NetP('的').con(述宾短语,动词);
                new NetP('的').con(述宾短语,名词);
                return [code,述宾短语];
            }
        }
        code=code_save;
        return [code,''];
    }
    
    fun_述补短语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,动词]=this.fun_动词(code);
        if(动词!='') {
            [code,形容词]=this.fun_形容词(code);
            if(形容词!='') {
                述补短语=new NetP("述补短语");
                述补短语.m_db[1]=动词.m_db[1];
                形容词.m_db[1].con(动词.m_db[1],0);
                //new Karma(动词.m_db[1]);
                //new Karma(形容词.m_db[1]);
                new NetP('的').con(述补短语,动词);
                new NetP('的').con(述补短语,形容词);
                return [code,述补短语];
            }
        }
        code=code_save;
        return [code,''];
    }
    
    fun_主谓短语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,名词]=this.fun_名词(code);
        if(名词=='') {
            return [code_save,''];
        }
        主谓短语=new NetP("主谓短语");
        new NetP('的').con(主谓短语,名词);
        //new Karma(名词.m_db[1]);
        [code,动词]=this.fun_动词(code);
        if(动词!='') {
            动词.m_db[1].con(名词.m_db[1],0);
            主谓短语.m_db[1]=动词.m_db[1];
            //new Karma(动词.m_db[1]);
            new NetP('的').con(主谓短语,动词);
        }
        
        else {
            [code,副词]=this.fun_副词(code);
            if(副词!='') {
                副词.m_db[1].con(名词.m_db[1],0);
                主谓短语.m_db[1]=副词.m_db[1];
                //new Karma(副词.m_db[1]);
                new NetP('的').con(主谓短语,副词);
            }
            
            else {
                return [code_save,''];
            }
        }
        return [code,主谓短语];
    }
    
    fun_介宾短语(code) {
        if(code=="") {
            return [code,''];
        }
        code_save=code;
        [code,介词]=this.fun_介词(code);
        [code,宾语]=this.fun_名词(code);
        介宾短语=new NetP("介宾短语");
        if(宾语!='' & 介词!='') {
            介宾短语.m_db[1]=介词.m_db[1];
            介词.m_db[1].con(0,宾语.m_db[1]);
            //new Karma(介词.m_db[1]);
            new NetP('的').con(介宾短语,宾语);
            new NetP('的').con(介宾短语,介词);
        }
        
        else {
            code=code_save;
            return [code,''];
        }
        [code,副词]=this.fun_副词(code);
        if(副词!='') {
            副词.m_db[1].con(介词.m_db[1],0);
            new NetP('的').con(介宾短语,副词);
        }
        return [code,介宾短语];
    }
    
    collectPts([pt,list_pt]=None) {
        if(list_pt=='') {
            list_pt=[];
        }
        if(pt not in list_pt) {
            list_pt.push(pt);
        }
        
        for(var i=0;i<pt.m_con.length;i++) {
            var con=pt.m_con[i];
            if(con.m_db[0]==pt) {
                if(con not in list_pt) {
                    list_pt.push(con);
                }
                if(con.m_name=="的" & con.m_db[1]!='') {
                    collectPts(con.m_db[1],list_pt);
                }
            }
        }
        if(pt.m_db[0]!='') {
            if(pt.m_db[0] not in list_pt) {
                list_pt.push(pt.m_db[0]);
            }
        }
        if(pt.m_db[1]!='') {
            if(pt.m_db[1] not in list_pt) {
                list_pt.push(pt.m_db[1]);
            }
        }
        return list_pt;
    }
    
    sentStruct(pt) {
        var pt0=new NetP('^起点').con(0,pt);
        list_pt=[pt0];
        list_pt+=collectPts(pt);
        return tools_basic.writeStdCode([],list_pt);
    }
    
    sent2Struct(sent) {
        [code,pt]=this.fun_句子(sent);
        if(pt=='') {
            return '';
        }
        
        else {
            return [sentStruct(pt),code];
        }
    }


}


/*
测试(J函数):...
+[新建阅读窗口](,测试)
*/
## end
#1416, 183:
/*
+[J函数](,测试)

测试
*/

print('????')
var NLP=new NL_Parser();

var code='算式"1+2"';
var result=code.match(/^"[^"]+"/);
//var result=code.match(/"[^"]+"/);
print(result===null)


/*

*/
## end
#1418, 272:
/*
+[J函数](,测试)
Nini, 打开词典的条目(节点)

测试match:...
*/

print('????')
var NLP=new NL_Parser();

var code='我"程先涛"的算式"1234"';
var pt;

[code,pt]=NLP.fun_名词(code);
print(code)
print(pt.info())
print(pt.m_db[1].info(),pt.m_db[1].m_text)
print(pt.m_con[0].info())


/*
+[J函数](,测试)
*/
## end
#1420, 213:
/*
+[J函数](,测试)
Nini, 打开词典的条目(节点)

测试match:...
测试名词:...
*/

print('????')
var NLP=new NL_Parser();

var code='是我"程先涛"的算式"1234"';
var pt;

[code,pt]=NLP.fun_动词(code);
print(code)
print(pt.info())


/*
+[J函数](,测试)
*/
## end
#1422, 287:
/*
+[J函数](,测试)
Nini, 打开词典的条目(节点)
Nini, 打开句子相关的模式(节点)

测试match:...
测试名词:...
测试动词:...
*/

var NLP=new NL_Parser();

var code='我"程先涛"的方程把方程"1234"的算式是';
var pt,list_pt;

[code,pt]=NLP.fun_把字句(code);
print(pt)
list_pt=NLP.collectPts(pt);
printPtList(list_pt)

/*
Nini, 打开花园(文件)
+[J函数](,测试)
*/
## end
#1424, 297:
/*
+[J函数](,测试)
Nini, 打开词典的条目(节点)
Nini, 打开句子相关的模式(节点)

测试match:...
测试名词:...
测试动词:...
测试把字句:...
*/

var NLP=new NL_Parser();

var code='我"程先涛"的方程被方程"1234"的算式是';
var pt,list_pt;

[code,pt]=NLP.fun_被动句(code);
print(pt)
list_pt=NLP.collectPts(pt);
printPtList(list_pt)

/*
Nini, 打开花园(文件)
+[J函数](,测试)
*/
## end
#1426, 129:


Nini::

m_lib:...
m_idea:...
+的(Nini,m_lib)->+的(Nini,m_idea)

听::
说::
的(Nini,听)->的(Nini,说)

词典:...
的(Nini,词典)
+[新建阅读窗口](,词典)



## end
#1431, 22:


自我意识:...
更新意境:...



## end
#1433, 10:


词语:...


## end
#1447, 379:
"""
库:...
+[新建阅读窗口](,库)
+[复制结构](,库)

保存:...

"""

+自我意识(Nini,)->+[del](,+自我意识)...
->的(自我意识,库)...

->的(Nini,听)->的(Nini,说):
    ->询问(Nini,)->的(库,问题)->+[做](,询问)->+[code](+[做],问题),
    ->[==]"你好"(,听)->的(库,你好)->你好->+[做](Nini,)->+[code](+[做],你好),
    ->^起点(听,_句子)->的(_句子,谓语)->谓语(,_动词)...
        ->的(库,操作)->操作(,)...
        ->+[做](Nini,_动词)->+[code](+[做],操作),
    ->+[修改内容]"我不懂"(,说)



## end
#1451, 167:
/*
+[J函数](,测试)

测试con:
*/
var a=new NetP('a');
var b=new NetP('b');
var c=new NetP('c');

a.con(c,b);
print();
print('!!!');
a.con('',0);
print(''==0)
print(''===0)



## end
#1452, 4:
1463
## end
#1455, 26:

你好:...
问题:...

操作:...




## end
#1457, 318:
"""
保存:...

"""

+你好(Nini,)->+[del](,+你好)...

->的(Nini,说):
    ->的(Nini,聊天者)->[]{
        []:->询问(Nini,聊天者)->+[修改内容]"别再你好了, 问你叫什么呢"(,说),

        ->[==](,聊天者)->+询问(Nini,聊天者)...
            ->+[修改内容]"我还不知道你的名字呢"(,说),

        ->+[模板文本]"%聊天者, 你好!"(,说)->+[.](+[模板文本],聊天者)
    },
    ->+[修改内容]"要做些什么呢?"(,说)->+的(Nini,+聊天者)

## end
#1459, 420:
"""


"""

+问题(,询问)->+[del](,+问题)...
->的(库,问题)->库->的(库,你好)...

->询问(Nini,_内容)->Nini->的(Nini,听)->的(Nini,说)->_内容:
    ->[is](_内容,聊天者)->[]{
        []:->^起点(听,句子)...
            ->句子->的(句子,谓语)->谓语(,是)->是(我,_名字)->我->_名字(,)...
            ->+[标题](_名字,)->+[修改内容](+[标题],聊天者)...
            ->+[左连](询问,)->+[做](Nini,)->+[code](+[做],你好),
        ->+[修改内容](听,聊天者)...
            ->+[左连](询问,)->+[做](Nini,)->+[code](+[做],你好)
    }



## end
#1460, 4:
1465
## end
#1462, 4:
1531
## end
#1465, 223:
"""
库:...

"""

+操作(Nini,_动作)->+[del](,+操作)...
->的(操作,库)...

->[]{
    []:->的(Nini,世界)->世界,->+的(Nini,+世界)
}...

->的(Nini,说)->说:
    ->的(库,_动词)->[eq](_动作,_动词)->+[做](Nini,_动作)->+[code](+[做],_动词),
    ->+[修改内容]"我不懂这个"(,说)





## end
#1467, 123:
记住"自然语言"

显示:...
是:...
有:...
在:...
距离:...
朝向:...
旋转:...
将条目"距离"复制为条目"旋转"
旋转的"距离"替换为"旋转"

+[新建阅读窗口](,是)


绕A0, B0沿Z方向旋转"90"

## end
#1469, 334:
"""

保存:...

"""

+你好(Nini,)->+[del](,+你好)...

->的(Nini,说):
    ->的(Nini,聊天者)->[]{
        []:->询问(Nini,聊天者)->+[修改内容]"别再你好了, 问你叫什么呢"(,说),

        ->[==](,聊天者)->+询问(Nini,聊天者)...
            ->+[修改内容]"我还不知道你的名字呢"(,说),

        ->+[模板文本]"%聊天者, 你好!"(,说)->+[.](+[模板文本],聊天者)
    },
    ->+[修改内容]"你的名字是?"(,说)->+的(Nini,+聊天者)->+询问(Nini,+聊天者)

## end
#1471, 590:
"""
Nini, 打开花园(文件)
Nini, 打开网页画板(文件)
回答模板1::%三维画板
回答模板2::%网页画板
库:

"""

+显示(Nini,显示)->+[del](,+显示)...
->的(显示#0,回答模板1)->的(显示#0,回答模板2)...

->的(Nini,世界)->的(Nini,说)...
->显示(,_名词)->_名词:
    ->[is](_名词,三维画板)->三维画板->+[修改内容](回答模板1,说),
    ->[is](_名词,网页画板)->网页画板->+[修改内容](回答模板2,说),

    ->[词语](世界,_名词)->是([词语],_宾语)...
    ->_宾语(,_A1)->+[标题]#0(_宾语,)->[]{
        []:->_A1->+[标题]#1(_A1,)...
            ->+[模板文本]"%名词0是%名词1"(,说)...
            ->+[.]"名词0"(+[模板文本],+[标题]#0)->+[.]"名词1"(+[模板文本],+[标题]#1),
        ->+[修改内容](_宾语,说)
    },

    ->+[标题](_名词,)->+[模板文本]"%名词是什么?"(,说)->+[.]"名词"(+[模板文本],+[标题])




## end
#1477, 393:
"""
库:...
+[新建阅读窗口](,库)

保存:...

"""

+自我意识(Nini,)->+[del](,+自我意识)...
->的(自我意识,库)...
->[]{
    +[消息窗口](,+B)
}...

->的(Nini,听)->的(Nini,说):
    ->询问(Nini,)->的(库,问题)->+[做](,询问)->+[code](+[做],问题),
    ->[==]"你好"(,听)->的(库,你好)->你好->+[做](Nini,)->+[code](+[做],你好),
    ->^起点(听,_句子)->的(_句子,谓语)->谓语(,_动词)...
        ->的(库,操作)->操作(,)...
        ->+[做](Nini,_动词)->+[code](+[做],操作),
    ->+[修改内容]"我不懂"(,说)

## end
#1479, 711:
/*
Nini, 打开JS编译器(文件)
+[J函数](,测试)

测试一般匹配:...
测试concat:...
测试新建节点:...
测试run_code:...
测试throw:...
测试中文match:...
测试中文匹配:...

测试action:...
测试缩写:...
测试Stack:...
测试insert:...
测试readSubCode_tokener:...
测试run_code2:...
测试setRanger:...
测试rangeList:...
测试rangeList2:...
测试rangeList3:...

测试缩写2:...
测试流程2:...

测试节点构造:...
测试限制匹配:...

测试readSubCode_tokener2:...

+[新建阅读窗口](,测试一般匹配)
Nini, 打开JS编译器(文件)
*/

var parser=new Parser();
var code0;
var karma,pointStack;

code0=`+[del](,+消息窗口)->[]{+[消息窗口](,+B)};
`;

print(code0);
[code0,karma,pointStack]=parser.chainToken(code0);
pointStack.leaveClause();
karma=karma.causeEnd();
karma.setRangers();
print(writeStdCode_karma(karma,[]));
print(pointStack.info())


/*
+[J函数](,测试)
*/
## end
#1481, 204:
"""
Nini, 打开句子结构的结构场景(节点)
Nini, 打开名词(库)

"""

+词语(_世界,_名词)->的(_世界,_实体):
    ->_A(_名词,)->名词(,_A)->[eq](_实体,_A)...
        ->的(_实体,_性质)->[eq](_性质,_名词)->+是(+词语,_性质),
    
    ->[eq](_实体,_名词)->+是(+词语,_实体)




## end
#1483, 1275:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
测试内置动词:...
测试JS:...

测试定义条目:
*/

var list_pt0=[],list_pt=[],list_ns=[];
var km;
var pool=listPt2poolPt(list_pt);
var change=true,change1;
var code,list_km,list_new,list_del=[];

list_pt0=Nini.init(st_core.textContent);

code=`
[A](+D,+DD)
`;

list_km=Nini.m_parser.readSubCode_tokener(code);
km=list_km[0];
list_km=km.allEffects();
list_km[0].m_stage=1;

/*
+[J函数](,测试)
*/

for(var j=0;j<6;j++) {
    change=false;
    for(var i=0;i<list_km.length;i++) {
        [change1,list_new]=list_km[i].Reason_oneStep(pool);
        karma=list_km[i];

//print(karma.info(),karma.m_interp);
        if(karma.m_interp) {
            int_result=Nini.think(karma.m_map);
            list_del.push(karma.m_map);
            if(!int_result) {
                karma.m_map='';
            }
        }
print(karma.info(),karma.m_interp,karma.stateSelf());

        listPtIntoPoolPt(pool,list_new);
        mergeArrays(list_pt,list_new);
        mergeArrays(list_ns,list_new);

        if(change1 & !change) {
            change=true;
        }
    }
}



/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
*/
## end
#1485, 728:
"""
库:...
+[新建阅读窗口](,库)

"""

+是(Nini,是)->+[del](,+是)...
->的(是#0,库)...

->的(Nini,世界)->的(Nini,说)...
->的(Nini,词典)->的(词典,名词#0)...

->是(_名词,_名词2)->_名词->[]{
    []:->[词语](世界,_名词),
    ->_A(_名词,)->名词(,_A)->+[做](Nini,_A)->+[code](+[做],没有性质)...
        ->的(库,没有性质)->没有性质,
    ->+的(世界,+实体)->[m_name](_名词,+实体)
}...
->[词语](世界,_名词)->是([词语],_主语)...

->_名词2:
    ->[is](_名词2,什么)->的(库,回答什么)->回答什么(,)...
        ->+[做](Nini,_主语)->+[code](+[做],回答什么),
    ->的(名词#0,_条目)->[eq](_名词2,_条目)->的(_条目,定义)...
        ->+[做](_主语,_名词2)->+[code](+[做],定义),
    ->[is](_名词2,临时文本)->+[修改内容](临时文本,_主语),
    ->[]{
        []:->[词语](世界,_名词2)->是([词语],_宾语)->+[右连](_主语,_宾语),
        ->+[标题](_名词2,)...
            ->+[模板文本]"%名词是什么?"(,说)->+[.]"名词"(+[模板文本],+[标题])
    }


## end
#1487, 53:
记住"自然语言"

回答什么:...
没有性质:...
将条目"回答什么"复制为条目"没有性质"





## end
#1489, 265:
"""
回答模板::%名词0没有"%名词1"这个性质

"""

+没有性质(Nini,_主体)->+[del](,+没有性质)...
->的(没有性质,回答模板)...

->的(Nini,世界)->的(Nini,说)...
->_主体(_性质,)...
    ->+[标题]#0(_主体,)->+[标题]#1(_性质,)...

->[]{
    +[模板文本](回答模板,说)...
        ->+[.]"名词0"(+[模板文本],+[标题]#0)->+[.]"名词1"(+[模板文本],+[标题]#1)
}


## end
#1491, 16:
%名词0没有"%名词1"这个性质
## end
#1493, 531:
"""
库:...
+[新建阅读窗口](,库)

"""

+有(Nini,有)->+[del](,+有)...
->的(有#0,库)...
->的(Nini,世界)->的(Nini,说)...

->有(_名词,_名词2)->_名词2:
->[is](_名词2,什么)->+[做](Nini,有)->+[code](+[做],回答有什么)...
    ->的(库,回答有什么)->回答有什么,

->_名词->[]{
    []:->[词语](世界,_名词)->是([词语],_主语)...
        ->+[做]#1(_主语,_名词2)->+[code](+[做]#1,操作0)...
        ->+说话(+[做]#1,说)->+[del](,+说话)...
        ->的(库,操作0)->操作0,
    ->+[标题](_名词,)->+[模板文本]"%名词是什么?"(,说)->+[.]"名词"(+[模板文本],+[标题])
},


->+[做](世界,_名词2)->+[code](+[做],操作0)...
    ->+说话(+[做],说)->+[del](,+说话)...
    ->的(库,操作0)->操作0



## end
#1495, 22:


回答有什么:...
操作0:...



## end
#1497, 929:
"""
回答模板::%主语有%内容
回答模板2::%主语没有任何东西

"""

+回答有什么(Nini,有)->+[del](,+回答有什么)...
->的(回答有什么,回答模板)->的(回答有什么,回答模板2)...
->的(Nini,世界)->的(Nini,说)...

->有(_名词,)...
->+[临时文本]#0->+[临时文本]#1(,)...
->[]{
    []:->_名词->+[标题]#0(_名词,)->[]{
        []:->[词语](世界,_名词)->是([词语],_主语)...
            ->+[修改内容](+[标题]#0,+[临时文本]#0)...
        =>的(_主语,_内容)->_内容(,)...
            =>+[标题](_内容,)->+[增加内容]" "(+[标题],+[临时文本]#1)...
            ->+有内容(+回答有什么,)->+[del](,+有内容),

        ->+已回答(+回答有什么,)->+[del](,+已回答)...
            ->+[模板文本]"%名词是什么?"(,说)->+[.]"名词"(+[模板文本],+[标题]#0)
    },
    
    ->+[修改内容]"我的世界里"(,+[临时文本]#0)...
    =>的(世界,_内容)->_内容=>+[标题](_内容,)->+[增加内容]" "(+[标题],+[临时文本]#1)...
        ->+有内容(+回答有什么,)->+[del](,+有内容)
}...

->[]:->已回答(+回答有什么,),

    ->有内容(+回答有什么,)->+[模板文本](回答模板,说)...
        ->+[.]"主语"(+[模板文本],+[临时文本]#0)->+[.]"内容"(+[模板文本],+[临时文本]#1),

    ->+[模板文本](回答模板2,说)...
        ->+[.]"主语"(+[模板文本],+[临时文本]#0)->+[.]"内容"(+[模板文本],+[临时文本]#1)



## end
#1499, 7:
%主语有%内容
## end
#1501, 602:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
测试内置动词:...
测试JS:...

测试定义条目:...
*/

var list_pt0=[],list_pt=[],list_km=[];

list_pt0=Nini.init(st_core.textContent);

Nini.run_code(`
+A->+B->+C->[]{+D}->[]{+E}->[]{+F}->+G->+H
`,[],list_pt);

printPtList(list_pt);
list_pt.sort(function(a,b){return b.m_time-a.m_time;});
printPtList(list_pt);
for(var i=0;i<list_pt.length;i++) {
    print(list_pt[i].m_time);
}


/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
*/
## end
#1502, 4:
1536
## end
#1505, 9:
%主语没有任何东西
## end
#1507, 343:
"""
回答模板::%主语中已经有%宾语了. 咱暂时不能理解为什么不同的东西会有同样的名字

"""

+操作0(_主语,_名词)->+[del](,+操作0)...
->的(操作0,回答模板)...

->说话(+操作0,说)...
->[]:
    ->[词语](_主语,_名词)->是([词语],_宾语)...
        ->+[标题]#0(_主语,)->+[标题]#1(_宾语,)...
    ->+[模板文本](回答模板,说)->+[消息窗口](,_主语)...
        ->+[.]"主语"(+[模板文本],+[标题]#0)->+[.]"宾语"(+[模板文本],+[标题]#1),
    ->+的(_主语,+性质)->[m_name](_名词,+性质)

## end
#1509, 35:
%主语中已经有%宾语了. 咱暂时不能理解为什么不同的东西会有同样的名字
## end
#1511, 25:


名词:...
+[复制结构](,名词)




## end
#1515, 124:
Nini, 打开词典的条目(节点)
Nini, 打开词典的句子库(节点)
记住"自然语言"

线段:...
圆形:...
长方形:...

立方体:...
圆柱体:...
球体:...
将条目"立方体"复制为条目"球体"
+[粘贴](,名词)



## end
#1516, 412:
/*

*/


var siz=[%siz],pt=[%pt];
var R='%R';
var H='%H';

if(siz[0]!==undefined) {
    R=siz[0];
}
if(siz[1]!==undefined) {
    H=siz[1];
}
if(pt.length<3) {
    pt=[0,0,0];
}

if(var_cylinder==='') {
    var_cylinder=world_3D.addCylinder(R,H,pt[0],pt[1],pt[2]);
} else {
    var_cylinder.position.set(pt[0],pt[1],pt[2]);
    var_cylinder.scale.x=R;
    var_cylinder.scale.y=H;
    var_cylinder.scale.z=R;
}




## end
#1518, 638:
"""
[eq](+[定义],定义)
JS代码:...
+[新建阅读窗口](,JS代码)

"""

+定义(_圆柱体,圆柱体)->+[del](,+定义)...
->的(定义,JS代码)...

->[]{
    []:->的(_圆柱体,类型)->类型->+[修改内容]"圆柱体"(,类型),
        ->+的(_圆柱体,+类型)->+类型"圆柱体"
}...

->+[JS]->+[code](+[JS],JS代码)...
->+[v]"var_cylinder"(+[JS],_圆柱体)...
->+[.]"siz"(+[JS],+[临时文本])->[m_text](圆柱体,+[临时文本])...
->[]{
    []:->的(_圆柱体,半径)->半径->+[o]"R"(+[JS],半径),
        ->+的(_圆柱体,+半径)->+半径"1"->+[o]"R"(+[JS],+半径)
}...
->[]{
    []:->的(_圆柱体,高度)->高度->+[o]"H"(+[JS],高度),
        ->+的(_圆柱体,+高度)->+高度"1"->+[o]"H"(+[JS],+高度)
}...
->[]{
    []:->在(_圆柱体,空间点)->空间点->+[o]"pt"(+[JS],空间点),
        ->+在(_圆柱体,+空间点)->+空间点"0,0,0"->+[o]"pt"(+[JS],+空间点)
}



## end
#1520, 47:


定义:...
定义的"立方体"替换为"圆柱体"
定义的"matlab"替换为"JS"



## end
#1522, 4:
1623
## end
#1524, 9:
%名词0是%名词1
## end
#1526, 708:
"""
回答模板::%名词0是%名词1
回答模板2::%名词0... 嗯... 是%名词1

"""

+回答什么(Nini,_主语)->+[del](,+回答什么)...
->的(回答什么,回答模板)->的(回答什么,回答模板2)...

->的(Nini,世界)->的(Nini,说)...
->_主语(,_A1)->+[标题]#0(_主语,)...

->[]{
    []:->_A1->+[标题]#1(_A1,)...
        ->+[模板文本](,说)->+[code](+[模板文本],回答模板)...
        ->+[.]"名词0"(+[模板文本],+[标题]#0)->+[.]"名词1"(+[模板文本],+[标题]#1),

    ->的(_主语,类型)->类型->+[模板文本](,说)->+[code](+[模板文本],回答模板)...
        ->+[.]"名词0"(+[模板文本],+[标题]#0)->+[.]"名词1"(+[模板文本],类型),

    ->[==](,_主语)->+[模板文本](,说)->+[code](+[模板文本],回答模板2)...
        ->+[.]"名词0"(+[模板文本],+[标题]#0)...
        ->+[.]"名词1"(+[模板文本],+[临时文本])->+[临时文本]"个东西",

    ->+[模板文本](,说)->+[code](+[模板文本],回答模板)...
        ->+[.]"名词0"(+[模板文本],+[标题]#0)->+[.]"名词1"(+[模板文本],_主语)
}
## end
#1529, 18:
%名词0... 嗯... 是%名词1
## end
#1530, 504:
"""
JS代码:...
JS代码的"rect"替换为"circle"

"""

+定义(_圆形,圆形)->+[del](,+定义)...
->的(定义,JS代码)...

->[]{
    []:->的(_圆形,类型)->类型->+[修改内容]"圆形"(,类型),
        ->+的(_圆形,+类型)->+类型"圆形"
}...

->+[JS]->+[code](+[JS],JS代码)...
->+[v]"var_circle"(+[JS],_圆形)...
->+[.]"siz"(+[JS],+[临时文本])->[m_text](圆形,+[临时文本])...
->[]{
    []:->的(_圆形,半径)->半径->+[o]"R"(+[JS],半径),
        ->+的(_圆形,+半径)->+半径->+[o]"R"(+[JS],+半径)
}...
->[]{
    []:->在(_圆形,空间点)->空间点->+[o]"pt"(+[JS],空间点),
        ->+在(_圆形,+空间点)->+空间点"0,0"->+[o]"pt"(+[JS],+空间点)
}



## end
#1532, 44:

定义:...
定义的"线段"替换为"圆形"
定义的"matlab"替换为"JS"



## end
#1534, 526:
"""
[eq](+[定义],定义)
JS代码:...
JS代码的"rect"替换为"line"

"""

+定义(_线段,线段)->+[del](,+定义)...
->的(定义,JS代码)...

->[]{
    []:->的(_线段,类型)->类型->+[修改内容]"线段"(,类型),
        ->+的(_线段,+类型)->+类型"线段"
}...

->+[JS]->+[code](+[JS],JS代码)...
->+[v]"var_line"(+[JS],_线段)...
->+[.]"siz"(+[JS],+[临时文本])->[m_text](线段,+[临时文本])...
->[]{
    []:->的(_线段,起点)->起点->+[o]"pt0"(+[JS],起点),
        ->+的(_线段,+起点)->+起点"0,0"->+[o]"pt0"(+[JS],+起点)
}...
->[]{
    []:->的(_线段,终点)->终点->+[o]"pt1"(+[JS],终点),
        ->+的(_线段,+终点)->+终点"1,1"->+[o]"pt1"(+[JS],+终点)
}









## end
#1536, 10:

定义:...



## end
#1539, 417:
<!--
Nini, 打开博客生成器(文件)
+[H函数](,测试页面)
-->
%场景测试

<p id='cmd_window'></p>
<svg width=50% viewBox="0 0 200 200.0" id='display_window'>
<rect x="62.0" y="42.0" width="50.0" height="12.5" style="fill:white;stroke:black;stroke-width:5;" id='B0'/>
</svg>

<script>

var list_pt0=[],list_pt=[],list_km=[];

Nini.init(st_core.textContent);
Nini.do('+[测试]')

</script>




<!--
场景测试(核心结构):...
+[新建阅读窗口](,场景测试)
+[H函数](,测试页面)
-->
## end
#1543, 4:
哈哈哈哈
## end
#1547, 176:
"""
显示::哈哈哈哈
+的(显示,+B)
的(显示,B)->+[del](,B)

"""

+测试动作->+[del](,+测试动作)...
->的(测试动作,显示)...
->+[消息窗口]"4444"(,显示)->[]{
[]:->的(显示,B)->B->+[消息窗口]"????",->+的(显示,+B)->+[消息窗口]"!!!"
}


## end
#1551, 95:
"""
测试动作:...
测试JS:...

"""

+测试->+[del](,+测试)...
->的(测试,测试JS)...

->+[JS]->+[code](+[JS],测试JS)

## end
#1553, 9:


测试:...

## end
#1555, 34:
"""


"""

+A(_A,_B)->A1(_A,_B)



## end
#1557, 7:


A:...
## end
#1565, 105:
+[显示星图](,场景测试)

Nini::
+的(Nini,+m_lib)->+的(Nini,+m_idea)

m_lib:...
m_idea:...

+[结构HTML](场景测试,+[消息窗口])


## end
#1570, 294:
/*

*/


print('1233');
print(B0.height);
B0.setAttribute('height','50');

var C0=document.createElementNS("http://www.w3.org/2000/svg",'rect');
C0.setAttribute('width','50');
C0.setAttribute('height','50');
C0.setAttribute('x','100');
C0.setAttribute('y','50');

display_window.appendChild(C0)
## end
#1572, 382:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
测试内置动词:...
测试JS:...

测试定义条目:...
测试动作排序:...

测试var:...
*/

window['test_a']=1;
print(test_a);
eval('test_a=3');
print(test_a);


/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
+[复制结构](,场景测试)
*/
## end
#1574, 512:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
测试内置动词:...
测试JS:...

测试定义条目:...
测试动作排序:...

测试var:...
测试JS_v:
*/

var list_pt0=[],list_pt=[],list_km=[];

list_pt0=Nini.init(st_core.textContent);
Nini.do(`
+[JS]"b=new NetP('123');"->+[v]"b"(+[JS],+b)...

->+[JS]"print(c.info());"->+[v]"c"(+[JS],+b)
`);



/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
+[复制结构](,场景测试)
*/
## end
#1576, 612:
/*

*/

var R='%R';
var siz=[%siz],pt=[%pt];

if(siz[0]!==undefined) {
    R=siz[0];
}
if(pt.length<2) {
    pt=[0,0];
}

if(var_circle==='') {
    var_circle=document.createElementNS("http://www.w3.org/2000/svg",'circle');
    var_circle.setAttribute('r',R);
    var_circle.setAttribute('cx',pt[0]);
    var_circle.setAttribute('cy',pt[1]);
    var_circle.setAttribute('fill','#ffffff');
    var_circle.setAttribute('stroke','#000000');
    display_window.appendChild(var_circle);
} else {
    var_circle.setAttribute('r',R);
    var_circle.setAttribute('cx',pt[0]);
    var_circle.setAttribute('cy',pt[1]);
}


## end
#1578, 655:

var siz=[%siz];
var pt0=[%pt0],pt1=[%pt1];

if(siz.length>1) {
    pt0=[siz[0],siz[1]];
}
if(siz.length>3) {
    pt1=[siz[2],siz[3]];
}


if(var_line==='') {
    var_line=document.createElementNS("http://www.w3.org/2000/svg",'line');
    var_line.setAttribute('x1',pt0[0]);
    var_line.setAttribute('y1',pt0[1]);
    var_line.setAttribute('x2',pt1[0]);
    var_line.setAttribute('y2',pt1[1]);
    var_line.setAttribute('stroke','#000000');
    display_window.appendChild(var_line);
} else {
    var_line.setAttribute('x1',pt0[0]);
    var_line.setAttribute('y1',pt0[1]);
    var_line.setAttribute('x2',pt1[0]);
    var_line.setAttribute('y2',pt1[1]);
}

## end
#1580, 572:
"""
回答模板::%名词是什么?
库:...
+[新建阅读窗口](,库)
保存:...

"""

+在(Nini,在)->+[del](,+在)...
->的(在#0,回答模板)->的(在#0,库)...

->的(Nini,世界)->的(Nini,说)...

->在(_名词,_名词1)->_名词->[]{
    []:->[词语](世界,_名词),
    ->+[标题]#0(_名词,)->+[模板文本](回答模板,说)->+[.]"名词"(+[模板文本],+[标题]#0)
}->[词语](世界,_名词)->是([词语],_主语)...

->[]{
    []:->在(_主语,空间点)->空间点,->+在(_主语,+空间点)->+空间点"0,0"
}->在(_主语,空间点)...

->_名词1:
    ->[is](_名词1,临时文本)->临时文本->+[修改内容](临时文本,空间点),
    ->[is](_名词1,位置)->+[做](_主语,位置)->+[code](+[做],在位置)...
        ->+说话(+[做],说)->+[del](,+说话)...
        ->+范围(+[做],世界)->+[del](,+范围)...
        ->的(库,在位置)->在位置





## end
#1582, 882:
"""


"""

+更新意境(Nini,)->+[del](,+更新意境)...

->的(Nini,世界)->的(Nini,词典)->的(词典,名词)...
->[]{
    []=>的(世界,_意象)->_意象->的(_意象,类型)=>[]:
        ->[==]"长方形"(,类型)->的(名词,长方形)->长方形->的(长方形,定义#0)...
            ->+[做](_意象,+长方形)->+[code](+[做],定义#0)->+长方形->+[del](,+长方形),

        ->[==]"圆形"(,类型)->的(名词,圆形)->圆形->的(圆形,定义#1)...
            ->+[做](_意象,+圆形)->+[code](+[做],定义#1)->+圆形->+[del](,+圆形),

        ->[==]"线段"(,类型)->的(名词,线段)->线段->的(线段,定义#2)...
            ->+[做](_意象,+线段)->+[code](+[做],定义#2)->+线段->+[del](,+线段),

        ->[==]"立方体"(,类型)->的(名词,立方体)->立方体->的(立方体,定义#3)...
            ->+[做](_意象,+立方体)->+[code](+[做],定义#3)->+立方体->+[del](,+立方体),

        ->[==]"圆柱体"(,类型)->的(名词,圆柱体)->圆柱体->的(圆柱体,定义#4)...
            ->+[做](_意象,+圆柱体)->+[code](+[做],定义#4)->+圆柱体->+[del](,+圆柱体),

        ->[==]"球体"(,类型)->的(名词,球体)->球体->的(球体,定义#5)...
            ->+[做](_意象,+球体)->+[code](+[做],定义#5)->+球体->+[del](,+球体)
}



## end
#1584, 7:
%名词是什么?
## end
#1586, 382:
"""
回答模板::%名词是什么?

保存:...

"""

+在(Nini,在)->+[del](,+在)...
->的(在#0,回答模板)...

->的(Nini,世界)->的(Nini,说)...

->在(_名词,_名词1)->_名词->+[标题]#0(_名词,)->[]{
    []:->[词语](世界,_名词),
    ->+[模板文本](回答模板,说)->+[.]"名词"(+[模板文本],+[标题]#0)
}->[词语](世界,_名词)->是([词语],_主语)...

->[]{
    []:->在(_主语,空间点)->空间点,->+在(_主语,+空间点)->+空间点"0,0"
}->在(_主语,空间点)...

->_名词2:
    ->[is](_名词2,临时文本)->临时文本->+[修改内容](临时文本,空间点)




## end
#1588, 12:


在位置:...



## end
#1590, 393:
"""
回答模板::%名词是什么?
回答模板2::我不知道%名词在哪里

"""

+在位置(_主语,位置)->+[del](,+在位置)...
->的(在位置,回答模板)->的(在位置,回答模板2)...

->说话(+在位置,说)->范围(+在位置,世界)...

->_名词(位置,)->[]:
->[词语](世界,_名词)->是([词语],_宾语)...
    ->在(_主语,空间点)->[]{
        []:->在(_宾语,空间点#1)->+[修改内容](空间点#1,空间点),
        ->+[标题]#0(_名词,)->+[模板文本](回答模板2,说)->+[.]"名词"(+[模板文本],+[标题]#0)
    },

->+[标题]#0(_名词,)->+[模板文本](回答模板,说)->+[.]"名词"(+[模板文本],+[标题]#0)






## end
#1592, 10:
我不知道%名词在哪里
## end
#1594, 7:
%名词是什么?
## end
#1596, 418:
"""
回答模板::%名词是什么?
库:...
+[新建阅读窗口](,库)

"""

+朝向(Nini,朝向)->+[del](,+朝向)...
->的(朝向#0,回答模板)->的(朝向#0,库)...

->的(Nini,世界)->的(Nini,说)...

->朝向(_名词,_名词1)->_名词->[]{
    []:->[词语](世界,_名词),
    ->+[标题]#0(_名词,)->+[模板文本](回答模板,说)->+[.]"名词"(+[模板文本],+[标题]#0)
}->[词语](世界,_名词)->是([词语],_主语)...

->_名词1:
    ->+[做](_主语,朝向)->+[code](+[做],操作)...
        ->+说话(+[做],说)->+[del](,+说话)->+范围(+[做],世界)->+[del](,+范围)...
        ->的(库,操作)->操作





## end
#1598, 7:
%名词是什么?
## end
#1600, 26:

操作:...
操作的"距离"替换为"朝向"




## end
#1602, 709:
"""
回答模板::%名词是什么?
回答模板2::我不知道%名词在哪里
库:...
JS代码:...
JS代码2:...

"""

+操作(_主语,朝向)->+[del](,+操作)...
->的(操作,JS代码)->的(操作,JS代码2)...
->的(操作,回答模板)->的(操作,回答模板2)...

->说话(+操作,说)->范围(+操作,世界)...

->+[JS]->[]{
    []:->+[v]"var_shape"(+[JS],_主语),->+[.]"var_shape"(+[JS],+[临时文本])
}...

->朝向(,_名词):
->[is](_名词,临时文本)->临时文本(,)...
    ->+[code](+[JS],JS代码2)->+[.]"angle"(+[JS],临时文本),
->[is](_名词,位置)->位置(,)...
    ->+[code](+[JS],JS代码)->+[.]"pt"(+[JS],位置),

->[词语](世界,_名词)->是([词语],_宾语)...
    ->[]{
        []:->在(_宾语,空间点#1)...
            ->+[code](+[JS],JS代码)->+[.]"pt"(+[JS],空间点#1),

        ->+[标题]#0(_名词,)->+[模板文本](回答模板2,说)->+[.]"名词"(+[模板文本],+[标题]#0)
    },

->+[标题]#0(_名词,)->+[模板文本](回答模板,说)->+[.]"名词"(+[模板文本],+[标题]#0)






## end
#1604, 7:
%名词是什么?
## end
#1606, 10:
我不知道%名词在哪里
## end
#1610, 188:
/*

*/

var pt=[%pt];

try {
    if(var_shape==="") {
        world_3D.cameraLookAt_pt(pt);
    }
    else {
        world_3D.lookAt_pt(var_shape,pt);
    }
} catch(e) {
    print(e);
}



## end
#1611, 4:
1616
## end
#1613, 4:
1617
## end
#1615, 4:
1667
## end
#1618, 6180:
/*
+[J函数](,ThreeJS)

three(库)::https://stemkoski.github.io/Three.js/js/Three.js
OrbitControls(库)::https://stemkoski.github.io/Three.js/js/OrbitControls.js
three->库(three,)->+[del](,库)->+[del](,three)

保存:...
lookAt
*/


// MAIN

// standard global variables
var container, scene, camera, renderer, controls, stats;
var cube;

class Scene3D {
    constructor(ID='') {
        this.m_ID=ID;
        this.m_container='';
        this.m_scene='';
        this.m_camera='';
        this.m_render='';
        this.m_control='';
    }

    init(ID='') {
        if(ID!=="") {
            this.m_ID=ID;
            this.m_container = document.getElementById(this.m_ID);
        }
        else {
            this.m_container=document.body;
        }
        if(this.m_container===null) {
            this.m_container=document.body;
        }

        // SCENE
        this.m_scene = new THREE.Scene();
    
        // CAMERA
        var SCREEN_WIDTH = this.m_container.offsetWidth; 
        var SCREEN_HEIGHT = this.m_container.offsetHeight;
        var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
        this.m_camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
        this.m_scene.add(this.m_camera);
        this.m_camera.position.set(0,150,400);
        this.m_camera.lookAt(this.m_scene.position);
        //this.m_camera.lookAt(new THREE.Vector3(0,600,0));
        //this.m_camera.lookAt(0,600,0);
    
        //RENDER
        this.m_renderer = new THREE.WebGLRenderer( {antialias:true} );
        this.m_renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
        
        this.m_container.appendChild( this.m_renderer.domElement );
    
        // CONTROLS
        this.m_controls = new THREE.OrbitControls( this.m_camera, this.m_renderer.domElement );
        // LIGHT
        var light = new THREE.PointLight(0xffffff);
        light.position.set(0,150,100);
        this.m_scene.add(light);
    
        // FLOOR
        var floorTexture = new THREE.ImageUtils.loadTexture( 'https://stemkoski.github.io/Three.js/images/checkerboard.jpg' );
        floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; 
        floorTexture.repeat.set( 10, 10 );
        var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );
    
        var floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
        var floor = new THREE.Mesh(floorGeometry, floorMaterial);
        floor.position.y = -0.5;
        floor.rotation.x = Math.PI / 2;
        this.m_scene.add(floor);
    
        // SKYBOX/FOG
        var skyBoxGeometry = new THREE.CubeGeometry( 10000, 10000, 10000 );
        var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0x9999ff, side: THREE.BackSide } );
        var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
        this.m_scene.add(skyBox);
    }

    update() {
        this.m_renderer.render( this.m_scene, this.m_camera );
        this.m_controls.update();
    }

    addBox(L,W,H,x,y,z) {
        var material = new THREE.MeshNormalMaterial();
        var cubeGeometry = new THREE.CubeGeometry( 1, 1, 1 );
        var cube = new THREE.Mesh( cubeGeometry, material );
        cube.position.set(x,y,z);
        cube.scale.x=L;
        cube.scale.y=W;
        cube.scale.z=H;
        this.m_scene.add( cube );
        return cube;
    }

    addCylinder(R,H,x,y,z) {
        var material = new THREE.MeshNormalMaterial();
        var geometry = new THREE.CylinderGeometry( 1,1,1,80,4 );
        var shape = new THREE.Mesh( geometry, material );
        shape.position.set(x, y, z);
        shape.scale.x=R;
        shape.scale.y=H;
        shape.scale.z=R;
        this.m_scene.add( shape );
        return shape;
    }

    addSphere(R,x,y,z) {
        var material = new THREE.MeshNormalMaterial();
        var geometry = new THREE.SphereGeometry( 1,32,16 );
        var shape = new THREE.Mesh( geometry, material );
        shape.scale.x=R;
        shape.scale.y=R;
        shape.scale.z=R;
        shape.position.set(x, y, z);
        this.m_scene.add( shape );
        return shape;
    }

    setRotationByEuler(shape,alpha,beta,gamma) {
        shape.setRotationFromEuler(new THREE.Euler(0,0,0,'XYZ'));
        shape.rotateZ(alpha/180*Math.PI);
        shape.rotateX(beta/180*Math.PI);
        shape.rotateZ(gamma/180*Math.PI);
        return shape;
    }

    rotateInWorld(shape,pt,angle,axis='Z') {
        var T=new THREE.Matrix4().identity();
        T=T.multiply(new THREE.Matrix4().makeTranslation(pt[0],pt[1],pt[2]));
        if(axis==='X') {
            T=T.multiply(new THREE.Matrix4().makeRotationX(angle/180*Math.PI));
        }
        else if(axis==='Y') {
            T=T.multiply(new THREE.Matrix4().makeRotationY(angle/180*Math.PI));
        }
        else if(axis==='Z') {
            T=T.multiply(new THREE.Matrix4().makeRotationZ(angle/180*Math.PI));
        }
        T=T.multiply(new THREE.Matrix4().makeTranslation(-pt[0],-pt[1],-pt[2]));
        
        shape.updateMatrix();
        shape.applyMatrix(T);
        return shape;
    }

    lookAt_pt(shape,pt) {
        shape.lookAt(new THREE.Vector3(pt[0],pt[1],pt[2]));
        return shape;
    }

    lookAt(shape,shape0) {
        shape.lookAt(shape0.position);
        return shape;
    }

    cameraLookAt_pt(pt) {
        this.lookAt_pt(this.m_camera,pt);
        this.m_controls.center.x=pt[0];
        this.m_controls.center.y=pt[1];
        this.m_controls.center.z=pt[2];
    }

    cameraLookAt(shape) {
        this.lookAt(this.m_camera,shape);
        this.m_controls.center.x=shape.position.x;
        this.m_controls.center.y=shape.position.y;
        this.m_controls.center.z=shape.position.z;
    }

}

var world_3D=new Scene3D();

function animate_3D() {
    requestAnimationFrame(animate_3D);
    world_3D.update();
}

function printMatrix(matrix) {
    var list_val=matrix.elements;
    var str_line='';
    for(var i=0;i<4;i++) {
        for(var j=0;j<4;j++) {
            str_line+=`${list_val[j+i*4]}, `;
        }
        print(str_line);
        str_line='';
    }
    print();
}


/*
例子:...
测试:...
+[新建阅读窗口](,测试)
+[J函数](,ThreeJS)
*/
## end
#1621, 56:
https://stemkoski.github.io/Three.js/js/OrbitControls.js
## end
#1624, 48:
https://stemkoski.github.io/Three.js/js/Three.js
## end
#1627, 3306:
/*
+[J函数](,ThreeJS)

three(库)::https://stemkoski.github.io/Three.js/js/Three.js
OrbitControls(库)::https://stemkoski.github.io/Three.js/js/OrbitControls.js
three->库(three,)->+[del](,库)->+[del](,three)

*/


// MAIN

// standard global variables
var container, scene, camera, renderer, controls, stats;
var cube;

init();

// FUNCTIONS 		
function init() 
{
	// SCENE
	scene = new THREE.Scene();
	// CAMERA
	var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;
	var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
	camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
	scene.add(camera);
	camera.position.set(0,150,400);
	camera.lookAt(scene.position);	
	// RENDERER
	//if ( Detector.webgl )
		renderer = new THREE.WebGLRenderer( {antialias:true} );
	//else
		//renderer = new THREE.CanvasRenderer(); 
	renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	//container = document.getElementById( 'ThreeJS' );
	//container.appendChild( renderer.domElement );
    document.body.appendChild( renderer.domElement );
	// EVENTS
	//THREEx.WindowResize(renderer, camera);
	//THREEx.FullScreen.bindKey({ charCode : 'm'.charCodeAt(0) });
	// CONTROLS
	controls = new THREE.OrbitControls( camera, renderer.domElement );
	// LIGHT
	var light = new THREE.PointLight(0xffffff);
	light.position.set(0,150,100);
	scene.add(light);
	// FLOOR
	var floorTexture = new THREE.ImageUtils.loadTexture( 'https://stemkoski.github.io/Three.js/images/checkerboard.jpg' );
	floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; 
	floorTexture.repeat.set( 10, 10 );
	var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );

	var floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
	var floor = new THREE.Mesh(floorGeometry, floorMaterial);
	floor.position.y = -0.5;
	floor.rotation.x = Math.PI / 2;
	scene.add(floor);
	// SKYBOX/FOG
	var skyBoxGeometry = new THREE.CubeGeometry( 10000, 10000, 10000 );
	var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0x9999ff, side: THREE.BackSide } );
	var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
	scene.add(skyBox);
	
	////////////
	// CUSTOM //
	////////////

	var material = new THREE.MeshNormalMaterial();

	var sphereGeometry = new THREE.SphereGeometry(50, 32, 16);
	var sphere = new THREE.Mesh( sphereGeometry, material );
	sphere.position.set(-60, 55, 0);
	scene.add( sphere );		

	var outlineMaterial1 = new THREE.MeshBasicMaterial( { color: 0xff0000, side: THREE.BackSide } );
	var outlineMesh1 = new THREE.Mesh( sphereGeometry, outlineMaterial1 );
	outlineMesh1.position = sphere.position;
	outlineMesh1.scale.multiplyScalar(1.05);
	scene.add( outlineMesh1 );
	
	var cubeGeometry = new THREE.CubeGeometry( 80, 80, 80 );
	var cube = new THREE.Mesh( cubeGeometry, material );
	cube.position.set(60, 60, 0);
	scene.add( cube );		
	

	var geometry = new THREE.CylinderGeometry(30,30,80,20,4);
	var shape = new THREE.Mesh( geometry, material );
	shape.position.set(60, 60, 160);
	scene.add( shape );		
}

function animate() {
    //requestAnimationFrame(animate);
    render();
    update();
}

function update() {
    controls.update();
}

function render() {
    renderer.render( scene, camera );
}

animate();
//render();
//update();




## end
#1629, 580:
/*
+[J函数](,测试)

参考Matrix::https://threejs.org/docs/#api/en/math/Matrix4
参考Vector::https://threejs.org/docs/#api/en/math/Vector3

测试lookAt:...
测试Eulers:...
测试Matrix:...
测试rotationWorld:...
(applyMatrix恐怕是乘以矩阵的意思)
测试相机lookAt:...
(旋转机位固定看点是另外的东西)
测试ctrl性质:...
测试cameraLookAt:...

保存:...

*/


world_3D.init();
var shape0=world_3D.addBox(100,100,10,100,10,0);
var shape1=world_3D.addCylinder(5,500,0,65,0);
var shape2=world_3D.addSphere(10,0,65,0);



var angle=120;
var pt=[100,0,0];
world_3D.rotateInWorld(shape0,pt,angle,'Y');

animate_3D();
world_3D.update();



/*
+[J函数](,测试)
*/
## end
#1633, 4058:
/*
+[J函数](,ThreeJS)

three(库)::https://stemkoski.github.io/Three.js/js/Three.js
OrbitControls(库)::https://stemkoski.github.io/Three.js/js/OrbitControls.js
three->库(three,)->+[del](,库)->+[del](,three)

保存:
*/


// MAIN

// standard global variables
var container, scene, camera, renderer, controls, stats;
var cube;

class Scene3D {
    constructor(ID='') {
        this.m_ID=ID;
        this.m_container='';
        this.m_scene='';
        this.m_camera='';
        this.m_render='';
        this.m_control='';
    }

    init(ID='') {
        if(ID!=="") {
            this.m_ID=ID;
        }
        try {
            this.m_container = document.getElementById(this.m_ID);
        } catch {
            this.m_container=document.body;
        }

        // SCENE
        this.m_scene = new THREE.Scene();
    
        // CAMERA
        var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;
        var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
        this.m_camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
        this.m_scene.add(this.m_camera);
        this.m_camera.position.set(0,150,400);
        this.m_camera.lookAt(this.m_scene.position);
    
        //RENDER
        this.m_renderer = new THREE.WebGLRenderer( {antialias:true} );
        this.m_renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
        
        var container;
        try {
            container = document.getElementById(this.m_ID);
            container.appendChild( this.m_renderer.domElement );
        } catch {
            document.body.appendChild( this.m_renderer.domElement );
        }
    
        // CONTROLS
        this.m_controls = new THREE.OrbitControls( this.m_camera, this.m_renderer.domElement );
        // LIGHT
        var light = new THREE.PointLight(0xffffff);
        light.position.set(0,150,100);
        this.m_scene.add(light);
    
        // FLOOR
        var floorTexture = new THREE.ImageUtils.loadTexture( 'https://stemkoski.github.io/Three.js/images/checkerboard.jpg' );
        floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; 
        floorTexture.repeat.set( 10, 10 );
        var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );
    
        var floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
        var floor = new THREE.Mesh(floorGeometry, floorMaterial);
        floor.position.y = -0.5;
        floor.rotation.x = Math.PI / 2;
        this.m_scene.add(floor);
    
        // SKYBOX/FOG
        var skyBoxGeometry = new THREE.CubeGeometry( 10000, 10000, 10000 );
        var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0x9999ff, side: THREE.BackSide } );
        var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
        this.m_scene.add(skyBox);
    }

    update() {
        this.m_renderer.render( this.m_scene, this.m_camera );
        this.m_controls.update();
    }

    addBox(L,W,H,x,y,z) {
        var material = new THREE.MeshNormalMaterial();
        var cubeGeometry = new THREE.CubeGeometry( L, W, H );
        var cube = new THREE.Mesh( cubeGeometry, material );
        cube.position.set(x, y, z);
        this.m_scene.add( cube );
        return cube;
    }

    addCylinder(R,H,x,y,z) {
        var material = new THREE.MeshNormalMaterial();
        var geometry = new THREE.CylinderGeometry( R,R,H,80,4 );
        var shape = new THREE.Mesh( geometry, material );
        shape.position.set(x, y, z);
        this.m_scene.add( shape );
        return shape;
    }

    addSphere(R,x,y,z) {
        var material = new THREE.MeshNormalMaterial();
        var geometry = new THREE.SphereGeometry( R,32,16 );
        var shape = new THREE.Mesh( geometry, material );
        shape.position.set(x, y, z);
        this.m_scene.add( shape );
        return shape;
    }


}

var world_3D=new Scene3D();

function animate_3D() {
    requestAnimationFrame(animate_3D);
    world_3D.update();
}


/*
例子:...
测试:...
+[新建阅读窗口](,例子)
+[J函数](,ThreeJS)
*/
## end
#1634, 715:

var siz=[%siz],pt=[%pt];
var W='%W';
var L='%L';

if(siz[0]!==undefined) {
    W=siz[0];
}
if(siz[1]!==undefined) {
    L=siz[1];
}
if(pt.length<2) {
    pt=[0,0];
}

if(var_rect==='') {
    var_rect=document.createElementNS("http://www.w3.org/2000/svg",'rect');
    var_rect.setAttribute('width',W);
    var_rect.setAttribute('height',L);
    var_rect.setAttribute('x',pt[0]);
    var_rect.setAttribute('y',pt[1]);
    var_rect.setAttribute('fill','#ffffff');
    var_rect.setAttribute('stroke','#000000');
    display_window.appendChild(var_rect);
} else {
    var_rect.setAttribute('width',W);
    var_rect.setAttribute('height',L);
    var_rect.setAttribute('x',pt[0]);
    var_rect.setAttribute('y',pt[1]);
}

## end
#1636, 632:
"""
[eq](+[定义],定义)
JS代码:...
+[新建阅读窗口](,JS代码)

"""

+定义(_长方形,长方形)->+[del](,+定义)...
->的(定义,JS代码)...

->[]{
    []:->的(_长方形,类型)->类型->+[修改内容]"长方形"(,类型),
        ->+的(_长方形,+类型)->+类型"长方形"
}...

->+[JS]->+[code](+[JS],JS代码)...
->+[v]"var_rect"(+[JS],_长方形)...
->+[.]"siz"(+[JS],+[临时文本])->[m_text](长方形,+[临时文本])...
->[]{
    []:->的(_长方形,长度)->长度->+[o]"L"(+[JS],长度),
        ->+的(_长方形,+长度)->+长度"1"->+[o]"L"(+[JS],+长度)
}...
->[]{
    []:->的(_长方形,宽度)->宽度->+[o]"W"(+[JS],宽度),
        ->+的(_长方形,+宽度)->+宽度"1"->+[o]"W"(+[JS],+宽度)
}...
->[]{
    []:->在(_长方形,空间点)->空间点->+[o]"pt"(+[JS],空间点),
        ->+在(_长方形,+空间点)->+空间点"0,0"->+[o]"pt"(+[JS],+空间点)
}



## end
#1638, 46:


定义:...
定义的"圆形"替换为"长方形"
定义的"matlab"替换为"JS"



## end
#1641, 267:
/*
+[J函数](,测试)

测试lookAt:
*/


world_3D.init();
var shape0=world_3D.addBox(100,10,100,100,10,0);
var shape1=world_3D.addCylinder(5,500,0,10,0);
var shape2=world_3D.addSphere(10,0,65,0);

shape0.lookAt(new THREE.Vector3(-100,20,-100))

animate_3D();
world_3D.update();
## end
#1643, 480:
/*
+[J函数](,测试)

测试lookAt:...
*/


world_3D.init();
var shape0=world_3D.addBox(100,100,10,100,10,0);
var shape1=world_3D.addCylinder(5,500,0,10,0);
var shape2=world_3D.addSphere(10,0,65,0);

alpha=0;
beta=0;
gamma=0;
//shape0.setRotationFromEuler(new THREE.Euler(alpha/180*Math.PI,beta/180*Math.PI,gamma/180*Math.PI,'XYZ'))
shape0.rotateZ(alpha/180*Math.PI);
shape0.rotateX(beta/180*Math.PI);
shape0.rotateZ(gamma/180*Math.PI);


animate_3D();
world_3D.update();

/*
+[J函数](,测试)
*/
## end
#1645, 45:
https://threejs.org/docs/#api/en/math/Matrix4
## end
#1647, 758:
/*
+[J函数](,测试)

参考Matrix::https://threejs.org/docs/#api/en/math/Matrix4

测试lookAt:...
测试Eulers:...
*/


world_3D.init();
var shape0=world_3D.addBox(100,100,10,100,10,0);
var shape1=world_3D.addCylinder(5,500,0,65,0);
var shape2=world_3D.addSphere(10,0,65,0);

var angle=45;
world_3D.setRotationByEuler(shape1,45,45,0)

//shape1.rotateOnWorldAxis(THREE.Vector3(0,0,1),angle/180*Math.PI);
//shape1.rotateZ(angle/180*Math.PI);
//shape1.rotateY(angle/180*Math.PI);

//shape0.rotation.y+=1/4*Math.PI;

shape1.updateMatrix();
print(new THREE.Matrix4().makeTranslation(0,0,100));
printMatrix(shape0.matrix);
shape0.matrix.makeRotationX(1/4*Math.PI);
printMatrix(shape1.matrix);
shape0.applyMatrix(shape1.matrix)

animate_3D();
world_3D.update();


/*
+[J函数](,测试)
*/
## end
#1649, 809:
/*
+[J函数](,测试)

参考Matrix::https://threejs.org/docs/#api/en/math/Matrix4

测试lookAt:...
测试Eulers:...
保存:...

applyMatrix恐怕是乘以矩阵的意思
*/


world_3D.init();
var shape0=world_3D.addBox(100,100,10,100,10,0);
var shape1=world_3D.addCylinder(5,500,0,65,0);
var shape2=world_3D.addSphere(10,0,65,0);

/*
+[J函数](,测试)
*/

var angle=45;
//world_3D.setRotationByEuler(shape0,45,45,0)

var pt=[100,0,0];
var T=new THREE.Matrix4().identity();
T=T.multiply(new THREE.Matrix4().makeTranslation(-pt[0],-pt[1],-pt[2]));
T=T.multiply(new THREE.Matrix4().makeRotationY(angle/180*Math.PI));
T=T.multiply(new THREE.Matrix4().makeTranslation(pt[0],pt[1],pt[2]));

shape0.updateMatrix();
printMatrix(T);
printMatrix(shape0.matrix);
shape0.applyMatrix(T);
printMatrix(shape0.matrix);

animate_3D();
world_3D.update();


/*
+[J函数](,测试)
*/
## end
#1651, 458:
/*
+[J函数](,测试)

参考Matrix::https://threejs.org/docs/#api/en/math/Matrix4

测试lookAt:...
测试Eulers:...
测试Matrix:...
测试rotationWorld:...
(applyMatrix恐怕是乘以矩阵的意思)

保存:...

*/


world_3D.init();
var shape0=world_3D.addBox(100,100,10,100,10,0);
var shape1=world_3D.addCylinder(5,500,0,65,0);
var shape2=world_3D.addSphere(10,0,65,0);



var angle=90;
var pt=[100,0,0];
world_3D.rotateInWorld(shape0,pt,angle,'Y');

animate_3D();
world_3D.update();


/*
+[J函数](,测试)
*/
## end
#1653, 685:
/*
+[J函数](,测试)

参考Matrix::https://threejs.org/docs/#api/en/math/Matrix4
参考Vector::https://threejs.org/docs/#api/en/math/Vector3

测试lookAt:...
测试Eulers:...
测试Matrix:...
测试rotationWorld:...
(applyMatrix恐怕是乘以矩阵的意思)

保存:...

*/


world_3D.init();
var shape0=world_3D.addBox(100,100,10,100,10,0);
var shape1=world_3D.addCylinder(5,500,0,365,0);
var shape2=world_3D.addSphere(10,0,365,0);
var shape3=world_3D.m_camera;



var angle=90;
var pt=[100,0,0];
world_3D.rotateInWorld(shape0,pt,angle,'Y');
world_3D.lookAt(shape0,shape1);
//shape3.position.set(100,10,1000);
world_3D.lookAt(shape3,shape1);
//world_3D.m_camera.lookAt(0,0,1000)

//animate_3D();
world_3D.update();


/*
+[J函数](,测试)
*/
## end
#1655, 597:
/*
+[J函数](,测试)

参考Matrix::https://threejs.org/docs/#api/en/math/Matrix4
参考Vector::https://threejs.org/docs/#api/en/math/Vector3

测试lookAt:...
测试Eulers:...
测试Matrix:...
测试rotationWorld:...
(applyMatrix恐怕是乘以矩阵的意思)
测试相机lookAt:...
(旋转机位固定看点是另外的东西)

保存:...

*/


world_3D.init();
var shape0=world_3D.addBox(100,100,10,100,10,0);
var shape1=world_3D.addCylinder(5,500,0,365,0);
var shape2=world_3D.addSphere(10,0,365,0);
var shape3=world_3D.m_camera;

var ctrl=world_3D.m_controls;

for(var key in ctrl) {
    print(key);
}
print(ctrl.center.z)


//animate_3D();
//world_3D.update();


/*
+[J函数](,测试)
*/
## end
#1656, 4:
1736
## end
#1658, 331:
/*

*/


var siz=[%siz],pt=[%pt];
var R='%R';

if(siz[0]!==undefined) {
    R=siz[0];
}
if(pt.length<3) {
    pt=[0,0,0];
}

if(var_ball==='') {
    var_ball=world_3D.addSphere(R,pt[0],pt[1],pt[2]);
} else {
    var_ball.position.set(pt[0],pt[1],pt[2]);
    var_ball.scale.x=R;
    var_ball.scale.y=R;
    var_ball.scale.z=R;
}




## end
#1660, 516:
"""
[eq](+[定义],定义)
JS代码:...
+[新建阅读窗口](,JS代码)

"""

+定义(_球体,球体)->+[del](,+定义)...
->的(定义,JS代码)...

->[]{
    []:->的(_球体,类型)->类型->+[修改内容]"球体"(,类型),
        ->+的(_球体,+类型)->+类型"球体"
}...

->+[JS]->+[code](+[JS],JS代码)...
->+[v]"var_ball"(+[JS],_球体)...
->+[.]"siz"(+[JS],+[临时文本])->[m_text](球体,+[临时文本])...
->[]{
    []:->的(_球体,半径)->半径->+[o]"R"(+[JS],半径),
        ->+的(_球体,+半径)->+半径"1"->+[o]"R"(+[JS],+半径)
}...
->[]{
    []:->在(_球体,空间点)->空间点->+[o]"pt"(+[JS],空间点),
        ->+在(_球体,+空间点)->+空间点"0,0,0"->+[o]"pt"(+[JS],+空间点)
}



## end
#1662, 46:


定义:...
定义的"立方体"替换为"球体"
定义的"matlab"替换为"JS"



## end
#1664, 432:
/*

*/


var siz=[%siz],pt=[%pt];
var L='%L';
var W='%W';
var H='%H';

if(siz[0]!==undefined) {
    L=siz[0];
}
if(siz[1]!==undefined) {
    W=siz[1];
}
if(siz[2]!==undefined) {
    H=siz[2];
}
if(pt.length<3) {
    pt=[0,0,0];
}

if(var_box==='') {
    var_box=world_3D.addBox(L,W,H,pt[0],pt[1],pt[2]);
} else {
    var_box.position.set(pt[0],pt[1],pt[2]);
    var_box.scale.x=L;
    var_box.scale.y=W;
    var_box.scale.z=H;
}




## end
#1666, 739:
"""
[eq](+[定义],定义)
JS代码:...
+[新建阅读窗口](,JS代码)

"""

+定义(_立方体,立方体)->+[del](,+定义)...
->的(定义,JS代码)...

->[]{
    []:->的(_立方体,类型)->类型->+[修改内容]"立方体"(,类型),
        ->+的(_立方体,+类型)->+类型"立方体"
}...

->+[JS]->+[code](+[JS],JS代码)...
->+[v]"var_box"(+[JS],_立方体)...
->+[.]"siz"(+[JS],+[临时文本])->[m_text](立方体,+[临时文本])...
->[]{
    []:->的(_立方体,长度)->长度->+[o]"L"(+[JS],长度),
        ->+的(_立方体,+长度)->+长度"1"->+[o]"L"(+[JS],+长度)
}...
->[]{
    []:->的(_立方体,宽度)->宽度->+[o]"W"(+[JS],宽度),
        ->+的(_立方体,+宽度)->+宽度"1"->+[o]"W"(+[JS],+宽度)
}...
->[]{
    []:->的(_立方体,高度)->高度->+[o]"H"(+[JS],高度),
        ->+的(_立方体,+高度)->+高度"1"->+[o]"H"(+[JS],+高度)
}...
->[]{
    []:->在(_立方体,空间点)->空间点->+[o]"pt"(+[JS],空间点),
        ->+在(_立方体,+空间点)->+空间点"0,0,0"->+[o]"pt"(+[JS],+空间点)
}



## end
#1668, 47:


定义:...
定义的"长方形"替换为"立方体"
定义的"matlab"替换为"JS"



## end
#1670, 183:
/*

*/

var angle='%angle';
var pt0=[%pt0];
var ans;

world_3D.rotateInWorld(var_shape,pt0,+angle,'%type_str');
ans=[var_shape.position.x,var_shape.position.y,var_shape.position.z];


## end
#1672, 10:
我不知道%名词在哪里
## end
#1673, 7:
%名词是什么?
## end
#1678, 945:
"""
回答模板::%名词是什么?
回答模板2::我不知道%名词在哪里
库:...
JS代码:...
+[新建阅读窗口](,JS代码)

"""

+操作(_主语,旋转)->+[del](,+操作)...
->的(操作,JS代码)->的(操作,回答模板)->的(操作,回答模板2)...

->说话(+操作,说)->范围(+操作,世界)...

->旋转(,_名词)->沿(旋转,_名词3)...

->在(_主语,空间点#0)...
->+[JS](,空间点#0)->+[code](+[JS],JS代码)->+[v]"var_shape"(+[JS],_主语)...

->[]{
    []:->[is](_名词3,X方向)->X方向->+[.]"type_str"(+[JS],+[临时文本]#X)->+[临时文本]#X"X",
    ->[is](_名词3,Y方向)->Y方向->+[.]"type_str"(+[JS],+[临时文本]#Y)->+[临时文本]#Y"Y",
    ->[is](_名词3,Z方向)->Z方向->+[.]"type_str"(+[JS],+[临时文本]#Z)->+[临时文本]#Z"Z"
}...

->[]{
    []:->绕(旋转,_名词2)->_名词2->[]{
        []:->[is](_名词2,临时文本)->临时文本->+[.]"pt0"(+[JS],临时文本),
        ->[词语](世界,_名词2)->是([词语],_宾语)->[]{
            []:->在(_宾语,空间点)->空间点->+[.]"pt0"(+[JS],空间点),
            ->+[标题](_名词2,)->+[模板文本](回答模板2,说)->+[.]"名词"(+[模板文本],+[标题])
        },
        ->+[标题](_名词2,)->+[模板文本](回答模板,说)->+[.]"名词"(+[模板文本],+[标题])
    },
    ->在(_主语,空间点)->空间点->+[.]"pt0"(+[JS],空间点)
}...

->+[.]"angle"(+[JS],_名词)

## end
#1680, 26:

操作:...
操作的"距离"替换为"旋转"




## end
#1681, 7:
%名词是什么?
## end
#1684, 547:
"""
回答模板::%名词是什么?
回答模板2::%名词在哪里?
库:...
+[新建阅读窗口](,库)

"""

+旋转(Nini,旋转)->+[del](,+旋转)...
->的(旋转#0,回答模板)->的(旋转#0,回答模板2)->的(旋转#0,库)...

->的(Nini,世界)->的(Nini,说)...

->旋转(_名词,_名词1)->_名词->[]{
    []:->[词语](世界,_名词),
    ->+[标题]#0(_名词,)->+[模板文本](回答模板,说)->+[.]"名词"(+[模板文本],+[标题]#0)
}->[词语](世界,_名词)->是([词语],_主语)...

->[]{
    []:->在(_主语,空间点)->空间点,
    ->+[标题](_名词,)->+[模板文本](回答模板2,说)->+[.]"名词"(+[模板文本],+[标题])
}...

->_名词1:
    ->+[做](_主语,旋转)->+[code](+[做],操作)...
        ->+说话(+[做],说)->+[del](,+说话)->+范围(+[做],世界)->+[del](,+范围)...
        ->的(库,操作)->操作





## end
#1687, 599:
/*
+[J函数](,测试)

参考Matrix::https://threejs.org/docs/#api/en/math/Matrix4
参考Vector::https://threejs.org/docs/#api/en/math/Vector3

测试lookAt:...
测试Eulers:...
测试Matrix:...
测试rotationWorld:...
(applyMatrix恐怕是乘以矩阵的意思)
测试相机lookAt:...
(旋转机位固定看点是另外的东西)
测试ctrl性质:...
测试cameraLookAt:...

保存:...

*/


world_3D.init();
var shape0=world_3D.addBox(100,100,10,100,100/2,0);
var shape1=world_3D.addCylinder(5,365,0,365/2,0);
var shape2=world_3D.addSphere(10,0,365,0);
var shape3=world_3D.m_camera;

var ctrl=world_3D.m_controls;
world_3D.cameraLookAt(shape0);



animate_3D();
world_3D.update();


/*
+[J函数](,测试)
*/
## end
#1689, 137:
/*

*/

var angle=[%angle];

try {
    world_3D.setRotationByEuler(var_shape,angle[0],angle[1],angle[2]);
} catch(e) {
    print(e);
}



## end
#1690, 7:
%名词是什么?
## end
#1691, 7:
%名词是什么?
## end
#1692, 10:
我不知道%名词在哪里
## end
#1694, 89:
/*

*/

var dr=[%dr],pt=[%pt];
var ans;

for(var i in pt) {
    pt[i]+=dr[i];
}
ans=pt;


## end
#1699, 502:
"""
回答模板::%名词是什么?
回答模板2::我不知道%名词在哪里
库:...
JS代码:...

"""

+操作(_主语,距离)->+[del](,+操作)...
->的(操作,JS代码)->的(操作,回答模板)->的(操作,回答模板2)...

->说话(+操作,说)->范围(+操作,世界)...

->距离(,_名词)->为(距离,_名词2)->[]:
->[词语](世界,_名词)->是([词语],_宾语)...
    ->在(_主语,空间点)->[]{
        []:->在(_宾语,空间点#1)->+[JS](,空间点)->+[code](+[JS],JS代码)...
            ->+[.]"pt"(+[JS],空间点#1)->+[.]"dr"(+[JS],_名词2),

        ->+[标题]#0(_名词,)->+[模板文本](回答模板2,说)->+[.]"名词"(+[模板文本],+[标题]#0)
    },

->+[标题]#0(_名词,)->+[模板文本](回答模板,说)->+[.]"名词"(+[模板文本],+[标题]#0)






## end
#1701, 12:

操作:...





## end
#1704, 493:
"""
回答模板::%名词是什么?
库:...
+[新建阅读窗口](,库)

"""

+距离(Nini,距离)->+[del](,+距离)...
->的(距离#0,回答模板)->的(距离#0,库)...

->的(Nini,世界)->的(Nini,说)...

->距离(_名词,_名词1)->_名词->[]{
    []:->[词语](世界,_名词),
    ->+[标题]#0(_名词,)->+[模板文本](回答模板,说)->+[.]"名词"(+[模板文本],+[标题]#0)
}->[词语](世界,_名词)->是([词语],_主语)...

->[]{
    []:->在(_主语,空间点)->空间点,->+在(_主语,+空间点)->+空间点"0,0"
}->在(_主语,空间点)...

->_名词1:
    ->+[做](_主语,距离)->+[code](+[做],操作)...
        ->+说话(+[做],说)->+[del](,+说话)->+范围(+[做],世界)->+[del](,+范围)...
        ->的(库,操作)->操作





## end
#1707, 7:
%名词在哪里?
## end
#1711, 5:
%三维画板
## end
#1713, 5:
%网页画板
## end
#1715, 14:
<u>哈哈哈哈!!!</u>
## end
#1717, 824:
/*
+[J函数](,测试)

测试listFromPt:...
测试run_code:...
测试do:...
测试缩写:...
测试listPt2poolPt:...

测试make:...
测试lib:...
测试等于:...
测试act1:...
测试act2:...

测试内置条目:...
测试内置条目2:...

测试核心结构:...
测试内置动词:...
测试JS:...

测试定义条目:...
测试动作排序:...

测试var:...
测试JS_v:...

测试m_text保持问题:...
(原因是从 st_core.textContent 获取内容的时候, <u>被删除了...)
*/

var list_pt=[];

Nini.init(st_core.innerHTML);
//Nini.init(st_core.textContent);
print(st_core.textContent);
print(st_core.innerHTML);

alert(st_core.textContent);
alert(st_core.innerHTML);

list_pt=listFromPt(Nini.m_lib);
printPtList(list_pt);

Nini.do(`+[消息窗口]"<u>!!!</u>"`);
Nini.do(`+[修改内容]"<u>!!!</u>"(,+[消息窗口])`);
Nini.do(`+[测试]->+[消息窗口]"<u>!!!</u>"`);

printPtList(list_pt);
print(list_pt[0].m_text,list_pt[0].m_text.length);



/*
场景测试(核心结构):...
+[显示星图](,场景测试)
+[新建阅读窗口](,场景测试)
+[J函数](,测试)
+[复制结构](,场景测试)
*/
## end
#1718, 4:
1720
## end
### 结束