当前内景#0"+当前内景->m_readPtr(editor,_)->.[i](list,_)->m_pool(_pool,list)->+是(+当前内景,_pool)"(,)
输入变量#1"+输入变量(,_输入)->_输入(,_变量)->[]{_变量->+是(+输入变量,_变量)}:->[],
->>+是(+输入变量,_输入)"(,)
段落#2"
+段落(,_段落)->editor->m_readPtr(editor,_pt)->的(_pt,_段落)
"(,)
符号修正#3"+符号修正(_变量,_数值)->_re\"^[-/]\"(,_变量)->[/]{[eq](_re,[/])}:
	->>[.]([python]#1,_数值)->[python]#1\"formulas.minus\"(,+符号修正),
	->[.]([python]#2,_数值)->[python]#2\"formulas.recip\"(,+符号修正)
"(,)
算式数值#4"+算式数值(,_变量)->_变量->[数值](,_变量)->[m_text]([数值],+算式数值)->[]{
	[]=>^(_变量,_指数)->_指数->[算式数值](,_指数)=>[.m_name]([python],^)->[.]([python],+算式数值)->[.]([python],[算式数值])->[python]\"formulas.basic\"(,+算式数值)
}->[]{
	[]=>_re\"[*/]\"(_变量,_因数)->_因数->[算式数值](,_因数)=>[.m_name]([python],[*])->[.]([python],+算式数值)->[.]([python],[算式数值])->[python]\"formulas.basic\"(,+算式数值)
}->[]{
	[]=>_re\"[+-]\"(_变量,_加数)->_加数->[算式数值](,_加数)=>[.m_name]([python],[+])->[.]([python],+算式数值)->[.]([python],[算式数值])->[python]\"formulas.basic\"(,+算式数值)
}
"(,)
数值#5"+数值(,分式)->分式->分子(分式,)->分母(分式,)->的(分子,_分子)->_分子->的(分母,_分母)->_分母->[算式数值]#1(,_分子)->[算式数值]#2(,_分母)...
->[.]([python],[算式数值]#1)->[.]([python],[算式数值]#2)->[python]\"formulas.frac\"(,+数值)...
->[]{[符号修正](分式,+数值)->[m_text]([符号修正],+数值)}:->[],->>[]"(,)
数值#6"+数值(,_变量)->_变量->[.m_name]([python],_变量)->[.]([python],_变量)->[python]\"formulas.variable\"(,+数值)...
->[]{[符号修正](_变量,+数值)->[m_text]([符号修正],+数值)}:->[],->>[]"(,)
数值#7"+数值(,_mathFun)->_mathFun->输入(_mathFun,)->的(输入,_式子)->_式子->[算式数值](,_式子)...
->[.m_name]([python],_mathFun)->[.]([python],[算式数值])->[python]\"formulas.mathFun\"(,+数值)...
->[]{[符号修正](_mathFun,+数值)->[m_text]([符号修正],+数值)}:->[],->>[]"(,)
数值#8"+数值(,_变量)->_变量->_re\"代入|=\"(_变量,_算式)->_算式->[算式数值](,_算式)->[m_text]([算式数值],+数值)...
->[]{[符号修正](_变量,+数值)->[m_text]([符号修正],+数值)}:->[],->>[]
"(,)
数值#9"+数值(,_数组)->_数组->起点(_数组,)->终点(_数组,)->[算式数值]#0(,起点)->[算式数值]#1(,终点)->[]{
	间隔(起点,终点)->[算式数值]#d(,间隔)...
->[.]([python],[算式数值]#0)->[.]([python],[算式数值]#1)->[.]([python],[算式数值]#d)->[python]\"formulas.array\"(,+数值)...
->[]{[符号修正](_数组,+数值)->[m_text]([符号修正],+数值)}:->[],->>[]
}:->[],
->>N(起点,终点)->[算式数值]#N(,间隔)...
->[.]([python],[算式数值]#0)->[.]([python],[算式数值]#1)->[.]([python],[算式数值]#N)->[python]\"formulas.linspace\"(,+数值)...
->[]{[符号修正](_数组,+数值)->[m_text]([符号修正],+数值)}:->[],->>[]
"(,)
数值#10"+数值(,括号)->括号->的(括号,_算式)->_算式->[算式数值](,_算式)->[m_text]([算式数值],+数值)...
->[]{[符号修正](括号,+数值)->[m_text]([符号修正],+数值)}:->[],->>[]"(,)
文本#11"当前阅读:...
当前文件:...
当前端口:...
当前编辑器:...
+[修改内容](当前文件,当前编辑器)
知识:...
选择:...
图库:...
端口:...
根源:...
设备:...
动词库:...
名词库:...
动作库:...

序号:...
元素:...

匹配模式_通用:...
(Parser中的词语匹配)
模式匹配:...
(给旧版的句子匹配用的. 不再更新了)
内容:...
数字:...
计时:...

是([设备],_设备)->的(_设备,_)->[激活](_,)->+[显示](,_)


简单结构:...

幽灵:...

数量:...
数目:...
自己:...
第:...

下一个:...
+[del](,下一个)


今天:...

测试:...
词语:...
词语0:...
词语_在:...
词语_是:...

专有名词:...

路径补全:...



[知识]
是([图库],画图)->的(画图,光学元件)
是([当前内景],_list)->+[显示](,_list)"(,)
的#12""(文本#11,当前阅读#13)
当前阅读#13"\"\"\"
+[返回目录](,当前阅读)

\"\"\"

+当前阅读(_节点,)->[当前编辑器](_节点,)->是([当前编辑器],_编辑器)...
->的(_编辑器,m_readPtr)->m_readPtr(,_节点)->+是(+当前阅读,_节点);

+当前阅读->的(记忆,编辑器)->的(编辑器,m_readPtr)->m_readPtr(,_节点)->+是(+当前阅读,_节点);"(,)
的#14""(文本#11,知识#15)
知识#15"\"\"\"
+[返回目录](,知识)

\"\"\"

+知识(_节点,)->[当前文件](_节点,)->是([当前文件],_文件)->的(_文件,文本)...
->的(文本,知识)->+是(+知识,知识)"(,)
的#16""(文本#11,选择#17)
选择#17"\"\"\"
+[返回目录]

\"\"\"


+选择->+的(+选择,list)->的(记忆,显示器)->的(显示器,m_select)->m_select(,list)->list"(,)
的#18""(文本#11,图库#19)
图库#19"\"\"\"
+[返回目录]

\"\"\"

+图库->的(记忆,files)->的(files,缓存)->的(缓存,文本)->的(文本,画图)->+是(+图库,画图)"(,)
的#20""(文本#11,当前文件#21)
当前文件#21"\"\"\"
+[返回目录](,当前文件)
+[修改标题]\"当前文件\"(,当前内景)

+当前文件(_节点,)->[]{[]=>_节点}...
->的(记忆,显示器)->的(显示器,m_detect)->m_detect(,端口)->的(端口,m_pool)...
->m_pool(,_list)->+是(+当前文件,_list)



\"\"\"
+当前文件(_节点,)->的(_文件,_节点)->m_pool(,_文件)->+是(+当前文件,_文件);
+当前文件->的(记忆,显示器)->的(显示器,m_detect)->m_detect(,端口)->的(端口,m_pool)...
->m_pool(,_list)->+是(+当前文件,_list);

"(,)
的#22""(文本#11,端口#23)
端口#23"\"\"\"
+[返回目录](,端口)

\"\"\"

# +端口(_文件,)->m_pool(,_文件)->的(_端口,m_pool)->的(devs,_端口)->m_devs(,devs)->的(根源,m_devs)->+是(+端口,_端口)

+端口(_文件,)->m_pool(,_文件)->的(_端口,m_pool)->+是(+端口,_端口);"(,)
的#24""(文本#11,根源#25)
根源#25"\"\"\"
+[返回目录]

\"\"\"

+根源->记忆->m_memory(,记忆)->的(根源,m_memory)->+是(+根源,根源)"(,)
的#26""(文本#11,设备#27)
设备#27"\"\"\"
+[返回目录]

\"\"\"

+设备->是([根源],根源)->的(根源,m_devs)->m_devs(,devs)->+是(+设备,devs)"(,)
设备#28""(,)
的#29""(文本#11,动词库#30)
动词库#30"\"\"\"
+[返回目录]

\"\"\"

+动词库->的(记忆,files)->的(files,动词)->+是(+动词库,动词)"(,)
的#31""(文本#11,名词库#32)
名词库#32"\"\"\"
+[返回目录]

\"\"\"

+名词库->的(记忆,files)->的(files,名词)->+是(+名词库,名词)"(,)
的#33""(文本#11,动作库#34)
动作库#34"\"\"\"
+[返回目录]

\"\"\"

+动作库->的(记忆,files)->的(files,动作)->+是(+动作库,动作)"(,)
的#35""(文本#11,当前端口#36)
当前端口#36"\"\"\"
+[返回目录](,当前端口)

\"\"\"

+当前端口(_节点,)->的(_文件,_节点)->[端口](_文件,)->是([端口],_端口)->+是(+当前端口,_端口)

+当前端口->的(记忆,显示器)->的(显示器,m_detect)->m_detect(,端口)->的(端口,m_pool)...
->m_pool(,_list)->+是(+当前端口,_list);"(,)
的#37""(文本#11,当前编辑器#38)
当前编辑器#38"\"\"\"
+[返回目录](,当前编辑器)
是([当前编辑器],_)->+[显示](,_)

\"\"\"

+当前编辑器(_节点,)->的(_文件,_节点)->m_pool(,_文件)...
->的(_端口,m_pool)->m_port(,_端口)...
->的(_编辑器,m_port)->+是(+当前编辑器,_编辑器);

+当前编辑器(_节点,)->[]{[]=>_节点}...
->是([设备],_设备)->的(_设备,_)->[激活](_,)->+是(+当前编辑器,_)"(,)
的#39""(文本#11,测试#40)
测试#40"\"\"\"
+[返回目录](,测试)

\"\"\"


+测试(,_):->的(_,A)->+的(+测试,A),
->的(_,C)->+的(+测试,C),
->的(_,D)->+的(+测试,D)"(,)
的#41""(文本#11,数量#42)
数量#42"\"\"\"
+[返回目录](,数量)
不能用. 具体问题见20201221

\"\"\"

+数量->关联(+数量,)->+[.]\"n\"([python],+数量)->+[不终止]->[python]\"
if n>0:
    state=True
else:
    state=False
\"(Python,);

+数量->关联(数量,+数量)->+[o]\"n\"([python],数量)->[python]\"
n=n-1
if n>0:
    state=False
else:
    state=True
\"(Python,)"(,)
的#43""(文本#11,自己#44)
自己#44"\"\"\"
+[返回目录](,自己)

\"\"\"

+自己(,_ctrl)->是([动作库],动作)->动作->的(动作,_事件)->[eq](_事件,_ctrl)->+是(+自己,_事件)"(,)
的#45""(文本#11,数目#46)
数目#46"\"\"\"
+[返回目录](,数目)
例句::[]=>[数目]\"3\"=>+[显示]\"2333\"

\"\"\"

+数目->+[o]\"n\"([python],+数目)->[python]\"
n=n-1
if n>=0:
    state=True
else:
    state=False
\"(Python,+[不终止])"(,)
的#47""(数目#46,例句#48)
例句#48"[]=>[数目]\"3\"=>+[显示]\"2333\""(,)
的#49""(文本#11,今天#50)
今天#50"\"\"\"
+[返回目录](,今天)

\"\"\"

+今天(_日期,)...
->是([根源],根源)->的(根源,m_date)->m_date(,_今天)->[eq](_今天,_日期)

"(,)
的#51""(文本#11,第#52)
第#52"\"\"\"
+[返回目录](,第)

\"\"\"

+第(_组,)...
->+[.]\"N\"([python],+第)->[python]\"n=0
state=True\"(Python,)...

=>的(_组,_元素)...

=>[python]\"
n+=1
state=True
\"(Python,):
    ->[python]\"state=n<N[0]\"(Python,), 
    ->[python]\"state=(n==N[0])\"(Python,)->+的(+第,_元素),
    ->[]





"(,)
的#53""(文本#11,幽灵#54)
幽灵#54"\"\"\"
+[返回目录](,幽灵)

\"\"\"

+幽灵(_文件节点,_幽灵节点)->[当前文件](_文件节点,)->是([当前文件],_文件)...
->[说](,_文件)=>的(_文件,_幽灵节点)

"(,)
简单结构#55"\"\"\"
+[返回目录](,简单结构)

\"\"\"

+简单结构(_入口,_收集)->+的(_收集,_入口)...
=>的(_入口,_)=>+的(_收集,的)->[is](_关联,的)->[简单结构](_,_收集)


"(,)
的#56""(文本#11,简单结构#55)
的#57""(文本#11,模式匹配#58)
模式匹配#58"\"\"\"
+[返回目录](,模式匹配)
P代码:...

\"\"\"
+模式匹配(_模板,_句子)...
->的(模式匹配,P代码)...

->+[.]\"pat\"([python],_模板)->+[.]\"sent\"([python],_句子)...
->+[code]([python],P代码)...

->[python](Python,)


"(,)
的#59""(模式匹配#58,P代码#60)
P代码#60"\"\"\"
测试:...
测试表达式:...


\"\"\"


import re
# code=re.sub('%\[[^\[^\]]*\]',r'([\\W\\w]*)',pat)

words=re.findall('%(\[[^\[^\]]*\])',pat)

code1=re.sub('%\[段落[^\[^\]]*\]',r'([\\w\\W]+)',pat)
code1=re.sub('%\[句子[^\[^\]]*\]',r'(.+)',code1)
code=re.sub('%\[[^\[^\]]*\]',r'([\\w\\d_.\-/+]+)',code1)

code2=re.sub('%\[段落[^\[^\]]*\]',r'([\\w\\W]+)',pat)
code2=re.sub('%\[句子[^\[^\]]*\]',r'(.+)',code2)
code_obj=re.sub('%\[[^\[^\]]*\]',r'([\\w\\d_.\-/+]+)',code2)


result=re.search(code,sent)
if result==None:
    state=False
else:
    state=True
    objs=re.search(code_obj,sent)
    list_objs=objs.groups()
    N=len(list_objs)
    for i in range(N):
        if i<len(words):
            word=words[i]
            if word[0:2]=='句子' or word[0:2]=='段落':
                continue
        obj=list_objs[i]
#         if '的' in obj or '和' in obj or '在' in obj:
        if '的' in obj or '在' in obj:
            state=False
            break

\"\"\"
if state==True:
    N=len(words)
    objs=result.groups()
    for i in range(N):
        if state==False:
            break
        for j in range(i,N):
            if words[i]==words[j]:
                if objs[i]!=objs[j]:
                    state=False
                    break

\"\"\"

try:
    if state==True:
        N=len(words)
        objs=result.groups()
        for i in range(N):
            word=words[i]
            obj=objs[i]
            if word[0:2]=='动词' and obj not in sp.dict_动词:
                print('%s 不是%s'%(obj,word))
                state=False
                break
            elif word[0:2]=='副词' and obj not in sp.dict_副词:
                print('%s 不是%s'%(obj,word))
                state=False
                break
            elif word[0:2]=='介词' and obj not in sp.dict_介词:
                print('%s 不是%s'%(obj,word))
                state=False
                break
            elif word[0:2]=='代词' and obj not in sp.dict_代词:
                print('%s 不是%s'%(obj,word))
                state=False
                break
            elif word[0:2]=='连词' and obj not in sp.dict_连词:
                print('%s 不是%s'%(obj,word))
                state=False
                break
            elif word[0:2]=='助词' and obj not in sp.dict_助词:
                print('%s 不是%s'%(obj,word))
                state=False
                break
            elif word[0:3]=='形容词' and obj not in sp.dict_形容词:
                print('%s 不是%s'%(obj,word))
                state=False
                break
            elif word[0:3]=='数量词' and obj not in sp.dict_数量词:
                print('%s 不是%s'%(obj,word))
                state=False
                break


except:
    pass


\"\"\"
记住\"Python\"
+[P函数](,P代码)

\"\"\""(,)
的#61""(文本#11,内容#62)
内容#62"\"\"\"
+[返回目录](,内容)

\"\"\"

+内容(_节点,)...
->+[s]\"text\"([python],_节点)->+[s]\"pat\"([python],+内容)...
->[python]\"
import re
result=re.match(pat,text)
if result==None:
    state=False
else:
    ans=result.group(1)
    state=True
\"(Python,+内容)

"(,)
的#63""(文本#11,数字#64)
数字#64"\"\"\"
+[返回目录](,数字)

\"\"\"

+数字(_x,)...
->+[s]\"code\"([python],+数字)->+[.]\"x\"([python],_x)...
->[python]\"
x=x[0]
result=eval(code)
if result==True:
    state=True
else:
    state=False
\"(Python,)


"(,)
的#65""(文本#11,序号#66)
序号#66"\"\"\"
P代码(P函数):...
+[新建阅读窗口](,P代码)

\"\"\"

+序号(_list,_序号)...
->的(序号,P代码)->[python]\"n=0
state=True\"(+Python,)...

->+[.]\"list0\"([python]#0,_list)->+[o]\"i\"([python]#0,+序号)...
->+[code]([python]#0,P代码)...
->[python]#0(+Python,+不终止)->_序号->[m_text](+序号,_序号);

+序号(_list,_序号)->[]{[]=>_序号}...
->的(序号,P代码)->[python]\"n=0
state=True\"(+Python,)...

->+[.]\"list0\"([python]#0,_list)->+[o]\"i\"([python]#0,+序号)...
->+[code]([python]#0,P代码)...
->[python]#0(+Python,+不终止);

"(,)
的#67""(序号#66,P代码#68)
P代码#68"
i=n
# print(len(list0),list0)
if n<len(list0):
    state=True
else:
    state=False
n+=1"(,)
P函数#69""(P代码#68,)
的#70""(文本#11,元素#71)
元素#71"\"\"\"
+[python]\"
print(ele,i)
\"(Python,)

\"\"\"

+元素(_list,_输出)...
->[]{
    []:->序号(+元素,_序号)->_序号->[m_text](_序号,+元素),
    ->[]
}->+[.]\"list\"([python],_list)->+[o]\"ele\"([python],+元素)...
->[python]\"
i=int(ele[0])
# print(i,list)
ele=list[i]
state=True\"(Python,):
    ->[m_text](+元素,_输出),->[]



"(,)
的#72""(P代码#60,测试#73)
测试#73"\"\"\"
+[P函数](,测试)

\"\"\"

pat='%[主体]的%[性质]是%[内容]'
print(pat,sent)
import re
# code=re.sub('%\[[^\[^\]]*\]',r'([\\W\\w]*)',pat)
code=re.sub('%\[[^\[^\]]*\]',r'([\\w_]+)',pat)

print(code,sent)

result=re.search(code,sent)
if result==None:
    state=False
else:
    state=True

print(result)

"(,)
的#74""(P代码#60,测试表达式#75)
测试表达式#75"\"\"\"
+[P函数](,测试表达式)

\"\"\"

txt=re.compile('((?![\\w]*2)[\\w])')
sent='123123432'
result=re.search(txt,sent)

print(result)
print(result.group(1))


"(,)
的#76""(文本#11,下一个#77)
下一个#77""(,)
的#78""(文本#11,计时#79)
计时#79"\"\"\"
P代码(P函数):...

\"\"\"

+计时(_开始,_记录)->的(计时,P代码)...
->+[code]([python],P代码)->+[.]\"time_duration\"([python],_开始)...
->[python](Python,_记录)

"(,)
的#80""(计时#79,P代码#81)
P代码#81"\"\"\"


\"\"\"

import time

n=time.perf_counter()
if time_duration=='':
    time_duration=[]
time_duration.append(n)
ans=time_duration
state=True

"(,)
P函数#82""(P代码#81,)
的#83""(文本#11,词语#84)
词语#84"\"\"\"
Nini, 打开句子结构的结构场景(节点)
Nini, 打开名词(库)

\"\"\"

+词语(_世界,_名词):

->主语(,_名词)->的(句子,主语)->句子(,~有)->~有(_名词,)->在(~有,_位置)...
->+在([词语_在],_位置)->[词语_在](_世界,_名词)...
    ->是([词语_在],_实体1)->+是(+词语,_实体1),

->[词语0](_世界,_名词)->是([词语0],_实体)->+是(+词语,_实体)

"(,)
的#85""(文本#11,词语_在#86)
词语_在#86"\"\"\"
Nini, 打开句子结构的结构场景(节点)
Nini, 打开名词(库)

\"\"\"

+词语_在(_世界,_名词)->在#0(+词语_在,_名词2)->的(_世界,_实体):
->_A(_名词,)->名词(,_A)->[eq](_实体,_A)...
    ->的(_实体,_性质)->[eq](_性质,_名词)->在(_性质,_位置)->[eq](_位置,_名词2)...
    ->+是(+词语_在,_性质),

->[eq](_实体,_名词)->在(_实体,_位置)->[eq](_位置,_名词2)...
    ->+是(+词语_在,_实体)->+是(在#0,_实体)



"(,)
的#87""(文本#11,词语0#88)
词语0#88"\"\"\"
Nini, 打开句子结构的结构场景(节点)
Nini, 打开名词(库)

保存:...
->[词语_是](,_性质0)->是([词语_是],_性质)

\"\"\"

+词语0(_世界,_名词)...
->[]{_A(_名词,)->名词(,_A)}:

->的(_世界,_实体0)->_A(_名词,)->名词(,_A)->[eq](_实体0,_A)...
    ->[词语_是](,_实体0)->是([词语_是],_实体1)...
    ->的(_实体1,_性质0)->[eq](_性质0,_名词)...
    ->+是(+词语0,_性质0),

->>的(_世界,_实体11)->[eq](_实体11,_名词)...
    ->[词语_是](,_实体11)->是([词语_是],_实体2)->+是(+词语0,_实体2)



"(,)
的#89""(文本#11,词语_是#90)
词语_是#90"\"\"\"
保存:...
(因为三维场景中的'是', 所以修改了上面的定义)

\"\"\"

+词语_是(,_名字)->_名字(,_实体):
    ->_实体->+是(+词语_是,_名字),
    ->+是(+词语_是,_名字)

"(,)
的#91""(词语0#88,保存#92)
保存#92"\"\"\"
Nini, 打开句子结构的结构场景(节点)
Nini, 打开名词(库)

保存:...
->[词语_是](,_性质0)->是([词语_是],_性质)

\"\"\"

+词语0(_世界,_名词)->的(_世界,_实体0):
->_A(_名词,)->名词(,_A)->[eq](_实体0,_A)...
    ->[词语_是](,_实体0)->是([词语_是],_实体1)...
    ->的(_实体1,_性质0)->[eq](_性质0,_名词)...
    ->+是(+词语0,_性质0),

->[eq](_实体0,_名词)->[词语_是](,_实体0)->是([词语_是],_实体2)->+是(+词语0,_实体2)

"(,)
的#93""(文本#11,专有名词#94)
专有名词#94"\"\"\"


\"\"\"

+专有名词(Nini,_名词)...
->的(Nini,词典)->的(词典,名词)->的(名词,_条目)->[eq](_名词,_条目)...
->+是(+专有名词,_条目)



"(,)
的#95""(词语_是#90,保存#96)
保存#96"\"\"\"
保存:...

\"\"\"

+词语_是(,_名字)->_名字(,_实体):
    ->_实体->+是(+词语_是,_实体),
    ->+是(+词语_是,_名字)

"(,)
的#97""(文本#11,路径补全#98)
路径补全#98"\"\"\"
P代码:...

\"\"\"
+路径补全(_输入,_输出)...
->的(路径补全,P代码)...

->P代码->Python->[]:
    ->_输入->+[s]\"address_in\"([python]#1,_输入)...
        ->+[code]([python]#1,P代码)->[python]#1(Python,_输出),
    ->+[s]\"address_in\"([python]#2,+[临时文本])->[m_text](+路径补全,+[临时文本])...
        ->+[code]([python]#2,P代码)->[python]#2(Python,_输出)



"(,)
的#99""(路径补全#98,P代码#100)
P代码#100"\"\"\"
记住\"Python\"

\"\"\"

import pathlib
import platform

folder_address=str(pathlib.Path().resolve())

if folder_address[0:4]==address_in[0:4]:
    ans=address_in
elif folder_address[0]=='/':
    ans=folder_address+'/'+address_in.replace('\\','/')
else:
    ans=folder_address+'\\'+address_in.replace('/','\\')

state=True
"(,)
的#101""(文本#11,匹配模式_通用#102)
匹配模式_通用#102"\"\"\"
[匹配模式_通用]
测试:...

\"\"\"

+匹配模式_通用->[]{[]=>[==](,+匹配模式_通用)}...
->+[s]\"pat\"([python],+匹配模式_通用)...
->[python]\"

try:
    a=re.match(pat,text[i:])
    if a==None:
        state=False
    else:
        di=a.span()[1]
        ans=text[i:i+di]
        i+=di
        state=True
except:
    state=False

\"(Python,+匹配模式_通用)

"(,)
的#103""(匹配模式_通用#102,测试#104)
测试#104"\"\"\"
记住\"Python\"
+[P函数](,测试)

\"\"\"

pat=\"\:\s*\"
text=\":[1]\"
a=re.match(pat,text[i:])
print(a,pat,text)
"(,)
