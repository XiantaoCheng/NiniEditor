### 节点
地址, 的, 扶桑核心, 目录, 的, 的, 星图, 输入结构, 词条库, 搜索方式, 输出结构, 的, 属于, 的, 模板, 的, 更新日志, 的, 20210809, 的, life_TreeCore, 的, 地址, 的, 测试场景, 的, 树, 属于, 什么, 学课, 的, 的, 的, 输入结构, 的, 模板, 的, 属于, 的, 词条库, 的, 的, 搜索方式, 扶桑, 的, 的, 输出结构, 的, m_input, 的, m_terms, 的, m_search, 的, m_tree, 的, m_output, 的, text, 的, 输入, 的, 的, a, 的, 输出, 的, 的, 的, 的, 的, 的, 的, 的, 的, m_lib, 的, m_pool, 端口, 的, 编译器, m_compiler, 词库, 的, 的, 的, m_port, m_compiler, 的, 场景, 的, 节点数目统计, 20210810, 的, 20210812, 的, 的, 保护, 树结构, 的, 的, 的, 的, 的, 的, 调试问题, 的, 的, 的, 的, 的, m_output, m_tree, m_search, m_terms, m_input, m_input, m_terms, m_search, m_tree, m_output, 是, 物理, 学课, 是, 光学, 是, 等离子体, 是, 电磁学, 是, 量子力学, 是, 数学, 是, 代数, 是, 几何, 是, 泛函, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 扶桑, 输出结构, 搜索方式, 模板, 的, 属于, 的, 词条库, 属于, 什么, 学课, 的, 的, 的, 输入结构, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 树结构, 的, 的, 动词, 的, 树心, 的, 输出, 的, 的, 的, 定义词典, 结构转换代码, 的, 生成句子结构, 的, 的, 句子相关, 更新词典, 的, 的, 地, 得, 的, 的, 的, 助词, 和, 或者, 并且, 或, 的, 的, 的, 的, 连词, 代词, 介词, 副词, 数量词, 美丽, 天真, 单纯, 的, 的, 的, 形容词, 是, 反射, 计算, 结束, 放映, 玩耍, 跑, 吃, 的, 的, 的, 的, 的, 的, 的, 的, 动词, 起点, 终点, 方向, 中心, 透镜, 位置, 分光镜, 反射镜, 镜架, 镜子, 总长度, 光程, 光线, 兔子, 蛇, 海贼, 船, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 名词, 的, 的, 的, 的, 的, 的, 的, 的, 的, 词典, 的, 的, 什么, 的, 物理, 的, 数学, 的, 学科, 的, 属于, 的, 测试场景, 的, 树结构, 的, 应用场景, 的, 20210813, 的, 20210814, 的, 的, 文本结构, 的, 场景描述, 的, 是, 20210815, 的, 的, 球极投影, 的, 投影原理, 的, 概述, 的, 是, 的, 相机的球极投影, 的, 概述, 的, 是, 的, 相机方向, 的, 概述, 的, 是, 的, 的, 参考, 参考, 20210816, 的, 的, 直线交点公式, 的, 平面几何, 的, 是, 的, 参考, 20210817, 的, 20210818, 的, 20210819, 的, 20210822, 的, 的, mathmu, 20210823, 的, 的, 复制, 的, 节点, 的, 是, 的, 是, 的, 模板, 的, 模板, 的, mathmu, 的, 相机方向, 的, 投影原理, 20210824, 的, 20210826, 的, 的, 句子相关, 的, 20220406, 的, 
### 关联
#, 2#0, #, #, 3#2, 2#6, #, #, #, #, #, 8#12, #, 12#14, #, 2#16, #, 16#18, #, 2#20, #, 20#22, #, 20#24, #, 24#26, #, 28#29, #, #, 33#27, 33#28, 33#29, #, 26#33, #, 37#35, #, 39#37, #, 26#39, 26#42, #, #, 26#43, 26#46, #, 26#48, #33, 26#50, #39, 26#52, #42, 26#54, #43, 26#56, #46, 24#58, #, 24#60, #, 60#58, 60#63, #, 24#65, #, 26#75, 26#76, 26#77, 26#78, 26#79, 26#80, 26#81, 26#82, 26#83, #82, 78#75, #43, #, 78#77, #, #80, #, 82#81, 26#86, 26#87, #78, #80, 2#89, #, 3#91, #, #, 91#92, #, 91#94, 3#97, #, #, 98#7, 98#8, 98#9, 98#10, 98#43, 3#105, #, 98#111, 98#112, 98#113, 98#114, 98#115, #10, #43, #9, #8, #7, #173, #166, #161, #159, #160, 122#123, #, #, 125#122, #, 127#122, #, 129#122, #, 131#122, #, 133#123, #, 135#133, #, 137#133, #, 139#133, #, 159#121, 159#122, 159#123, 159#124, 159#125, 159#126, 159#127, 159#128, 159#129, 159#130, 159#131, 159#132, 159#133, 159#134, 159#135, 159#136, 159#137, 159#138, 159#139, #, #, #, #, 164#162, #, 166#164, #, 168#169, #, #, 173#167, 173#168, 173#169, #, 184#116, 184#117, 184#118, 184#119, 184#120, 184#159, 184#160, 184#161, 184#166, 184#173, #, 105#184, 2#187, #, 187#189, #, 187#191, #, 160#122, 160#133, 2#195, #, #, 198#196, #, 187#198, 2#201, #, #, 187#202, #, #, #, 210#204, 210#205, 210#206, #, #, #, #, #, 219#211, 219#212, 219#213, 219#214, #, #, #, #, #, #, #, #, 230#224, 230#225, 230#226, #, #, #, #, #, #, #, #, #, 247#231, 247#232, 247#233, 247#234, 247#235, 247#236, 247#237, 247#238, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 282#248, 282#249, 282#250, 282#251, 282#252, 282#253, 282#254, 282#255, 282#256, 282#257, 282#258, 282#259, 282#260, 282#261, 282#262, 282#263, 282#264, #, 292#210, 292#219, 292#220, 292#221, 292#222, 292#223, 292#230, 292#247, 292#282, #, 2#292, 282#295, #, 282#297, #, 282#299, #, 282#301, #, 247#303, #, 3#305, #, 305#307, #, 3#309, #, 309#98, #, 91#311, #, 91#313, 43#316, #, 43#318, #, 43#320, 316#318, #, 91#321, 43#324, #, 43#326, #, 43#328, 326#, 43#330, 326#324, 43#332, #, 43#334, 332#, 43#336, 332#324, 43#338, #, 43#340, 338#, 43#342, 338#324, 43#345, 43#346, 332#326, 338#332, #, 91#347, 43#350, #, 43#352, #, 43#354, 350#352, 43#356, 338#350, #, 91#357, #, 91#359, #, 91#361, #, 91#363, 43#366, #, #, 91#367, 247#370, #, 282#372, #, 8#374, #, 39#376, #, 376#378, #, 374#380, #, 282#382, #, 282#384, #, 282#386, #, #, 91#387, #, 91#389, 2#del, #, del#392, #, 91#394, 
### 内容
#0, 16:
文档\结构体\扶桑核心.ftxt
## end
#2, 308:
+[返回目录](,扶桑核心)
地址::文档\结构体\扶桑核心.ftxt

动词:...
+[设置动词](,动词)
词典:...
+[更新词典](,词典)
+[新建阅读窗口](,词典)

星图::文档\S应用\星图.txt
+[打开文件](+新窗口,星图)
句子相关::文档\S应用\句子相关.txt
+[打开文件](+新窗口,句子相关)
定义词典::文档\S应用\词典.ftxt
+[打开文件](+新窗口,定义词典)

记住句子相关(文件)
Nini, 打开动词(库)
Nini, 句子相关是什么?

更新日志:...
life_TreeCore(P函数):...
场景:...
+[新建阅读窗口](,场景)




## end
#3, 487:
扶桑核心:...
+[新建阅读窗口](,扶桑核心)

创建于 20210808

应用场景:...
+[新建阅读窗口](,应用场景)

测试场景:...
调试问题:...
+[复制结构](,树结构)->+[粘贴](,调试问题)
+[新建阅读窗口](,调试问题)



保护::
所有目录下面的简单结构都被保护
[简单结构](目录,+[保护])=>的(+[保护],_节点)=>+[有](保护,_节点)
保护=>的(保护,_节点)=>+[标题](_节点,)->+[显示](,+[标题])
删除所有不被保护的节点
[]=>_节点{[]&:->的(扶桑核心,_节点)->扶桑核心,=>的(保护,_节点)}...
=>+[del](,_节点)
=>+[标题](_节点,)->+[显示](,+[标题])

扶桑核心#0->的(扶桑核心,扶桑核心#0)


是([动词库],动词)->+[打开文件](+新窗口,动词)
节点数目统计::
+[设置结构](,节点数目统计)
+[del](,节点数目统计)
节点数目统计->的(节点数目统计,20210808)
+[删除结构](,节点数目统计)
## end
#6, 13:
文档\S应用\星图.txt
## end
#7, 90:
+[返回目录](,输入结构)
+[显示星图](,输入结构)

+[显示](,属于)

+属于(+什么,+物理)
+[修改标题]"属于"(,是)
+[修改标题]"学课"(,数学)


## end
#8, 31:
+[返回目录](,词条库)

属于:...
是:...




## end
#9, 26:
输出结构->相机方向->+[复制内容](,相机方向)
## end
#12, 158:
"""
+[返回目录](,属于)

模板::输出结构->%[标题]=>是(_什么,%[标题])=>+的(输出结构,_什么)

"""

属于(什么,_范围)...
->的(属于#0,模板)...
->+[标题](_范围,)...
->+[模板文本](模板,搜索方式)->+[.](+[模板文本],+[标题])




## end
#14, 39:
输出结构->%[标题]=>是(_什么,%[标题])=>+的(输出结构,_什么)
## end
#16, 34:
+[返回目录](,更新日志)

20210809:...






## end
#18, 275:
+[返回目录](,20210809)
的(记忆,扶桑)->+[打开文件](+新窗口,扶桑)

那么接下来做PyQt的部分了. 
那么先做构造吧. 怎么打开呢? 先不从文本打开吧. 
然后我需要构造一个lib和一个pool. 
先复习一下editor里面是怎么用pool和lib的吧. 还有compiler. 
是compiler里面有lib, 不对... lib是接在port里面的. 

好了, 先做掉initial. 
现在的问题是怎么设置port和compiler. 我的建议是手动设置了. 
然后是怎么做port和compiler. 




## end
#20, 2558:
"""
+[返回目录](,life_TreeCore)
地址::life/life_TreeCore.py
+[保存文本](,life_TreeCore)

测试场景(P函数):...
+[新建阅读窗口](,测试场景)

"""

import sys
if __name__=='__main__':
    sys.path.append(sys.path[0]+'\\..')
from body.bone import NetP
from body.soul import Karma
from tools import tools_basic
import logging


class TreeCore():
    def __init__(self,point=None):
        super().__init__()
        self.m_self=point
        
        self.m_port=None
        self.m_compiler=None

        self.m_input=None
        self.m_terms=None
        self.m_search=None

        self.initialize(point)


    def initialize(self,point):
        if point==None:
            point=NetP('editor')
        self.m_self=point
        point.m_dev=self

        self.m_input=tools_basic.getVarFromPt(point,'m_input')
        self.m_terms=tools_basic.getVarFromPt(point,'m_terms')
        self.m_search=tools_basic.getVarFromPt(point,'m_search')

        self.m_port=tools_basic.getVarFromPt(point,'m_port')
        self.m_compiler=tools_basic.getVarFromPt(point,'m_compiler')


    def operate(self,action):
        result=False
        obj=action.m_db[1]
        if action.m_name=='[设置编译器]' or action.m_name=='[setCompiler]':
            self.opSetCompiler(obj)
            result=True
        elif action.m_name=='[设置端口]' or action.m_name=='[setPort]':
            self.opSetPort(obj)
            result=True
        elif action.m_name=='[输入]' or action.m_name=='[input]':
            self.opInput(obj)
            result=True
        return result,[]

    def opSetCompiler(self,obj):
        self.m_compiler.con(0,obj)

    def opSetPort(self,obj):
        self.m_port.con(0,obj)

    def opInput(self,obj):
        if obj==None:
            pt_input=self.m_input.m_db[1]
        else:
            pt_input=obj

        try:
            compiler=self.m_compiler.m_db[1].m_dev
            pt_port=self.m_port.m_db[1]
    
            pt_search=self.m_search.m_db[1]
    
            pt_terms=self.m_terms.m_db[1]
            list_terms=tools_basic.getPointByFormat(pt_terms,'list')
    
            con_de=NetP("的").con(pt_input,pt_search)
            for term in list_terms:
                con_de1=NetP("的").con(pt_input,term)
                result=compiler.runCode_shell(term.m_text,IO=pt_port,limit=True,pt_ptr=pt_input)
                con_de1.delete()
                print(term.m_name,result)
            print("搜索:",pt_search.m_text)
            con_de.delete()
    
        except Exception as e:
            logging.exception(e)





"""
+[保存文本](,life_TreeCore)
测试场景(P函数):...

"""
## end
#22, 21:
life/life_TreeCore.py
## end
#24, 919:
"""
+[返回目录](,测试场景)
+[P函数](,测试场景)
+[设置结构](,测试场景)

树:...
+[复制结构](,树)
text:...
输入:...
输出:...


"""

import importlib
from tools import tools_basic
from body.body_compiler import Compiler
from body.body_lib import Library
from body.body_port import Port
from body.bone import NetP

from life import life_TreeCore
importlib.reload(life_TreeCore)

TreeCore=life_TreeCore.TreeCore



list_pt=tools_basic.buildPoints_tokener(text)

pt_port=None
pt_lib=None
pt_compiler=None
pt_input=None

for pt in list_pt:
    if pt.m_name=="端口":
        pt_port=pt
        Port(pt)
    elif pt.m_name=="词库":
        pt_lib=pt
        Library(pt)
    elif pt.m_name=="编译器":
        pt_compiler=pt
        Compiler(pt)
    elif pt.m_name=="输入结构":
        pt_input=pt

tree=TreeCore(list_pt[-1])
tree.opInput(pt_input)

list_pt=tools_basic.getPointByFormat(tree.m_output.m_db[1],'list')
tools_basic.printPtList(list_pt)


"""
+[P函数](,测试场景)

"""
## end
#26, 323:
+[粘贴](,树)
+[设置结构](,树)
+[显示星图](,树)

m_input::
m_terms::
m_search::
m_tree::
m_output::

输入结构:...
词条库:...
搜索方式:...
扶桑:...
输出结构:...


扶桑=>的(扶桑,_节点)=>+[显示](,_节点)

+的(+词库,+m_compiler)->+m_compiler(,+编译器)->+的(+端口,+m_pool)->+m_pool(,扶桑)...
->+的(+端口,+m_lib)->+m_lib(,+词库)

+m_compiler(,编译器)->+m_port(,端口)


+[右连](m_output,输出结构)




## end
#33, 78:
+[返回目录](,输入结构)
+[显示星图](,输入结构)

+属于(+什么,+物理)
+[修改标题]"属于"(,是)
+[修改标题]"学课"(,数学)


## end
#35, 39:
输出结构->%[标题]=>是(_什么,%[标题])=>+的(输出结构,_什么)
## end
#37, 157:
"""
+[返回目录](,属于)

模板::输出结构->%[标题]=>是(_什么,%[标题])=>+的(输出结构,_什么)

"""

属于(什么,_范围)...
->的(属于#0,模板)...
->+[标题](_范围,)...
->+[模板文本](模板,搜索方式)->+[.](+[模板文本],+[标题])



## end
#39, 39:
+[返回目录](,词条库)

什么属于物理
属于:...
是:...





## end
#42, 33:
输出结构->学课=>是(_什么,学课)=>+的(输出结构,_什么)
## end
#43, 807:
+[返回目录](,扶桑)
+[显示星图](,扶桑)
+[删除结构](,扶桑)


场景描述::
文本结构::文档\S应用\文本结构.ftxt
+是(文本结构,场景描述)
有做的用法

这里有一个空间投影的话题. 是从数学问题的空间投影开始讨论的. 讨论的是直线和平面投影之后的性质. 
然后在三维建模中实现了相机的球极投影. 最后在照片测量的计算相机方向中, 实现了用x轴和y轴的灭点计算相机在空间中的欧拉角. 

球极投影::
投影原理::文档\数学问题\空间投影.ftxt|>的(%文档,正文)->[is](正文,%自己)
+概述"直线和平面在投影平面上的性质"(投影原理,)
+是(投影原理,球极投影)

相机的球极投影::文档\S应用\三维建模.ftxt|>的(%文档,三维场景)->的(三维场景,相机投影)->[is](相机投影,%自己)
概述"给定相机的欧拉角, 计算投影结果"(相机的球极投影,)
+是(相机的球极投影,球极投影)

相机方向::文档\S应用\照片测量.ftxt|>的(%文档,三维测量)->的(三维测量,相机参数)->的(相机参数,计算相机方向)->[is](计算相机方向,%自己)
+概述"根据x轴和y轴的灭点, 计算相机的欧拉角"(相机方向,)
+是(相机方向,球极投影)
+参考(相机方向,相机的球极投影)->+参考(相机的球极投影,投影原理)


相机方向参考了直线交点公式. 
直线交点公式是平面几何的内容. 
直线交点公式::文档\S应用\几何样本库.ftxt|>的(%文档,数学公式)->的(数学公式,两直线交点)->[is](两直线交点,%自己)
平面几何::
+是(直线交点公式,平面几何)

+参考(相机方向,直线交点公式)

mathmu"C:\Users\cheng\Desktop\paper\Books\mathmu.pdf"

+[显示星图](,扶桑)
## end
#58, 3194:
m_compiler#0""(,编译器#5)[-1,-1]
m_port#1""(,端口#10)[-1,-1]
的#2""(词库#4,m_compiler#3)[-1,-1]
m_compiler#3""(,编译器#5)[-1,-1]
词库#4""(,)[-1,-1]
编译器#5""(,)[-1,-1]
的#6""(端口#10,m_pool#7)[-1,-1]
m_pool#7""(,扶桑#55)[-1,-1]
m_lib#8""(,词库#4)[-1,-1]
的#9""(端口#10,m_lib#8)[-1,-1]
端口#10""(,)[-1,-1]
m_output#11""(,输出结构#16)[-1,-1]
m_tree#12""(,扶桑#55)[-1,-1]
m_search#13""(,搜索方式#56)[-1,-1]
m_terms#14""(,词条库#61)[-1,-1]
m_input#15""(,输入结构#68)[-1,-1]
输出结构#16""(,)[-1,-1]
是#17""(物理#18,学课#19)[-1,-1]
物理#18""(,)[-1,-1]
学课#19""(,)[-1,-1]
是#20""(光学#21,物理#18)[-1,-1]
光学#21""(,)[-1,-1]
是#22""(等离子体#23,物理#18)[-1,-1]
等离子体#23""(,)[-1,-1]
是#24""(电磁学#25,物理#18)[-1,-1]
电磁学#25""(,)[-1,-1]
是#26""(量子力学#27,物理#18)[-1,-1]
量子力学#27""(,)[-1,-1]
是#28""(数学#29,学课#19)[-1,-1]
数学#29""(,)[-1,-1]
是#30""(代数#31,数学#29)[-1,-1]
代数#31""(,)[-1,-1]
是#32""(几何#33,数学#29)[-1,-1]
几何#33""(,)[-1,-1]
是#34""(泛函#35,数学#29)[-1,-1]
泛函#35""(,)[-1,-1]
的#36""(扶桑#55,是#17)[-1,-1]
的#37""(扶桑#55,物理#18)[-1,-1]
的#38""(扶桑#55,学课#19)[-1,-1]
的#39""(扶桑#55,是#20)[-1,-1]
的#40""(扶桑#55,光学#21)[-1,-1]
的#41""(扶桑#55,是#22)[-1,-1]
的#42""(扶桑#55,等离子体#23)[-1,-1]
的#43""(扶桑#55,是#24)[-1,-1]
的#44""(扶桑#55,电磁学#25)[-1,-1]
的#45""(扶桑#55,是#26)[-1,-1]
的#46""(扶桑#55,量子力学#27)[-1,-1]
的#47""(扶桑#55,是#28)[-1,-1]
的#48""(扶桑#55,数学#29)[-1,-1]
的#49""(扶桑#55,是#30)[-1,-1]
的#50""(扶桑#55,代数#31)[-1,-1]
的#51""(扶桑#55,是#32)[-1,-1]
的#52""(扶桑#55,几何#33)[-1,-1]
的#53""(扶桑#55,是#34)[-1,-1]
的#54""(扶桑#55,泛函#35)[-1,-1]
扶桑#55"+[返回目录](,扶桑)
+[显示星图](,扶桑)
+[删除结构](,扶桑)


学课::

物理::
光学::
等离子体::
电磁学::
量子力学::

数学::
代数::
几何::
泛函::


+是(+物理,+学课)...
->+是(+光学,+物理)->+是(+等离子体,+物理)->+是(+电磁学,+物理)...
->+是(+量子力学,+物理)...

->+是(+数学,+学课)...
->+是(+代数,+数学)->+是(+几何,+数学)->+是(+泛函,+数学)


"(,)[-1,-1]
搜索方式#56"输出结构->学课=>是(_什么,学课)=>+的(输出结构,_什么)"(,)[-1,-1]
模板#57"输出结构->%[标题]=>是(_什么,%[标题])=>+的(输出结构,_什么)"(,)[-1,-1]
的#58""(属于#59,模板#57)[-1,-1]
属于#59"\"\"\"
+[返回目录](,属于)

模板::输出结构->%[标题]=>是(_什么,%[标题])=>+的(输出结构,_什么)

\"\"\"

属于(什么,_范围)...
->的(属于#0,模板)...
->+[标题](_范围,)...
->+[模板文本](模板,搜索方式)->+[.](+[模板文本],+[标题])


"(,)[-1,-1]
的#60""(词条库#61,属于#59)[-1,-1]
词条库#61"+[返回目录](,词条库)

属于:...


"(,)[-1,-1]
学课#62""(,)[-1,-1]
属于#63""(什么#64,学课#62)[-1,-1]
什么#64""(,)[-1,-1]
的#65""(输入结构#68,学课#62)[-1,-1]
的#66""(输入结构#68,什么#64)[-1,-1]
的#67""(输入结构#68,属于#63)[-1,-1]
输入结构#68"+[返回目录](,输入结构)
+[显示星图](,输入结构)

+属于(+什么,+物理)
+[修改标题]\"属于\"(,是)
+[修改标题]\"学课\"(,数学)

"(,)[-1,-1]
的#69""(树#90,m_compiler#0)[-1,-1]
的#70""(树#90,m_port#1)[-1,-1]
的#71""(树#90,的#2)[-1,-1]
的#72""(树#90,词库#4)[-1,-1]
的#73""(树#90,m_compiler#3)[-1,-1]
的#74""(树#90,编译器#5)[-1,-1]
的#75""(树#90,的#6)[-1,-1]
的#76""(树#90,端口#10)[-1,-1]
的#77""(树#90,m_pool#7)[-1,-1]
的#78""(树#90,的#9)[-1,-1]
的#79""(树#90,m_lib#8)[-1,-1]
的#80""(树#90,m_output#11)[-1,-1]
的#81""(树#90,m_tree#12)[-1,-1]
的#82""(树#90,m_search#13)[-1,-1]
的#83""(树#90,m_terms#14)[-1,-1]
的#84""(树#90,m_input#15)[-1,-1]
的#85""(树#90,输出结构#16)[-1,-1]
的#86""(树#90,扶桑#55)[-1,-1]
的#87""(树#90,搜索方式#56)[-1,-1]
的#88""(树#90,词条库#61)[-1,-1]
的#89""(树#90,输入结构#68)[-1,-1]
树#90"+[粘贴](,树)
+[设置结构](,树)
+[显示星图](,树)

m_input::
m_terms::
m_search::
m_tree::
m_output::

输入结构:...
词条库:...
搜索方式:...
扶桑:...
输出结构:...


+的(+词库,+m_compiler)->+m_compiler(,+编译器)->+的(+端口,+m_pool)->+m_pool(,扶桑)...
->+的(+端口,+m_lib)->+m_lib(,+词库)

+m_compiler(,编译器)->+m_port(,端口)


+[右连](m_output,输出结构)



"(,)[-1,-1]

## end
#60, 27:
+[设置结构](,输入)

a::1
text::


## end
#63, 1:
1
## end
#65, 14:
+[返回目录]
+[内容]

## end
#89, 277:
+[返回目录](,场景)
+[粘贴](,场景)


树:...
树
+[创建树心](,树)->+[显示设备](,树)
是([根源],根源)->的(根源,m_compiler)->m_compiler(,_编译器)...
->[当前端口](场景,)->是([当前端口],端口)...
->+[设置编译器](树,_编译器)->+[设置端口](树,端口)


的(树,输入结构)->+[输入](树,输入结构)...
->的(树,输出结构)=>的(输出结构,_输出)=>+[显示](,_输出)


是([名词库],名词)->+[打开文件](+新窗口,名词)



## end
#92, 3:
437
## end
#94, 3:
362
## end
#98, 146:
+[设置结构](,树结构)

+m_input(,输入结构)->+m_terms(,词条库)->+m_search(,搜索方式)...
->+m_tree(,扶桑)->+m_output(,输出结构)

输入结构:...
词条库:...
搜索方式:...
扶桑:...
输出结构::





## end
#105, 360:
树结构:...
+[删除结构](,树结构)->+[del](,树结构)

+[重载模块]"树心"->+[树心](,树结构)

+[输入](树结构,);
+[输出](树结构,);
的(树结构,输出结构)=>的(输出结构,_输出)=>+[显示](,_输出)

的(树结构,扶桑)->的(树结构,输出结构)->的(树结构,搜索方式)...
->[]{[]=>的(输出结构,)=>+[del](,的)}...
->+[S函数](输出结构,搜索方式)->+的(+[S函数],输出结构)->+[del](,+的)...
=>的(扶桑,_节点)=>+的(+[S函数],_节点)->+[del](,+的)



是([名词库],名词)->+[打开文件](+新窗口,名词)
是([动词库],动词)->+[打开文件](+新窗口,动词)



## end
#159, 240:
+[返回目录](,扶桑)
+[显示星图](,扶桑)
+[删除结构](,扶桑)


学课::

物理::
光学::
等离子体::
电磁学::
量子力学::

数学::
代数::
几何::
泛函::


+是(+物理,+学课)...
->+是(+光学,+物理)->+是(+等离子体,+物理)->+是(+电磁学,+物理)...
->+是(+量子力学,+物理)...

->+是(+数学,+学课)...
->+是(+代数,+数学)->+是(+几何,+数学)->+是(+泛函,+数学)



## end
#161, 33:
输出结构->学课=>是(_什么,学课)=>+的(输出结构,_什么)
## end
#162, 39:
输出结构->%[标题]=>是(_什么,%[标题])=>+的(输出结构,_什么)
## end
#164, 157:
"""
+[返回目录](,属于)

模板::输出结构->%[标题]=>是(_什么,%[标题])=>+的(输出结构,_什么)

"""

属于(什么,_范围)...
->的(属于#0,模板)...
->+[标题](_范围,)...
->+[模板文本](模板,搜索方式)->+[.](+[模板文本],+[标题])



## end
#166, 24:
+[返回目录](,词条库)

属于:...



## end
#173, 78:
+[返回目录](,输入结构)
+[显示星图](,输入结构)

+属于(+什么,+物理)
+[修改标题]"属于"(,是)
+[修改标题]"学课"(,数学)


## end
#184, 431:
+[设置结构](,树结构)

+m_input(,输入结构)->+m_terms(,词条库)->+m_search(,搜索方式)...
->+m_tree(,扶桑)->+m_output(,输出结构)

输入结构:...
词条库:...
搜索方式:...
扶桑:...
输出结构::
+[设置结构](,输出结构)
+[删除结构](,输出结构)
+[新建阅读窗口](,词条库)

输入结构->搜索方式->词条库->的(词条库,属于)...
->+[S函数](输入结构,属于)->+的(+[S函数],搜索方式)->+[del](,+的)...
=>的(输入结构,_节点)=>+的(+[S函数],_节点)->+[del](,+的)

扶桑->输出结构->搜索方式(,)...
->+[S函数](输出结构,搜索方式)->+的(+[S函数],输出结构)->+[del](,+的)...
=>的(扶桑,_节点)=>+的(+[S函数],_节点)->+[del](,+的)



## end
#187, 61:
+[返回目录](,动词)
+[粘贴](,动词)

树心:...
输出:...
生成句子结构:...
更新词典:...



## end
#189, 257:
"""
+[返回目录](,树心)

"""

+树心(,_树结构)->+[del](,+树心)...
->+[创建树心](,_树结构)->+[显示设备](,_树结构)...

->+[做]"
+做(,_树结构)->+[del](,+做)...
->是([根源],根源)->的(根源,m_compiler)->m_compiler(,_编译器)...
->[当前端口](_树结构,)->是([当前端口],端口)...
->+[设置编译器](_树结构,_编译器)->+[设置端口](_树结构,端口)
"(,_树结构)

## end
#191, 280:
"""
+[返回目录](,输出)

"""

+输出(_树结构,_输出)->+[del](,+输出)...
->的(_树结构,扶桑)->的(_树结构,输出结构)->的(_树结构,搜索方式)...
->[]{[]=>的(输出结构,)=>+[del](,的)}...
->+[S函数](输出结构,搜索方式)...
->[]{[]=>的(扶桑,_节点)=>+的(+[S函数],_节点)->+[del](,+的)}:
    ->_输出->+的(+[S函数],_输出)->+[del](,+的),
    ->+的(+[S函数],输出结构)->+[del](,+的)

## end
#195, 14:
文档\S应用\词典.ftxt
## end
#196, 953:
"""
+[返回目录](,测试结构)
+[P函数](,结构转换代码)

"""
import imp
from tools import tools_parser_sentence as sp
from tools import tools_basic

def collectPts(pt,list_pt=None):
    if list_pt==None:
        list_pt=[]
    if pt not in list_pt:
        list_pt.append(pt)
    for con in pt.m_con:
        if con.m_db[0]==pt:
            if con not in list_pt:
                list_pt.append(con)
            if con.m_name=="的" and con.m_db[1]!=None:
                collectPts(con.m_db[1],list_pt)
    if pt.m_db[0]!=None:
        if pt.m_db[0] not in list_pt:
            list_pt.append(pt.m_db[0])
    if pt.m_db[1]!=None:
        if pt.m_db[1] not in list_pt:
            list_pt.append(pt.m_db[1])
    return list_pt

def sentStruct(pt):
    list_pt=collectPts(pt)
    return tools_basic.writeStdCode([],list_pt)

def sent2Struct(sent):
    code,pt=sp.fun_句子(sent)
    if pt==None:
        return ''
    else:
        return sentStruct(pt)


"""
+[P函数](,结构转换代码)

"""
## end
#198, 436:
"""
+[返回目录](,生成句子结构)
结构转换代码:...
+[新建阅读窗口](,结构转换代码)
+[修改标题]"生成句子结构"(,显示句子结构)

"""

+生成句子结构(_句子,_结构)->+[del](,+生成句子结构)...
->的(生成句子结构,结构转换代码)->+[P函数](,结构转换代码)...
->+[python]"ans=sent2Struct(sent)"(Python,+[导入节点])->+[.]"sent"(+[python],_句子)...
->+[导入节点](,_结构);

+生成句子结构(,_结构)...
->的(生成句子结构,结构转换代码)->+[P函数](,结构转换代码)...
->+[python]"ans=sent2Struct(sent)"(Python,+[导入节点])->+[.]"sent"(+[python],+生成句子结构)...
->+[导入节点](,_结构)->+[del](,+生成句子结构);



## end
#201, 15:
文档\S应用\句子相关.txt
## end
#202, 369:
"""
+[返回目录](,更新词典)

"""

+更新词典(,_词典)->+[del](,+更新词典)...
->+[临时文本]"
from tools import tools_parser_sentence as sp
"->[]{
	[]=>的(_词典,_词性)=>+[标题](_词性,)...
	->+[增加内容]"
sp.dict_%s={"(+[标题],+[临时文本])...
	->[]{
		[]=>的(_词性,_词语)=>+[标题](_词语,)->+[增加内容]"'%s',"(+[标题],+[临时文本])
	}->+[增加内容]"}"(,+[临时文本])
}->+[修改内容](+[临时文本],+[显示])->+[显示]->+[python](Python,)->+[code](+[python],+[临时文本])
## end
#210, 25:
+[返回目录](,助词)

的::
地::
得::
## end
#219, 31:
+[返回目录](,连词)

和::
或者::
并且::
或::
## end
#230, 29:
+[返回目录](,形容词)

美丽::
天真::
单纯::
## end
#247, 63:
+[返回目录](,动词)


复制::
属于::

结束::
放映::
玩耍::
跑::
吃::

计算::
反射::
是::
## end
#282, 177:
+[返回目录](,名词)
名词->的(词典,名词)->+[更新词典](,词典)

投影原理::
相机方向::
mathmu::
节点::
什么::
物理::
数学::
学科::

兔子::
蛇::
海贼::
船::

光线::
光程::
总长度::
镜子::
镜架::
反射镜::
分光镜::
位置::
透镜::
中心::
方向::

终点::
起点::
## end
#292, 102:
+[返回目录](,词典)

名词:...
动词:...
形容词:...
数量词:...
副词:...
介词:...
代词:...
连词:...
助词:...

词典=>的(词典,_)=>+[显示](,_)
## end
#305, 41:
+[返回目录](,测试场景)
+[设置结构](,测试场景)
树结构:...




## end
#309, 262:
+[返回目录](,应用场景)

树结构:...
+[新建阅读窗口](,树结构)

+[重载模块]"树心"->+[树心](,树结构)

+[生成句子结构]"数学是什么"(,+[临时文本])->+[显示星图](,+[临时文本])

的(树结构,输入结构)->+[删除结构](,输入结构)->+[生成句子结构]"相机方向是什么"(,输入结构)
的(树结构,输入结构)->+[显示星图](,输入结构)
+[输入](树结构,);
+[输出](树结构,);
的(树结构,输出结构)=>的(输出结构,_输出)=>+[显示](,_输出)


## end
#311, 3:
357
## end
#313, 3:
321
## end
#316, 16:
文档\S应用\文本结构.ftxt
## end
#321, 3:
350
## end
#326, 42:
文档\数学问题\空间投影.ftxt|>的(%文档,正文)->[is](正文,%自己)
## end
#328, 14:
直线和平面在投影平面上的性质
## end
#332, 59:
文档\S应用\三维建模.ftxt|>的(%文档,三维场景)->的(三维场景,相机投影)->[is](相机投影,%自己)
## end
#334, 16:
给定相机的欧拉角, 计算投影结果
## end
#338, 77:
文档\S应用\照片测量.ftxt|>的(%文档,三维测量)->的(三维测量,相机参数)->的(相机参数,计算相机方向)->[is](计算相机方向,%自己)
## end
#340, 20:
根据x轴和y轴的灭点, 计算相机的欧拉角
## end
#347, 3:
358
## end
#350, 62:
文档\S应用\几何样本库.ftxt|>的(%文档,数学公式)->的(数学公式,两直线交点)->[is](两直线交点,%自己)
## end
#357, 3:
359
## end
#359, 3:
364
## end
#361, 3:
366
## end
#363, 3:
367
## end
#366, 45:
C:\Users\cheng\Desktop\paper\Books\mathmu.pdf
## end
#367, 3:
393
## end
#374, 144:
"""
+[返回目录](,是)

模板::输出结构->%[标题]->+[复制内容](,%[标题])

"""

是(_范围,什么)...
->的(是#0,模板)...
->+[标题](_范围,)...
->+[模板文本](模板,搜索方式)->+[.](+[模板文本],+[标题])




## end
#376, 143:
"""
+[返回目录](,是)

模板::输出结构->%[标题]->+[复制文本](,%[标题])

"""

是(_范围,什么)...
->的(是#0,模板)...
->+[标题](_范围,)...
->+[模板文本](模板,搜索方式)->+[.](+[模板文本],+[标题])



## end
#378, 28:
输出结构->%[标题]->+[复制文本](,%[标题])
## end
#380, 28:
输出结构->%[标题]->+[复制内容](,%[标题])
## end
#387, 3:
389
## end
#389, 3:
391
## end
#392, 15:
文档\S应用\句子相关.txt
## end
#394, 3:
397
## end
### 结束