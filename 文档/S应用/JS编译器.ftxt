### 节点
地址, 的, JS编译器, 目录, 的, 的, C编译器, 的, 操作, 的, 想法, 的, 网页画板, 的, 化学大富翁, 的, 测试页面, 的, 测试JS, 的, 模板测试, 的, J函数, 的, 模板, 的, 测试Engine, P函数, 的, 打开本地网页, 的, P代码, 的, 测试Phaser, 的, 发布网页, 的, 模板, 的, 保存, 的, 测试结构转换, 的, 测试if, 的, 测试结构, 的, 结构代码, 的, 程序结构, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 块尺寸, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, 空间点, P函数, S函数, 程序, 语句, P函数, S函数, if, P函数, S函数, def, P函数, S函数, class, P函数, try, P函数, S函数, while, P函数, S函数, for, P函数, S函数, 运算, P函数, elif, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 库, 的, 结构转JS代码, 的, 的, else模板, 的, 代码模板, 的, 代码模板, 的, 增加缩进, 的, P代码, 的, 代码模板, 的, 测试for, 的, 代码模板, 的, 去结尾, 的, P代码, 的, 代码模板, 的, 测试func, 空间点, 空间点, 空间点, 空间点, 的, P代码, 的, 代码模板, 的, 测试class, 空间点, 空间点, 空间点, 空间点, 空间点, 的, 代码模板, 的, 测试try, 空间点, 的, 图形, 的, 代码, 的, 收集引用节点, 的, 生成J代码, 的, 保存, 的, P代码, 的, 结构HTML, 的, 结构模板, 的, 收集结构, 的, 记录结构, 的, 生成库引用, 的, 模板, 的, 保存, 
### 关联
#, 2#0, #, #, 3#2, 2#6, #, 2#8, #, 2#10, #, 2#12, #, 2#14, #, 14#16, #, 2#18, #, 18#20, #, 8#22, #, 22#24, #, 18#26, #, 26#, 8#29, #, 29#31, #, 2#33, #, 8#35, #, 35#37, #, 22#39, #, 2#41, #, 41#43, #, 41#45, #, 41#47, #, 41#49, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 114#80, 114#81, 114#84, 114#87, 114#90, 114#92, 114#95, 114#98, 114#101, 114#103, #, 116#114, #, 8#116, 84#119, #, 84#121, #, 103#123, #, 114#125, #, 125#127, #, 95#129, #, 41#131, #, 98#133, #, 114#135, #, 135#137, #, 87#139, #, 41#141, #, #, #, #, #, 87#147, #, 90#149, #, 41#151, #, #, #, #, #, #, 92#158, #, 41#160, #, #, 49#163, #, 49#165, #, 22#167, #, 22#169, #, 169#171, #, 101#173, #, 22#175, #, 175#177, #, 175#179, #, 175#181, #, 22#183, #, 183#185, #, 183#187, #, 
### 内容
#0, 17:
文档\S应用\JS编译器.ftxt
## end
#2, 348:
+[返回目录](,JS编译器)
地址::文档\S应用\JS编译器.ftxt

操作:...
+[设置动词](,操作)
想法:...
+[设置名词](,想法)
+[新建阅读窗口](,操作)

Nini, 导入词典的库. 导入词典
Nini, 导入网页画板的库
Nini, 导入JS编译器的库. Nini, 导入编程语言parser的库
Nini, 导入PPT的库
Nini, 打开网页画板(文件)

C编译器::文档\S应用\C编译器.ftxt
+[打开文件](+新窗口,C编译器)
网页画板::文档\S应用\网页画板.ftxt
+[打开文件](+新窗口,网页画板)


化学大富翁:...
测试JS:...
测试Phaser:...
测试结构转换:...
+[新建阅读窗口](,测试结构转换)


## end
#3, 49:
JS编译器:...
创建于 20220105

节点数目统计::
+[设置结构](,节点数目统计)
## end
#6, 16:
文档\S应用\C编译器.ftxt
## end
#8, 123:
+[粘贴](,操作)

J函数:...
打开本地网页:...
发布网页:...
发布网页的"J函数"替换为"发布网页"

结构转JS代码:...
结构转JS代码的"收集程序块尺寸"替换为"结构转JS代码"
+[复制结构](,结构转JS代码)



## end
#12, 16:
文档\S应用\网页画板.ftxt
## end
#14, 75:
+[返回目录](,化学大富翁)


测试页面:...
测试页面的"js"替换为"input/little-chemist-master/js"




## end
#16, 132:
<!--
+[H函数](,测试页面)
-->

<a href="C:\Users\cheng\Dropbox\Struct\Structure1.2.1\Nini\input\little-chemist-master/index.html">测试</a>



## end
#18, 78:
/*
+[J函数](,测试JS)
模板测试:...
测试Engine(P函数):...
*/

var a=1, b=1;

print(a+b);




## end
#20, 318:
<!--
+[网页](web,模板测试)
-->

<head>
<script>
function print(text) {
    document.getElementById("cmd_window").innerHTML+="<br>"+text;
}
</script>
</head>

<html>

<body>
<p id="cmd_window">Hello world!</p>

<script>
print(12333*44.2);
print('123');
print('<a href="www.google.com">test</a>');
</script>

</body>
</html>


## end
#22, 902:
"""
+[返回目录](,J函数)
模板:...

保存:...
+[网页](web,保存)

收集引用节点:...
生成J代码:...
生成库引用:...
结构HTML:...
+[新建阅读窗口](,收集引用节点)


"""

+J函数(,_节点)->+[del](,+J函数)...
->的(J函数,收集引用节点)->的(J函数,生成J代码)->的(J函数,生成库引用)...
->的(J函数,结构HTML)...
->的(J函数,模板)->的(J函数,保存)...

->+[做](_节点,+引用节点)->+[code](+[做],收集引用节点)...
->[]{
    []:->的(_上级节点,_节点)->_上级节点->J函数#0(_上级节点,)...
        ->+[有](+引用节点,_上级节点)...
        ->+[做]#2(_上级节点,+引用节点)->+[code](+[做]#2,收集引用节点),
    ->[]
}...

->+[做]#1(+引用节点,_节点)->+[code](+[做]#1,生成J代码)...
->的(生成J代码,保存#0)...
->+[做]#2(+引用节点,_节点)->+[code](+[做]#2,生成库引用)...
->的(生成库引用,保存#1)...

->+核心结构->[]{
    []:->的(_节点,_场景)->_场景->核心结构(_场景,)...
        ->+[做](_场景,+核心结构)->+[code](+[做],结构HTML),
    ->[]
}...

->+[修改内容](模板,+[临时文本])...
->+[模板文本](+[临时文本],+[临时文本])...
->+[.]"[代码]"(+[模板文本],保存#0)->+[.]"库"(+[模板文本],保存#1)...
->+[.](+[模板文本],+核心结构)->+[del](,+核心结构)...
->+[网页](web,+[临时文本])...

->+[修改内容](+[临时文本],保存)...

->+[del](,+引用节点)



## end
#24, 496:
<!--
+[网页](web,模板测试)
-->

<head>
<script>
function print() {
    document.getElementById("cmd_window").innerHTML+="<br>";
    for (var i=0; i < arguments.length; i++) {
        text=arguments[i];
        document.getElementById("cmd_window").innerHTML+=" "+text;
    }
}
</script>
<script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser-arcade-physics.min.js">
</script>
%库
</head>

<html>

<body>
<p id="cmd_window">Hello world!</p>
%核心结构

<script>
%[代码]
</script>

</body>
</html>


## end
#26, 382:
"""
+[P函数](,测试Engine)
+[打开本地网页](,+[临时文本])->+[临时文本]"C:/Users/cheng/Dropbox/Struct/Structure1.2.1/Nini/input/little-chemist-master/index.html"


"""

from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QUrl

test=QWebEngineView()
test.load(QUrl(r'file:///C:/Users/cheng/Dropbox/Struct/Structure1.2.1/Nini/input/little-chemist-master/index.html'))
test.show()

## end
#29, 222:
"""
P代码:...

"""

+打开本地网页(,_地址)...
->的(打开本地网页,P代码)...

->+[python](Python,)->+[code](+[python],P代码):
    ->_地址->+[s]"file_name"(+[python],_地址)->+[del](,+打开本地网页),
    ->+[s]"file_name"(+[python],+打开本地网页)->+[del](,+打开本地网页)


## end
#31, 356:
"""
+[P函数](,P代码)

记住"Python"

"""

from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QUrl

webPage=QWebEngineView()

if file_name=='':
    webPage.load(QUrl(r'file:///C:/Users/cheng/Dropbox/Struct/Structure1.2.1/Nini/input/little-chemist-master/index.html'))
else:
    webPage.load(QUrl(r'file:///'+file_name))


webPage.show()


## end
#33, 805:
/*
+[J函数](,测试Phaser)
*/
var config = {
    width: 960,
    height: 540,
    type: Phaser.CANVAS,
    parent: 'phaser-example',
    backgroundColor: '#ffffff',
    scene: {
        create: create,
        update: update
    }
};

//  dwitter globals

var c;
var x;

var time = 0;
var frame = 0;


var game = new Phaser.Game(config);

function create ()
{
    var canvasTexture = this.textures.createCanvas('dwitter', 1920, 1080);

    c = canvasTexture.getSourceImage();
    x = c.getContext('2d');

    this.add.image(0, 0, 'dwitter').setOrigin(0).setScale(0.5);
}

function update ()
{
    time = frame / 60;

    if (time * 60 | 0 == frame - 1)
    {
        time += 0.000001;
    }

    frame++;

    c.width=1920;
    x.fillRect(100,frame,100,100);

    //u(0);
}

print(2333)
/*
+[J函数](,测试Phaser)
*/

## end
#35, 226:
"""
+[返回目录](,发布网页)
模板:...

"""

+发布网页(,_节点)->+[del](,+发布网页)...
->的(发布网页,模板)->+[修改内容](模板,+[临时文本])...
->+[模板文本](+[临时文本],+[临时文本])->+[.]"[代码]"(+[模板文本],_节点)...
->+[保存文本]"C:\Users\cheng\Documents\GitHub\test\index.html"(,+[临时文本])



## end
#37, 349:
<!--
+[网页](web,模板测试)
-->

<head>
<script>
function print(text) {
    document.getElementById("cmd_window").innerHTML+="<br>"+text;
}
</script>
<script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser-arcade-physics.min.js">
</script>
</head>

<html>

<body>
<p id="cmd_window">Hello world!</p>

<script>
%[代码]
</script>

</body>
</html>


## end
#39, 549:
<!--
+[网页](web,模板测试)
-->

<head>
<script>
function print() {
    document.getElementById("cmd_window").innerHTML+="<br>";
    for (var i=0; i < arguments.length; i++) {
        text=arguments[i];
        document.getElementById("cmd_window").innerHTML+=" "+text;
    }
}
</script>
<script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser-arcade-physics.min.js">
</script>

</head>

<html>

<body>
<p id="cmd_window">Hello world!</p>


<script>

/*
Nini, 打开JS编译器(文件)
+[J函数](,JS代码)
*/

print('!!!????')


/*

*/
</script>

</body>
</html>


## end
#41, 678:
+[设置结构](,测试结构转换)

测试if:...
测试for:...
测试func:...
测试class:...
测试try:...

结构代码:...
[python程序_代码](测试if,)...
->+[修改内容](,结构代码)->[m_text]([python程序_代码],+[修改内容])

+[导入节点](,+[临时文本])->[m_text](结构代码,+[导入节点])...
->+[显示星图](,+[临时文本])->+[删除结构](,+[临时文本])

程序结构:...
+[删除结构](,程序结构)->+[导入节点](,程序结构)->[m_text](结构代码,+[导入节点])
+[显示星图]"1"(,程序结构)

记住"自然语言"

按Python解析测试if到结构代码中

+[调用词典动词](+[做],+解析)->+[做](,测试if#16)...
->+按(+[做],Python#8)->+[del](,+按)...
->结构代码#17->+到(+[做],结构代码#17)...
    ->+[del](,+到)->[]->[]->测试if#16

在图形中, 将结构代码转换为PPT图形
在Karma的JS版本中, 将结构代码转换为Javascript
结构代码的类"Karma"有哪些函数? 
查看结构代码的类"Karma" 
在Karma的JS版本中, 将结构代码的函数"state"转换为Javascript
将结构代码的函数"state"转换为Jacascript

Nini, 打开花园(文件)




## end
#43, 94:
if a==b:
    a
    if 1:
        a
    elif 2:
        b
else:
    print('b')
    print('a')


## end
#47, 506:
起点#0""(,块#1)[-1,-1]
块#1""(,)[-1,-1]
块#2"a
"(,)[-1,-1]
if#3"a==b"(块#1,块#2)[-1,-1]
块#4""(,)[-1,-1]
然后#5""(块#2,块#4)[-1,-1]
块#6"a
"(,)[-1,-1]
if#7"1"(块#4,块#6)[-1,-1]
eof#8""(,)[-1,-1]
然后#9""(块#6,eof#8)[-1,-1]
eof#10""(,)[-1,-1]
然后#11""(块#12,eof#10)[-1,-1]
块#12"b
"(,)[-1,-1]
elif#13"2"(if#7,块#12)[-1,-1]
eof#14""(,)[-1,-1]
然后#15""(块#4,eof#14)[-1,-1]
块#16"print('b')
print('a')
"(,)[-1,-1]
else#17""(if#3,块#16)[-1,-1]
eof#18""(,)[-1,-1]
然后#19""(块#16,eof#18)[-1,-1]
eof#20""(,)[-1,-1]
然后#21""(块#1,eof#20)[-1,-1]

## end
#49, 249:
+[显示星图]"1"(,程序结构)
+[显示PPT场景]"2"(,图形)


图形::
+[设置结构](,图形)
+[删除场景结构](,图形)

起点(,块)->+[生成程序结构](块,图形)->+[显示PPT场景]"2"(,图形)

代码:
起点(,块)->+[结构转JS代码]"程序"(,+[做])->+[做](块,代码)->+[显示](,代码)
+[新建阅读窗口](,代码)

变量(for,)
起点(,块)->try(块,块#0)->+[消息窗口](,块#0)
+[显示](,func)


## end
#50, 23:
2.2, 1.1500000000000001
## end
#51, 23:
2.2, 1.1500000000000001
## end
#52, 23:
2.2, 1.1500000000000001
## end
#53, 23:
2.2, 1.1500000000000001
## end
#54, 37:
6.800000000000001, 2.4000000000000004
## end
#55, 24:
11.4, 2.4000000000000004
## end
#56, 23:
2.2, 1.1500000000000001
## end
#57, 24:
21.000000000000004, 5.25
## end
#58, 24:
21.000000000000004, 5.25
## end
#59, 24:
21.000000000000004, 5.25
## end
#60, 24:
21.000000000000004, 5.25
## end
#61, 24:
21.000000000000004, 5.25
## end
#62, 24:
21.000000000000004, 5.25
## end
#63, 24:
21.000000000000004, 5.25
## end
#64, 24:
21.000000000000004, 5.25
## end
#65, 24:
21.000000000000004, 5.25
## end
#66, 24:
21.000000000000004, 5.25
## end
#67, 24:
21.000000000000004, 5.25
## end
#68, 24:
21.000000000000004, 5.25
## end
#69, 24:
21.000000000000004, 5.25
## end
#70, 24:
21.000000000000004, 5.25
## end
#71, 24:
21.000000000000004, 5.25
## end
#72, 24:
21.000000000000004, 5.25
## end
#73, 24:
21.000000000000004, 5.25
## end
#74, 24:
21.000000000000004, 5.25
## end
#75, 24:
21.000000000000004, 5.25
## end
#76, 24:
21.000000000000004, 5.25
## end
#77, 24:
21.000000000000004, 5.25
## end
#80, 334:
"""


"""

+程序(块,_代码)->+[del](,+程序)...

->+[结构转JS代码]"语句"(,+[做])->+[做](块,_代码)...
    ->+[结构转JS代码]"去结尾"(,+[做]#01)->+[做]#01(,_代码)...

->[]{
    []:->然后(块,块#1)->块#1(,)...
        ->+[结构转JS代码]"程序"(,+[做]#1)->+[做]#1(块#1,+[临时文本])...
            ->+[结构转JS代码]"去结尾"(,+[做]#11)->+[做]#11(,+[临时文本])...
        ->+[增加内容]"
"(+[临时文本],_代码),
    ->[]
}


## end
#81, 437:
"""


"""

+语句(块,_代码)->+[del](,+语句)...

->[]:
    ->if(块,)->+[结构转JS代码]"if"(,+[做]#0)->+[做]#0(块,_代码),
    ->func(块,)->+[结构转JS代码]"def"(,+[做]#1)->+[做]#1(块,_代码),
    ->while(块,)->+[结构转JS代码]"while"(,+[做]#2)->+[做]#2(块,_代码),
    ->for(块,)->+[结构转JS代码]"for"(,+[做]#3)->+[做]#3(块,_代码),
    ->try(块,)->+[结构转JS代码]"try"(,+[做]#4)->+[做]#4(块,_代码),
    ->class(块,)->+[结构转JS代码]"class"(,+[做]#5)->+[做]#5(块,_代码),
    ->+[结构转JS代码]"运算"(,+[做]#6)->+[做]#6(块,_代码)




## end
#84, 885:
"""
代码模板::
if(%条件) {
%语句
}
%elif
%else

else模板::
else {
%语句
}


"""

+if(块,_代码)->+[del](,+if)...
->的(if#0,代码模板)->的(if#0,else模板)...

->if(块,块#0)...
->+[结构转JS代码]"程序"(,+[做]#0)->+[做]#0(块#0,+语句#0)...
->+[结构转JS代码]"增加缩进"(,+[做])->+[做](,+语句#0)...
->+[结构转JS代码]"去结尾"(,+[做]#01)->+[做]#01(,+语句#0)...
    ->+[结构转JS代码]"运算"(,+[做]#02)->+[做]#02(if,+条件)...

->+elif->[]{
    []:->elif(if,)...
        ->+[结构转JS代码]"elif"(,+[做]#1)->+[做]#1(elif,+elif),
    ->[]
}...

->+else->[]{
    []:->else(if,块#2)->块#2(,)...
        ->+[结构转JS代码]"程序"(,+[做]#2)->+[做]#2(块#2,+语句#2)...
            ->+[结构转JS代码]"增加缩进"(,+[做]#3)->+[做]#3(,+语句#2)...
        ->+[模板文本](else模板,+else)...
        ->+[.](+[模板文本],+语句#2)->+[del](,+语句#2),
    ->[]
}...

->+[模板文本](代码模板,_代码)...
->+[.](+[模板文本],+语句#0)->+[del](,+语句#0)...
->+[.](+[模板文本],+elif)->+[del](,+elif)...
->+[.](+[模板文本],+else)->+[del](,+else)...
->+[.](+[模板文本],+条件)->+[del](,+条件)



## end
#87, 452:
"""
代码模板::
%func {
%语句
}

P代码:...

"""

+def(块,_代码)->+[del](,+def)...
->的(def#0,代码模板)->的(def#0,P代码)...

->func(块,块#0)...
->+[结构转JS代码]"程序"(,+[做]#0)->+[做]#0(块#0,+语句#0)...
->+[结构转JS代码]"增加缩进"(,+[做])->+[做](,+语句#0)...
->+[结构转JS代码]"去结尾"(,+[做]#01)->+[做]#01(,+语句#0)...

->+[python](Python,+[临时文本])->+[code](+[python],P代码)...
->+[.]"text_func"(+[python],func)...

->+[模板文本](代码模板,_代码)...
->+[.](+[模板文本],+语句#0)->+[del](,+语句#0)...
->+[.]"func"(+[模板文本],+[临时文本])





## end
#90, 342:
"""
代码模板::
class %class {
%语句
}

"""

+class(块,_代码)->+[del](,+class)...
->的(class#0,代码模板)...

->class(块,块#0)...
->+[结构转JS代码]"程序"(,+[做]#0)->+[做]#0(块#0,+语句#0)...
->+[结构转JS代码]"增加缩进"(,+[做])->+[做](,+语句#0)...
->+[结构转JS代码]"去结尾"(,+[做]#01)->+[做]#01(,+语句#0)...

->+[模板文本](代码模板,_代码)...
->+[.](+[模板文本],+语句#0)->+[del](,+语句#0)...
->+[.](+[模板文本],class)





## end
#92, 539:
"""
代码模板::
try {
%语句0
} catch(e) {
%语句1
}

"""

+try(块,_代码)->+[del](,+try)...
->的(try#0,代码模板)...

->try(块,块#0)...
->+[结构转JS代码]"程序"(,+[做]#0)->+[做]#0(块#0,+语句0)...
    ->+[结构转JS代码]"增加缩进"(,+[做]#01)->+[做]#01(,+语句0)...
    ->+[结构转JS代码]"去结尾"(,+[做]#02)->+[做]#02(,+语句0)...

->except(try,块#1)...
->+[结构转JS代码]"程序"(,+[做]#1)->+[做]#1(块#1,+语句1)...
    ->+[结构转JS代码]"增加缩进"(,+[做]#10)->+[做]#10(,+语句1)...
    ->+[结构转JS代码]"去结尾"(,+[做]#11)->+[做]#11(,+语句1)...

->+[模板文本](代码模板,_代码)...
->+[.](+[模板文本],+语句0)->+[del](,+语句0)...
->+[.](+[模板文本],+语句1)->+[del](,+语句1)





## end
#95, 406:
"""
代码模板::
while(%条件) {
%语句
}

"""

+while(块,_代码)->+[del](,+while)...
->的(while#0,代码模板)...

->while(块,块#0)...
->+[结构转JS代码]"程序"(,+[做]#0)->+[做]#0(块#0,+语句#0)...
->+[结构转JS代码]"增加缩进"(,+[做])->+[做](,+语句#0)...
->+[结构转JS代码]"去结尾"(,+[做]#01)->+[做]#01(,+语句#0)...
    ->+[结构转JS代码]"运算"(,+[做]#02)->+[做]#02(while,+条件)...

->+[模板文本](代码模板,_代码)...
->+[.](+[模板文本],+语句#0)->+[del](,+语句#0)...
->+[.](+[模板文本],+条件)->+[del](,+条件)





## end
#98, 477:
"""
代码模板::
for(var i=0;i<%list.length;i++) {
    var %变量=%list[i];
%语句
}

"""

+for(块,_代码)->+[del](,+for)...
->的(for#0,代码模板)...

->for(块,块#0)->变量(for,)...
->+[结构转JS代码]"程序"(,+[做]#0)->+[做]#0(块#0,+语句#0)...
->+[结构转JS代码]"增加缩进"(,+[做])->+[做](,+语句#0)...
->+[结构转JS代码]"去结尾"(,+[做]#01)->+[做]#01(,+语句#0)...
    ->+[结构转JS代码]"运算"(,+[做]#02)->+[做]#02(for,+list)...

->+[模板文本](代码模板,_代码)...
->+[.](+[模板文本],+语句#0)->+[del](,+语句#0)...
->+[.](+[模板文本],+list)->+[del](,+list)...
->+[.](+[模板文本],变量)





## end
#101, 149:
"""
P代码:...

"""

+运算(_块,_代码)->+[del](,+运算)...
->的(运算,P代码)...

->+[python](Python,_代码)->+[code](+[python],P代码)...
->+[.]"code_text"(+[python],_块)




## end
#103, 617:
"""
代码模板::
else if(%条件) {
%语句
}
%elif

Nini, 打开动作(库)

"""

+elif(elif,_代码)->+[del](,+elif)...
->的(elif#0,代码模板)...

->elif(,块#0)...
->+[结构转JS代码]"程序"(,+[做]#0)->+[做]#0(块#0,+语句#0)...
->+[结构转JS代码]"增加缩进"(,+[做])->+[做](,+语句#0)...
->+[结构转JS代码]"去结尾"(,+[做]#01)->+[做]#01(,+语句#0)...
    ->+[结构转JS代码]"运算"(,+[做]#02)->+[做]#02(elif,+条件)...

->+elif#2->[]{
    []:->elif#1(elif,块#1)->块#1->[]{[]=>[==](,elif#1)}...
        ->+[结构转JS代码]"elif"(,+[做]#1)->+[做]#1(elif#1,+elif#2),
    ->[]
}...

->+[模板文本](代码模板,_代码)...
->+[.](+[模板文本],+语句#0)->+[del](,+语句#0)...
->+[.](+[模板文本],+elif#2)->+[del](,+elif#2)...
->+[.](+[模板文本],+条件)->+[del](,+条件)



## end
#114, 289:
Nini, 打开编程语言parser(文件)


增加缩进:...
去结尾:...
去结尾的"增加缩进"替换为"去结尾"

程序:...
语句:...
语句的"_结构,块"替换为"块,_代码"

class的"收集程序块尺寸"替换为"结构转JS代码"

if:...
elif:...
+[新建阅读窗口](,if)

def:...
class:...
+[新建阅读窗口](,class)

运算的"收集程序块尺寸"替换为"结构转JS代码"

try:...
while:...
for:...

运算:...

结构转JS代码的"收集程序块尺寸"替换为"结构转JS代码"



## end
#116, 150:
"""
库:...
+[新建阅读窗口](,库)

"""

+结构转JS代码(,做)->+[del](,+结构转JS代码)...
->的(结构转JS代码,库)->的(库,_段落)...
->[标题](_段落,)->[==](+结构转JS代码,[标题])...
    ->+code(做,_段落)


## end
#119, 12:
else {
%语句
}
## end
#121, 27:
if(%条件) {
%语句
}
%elif
%else
## end
#123, 27:

else if(%条件) {
%语句
}
%elif
## end
#125, 147:
"""
P代码:...

"""

+增加缩进(,_文本)->+[del](,+增加缩进)...
->的(增加缩进,P代码)...

->+[python](Python,_文本)->+[code](+[python],P代码)...
->+[.]"text"(+[python],_文本)


## end
#127, 52:
"""


"""

ans='    '+text.replace('\n','\n    ')



## end
#129, 19:

while(%条件) {
%语句
}
## end
#131, 71:

for pt in list_pt:
    a=a+1
    b=b+1
    while 1:
        break





## end
#133, 62:

for(var i=0;i<%list.length;i++) {
    var %变量=%list[i];
%语句
}
## end
#135, 145:
"""
P代码:...

"""

+去结尾(,_文本)->+[del](,+去结尾)...
->的(去结尾,P代码)...

->+[python](Python,_文本)->+[code](+[python],P代码)...
->+[.]"text1"(+[python],_文本)


## end
#137, 61:
"""
记住"Python"

"""

import re
ans=re.sub('\s*$','',text1)



## end
#139, 14:

%func {
%语句
}
## end
#141, 90:


def foo(b,list_pt):
    a=b+1
    for pt in list_pt:
        print(pt)


foo(1,[1,2,3])

## end
#142, 37:
2.3000000000000003, 3.850000000000001
## end
#143, 37:
2.3000000000000003, 3.850000000000001
## end
#144, 37:
2.3000000000000003, 3.850000000000001
## end
#145, 37:
2.3000000000000003, 3.850000000000001
## end
#147, 429:
"""
记住"Python"
Nini, 打开动词(库)
+[P函数](,P代码)

"""

import re
result=re.match(r'([\w_]*) *\((.*)\)',text_func)

func_name=result.group(1)
func_vars=result.group(2)

if len(func_vars)>3 and func_vars[0:4]=='self':
    if func_name=='__init__':
        func_name='constructor'
    func_vars=re.sub('self *,?','',func_vars)

    ans='{0}({1})'.format(func_name,func_vars)
else:
    ans='function {0}({1})'.format(func_name,func_vars)



## end
#149, 21:

class %class {
%语句
}
## end
#151, 166:


class NetP:
    def __init__(self,name):
        self.m_name=name
        self.m_con=[None,None]

    def con(self,pt0,pt1):
        self.m_con=[pt0,pt1]

a=1
b=a+1
## end
#152, 38:
2.4000000000000004, 4.1000000000000005
## end
#153, 38:
2.4000000000000004, 4.1000000000000005
## end
#154, 38:
2.4000000000000004, 4.1000000000000005
## end
#155, 38:
2.4000000000000004, 4.1000000000000005
## end
#156, 38:
2.4000000000000004, 4.1000000000000005
## end
#158, 31:

try {
%语句0
} catch(e) {
%语句1
}
## end
#160, 45:

try:
    a[2]=0
except:
    a=[]
print(a)



## end
#161, 23:
4.3, 2.4000000000000004
## end
#165, 121:
if(a==b) {
    a
    if(1) {
        a
    }
    
    elif(2) {
        b
    }
}

else {
    print('b')
    print('a')
}
## end
#167, 128:
"""


"""

+收集引用节点(_节点,_引用)->+[del](,+收集引用节点)...

=>引用(_节点,_节点1)=>+[有](_引用,_节点1)...
    ->+[做](_节点1,_引用)->+[code](+[做],收集引用节点)


## end
#169, 219:
"""
保存:...

"""

+生成J代码(_引用节点,_主节点)->+[del](,+生成J代码)...
->的(生成J代码,保存)...

->+[临时文本]->[]{
    []:->_引用节点=>的(_引用节点,_节点)->_节点=>+[增加内容]"
"(_节点,+[临时文本]),
    ->[]
}...

->+[增加内容]"
"(_主节点,+[临时文本])...

->+[修改内容](+[临时文本],保存)



## end
#171, 65:

/*
Nini, 打开JS编译器(文件)
+[J函数](,JS代码)
*/

print('!!!????')


/*

*/
## end
#173, 524:
"""
+[P函数](,P代码)

记住"Python"

code_text='!=None) None'
print(ans)

"""

import re
text1=re.sub('\n\s*\n','\n\n',code_text)
text1=re.sub('\n',';\n',text1)
text1=re.sub('\n;','\n',text1)

text1=re.sub('None','\'\'',text1)
text1=re.sub('self',"this",text1)

text1=re.sub(' or '," | ",text1)
text1=re.sub(' and '," & ",text1)

text1=re.sub('append','push',text1)
text1=re.sub('False','false',text1)
text1=re.sub('True','true',text1)

text1=re.sub('==\[\]','.length==0',text1)
text1=re.sub('!=\[\]','.length!=0',text1)

ans=text1
## end
#175, 346:
"""
+[返回目录](,结构HTML)
结构模板:...
收集结构:...
记录结构:...


->+[临时文本]->[记录结构](+结构,)->[m_text]([记录结构],+[临时文本])...

"""

+结构HTML(_结构,_输出)->+[del](,+结构HTML)...
->的(结构HTML,结构模板)->的(结构HTML,收集结构)->的(结构HTML,记录结构)...

->+[做](_结构,+结构)->+[code](+[做],收集结构)...
->+[做](+结构,+[临时文本])->+[code](+[做],记录结构)->+[del](,+结构)...

->+[模板文本](结构模板,_输出)...
->+[.](+[模板文本],+[临时文本])



## end
#177, 52:
<st id='st_core' style='display:none'>
%[临时文本]
</st>
## end
#179, 261:
"""


"""

+收集结构(_结构,结构)->+[del](,+收集结构)...
->收集结构(,)...

->[]{
    []=>的#0(_结构,_节点)->_节点=>[]:
        ->的(结构,_节点),
        ->+的(结构,_节点)->+[做](_节点,结构)->+[code](+[做],收集结构)...
        ->[]{
            []:->的(结构,_结构)->+的(结构,的#0),
                ->[]
        }
}

## end
#181, 119:
"""
Nini, 打开动词(库)

"""

+记录结构(_结构,_输出)->+[del](,+记录结构)...

->+[修改内容](,_输出)...
->[记录结构](_结构,)->[m_text]([记录结构],+[修改内容])

## end
#183, 444:
"""
模板:<script src="%网址"></script>
保存:...

"""

+生成库引用(_引用节点,_主节点)->+[del](,+生成库引用)...
->的(生成库引用,模板)->的(生成库引用,保存)...

->+[临时文本]->[]{
    []=>的(_主节点,_库)->_库->库(_库,)...
        =>+[模板文本](模板,+[增加内容])->+[.]"网址"(+[模板文本],_库)...
        ->+[增加内容](,+[临时文本])
}...
->[]{
    []:->_引用节点=>的(_引用节点,_节点)->_节点->的(_节点,_库)->_库->库(_库,)...
        =>+[模板文本](模板,+[增加内容])->+[.]"网址"(+[模板文本],_库)...
        ->+[增加内容](,+[临时文本]),
    ->[]
}...

->+[修改内容](+[临时文本],保存)



## end
#185, 28:
<script src="%网址"></script>

## end
### 结束