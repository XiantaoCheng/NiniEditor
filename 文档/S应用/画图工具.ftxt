### 节点
地址, 画, 删除矩形, 创建矩形_old, 画图动词, 的, 的, 的, mouseMove, mouseRelease, mousePress, 画图动作, 的, 的, 的, 是, 是, 场景, 制作画图, 的, 的, 的, 目录, 的, 的, 的, 创建圆形_old, 的, 创建直线_old, 的, OPA画图, 的, 创建文本框, 的, 日志, 的, 20201114, 的, 样本库, 的, 箭头, 的, 桌子, 画图, 输出, 输入, 类型, 尺寸, 起点, 的, 的, 的, 的, 的, 的, 的, 的, 的, 抽屉1, 画图, 输出, 输入, 类型, 尺寸, 起点, 的, 的, 的, 的, 的, 的, 的, 的, 的, 抽屉2, 的, 抽屉3, 的, 抽屉4, 画图, 输出, 输入, 类型, 尺寸, 起点, 的, 的, 的, 的, 的, 的, 的, 的, 画图, 输出, 输入, 类型, 尺寸, 起点, 的, 的, 的, 的, 的, 的, 的, 的, 画图, 输出, 输入, 类型, 尺寸, 起点, 的, 的, 的, 的, 的, 的, 的, 的, 的, 柜子1, 的, 柜子2, 画图, 输出, 输入, 类型, 尺寸, 起点, 的, 的, 的, 的, 的, 的, 的, 的, 画图, 输出, 输入, 类型, 尺寸, 起点, 的, 的, 的, 的, 的, 的, 的, 的, 是, 是, 是, 是, 的, 对齐, 的, 正弦波, 的, 水平, 的, 相对位置, 的, 样本, 的, 小窗口函数, 的, 箭头2, 的, 平移, 的, 显示名称, 的, 设置原点, 的, 设置单位, 的, 资料, 的, 图片, 的, 设置中心, 的, 更新中心, 的, 同步中心, 的, 场, 的, 样本, 的, 增加文字, 的, PyQt, 的, 画图名词, 的, Up, 的, Down, 的, Right, 的, Left, 的, 原型, 矩形, 选中区域, 画图, 输出, 输入, 类型, 的, 的, 的, 的, 的, 选中区域, 画图, 输出, 输入, 类型, 尺寸, 起点, 的, 的, 的, 的, 直线, 画图, 输出, 输入, 类型, 终点, 起点, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 创建矩形, 的, 创建圆形, 的, 创建直线, 的, 图形, 的, 更新动词, 的, 文字, 的, 选中区域, 的, 输出, 的, 选中区域, 的, 输入, 的, 输出, 的, 的, 的, 点线公式, 的, LaTeX数学记号, 的, 选中框, 的, 图形, 的, 面颜色, 的, 线颜色, 的, 线型, 的, 线粗细, 的, 的, 的, 的, 的, 线颜色, 的, 线型, 的, 线粗细, 的, 的, 的, 的, 图形, 的, 选中框, 的, 保存旧版, 的, 显示选中框, 的, 隐藏选中框, 的, 保存旧版, 的, 按键, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 的, Return, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 的, Del, 的, ctrl+1, 的, ctrl+2, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 的, ctrl+3, 的, timer, 的, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 的, 字体, 的, 按键位置, 按键位置, 的, 代码, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 按键位置, 的, 设置缩放, 的, 设置尺寸, 的, 设置起点, 的, PgUp, 的, PgDown, 的, 更新场景状态, 的, HTML, 的, 输出, 的, 的, HTML, 的, 比例, 的, 尺寸, 的, 原点, 的, 坐标系, 按键位置, 按键位置, 按键位置, 的, 更新图形结构, 的, 节点数目统计, 20210310, 的, 20210311, 的, 20210314, 的, 20210316, 的, 20210318, 的, 的, 矩形, 的, 圆形, 的, 直线, mouseMove, 的, 右下展宽, mouseMove, 的, 右上展宽, mouseMove, 的, 左下展宽, mouseMove, 的, 左上展宽, mouseMove, 的, 右展宽, mouseMove, 的, 左展宽, mouseMove, 的, 下展宽, mouseMove, 的, 上展宽, mouseMove, 的, 移动, 的, 的, 的, 的, 的, 的, 的, 的, 的, 动作, 的, mouseMove, 的, 旋转, mouseMove, 的, 缩放, mouseMove, 的, 移动, 的, 的, 的, 动作, 的, mouseMove, 的, 移动终点, mouseMove, 的, 移动起点, mouseMove, mouseMove, 的, 移动, 的, 的, 的, 的, 动作, 的, 的, 起点, 的, 尺寸, 的, 的, 的, 的, 测试图形, 的, 的, 的, 的, 的, 的, 的, 的, 的, 画图, 的, 的, 的, 的, 输出, 图形, 选中框, 类型, 选中区域, 的, 的, 的, 输入, 的, 的, 输出, 点线公式, 的, LaTeX数学记号, HTML, 的, 输入, 的, 的, 的, 的, 的, 起点, 终点, 线颜色, 线型, 线粗细, 20210319, 的, 的, ctrl+C, 的, ctrl+V, m_select, 的, 线粗细, 线型, 线颜色, 面颜色, 角度, 半径, 中心, 的, 的, 的, 的, 的, 的, 的, 输入, 的, HTML, 的, 的, 输入, 输出, 的, 的, 选中区域, 类型, 图形, 选中框, 输出, 的, 的, 的, 的, 画图, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 圆形, 的, 的, ctrl+X, 20210321, 的, 20210322, 的, 20210326, 的, 20210328, 的, 20210329, 的, 20210331, 的, 20210404, 的, 20210407, 的, 20210410, 的, 20210411, 的, 20210413, 的, 20210414, 的, 20210415, 的, 20210416, 的, 20210418, 的, 的, 选中, 20210419, 的, 20210420, 的, 20210422, 的, 20210425, 的, 的, PyQt_source, 20210427, 的, 20210430, 的, 20210509, 的, 20210519, 的, 20210520, 的, 20210525, 的, 20210526, 的, 20210528, 的, 20210530, 的, 20210531, 的, 20210604, 的, 20210612, 的, 20210707, 的, 20210822, 的, 
### 关联
#, #, #, #, #, 4#1, 4#2, 4#3, #, #, #, #, 11#8, 11#9, 11#10, #, #, #, #, 18#0, 18#4, 18#17, #, 22#18, 18#11, 4#26, #, 4#28, #, 18#30, #, 4#32, #, 18#34, #, 34#36, #, 18#38, #, 38#40, #, 17#42, #, #, #, #, #, #, #, 42#48, 42#47, 42#43, 42#46, 43#45, 43#44, 45#48, 45#47, 17#58, #, #, #, #, #, #, #, 58#64, 58#63, 58#59, 58#62, 59#61, 59#60, 61#64, 61#63, 17#74, #, 17#76, #, 17#78, #, #, #, #, #, #, #, 74#84, 74#83, 74#79, 74#82, 79#81, 79#80, 81#84, 81#83, #, #, #, #, #, #, 76#98, 76#97, 76#93, 76#96, 93#95, 93#94, 95#98, 95#97, #, #, #, #, #, #, 78#112, 78#111, 78#107, 78#110, 107#109, 107#108, 109#112, 109#111, 17#122, #, 17#124, #, #, #, #, #, #, #, 122#130, 122#129, 122#125, 122#128, 125#127, 125#126, 127#130, 127#129, #, #, #, #, #, #, 124#144, 124#143, 124#139, 124#142, 139#141, 139#140, 141#144, 141#143, 63#83, 63#97, 63#111, 129#143, 4#158, #, 38#160, #, 4#162, #, 4#164, #, 4#166, #, 38#168, #, 38#170, #, 4#172, #, 4#174, #, 4#176, #, 4#178, #, 18#180, #, 38#182, #, 4#184, #, 4#186, #, 4#188, #, 38#190, #, 38#192, #, 38#194, #, 38#196, #, 18#198, #, 11#200, #, 11#202, #, 11#204, #, 11#206, #, 38#208, #, #, #, #, #, #, #, 208#209, 209#211, 209#214, 211#213, 211#212, #, #, #, #, #, #, #, 221#223, 221#222, 223#226, 223#225, #, #, #, #, #, #, #, 208#231, 231#237, 231#236, 231#232, 231#235, 232#234, 232#233, 234#237, 234#236, 4#248, #, 4#250, #, 4#252, #, 38#254, #, 38#256, #, 209#258, #, 209#260, #, 260#262, #, 231#264, #, 264#266, #, 264#268, #, 266#237, 266#236, 264#272, #, 272#274, #, 211#276, #, 211#278, #, 209#280, #, 209#282, #, 209#284, #, 209#286, #, 213#280, 213#282, 213#284, 213#286, 231#292, #, 231#294, #, 231#296, #, 234#292, 234#294, 234#296, 232#301, #, 232#303, #, 10#305, #, 4#307, #, 4#309, #, 9#311, #, 4#313, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 11#415, #, #, #, #, #, #, #, #, #, #, #, #, #, 11#429, #, 11#431, #, 11#433, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 11#448, #, 11#450, #, 213#258, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 209#478, #, 213#478, #, #, 38#483, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 4#579, #, 4#581, #, 4#583, #, 11#585, #, 11#587, #, 4#589, #, 209#591, #, 591#593, #, 591#213, 231#596, #, 596#234, #, 604#598, #, 604#600, #, 604#602, 208#, #, #, #, 4#609, #, 22#611, #, #, 611#612, #, 611#614, #, 611#616, #, 611#618, #, 611#620, 313#623, #, 313#625, #, 313#627, #, #, 630#628, #, #, 633#631, #, #, 636#634, #, #, 639#637, #, #, 642#640, #, #, 645#643, #, #, 648#646, #, #, 651#649, #, #, 654#652, #, 664#630, 664#633, 664#636, 664#639, 664#642, 664#645, 664#648, 664#651, 664#654, #, 623#664, #, 668#666, #, #, 671#669, #, #, 674#672, #, 678#668, 678#671, 678#674, #, 625#678, #, 682#680, #, #, 685#683, #, #, #, 689#687, #, 694#682, 694#685, 694#686, 694#689, #, 627#694, 209#697, #, 209#699, #, 260#213, 213#699, 213#697, 208#704, #, 704#742, 704#743, 704#714, 704#722, 704#723, 704#744, 704#745, 704#746, 704#734, #, 714#736, 714#719, 714#720, 714#721, #, #, #, #, #, 723#727, 723#730, 723#731, #, 727#742, 727#743, #, #, 731#733, #, #, 734#736, #, 736#742, 736#743, 736#744, 736#745, 736#746, #, #, #, #, #, #, 611#747, 11#750, #, 11#752, #, #, 208#753, #, #, #, #, #, #, #, 769#755, 769#756, 769#757, 769#758, 769#759, 769#760, 769#761, #, 771#769, #, 774#760, 774#761, #, #, 778#774, 778#775, #, #, #, #, #, 787#780, 787#781, 787#782, 787#769, #, 799#771, 799#755, 799#756, 799#757, 799#758, 799#778, 799#759, 799#779, 799#787, 799#760, 799#761, #, 208#799, 11#802, #, #, 611#803, #, 611#805, #, 611#807, #, 611#809, #, 611#811, #, 611#813, #, 611#815, #, 611#817, #, 611#819, #, 611#821, #, 611#823, #, 611#825, #, 611#827, #, 611#829, #, 611#831, 198#834, #, #, 611#835, #, 611#837, #, 611#839, #, 611#841, 38#844, #, #, 611#845, #, 611#847, #, 611#849, #, 611#851, #, 611#853, #, 611#855, #, 611#857, #, 611#859, #, 611#861, #, 611#863, #, 611#865, #, 611#867, #, 611#869, #, 611#871, 
### 内容
#0, 16:
文档\S应用\画图工具.ftxt
## end
#1, 273:
"""
+[返回目录](,画)

"""

+画(_画板,_矩形)->的(_画板,m_scene)...
->m_scene(,_场景)->的(_场景,_矩形)->+[有](_场景,+画)...
->[]{
    []=>画(_画板,){[]=>[is](画,+画)}=>+[del](,画)
};

+画(_场景,_矩形)->+[del](,+画)...
->m_scene(,_场景)->的(_画图,m_scene)->[]{
    []=>画(_画图,)=>+[del](,画)
}->+画(_画图,_矩形)->+[有](_场景,+画)
## end
#2, 128:
"""
+[返回目录]

"""

+删除矩形(,_矩形)->+[del](,+删除矩形)...
->的(_矩形,画图)->的(画图,输入)->[]{
	[]=>的(输入,_pt)->是(,_pt)=>+[del](,是)
}->+[删除结构](,_矩形)
## end
#3, 585:
"""
+[返回目录](,创建矩形)

"""


+创建矩形(_场景,_矩形)->+[del](,+创建矩形)...
->m_scene(,_场景)->的(_画图,m_scene)->[]{
    []=>画(_画图,)=>+[del](,画)
}->+[有](_场景,_矩形)->+画(_画图,_矩形)...
->+[有](_矩形,+起点)->+[有](_矩形,+尺寸)->+[有](_矩形,+画图)...
->+[有](_矩形,+类型)->+类型"矩形"...
->+[有](+画图,+输入)->+[有](+画图,+输出)...
->+[有](+输入,+起点)->+[有](+输入,+尺寸)...
->+[标题](_矩形,)->+[增加内容]"
%s:"(+[标题],_场景)...
->+画图"
\"\"\"
+[返回目录](,画图)
输入:...
输出:...

\"\"\"

pt=起点[0]
size=尺寸[0]
qp.setBrush(QBrush())
qp.drawRect(pt[0],pt[1],size[0],size[1])

qp.setBrush(QBrush())

"->+[修改内容]"+[返回目录]

起点::200,100
尺寸::500,200
类型::矩形

画图:...
"(,_矩形)...

->+选中区域"

"
## end
#4, 361:
+[返回目录](,画图动词)
样本:...


设置原点:...
设置缩放:...
更新场景状态:...

+[修改内容](设置原点,设置缩放)

画:...
创建矩形_old:...
创建圆形_old:...
创建直线_old:...
创建文本框:...
+[修改标题]"%s_old"(创建直线,创建直线)
创建矩形:...
创建圆形:...
创建直线:...

更新图形结构:...



删除矩形:...

设置尺寸:...
设置起点:...
+[修改内容](设置尺寸,设置起点)

对齐:...
水平:...
相对位置:...
平移:...
显示名称:...

设置中心:...
更新中心:...
同步中心:...
+[修改内容](更新中心,同步中心)



显示选中框:...
隐藏选中框:...
按键:...
## end
#8, 313:
"""
+[返回目录](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
pt[0]=m[0]-size[0]/2
pt[1]=m[1]-size[1]/2
"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[.]"size"(+[python],尺寸)

## end
#9, 41:
"""
+[返回目录](,mouseRelease)
保存旧版:...

"""

## end
#10, 394:
"""
+[返回目录](,mousePress)
保存旧版:...

"""

+mousePress(_画图,_物体)->+[del](,+mousePress)...
->的(_画图,m_select)->的(_画图,m_mouse):
->的(m_select,_物体)->+[按键](,_物体)->+[在](+[按键],m_mouse),
->+[有](m_select,_物体)->+[显示选中框](,_物体)=>的(m_select,_其它图形)=>+[del](,的)->+[隐藏选中框](,_其它图形);



+mousePress(_画图,_物体)->+[del](,+mousePress)...
->[]{[]=>_物体}->的(_画图,m_select)...
=>的(m_select,_其它图形)=>+[del](,的)->+[隐藏选中框](,_其它图形);
## end
#11, 259:
+[返回目录](,画图动作)

mousePress:...
mouseMove:...
mouseRelease:...

Up:...
Down:...
Right:...
Left:...

PgUp:...
PgDown:...

Return:...
Del:...
ctrl+1:...
ctrl+2:...
ctrl+3:...

ctrl+C:...
ctrl+V:...
ctrl+X:...
+[修改内容](ctrl+C,ctrl+X)

timer:...

+[修改内容](Up,Return)
## end
#17, 152:
+[返回目录](,场景)

桌子:
抽屉1:
抽屉2:
抽屉3:
抽屉4:
柜子1:
柜子2:

的(柜子1,起点)->的(柜子2,起点#2)->+[对齐](起点,起点#2)
+[创建矩形](场景,柜子2)
的(柜子1,尺寸)->的(柜子2,尺寸#2)->+是(尺寸,尺寸#2)
+[画](场景,柜子2)
## end
#18, 452:
+[返回目录]
地址::文档\S应用\画图工具.ftxt
[当前编辑器](制作画图,)->是([当前编辑器],_)->+[另存为](_,地址)

是([当前文件],_文件)->[端口](_文件,)->是([端口],_端口)->是([根源],根源)->+[新建画图](根源,新画图)->+[端口](+[新建画图],_端口)
+[设置场景](新画图,场景)
新画图::
+[画板](+新画图,场景)

是([动词库],动词)->+[打开文件](+新窗口,动词)

画图动词:...
画图名词:...
画图动作:...
+[设置动词](,画图动词)
+[设置名词](,画图名词)
+[设置动作](,画图动作)

样本库:...

场景:...
+[创建文本框](场景,+D)

OPA画图::文档\S应用\OPA画图.txt
+[打开文件](+新窗口,OPA画图)

日志:...

资料::https://likegeeks.com/pyqt5-drawing-tutorial/
+[打开网页](,资料)

## end
#22, 53:
制作画图:...
+[修改标题]"目录"(,文本)

节点数目统计::
+[设置结构](,节点数目统计)

## end
#26, 685:
"""
+[返回目录](,创建圆形)
+[修改标题]"创建圆形"(,创建椭圆)

"""


+创建圆形(_场景,_椭圆)->+[del](,+创建圆形)...
->m_scene(,_场景)->的(_画图,m_scene)->[]{
    []=>画(_画图,)=>+[del](,画)
}->+[有](_场景,_椭圆)->+画(_画图,_椭圆)...
->+[有](_椭圆,+中心)->+[有](_椭圆,+长宽)->+[有](_椭圆,+画图)...
->+[有](_椭圆,+类型)->+类型"圆形"...
->+[有](+画图,+输入)->+[有](+画图,+输出)...
->+[有](+输入,+中心)->+[有](+输入,+长宽)...
->+[标题](_椭圆,)->+[增加内容]"
%s:"(+[标题],_场景)...
->+画图"
\"\"\"
+[返回目录](,画图)
输入:...
输出:...

\"\"\"
pt=中心[0]
size=长宽[0]

qp.setBrush(QBrush(Qt.black))
qp.drawEllipse(pt[0]-2,pt[1]-2,4,4)
qp.setBrush(QBrush())

qp.drawEllipse(pt[0]-size[0]/2,pt[1]-size[1]/2,size[0],size[1])
qp.setBrush(QBrush())


"...
->+[修改内容]"+[返回目录]

中心::200,100
长宽::500,200
类型::圆形

画图:...

"(,_椭圆)
## end
#28, 529:
"""
+[返回目录](,创建直线)

"""


+创建直线(_场景,_直线)->+[del](,+创建直线)...
->m_scene(,_场景)->的(_画图,m_scene)->[]{
    []=>画(_画图,)=>+[del](,画)
}->+[有](_场景,_直线)->+画(_画图,_直线)...
->+[有](_直线,+起点)->+[有](_直线,+终点)->+[有](_直线,+画图)...
->+[有](_直线,+类型)->+类型"直线"...
->+[有](+画图,+输入)->+[有](+画图,+输出)...
->+[有](+输入,+起点)->+[有](+输入,+终点)...
->+[标题](_直线,)->+[增加内容]"
%s:"(+[标题],_场景)...
->+画图"
\"\"\"
+[返回目录](,画图)
输入:...
输出:...

\"\"\"
pt1=起点[0]
pt2=终点[0]
qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])


"...
->+[修改内容]"+[返回目录]

起点::200,100
终点::500,200
类型::直线

画图:...

"(,_直线)
## end
#30, 16:
文档\S应用\OPA画图.txt
## end
#32, 850:
"""
+[返回目录](,创建文本框)

"""


+创建文本框(_场景,_文字)->+[del](,+创建文本框)...
->m_scene(,_场景)->的(_画图,m_scene)->[]{
    []=>画(_画图,)=>+[del](,画)
}->+[有](_场景,_文字)->+画(_画图,_文字)...
->+[有](_文字,+位置)->+[有](_文字,+尺寸)->+[有](_文字,+内容)...
->+尺寸"15"...
->+[有](_文字,+画图)->+[有](+画图,+输入)->+[有](+画图,+输出)...
->+[有](_文字,+类型)->+类型"文本框"...
->+[有](+输入,+位置)->+[有](+输入,+尺寸)->+[有](+输入,+内容)...
->+[标题](_文字,)->+[增加内容]"
%s:"(+[标题],_场景)...
->+画图"
\"\"\"
+[返回目录](,画图)
输入:...
输出:...

\"\"\"

from PyQt5.QtGui import QFont

pt=位置[0]
size=尺寸[0]
qp.setFont(QFont(\"Decorative\",size))

qp.setBrush(QBrush(Qt.black))
qp.drawEllipse(pt[0]-2,pt[1]-2,4,4)
qp.setBrush(QBrush())

if 内容==\"\":
    qp.drawRect(pt[0]-0.5*size,pt[1]+0.3*size,13*size,-2*size)
    qp.drawText(pt[0],pt[1],\"在此处输入文字\")
else:
    qp.drawText(pt[0],pt[1],内容)


"->+[修改内容]"+[返回目录]

位置::200,100
尺寸::15
内容::无
类型::文本框

画图:...

"(,_文字)

## end
#34, 26:
+[返回目录](,日志)

20201114:...
## end
#36, 21:
+[返回目录](,20201114)



## end
#38, 436:
+[返回目录](,样本库)
样本:...
PyQt::https://doc.qt.io/qtforpython/PySide2/QtGui/QPainter.html
PyQt_source::https://www.riverbankcomputing.com/static/Docs/PyQt4/qpainterpath.html
+[打开网页](,PyQt_source)

箭头:...
箭头2:...
正弦波:...
小窗口函数:...
图片:...

场:...
增加文字:...

+[修改内容](样本,增加文字)


+[画板](+样本库,原型)
原型:...

图形::圆形
[当前编辑器](样本库,)->是([当前编辑器],_)->+[S函数](_,更新动词)
更新动词:...
(注意一下, 这里在打开两个窗口的时候可能会出问题. )


代码:...
+[生成互动程序](原型,代码)

是([动词库],动词)->+[打开文件](+新窗口,动词)
## end
#40, 799:
"""
+[返回目录](,箭头)
输入:...
输出:...

"""
pt1=起点[0]
pt2=终点[0]

angle=30
l=20
r=np.sqrt((pt1[0]-pt2[0])**2+(pt1[1]-pt2[1])**2)
if r!=0:
    theta=np.rad2deg(np.sign(pt1[1]-pt2[1])*np.arccos((pt2[0]-pt1[0])/r))
dp21=[l*np.cos(np.deg2rad(theta-angle/2)),-l*np.sin(np.deg2rad(theta-angle/2))]
dp22=[l*np.cos(np.deg2rad(theta+angle/2)),-l*np.sin(np.deg2rad(theta+angle/2))]
qp.drawLine(pt2[0],pt2[1],pt2[0]-dp21[0],pt2[1]-dp21[1])
qp.drawLine(pt2[0],pt2[1],pt2[0]-dp22[0],pt2[1]-dp22[1])
qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])


"""
path=QPainterPath()
path.moveTo(pt2[0],pt2[1])
path.lineTo(pt2[0]-dp21[0],pt2[1]-dp21[1])
path.lineTo(pt2[0]-dp22[0],pt2[1]-dp22[1])
path.lineTo(pt2[0],pt2[1])

qp.setBrush(QBrush(Qt.black))
qp.drawPath(path)
qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
qp.setBrush(QBrush())
"""
## end
#42, 52:
+[返回目录](,桌子)

起点::200,100
尺寸::500,200
类型::矩形

画图:...
## end
#43, 128:
"""
+[返回目录](,画图)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]

qp.setBrush(QBrush(Qt.white))
qp.drawRect(pt[0],pt[1],size[0],size[1])
## end
#46, 2:
矩形
## end
#47, 12:
584.0, 295.0
## end
#48, 8:
189, 109
## end
#58, 54:
+[返回目录](,抽屉1)

起点::200,100
尺寸::500,200
类型::矩形

画图:...

## end
#59, 101:

"""
+[返回目录](,画图)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]
qp.drawRect(pt[0],pt[1],size[0],size[1])



## end
#62, 2:
矩形
## end
#63, 11:
215.0, 43.0
## end
#64, 8:
234, 129
## end
#74, 48:
+[返回目录]

起点::200,100
尺寸::500,200
类型::矩形

画图:...

## end
#76, 48:
+[返回目录]

起点::200,100
尺寸::500,200
类型::矩形

画图:...

## end
#78, 48:
+[返回目录]

起点::200,100
尺寸::500,200
类型::矩形

画图:...

## end
#79, 101:

"""
+[返回目录](,画图)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]
qp.drawRect(pt[0],pt[1],size[0],size[1])



## end
#82, 2:
矩形
## end
#83, 11:
215.0, 43.0
## end
#84, 12:
234.0, 192.0
## end
#93, 101:

"""
+[返回目录](,画图)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]
qp.drawRect(pt[0],pt[1],size[0],size[1])



## end
#96, 2:
矩形
## end
#97, 11:
215.0, 43.0
## end
#98, 12:
234.0, 257.0
## end
#107, 101:

"""
+[返回目录](,画图)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]
qp.drawRect(pt[0],pt[1],size[0],size[1])



## end
#110, 2:
矩形
## end
#111, 11:
215.0, 43.0
## end
#112, 12:
234.0, 322.0
## end
#122, 48:
+[返回目录]

起点::200,100
尺寸::500,200
类型::矩形

画图:...

## end
#124, 48:
+[返回目录]

起点::200,100
尺寸::500,200
类型::矩形

画图:...

## end
#125, 101:

"""
+[返回目录](,画图)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]
qp.drawRect(pt[0],pt[1],size[0],size[1])



## end
#128, 2:
矩形
## end
#129, 12:
223.0, 104.0
## end
#130, 8:
518, 131
## end
#139, 101:

"""
+[返回目录](,画图)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]
qp.drawRect(pt[0],pt[1],size[0],size[1])



## end
#142, 2:
矩形
## end
#143, 12:
223.0, 104.0
## end
#144, 12:
518.0, 259.0
## end
#158, 824:
"""
+[返回目录](,对齐)

"""

+对齐(_矩形1,_矩形2)->+[del](,+对齐)->的(_矩形1,类型)->类型"矩形"...
->的(_矩形2,类型#2)->类型#2"矩形"...
->的(_矩形1,起点#1)->的(_矩形2,起点#2)...
->+[python](Python,)->+[.]"pt"(+[python],起点#1)->+[o]"pt1"(+[python],起点#2)...
->[]{
	[==]"水平"(,+对齐)->+[临时文本]"pt1[1]=pt[1]"->[m_text](+[临时文本],+[python])
}:->[],->>+[临时文本]"pt1[0]=pt[0]"->[m_text](+[临时文本],+[python]);


+对齐(_直线1,_直线2)->+[del](,+对齐)->的(_直线1,类型)->类型"直线"...
->的(_直线2,类型#2)->类型#2"直线"...
->的(_直线1,起点#1)->的(_直线1,终点#1)...
->的(_直线2,起点#2)->的(_直线2,终点#2)...
->+[对齐](起点#1,起点#2)->[m_text](+对齐,+[对齐])...
->+[对齐](终点#1,终点#2)->[m_text](+对齐,+[对齐]);


+对齐(_位置1,_位置2)->+[del](,+对齐)...
->+[python](Python,)->+[.]"pt"(+[python],_位置1)->+[o]"pt1"(+[python],_位置2)...
->[]{
	[==]"水平"(,+对齐)->+[临时文本]"pt1[1]=pt[1]"->[m_text](+[临时文本],+[python])
}:->[],->>+[临时文本]"pt1[0]=pt[0]"->[m_text](+[临时文本],+[python]);
## end
#160, 541:
"""
+[返回目录](,正弦波)
输入:...
输出:...

"""
pt1=起点[0]
pt2=终点[0]
A=50
lamb=5

length=np.sqrt((pt1[0]-pt2[0])**2+(pt1[1]-pt2[1])**2)
# length=np.linalg.norm(pt1-pt2)

x_i=np.linspace(0,length,500)
y_i=A*np.sin(x_i/lamb)

dir_x=(pt2-pt1)/length
dir_y=np.array([dir_x[1],-dir_x[0]])
path=QPainterPath()
for i in range(len(x_i)):
    x=x_i[i]*dir_x[0]+y_i[i]*dir_y[0]+pt1[0]
    y=x_i[i]*dir_x[1]+y_i[i]*dir_y[1]+pt1[1]
    if i==0:
        path.moveTo(x,y)
    else:
        path.lineTo(x,y)
qp.drawPath(path)

#qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
## end
#162, 161:
"""
+[返回目录](,水平)

"""

+水平(,_直线)->+[del](,+水平)...
->的(_直线,起点)->的(_直线,终点)->+[python]"
pt1[0,1]=pt[0,1]
"(Python,)->+[.]"pt"(+[python],起点)->+[o]"pt1"(+[python],终点)
## end
#164, 170:
"""
+[返回目录](,相对位置)

"""

+相对位置(_起点,_终点)->+[python]"
pt1=pt+dp
"(Python,)->+[.]"pt"(+[python],_起点)->+[.]"dp"(+[python],+相对位置)->+[o]"pt1"(+[python],_终点)...
->+[del](,+相对位置)
## end
#166, 23:
"""
+[返回目录](,样本)

"""


## end
#168, 369:
"""
+[返回目录](,小窗口函数)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]

x=np.linspace(0,1,500)
y=2*np.exp(-(x-0.5)**2/0.2**2)-1

x=abs(size[0])*x+pt[0]
y=-np.abs(size[1])*y/2+pt[1]+size[1]/2

path=QPainterPath()
for i in range(len(x)):
    if i==0:
        path.moveTo(x[i],y[i])
    else:
        path.lineTo(x[i],y[i])
qp.drawPath(path)

qp.drawRect(pt[0],pt[1],size[0],size[1])
## end
#170, 1293:
"""
+[返回目录](,箭头2)
输入:...
输出:...

"""
pt1=起点[0]
pt2=终点[0]

angle=90
L1=50
d1=20

r=np.sqrt((pt1[0]-pt2[0])**2+(pt1[1]-pt2[1])**2)
if r!=0:
    sign=np.sign(pt1[1]-pt2[1])
    if sign==0:
        sign=1
    theta=np.rad2deg(sign*np.arccos((pt2[0]-pt1[0])/r))
else:
    theta=0
L2=r-L1
d2=L1*np.tan(np.deg2rad(angle/2))-d1

dx1=[0,0,0]
dy1=[0,0,0]
dx1[0]=d1*np.cos(np.deg2rad(theta+90))
dy1[0]=-d1*np.sin(np.deg2rad(theta+90))
dx1[1]=L2*np.cos(np.deg2rad(theta))
dy1[1]=-L2*np.sin(np.deg2rad(theta))
dx1[2]=d2*np.cos(np.deg2rad(theta+90))
dy1[2]=-d2*np.sin(np.deg2rad(theta+90))

dx2=[0,0,0]
dy2=[0,0,0]
dx2[0]=d1*np.cos(np.deg2rad(theta-90))
dy2[0]=-d1*np.sin(np.deg2rad(theta-90))
dx2[1]=L2*np.cos(np.deg2rad(theta))
dy2[1]=-L2*np.sin(np.deg2rad(theta))
dx2[2]=d2*np.cos(np.deg2rad(theta-90))
dy2[2]=-d2*np.sin(np.deg2rad(theta-90))


x1=[pt1[0]]
y1=[pt1[1]]
for i in range(3):
    x1.append(x1[i]+dx1[i])
    y1.append(y1[i]+dy1[i])

x2=[pt1[0]]
y2=[pt1[1]]
for i in range(3):
    x2.append(x2[i]+dx2[i])
    y2.append(y2[i]+dy2[i])
x2.reverse()
y2.reverse()
x=x1+[pt2[0]]+x2
y=y1+[pt2[1]]+y2

path=QPainterPath()
for i in range(len(x)):
    if i==0:
        path.moveTo(x[i],y[i])
    else:
        path.lineTo(x[i],y[i])

qp.setBrush(QBrush(Qt.white))
qp.drawPath(path)
qp.setBrush(QBrush())
## end
#172, 574:
"""
+[返回目录](,平移)

"""

+平移(,_直线)->的(_直线,类型)->类型"直线"...
->的(_直线,起点)->的(_直线,终点)...
->+[python]"
for i:range(2):
    pt1[i]=pt1[i]+dp[i]
    pt2[i]=pt2[i]+dp[i]
"(Python,)->+[o]"pt2"(+[python],终点)->+[o]"pt1"(+[python],起点)->+[.]"dp"(+[python],+平移)...
->+[del](,+平移);

+平移(,_矩形)->的(_矩形,类型)->类型"矩形"...
->的(_矩形,起点)...
->+[python]"
pt[0]=pt[0]+dp[0]
pt[1]=pt[1]+dp[1]
"(Python,)->+[o]"pt"(+[python],起点)->+[.]"dp"(+[python],+平移)...
->+[del](,+平移);

+平移(,_点)->+[python]"
pt[0]=pt[0]+dp[0]
pt[1]=pt[1]+dp[1]
"(Python,)->+[o]"pt"(+[python],_点)->+[.]"dp"(+[python],+平移)...
->+[del](,+平移)
## end
#174, 428:
"""
+[返回目录](,显示名称)

"""

+显示名称(,_物体)->+[del](,+显示名称)->的(_物体,类型)...
->[]{的(_物体,名称)}:->[],
->>+的(_物体,+名称)->+[标题](_物体,)->+[修改内容](+[标题],+名称)...
->的(_物体,画图)->的(画图,输入)->+的(输入,+名称)...
->+[增加内容]"
名称::%s"(+[标题],_物体)...
->[]{
	[==]"矩形"(,类型)->+[增加内容]"
qp.drawText(pt[0],pt[1],名称)"(,画图)
}:->[],
->>[]{
	[==]"直线"(,类型)->+[增加内容]"
qp.drawText(pt1[0],pt1[1],名称)"(,画图)
}:->[],
->>[]{
	[==]"圆形"(,类型)->+[增加内容]"
qp.drawText(pt1[0],pt1[1],名称)"(,画图)
}
## end
#176, 363:
"""
+[返回目录](,设置原点)

"""

+设置原点(_位置,_场景)->_场景->m_scene(,_场景)->的(_画板,m_scene)...
->的(_画板,m_origin)...
->[]{
	_位置->+[修改内容](_位置,m_origin)->+[del](,+设置原点)
}:->[],->>+[修改内容](+设置原点,m_origin)->+[del](,+设置原点);


+设置原点(_位置,_画板)->的(_画板,m_origin)->+[修改内容](+设置原点,m_origin)...
->[]{
	_位置->+[修改内容](_位置,m_origin)->+[del](,+设置原点)
}:->[],->>+[修改内容](+设置原点,m_origin)->+[del](,+设置原点);
## end
#178, 208:
"""
+[返回目录](,设置单位)

"""

+设置单位(,_场景)->_场景->m_scene(,_场景)->的(_画板,m_scene)...
->的(_画板,m_unit)->+[修改内容](+设置单位,m_unit)...
->+[del](,+设置单位);


+设置单位(,_画板)->的(_画板,m_unit)->+[修改内容](+设置单位,m_unit)...
->+[del](,+设置单位);
## end
#180, 45:
https://likegeeks.com/pyqt5-drawing-tutorial/
## end
#182, 154:
"""
+[返回目录](,图片)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]

image=QPixmap('测试.png')
image_tmp=image.scaledToWidth(600)
qp.drawPixmap(pt[0],pt[1],image_tmp)

## end
#184, 346:
"""
+[返回目录](,设置中心)
+[修改标题]"设置中心"(,中心)

"""

+设置中心(_中心,_物体)...
->的(_物体,类型)->类型"矩形"...
->的(_物体,尺寸)->的(_物体,起点)...
->+[python]"
pt[0,0]=pt0[0,0]-size[0,0]/2
pt[0,1]=pt0[0,1]-size[0,1]/2
"(Python,)->+[.]"size"(+[python],尺寸)->+[o]"pt"(+[python],起点)...
->[]{_中心->+[.]"pt0"(+[python],_中心)
}:->+[del](,+设置中心),
->>+[.]"pt0"(+[python],+设置中心)->+[del](,+设置中心)
## end
#186, 277:
"""
+[返回目录](,更新中心)

"""

+更新中心(,_物体)->+[del](,+更新中心)...
->的(_物体,类型)->类型"矩形"...
->的(_物体,尺寸)->的(_物体,起点)->的(_物体,中心)...
->+[python]"
pt[0,0]=pt0[0,0]-size[0,0]/2
pt[0,1]=pt0[0,1]-size[0,1]/2
"(Python,)->+[.]"size"(+[python],尺寸)->+[o]"pt"(+[python],起点)...
->+[.]"pt0"(+[python],中心)

## end
#188, 273:
"""
+[返回目录](,同步中心)

"""

+同步中心(,_物体)->+[del](,+同步中心)...
->的(_物体,类型)->类型"矩形"...
->的(_物体,尺寸)->的(_物体,起点)->的(_物体,中心)...
->+[python]"
x=pt[0,0]+size[0,0]/2
y=pt[0,1]+size[0,1]/2
pt0=[x,y]
"(Python,)->+[.]"size"(+[python],尺寸)->+[.]"pt"(+[python],起点)...
->+[o]"pt0"(+[python],中心)

## end
#190, 557:
"""
+[返回目录](,场)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]
#qp.drawRect(pt[0],pt[1],size[0],size[1])

N=5
angle=30
l=20

if size[0]>0:
    theta=0
else:
    theta=180

dp1=[l*np.cos(np.deg2rad(theta-angle/2)),-l*np.sin(np.deg2rad(theta-angle/2))]
dp2=[l*np.cos(np.deg2rad(theta+angle/2)),-l*np.sin(np.deg2rad(theta+angle/2))]

Y=np.linspace(0,size[1],N)+pt[1]
x0=pt[0]
x1=pt[0]+size[0]
path=QPainterPath()
for y in Y:
    path.moveTo(x1-dp1[0],y-dp1[1])
    path.lineTo(x1,y)
    path.lineTo(x1-dp2[0],y-dp2[1])
    qp.drawPath(path)
    qp.drawLine(x0,y,x1,y)
## end
#192, 35:
"""
+[返回目录](,样本)
输入:...
输出:...

"""
## end
#194, 134:
"""
+[返回目录](,增加文字)
输入:...
输出:...

"""

qp.setFont(QFont("Decorative",20))
qp.drawText(pt[0]+20,pt[1]+size[1]/2,名称)
qp.setFont(QFont())
## end
#196, 70:
https://www.riverbankcomputing.com/static/Docs/PyQt4/qpainterpath.html
## end
#198, 52:
+[返回目录](,画图名词)

测试一次:...
选中:...
+[del](,测试一次)
[测试一次]
## end
#200, 148:
"""
+[返回目录](,Up)

"""

+Up(_画图,)->+[del](,+Up)...
->的(_画图,m_origin)->+[平移]"0,-50"(,m_origin)...
->的(_画图,m_scene)->m_scene(,_场景)->+[更新场景状态](_画图,_场景)

## end
#202, 154:
"""
+[返回目录](,Down)

"""

+Down(_画图,)->+[del](,+Down)...
->的(_画图,m_origin)->+[平移]"0,50"(,m_origin)...
->的(_画图,m_scene)->m_scene(,_场景)->+[更新场景状态](_画图,_场景);

## end
#204, 157:
"""
+[返回目录](,Right)

"""

+Right(_画图,)->+[del](,+Right)...
->的(_画图,m_origin)->+[平移]"50,0"(,m_origin)...
->的(_画图,m_scene)->m_scene(,_场景)->+[更新场景状态](_画图,_场景);

## end
#206, 154:
"""
+[返回目录](,Left)

"""

+Left(_画图,)->+[del](,+Left)...
->的(_画图,m_origin)->+[平移]"-50,0"(,m_origin)...
->的(_画图,m_scene)->m_scene(,_场景)->+[更新场景状态](_画图,_场景);
## end
#208, 134:
+[返回目录](,原型)

矩形:...
圆形:...
直线:...

测试图形:
+[删除结构](,测试图形)->+[创建直线](,测试图形)

+[生成场景函数](原型,+[显示])
+[场景HTML](原型,+[临时文本])->+[H函数](,+[临时文本])

## end
#209, 149:
+[返回目录](,矩形)
+[设置结构](,矩形)

起点::-200,100
尺寸::100,100
类型::矩形
文字::
字体::10

面颜色::255,255,255
线颜色::0,0,0
线型::SolidLine
线粗细::2

画图:...
选中区域:...
HTML:...



## end
#210, 2:



## end
#211, 992:
"""
+[返回目录](,画图)
+[返回目录](,图形)
输入:...

图形:...
选中框:...

"""


pt=起点
size=尺寸
size_F=字体[0]

lineWidth=线粗细[0]
lineType=线型

if len(面颜色)==0 or 面颜色=='None':
    qp.setBrush(QBrush())
else:
    faceColor=面颜色
    qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    if lineType=="DashLine":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawRect(pt[0],pt[1],size[0],size[1])
qp.setBrush(QBrush())
qp.setPen(QPen())


qp.setFont(QFont("Decorative",size_F))
qp.drawText(pt[0],pt[1],size[0],size[1],Qt.AlignHCenter|Qt.AlignVCenter,文字)
qp.setFont(QFont())

#if isinstance(文字,str):
#    qp.setFont(QFont("Decorative",size_F))
#    dy=size_F*1.4
#    dx=len(文字)*size_F*1.65
#    qp.drawText(pt[0]-dx/2+size[0]/2,pt[1]+dy/2+size[1]/2,文字)
#    qp.setFont(QFont())





## end
#213, 101:
+[返回目录](,输入)

面颜色::255,255,255
线颜色::0,0,0
线型::DashLine
线粗细::1
文字::测试
字体::20
尺寸::100,100
起点::-200,100

## end
#214, 2:
矩形
## end
#220, 2:



## end
#221, 145:

"""
+[返回目录](,画图)
输入:...
输出:...

"""

pt=起点[0]
size=尺寸[0]
qp.setBrush(QBrush())
qp.drawRect(pt[0],pt[1],size[0],size[1])

qp.setBrush(QBrush())


## end
#224, 2:
矩形
## end
#225, 11:
281.0, 33.0
## end
#226, 13:
-105.0, -56.0
## end
#231, 130:
+[返回目录](,直线)

起点::300,-150
终点::100,-100
类型::直线

线颜色::0,0,0
线型::SolidLine
线粗细::1

画图:...
选中区域:...
HTML:...
的(画图,输入)->+[有](HTML,输入)

## end
#232, 465:
"""
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:...
选中框:...

"""
pt1=起点
pt2=终点

lineWidth=线粗细[0]
lineType=线型

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    if lineType=="DashLine":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
qp.setPen(QPen())



## end
#234, 31:
线颜色::0,0,0
线型::DashLine
线粗细::2

## end
#235, 2:
直线
## end
#236, 13:
-261.0, -64.0
## end
#237, 10:
-1.0, 58.0
## end
#248, 6499:
"""
+[返回目录](,创建矩形)

"""


+创建矩形#0(,_矩形#50)->+[del]#1(,+创建矩形#0)...


...............................................
->+[临时文本]#2"+[返回目录](,矩形)
+[设置结构](,矩形)

起点::-200,100
尺寸::100,100
类型::矩形
文字::
字体::10

面颜色::255,255,255
线颜色::0,0,0
线型::SolidLine
线粗细::2

画图:...
选中区域:...
HTML:...


"(,)...
...............................................


->+[修改内容]#3(+[临时文本]#2,_矩形#50)...


...............................................
->+尺寸#4"246.0, 157.0"(,)...
...............................................





...............................................
->+起点#5"9.0, -189.5"(,)...
...............................................


->+字体#6"10"(,)->+文字#7"你好"(,)->+线粗细#8"2"(,)...


...............................................
->+线型#9"SolidLine"(,)...
...............................................





...............................................
->+线颜色#10"0,0,0"(,)...
...............................................





...............................................
->+面颜色#11"255,255,255"(,)...
...............................................


->+的#12(+输入#20,+起点#5)->+的#13(+输入#20,+尺寸#4)->+的#14(+输入#20,+字体#6)->+的#15(+输入#20,+文字#7)->+的#16(+输入#20,+线粗细#8)->+的#17(+输入#20,+线型#9)->+的#18(+输入#20,+线颜色#10)->+的#19(+输入#20,+面颜色#11)...


...............................................
->+输入#20"+[返回目录](,输入)

面颜色::255,255,255
线颜色::0,0,0
线型::DashLine
线粗细::1
文字::测试
字体::20
尺寸::100,100
起点::-200,100
"(,)...
...............................................





...............................................
->+输出#21"+[返回目录]
+[内容]
"(,)...
...............................................


->+的#22(+HTML#24,+输入#20)->+的#23(+HTML#24,+输出#21)...


...............................................
->+HTML#24"/*
+[返回目录](,HTML)

+[JS函数](,HTML)
+[设置结构](,输入)
*/


var size=[%尺寸];
var pos=[%起点];

if('%线颜色'==='None') {
	ctx.strokeStyle='rgba(255,255,255)';
} else {
	ctx.strokeStyle='rgb(%线颜色)';
        ctx.lineWidth=%线粗细
        if('%线型'==='DashLine') {
            ctx.setLineDash([5,5])
        };
        ctx.strokeRect(%起点,%尺寸);
}

if('%面颜色'==='None') {
	ctx.fillStyle='rgba(255,255,255,0)';
} else {
	ctx.fillStyle='rgb(%面颜色)';
        ctx.fillRect(%起点,%尺寸);
}

ctx.setLineDash([])

//ctx.strokeStyle='rgb(%线颜色)';
//ctx.lineWidth=%线粗细;
//ctx.strokeRect(%起点,%尺寸);

ctx.fillStyle='rgba(0,0,0,1)';
ctx.textAlign='center'
ctx.textBaseline='middle'
ctx.font=%字体*2+'px serif'
ctx.fillText('%文字',pos[0]+size[0]/2,pos[1]+size[1]/2);


/*
+[JS函数](,HTML)
+[设置结构](,输入)
*/"(,)...
...............................................





...............................................
->+输出#25"+[返回目录]
+[内容]
"(,)...
...............................................


->+的#26(+选中区域#28,+输入#20)->+的#27(+选中区域#28,+输出#25)...


...............................................
->+选中区域#28"\"\"\"
+[返回目录](,选中区域)
输入:...
+[设置结构](,输入)

\"\"\"

pt=起点
pt0=mouse_pos
size=尺寸

X=[pt[0],pt[0]+size[0]]
Y=[pt[1],pt[1]+size[1]]

if (pt0[0]-X[0])*(pt0[0]-X[1])<=0 and (pt0[1]-Y[0])*(pt0[1]-Y[1])<=0:
    state=True
else:
    state=False

"(,)...
...............................................


->+类型#29"矩形"(,)...


...............................................
->+图形#30"\"\"\"
+[返回目录](,画图)
+[返回目录](,图形)
输入:...

图形:...
选中框:...

\"\"\"


pt=起点
size=尺寸
size_F=字体[0]

lineWidth=线粗细[0]
lineType=线型

if len(面颜色)==0 or 面颜色=='None':
    qp.setBrush(QBrush())
else:
    faceColor=面颜色
    qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen(QColor(0,0,0,0)))
else:
    edgeColor=线颜色
    if lineType==\"DashLine\":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawRect(pt[0],pt[1],size[0],size[1])
qp.setBrush(QBrush())
qp.setPen(QPen())


qp.setFont(QFont(\"Decorative\",size_F))
qp.drawText(pt[0],pt[1],size[0],size[1],Qt.AlignHCenter|Qt.AlignVCenter,文字)
qp.setFont(QFont())

#if isinstance(文字,str):
#    qp.setFont(QFont(\"Decorative\",size_F))
#    dy=size_F*1.4
#    dx=len(文字)*size_F*1.65
#    qp.drawText(pt[0]-dx/2+size[0]/2,pt[1]+dy/2+size[1]/2,文字)
#    qp.setFont(QFont())




"(,)...
...............................................





...............................................
->+选中框#31"\"\"\"
+[返回目录](,选中框)

\"\"\"


X=[pt[0],pt[0]+size[0]/2,pt[0]+size[0]]
Y=[pt[1],pt[1]+size[1]/2,pt[1]+size[1]]
R=6

qp.setBrush(QBrush())
qp.drawRect(pt[0],pt[1],size[0],size[1])

qp.setPen(QPen(QColor(140,140,140),2.5))
qp.setBrush(QBrush(Qt.white))
qp.drawEllipse(X[0]-R,Y[0]-R,2*R,2*R)
qp.drawEllipse(X[2]-R,Y[0]-R,2*R,2*R)

if size[0]>30 or size[0]<-30:
    qp.drawEllipse(X[1]-R,Y[0]-R,2*R,2*R)
    qp.drawEllipse(X[1]-R,Y[2]-R,2*R,2*R)

if size[1]>30 or size[1]<-30:
    qp.drawEllipse(X[0]-R,Y[1]-R,2*R,2*R)
    qp.drawEllipse(X[2]-R,Y[1]-R,2*R,2*R)


qp.drawEllipse(X[0]-R,Y[2]-R,2*R,2*R)
qp.drawEllipse(X[2]-R,Y[2]-R,2*R,2*R)
qp.setBrush(QBrush())
qp.setPen(QPen(Qt.black))
"(,)...
...............................................


->+输出#32(,)->+的#33(+画图#37,+图形#30)->+的#34(+画图#37,+选中框#31)->+的#35(+画图#37,+输出#32)->+的#36(+画图#37,+输入#20)...


...............................................
->+画图#37"\"\"\"
+[返回目录](,画图)
+[返回目录](,图形)
输入:...

图形:...
选中框:...

\"\"\"


pt=起点
size=尺寸
size_F=字体[0]

lineWidth=线粗细[0]
lineType=线型

if len(面颜色)==0 or 面颜色=='None':
    qp.setBrush(QBrush())
else:
    faceColor=面颜色
    qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    if lineType==\"DashLine\":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawRect(pt[0],pt[1],size[0],size[1])
qp.setBrush(QBrush())
qp.setPen(QPen())


qp.setFont(QFont(\"Decorative\",size_F))
qp.drawText(pt[0],pt[1],size[0],size[1],Qt.AlignHCenter|Qt.AlignVCenter,文字)
qp.setFont(QFont())

#if isinstance(文字,str):
#    qp.setFont(QFont(\"Decorative\",size_F))
#    dy=size_F*1.4
#    dx=len(文字)*size_F*1.65
#    qp.drawText(pt[0]-dx/2+size[0]/2,pt[1]+dy/2+size[1]/2,文字)
#    qp.setFont(QFont())




"(,)...
...............................................


->+的#38(_矩形#50,+尺寸#4)->+的#39(_矩形#50,+起点#5)->+的#40(_矩形#50,+HTML#24)->+的#41(_矩形#50,+字体#6)->+的#42(_矩形#50,+线粗细#8)->+的#43(_矩形#50,+线型#9)->+的#44(_矩形#50,+线颜色#10)->+的#45(_矩形#50,+面颜色#11)->+的#46(_矩形#50,+选中区域#28)->+的#47(_矩形#50,+文字#7)->+的#48(_矩形#50,+类型#29)->+的#49(_矩形#50,+画图#37)->_矩形#50(,)
## end
#250, 5339:
"""
+[返回目录](,创建圆形)

"""


+创建圆形#0(,_圆形#48)->+[del]#1(,+创建圆形#0)...


...............................................
->+[临时文本]#2"+[返回目录](,圆形)

中心::200,100
半径::100
类型::圆形
角度::0


面颜色::255,255,0
线颜色::None
线型::SolidLine
线粗细::2

画图:...
选中区域:...
HTML:...
的(画图,输入)->+[有](HTML,输入)
"(,)...
...............................................


->+[修改内容]#3(+[临时文本]#2,_圆形#48)...


...............................................
->+中心#4"251.0, 90.0"(,)...
...............................................





...............................................
->+半径#5"75.23961722390672"(,)...
...............................................





...............................................
->+角度#6"-93.3664606634298"(,)...
...............................................


->+面颜色#7"None"(,)...


...............................................
->+线颜色#8"0,0,0"(,)...
...............................................





...............................................
->+线型#9"SolidLine"(,)...
...............................................


->+线粗细#10"2"(,)->+的#11(+输入#18,+中心#4)->+的#12(+输入#18,+半径#5)->+的#13(+输入#18,+角度#6)->+的#14(+输入#18,+面颜色#7)->+的#15(+输入#18,+线颜色#8)->+的#16(+输入#18,+线型#9)->+的#17(+输入#18,+线粗细#10)...


...............................................
->+输入#18"+[返回目录](,输入)

角度::0
面颜色::255,255,0
线颜色::0,0,0
线型::DashLine
线粗细::2
"(,)...
...............................................


->+输出#19(,)...


...............................................
->+选中框#20"\"\"\"
+[返回目录](,选中框)

\"\"\"

X=[pt[0],pt[0]+r*np.cos(theta),pt[0]+r]
Y=[pt[1],pt[1]-r*np.sin(theta),pt[1]]
R=6

qp.drawEllipse(pt[0]-r,pt[1]-r,2*r,2*r)

qp.setPen(QPen(Qt.black,1,Qt.DashLine))
qp.drawLine(X[0],Y[0],X[1],Y[1])
qp.setPen(QPen(Qt.black,1,Qt.SolidLine))
qp.drawLine(X[0],Y[0],X[2],Y[2])

qp.setPen(QPen(QColor(140,140,140),2.5))
qp.setBrush(QBrush(Qt.white))
qp.drawEllipse(X[2]-R,Y[2]-R,2*R,2*R)
qp.drawEllipse(X[1]-R,Y[1]-R,2*R,2*R)
qp.setBrush(QBrush())
qp.setPen(QPen(Qt.black))


"(,)...
...............................................





...............................................
->+图形#21"\"\"\"
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:....
选中框:...

\"\"\"
pt=中心
r=半径[0]
angle=角度[0]
theta=np.deg2rad(angle)

lineWidth=线粗细[0]
lineType=线型

if len(面颜色)==0 or 面颜色=='None':
    qp.setBrush(QBrush())
else:
    faceColor=面颜色
    qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen(QColor(0,0,0,0)))
else:
    edgeColor=线颜色
    if lineType==\"DashLine\":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawEllipse(pt[0]-r,pt[1]-r,2*r,2*r)
qp.setBrush(QBrush())
qp.setPen(QPen())


"(,)...
...............................................


->+的#22(+画图#26,+输入#18)->+的#23(+画图#26,+输出#19)->+的#24(+画图#26,+选中框#20)->+的#25(+画图#26,+图形#21)...


...............................................
->+画图#26"\"\"\"
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:....
选中框:...

\"\"\"
pt=中心
r=半径[0]
angle=角度[0]
theta=np.deg2rad(angle)

lineWidth=线粗细[0]
lineType=线型

if len(面颜色)==0 or 面颜色=='None':
    qp.setBrush(QBrush())
else:
    faceColor=面颜色
    qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    if lineType==\"DashLine\":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawEllipse(pt[0]-r,pt[1]-r,2*r,2*r)
qp.setBrush(QBrush())
qp.setPen(QPen())


"(,)...
...............................................


->+类型#27"圆形"(,)...


...............................................
->+输出#28"+[返回目录]
+[内容]
"(,)...
...............................................


->+的#29(+输入#31,+中心#4)->+的#30(+输入#31,+半径#5)...


...............................................
->+输入#31"+[返回目录](,输入)
+[内容]
中心::200,100
半径::100
"(,)...
...............................................


->+的#32(+选中区域#34,+输出#28)->+的#33(+选中区域#34,+输入#31)...


...............................................
->+选中区域#34"\"\"\"
+[返回目录](,选中区域)
输入:...

\"\"\"

pt=中心
r=半径[0]
pt0=mouse_pos

Dx=pt[0]-pt0[0]
Dy=pt[1]-pt0[1]
Dr=np.sqrt(Dx**2+Dy**2)

if Dr<=r:
    state=True
else:
    state=False"(,)...
...............................................


->+的#35(+HTML#36,+输入#18)...


...............................................
->+HTML#36"/*
+[返回目录](,HTML)

+[JS函数](,HTML)
+[设置结构](,输入)
*/

ctx.beginPath();
ctx.arc(%中心,%半径,0,2*Math.PI)

if('%面颜色'==='None') {
	ctx.fillStyle='rgba(255,255,255,0)';
} else {
	ctx.fillStyle='rgb(%面颜色)';
        ctx.fill();
}

if('%线颜色'==='None') {
	ctx.strokeStyle='rgba(0,0,0)';
} else {
        ctx.strokeStyle='rgb(%线颜色)';
        ctx.lineWidth=%线粗细;
        if('%线型'==='DashLine') {
            ctx.setLineDash([5,5])
        }
        ctx.stroke();
}

ctx.setLineDash([])

//ctx.stroke()

/*
+[JS函数](,HTML)
+[设置结构](,输入)
*/"(,)...
...............................................


->+的#37(_圆形#48,+中心#4)->+的#38(_圆形#48,+半径#5)->+的#39(_圆形#48,+画图#26)->+的#40(_圆形#48,+类型#27)->+的#41(_圆形#48,+角度#6)->+的#42(_圆形#48,+选中区域#34)->+的#43(_圆形#48,+面颜色#7)->+的#44(_圆形#48,+线颜色#8)->+的#45(_圆形#48,+线型#9)->+的#46(_圆形#48,+线粗细#10)->+的#47(_圆形#48,+HTML#36)->_圆形#48(,)
## end
#252, 5663:
"""
+[返回目录](,创建直线)

"""


+创建直线#0(,_直线#46)->+[del]#1(,+创建直线#0)...


...............................................
->+[临时文本]#2"+[返回目录](,直线)

起点::300,-150
终点::100,-100
类型::直线

线颜色::0,0,0
线型::SolidLine
线粗细::1

画图:...
选中区域:...
HTML:...
的(画图,输入)->+[有](HTML,输入)
"(,)...
...............................................


->+[修改内容]#3(+[临时文本]#2,_直线#46)...


...............................................
->+线型#4"SolidLine"(,)...
...............................................


->+线粗细#5"1"(,)...


...............................................
->+线颜色#6"0,0,0"(,)...
...............................................





...............................................
->+终点#7"-261.0, -64.0"(,)...
...............................................





...............................................
->+起点#8"-1.0, 58.0"(,)...
...............................................


->+的#9(+输入#14,+线粗细#5)->+的#10(+输入#14,+线型#4)->+的#11(+输入#14,+线颜色#6)->+的#12(+输入#14,+终点#7)->+的#13(+输入#14,+起点#8)...


...............................................
->+输入#14"线颜色::0,0,0
线型::DashLine
线粗细::2
"(,)...
...............................................


->+的#15(+HTML#16,+输入#14)...


...............................................
->+HTML#16"/*
+[返回目录](,HTML)

+[JS函数](,HTML)
+[设置结构](,输入)
*/

ctx.strokeStyle='rgb(%线颜色)';
ctx.lineWidth=%线粗细;
if('%线型'==='DashLine') {
    ctx.setLineDash([5,5])
}

ctx.beginPath();
ctx.moveTo(%起点);
ctx.lineTo(%终点)
ctx.stroke();
ctx.setLineDash([])

/*
+[JS函数](,HTML)
+[设置结构](,输入)
*//*
+[返回目录](,HTML)

+[JS函数](,HTML)
+[设置结构](,输入)
*/

ctx.strokeStyle='rgb(%线颜色)';
ctx.lineWidth=%线粗细;
if('%线型'==='DashLine') {
    ctx.setLineDash([5,5])
}

ctx.beginPath();
ctx.moveTo(%起点);
ctx.lineTo(%终点)
ctx.stroke();
ctx.setLineDash([])

/*
+[JS函数](,HTML)
+[设置结构](,输入)
*/"(,)...
...............................................





...............................................
->+LaTeX数学记号#17"https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols"(,)...
...............................................


->+的#18(+点线公式#19,+LaTeX数学记号#17)...


...............................................
->+点线公式#19"<!--
+[返回目录](,点线公式)
+[网页](web,点线公式)

LaTeX数学记号::https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols
+[打开](,LaTeX数学记号)
-->

<html>
  <head><script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>
  </head>
  <body>
    <p><mathjax style=\"font-size:1.5em\">
如果有两个点, 
$$
\vec{p}_A=(x_1,y_1), \vec{p}_B=(x_2,y_2)
$$
那么, \(\overrightarrow{AB}\)平行方向的向量和垂直方向的向量分别是,
$$
\vec{r}_\|=(x_2-x_1,y_2-y_1)
$$$$
\vec{r}_\perp=(-y_2+y_1,x_2-x_1)
$$
于是, 第三个点\(C\)到线段\(AB\)的距离为,
$$
d=\frac{\vec{r}_{AC}\cdot \vec{r}_\perp}{\|\vec{r}_\perp\|}\\
=\frac{(y-y_1)(x_2-x_1)-(x-x_1)(y_2-y_1)}{\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}}
$$
而判断\(C\)在\(A\)和\(B\)之间的判据为,
$$
l=\frac{\vec{r}_{AC}\cdot \vec{r}_\|}{\|\vec{r}_\|\|^2}\\
=\frac{(y-y_1)(y_2-y_1)+(x-x_1)(x_2-x_1)}{(x_2-x_1)^2+(y_2-y_1)^2}
$$

    </mathjax></p>
  </body>
</html>
"(,)...
...............................................





...............................................
->+输出#20"+[返回目录]
+[内容]
"(,)...
...............................................


->+的#21(+输入#23,+终点#7)->+的#22(+输入#23,+起点#8)...


...............................................
->+输入#23"+[返回目录](,输入)

起点::200,100
终点::218.0, -9.0
"(,)...
...............................................


->+的#24(+选中区域#27,+点线公式#19)->+的#25(+选中区域#27,+输出#20)->+的#26(+选中区域#27,+输入#23)...


...............................................
->+选中区域#27"\"\"\"
+[返回目录](,选中区域)
输入:...

点线公式:...
+[网页](web,点线公式)

\"\"\"

pt1=起点
pt2=终点
pt=mouse_pos

R=np.sqrt((pt1[0]-pt2[0])**2+(pt1[1]-pt2[1])**2)
d=np.abs(((pt[1]-pt1[1])*(pt2[0]-pt1[0])-(pt[0]-pt1[0])*(pt2[1]-pt1[1]))/R)
l=((pt[1]-pt1[1])*(pt2[1]-pt1[1])+(pt[0]-pt1[0])*(pt2[0]-pt1[0]))/R**2


if l>=0 and l<=1 and d<3:
    state=True
else:
    state=False
"(,)...
...............................................


->+类型#28"直线"(,)...


...............................................
->+选中框#29"\"\"\"
+[返回目录](,选中框)

\"\"\"
X=[pt1[0],pt2[0]]
Y=[pt1[1],pt2[1]]
R=6

qp.setPen(QPen(QColor(140,140,140),2.5))
qp.setBrush(QBrush(Qt.white))
qp.drawEllipse(X[0]-R,Y[0]-R,2*R,2*R)
qp.drawEllipse(X[1]-R,Y[1]-R,2*R,2*R)
qp.setBrush(QBrush())
qp.setPen(QPen(Qt.black))"(,)...
...............................................





...............................................
->+图形#30"\"\"\"
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:...
选中框:...

\"\"\"
pt1=起点
pt2=终点

lineWidth=线粗细[0]
lineType=线型

if len(线颜色)==0:
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    if lineType==\"DashLine\":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
qp.setPen(QPen())


"(,)...
...............................................


->+输出#31(,)->+的#32(+画图#36,+选中框#29)->+的#33(+画图#36,+图形#30)->+的#34(+画图#36,+输出#31)->+的#35(+画图#36,+输入#14)...


...............................................
->+画图#36"\"\"\"
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:...
选中框:...

\"\"\"
pt1=起点
pt2=终点

lineWidth=线粗细[0]
lineType=线型

if len(线颜色)==0:
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
qp.setPen(QPen())


"(,)...
...............................................


->+的#37(_直线#46,+线型#4)->+的#38(_直线#46,+HTML#16)->+的#39(_直线#46,+线粗细#5)->+的#40(_直线#46,+线颜色#6)->+的#41(_直线#46,+选中区域#27)->+的#42(_直线#46,+类型#28)->+的#43(_直线#46,+画图#36)->+的#44(_直线#46,+终点#7)->+的#45(_直线#46,+起点#8)->_直线#46(,)
## end
#254, 2:
圆形
## end
#256, 439:
"""
+[返回目录](,更新动词)

"""
[]=>_=>+[标题](_,)->+[显示](,+[标题]);

图形->[]{
	[==]"矩形"(,图形)...
	->样本库->的(_目录,样本库)->的(_目录,画图动词)->的(画图动词,创建矩形)...
	->的(原型,矩形)->+[生成动词](矩形,创建矩形)->+[显示]"更新了创建矩形!"
}:->[],->>[]{
	[==]"圆形"(,图形)...
	->样本库->的(_目录,样本库)->的(_目录,画图动词)->的(画图动词,创建圆形)...
	->的(原型,圆形)->+[生成动词](圆形,创建圆形)->+[显示]"更新了创建圆形!"
}:->[],->>[]{
	[==]"直线"(,图形)...
	->样本库->的(_目录,样本库)->的(_目录,画图动词)->的(画图动词,创建直线)...
	->的(原型,直线)->+[生成动词](直线,创建直线)->+[显示]"更新了创建直线!"
};

## end
#258, 2:
你好
## end
#260, 231:
"""
+[返回目录](,选中区域)
输入:...
+[设置结构](,输入)

"""

pt=起点
pt0=mouse_pos
size=尺寸

X=[pt[0],pt[0]+size[0]]
Y=[pt[1],pt[1]+size[1]]

if (pt0[0]-X[0])*(pt0[0]-X[1])<=0 and (pt0[1]-Y[0])*(pt0[1]-Y[1])<=0:
    state=True
else:
    state=False


## end
#262, 14:
+[返回目录]
+[内容]

## end
#264, 347:
"""
+[返回目录](,选中区域)
输入:...

点线公式:...
+[网页](web,点线公式)

"""

pt1=起点
pt2=终点
pt=mouse_pos

R=np.sqrt((pt1[0]-pt2[0])**2+(pt1[1]-pt2[1])**2)
d=np.abs(((pt[1]-pt1[1])*(pt2[0]-pt1[0])-(pt[0]-pt1[0])*(pt2[1]-pt1[1]))/R)
l=((pt[1]-pt1[1])*(pt2[1]-pt1[1])+(pt[0]-pt1[0])*(pt2[0]-pt1[0]))/R**2


if l>=0 and l<=1 and d<3:
    state=True
else:
    state=False

## end
#266, 42:
+[返回目录](,输入)

起点::200,100
终点::218.0, -9.0

## end
#268, 14:
+[返回目录]
+[内容]

## end
#272, 886:
<!--
+[返回目录](,点线公式)
+[网页](web,点线公式)

LaTeX数学记号::https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols
+[打开](,LaTeX数学记号)
-->

<html>
  <head><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
  </head>
  <body>
    <p><mathjax style="font-size:1.5em">
如果有两个点, 
$$
\vec{p}_A=(x_1,y_1), \vec{p}_B=(x_2,y_2)
$$
那么, \(\overrightarrow{AB}\)平行方向的向量和垂直方向的向量分别是,
$$
\vec{r}_\|=(x_2-x_1,y_2-y_1)
$$$$
\vec{r}_\perp=(-y_2+y_1,x_2-x_1)
$$
于是, 第三个点\(C\)到线段\(AB\)的距离为,
$$
d=\frac{\vec{r}_{AC}\cdot \vec{r}_\perp}{\|\vec{r}_\perp\|}\\
=\frac{(y-y_1)(x_2-x_1)-(x-x_1)(y_2-y_1)}{\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}}
$$
而判断\(C\)在\(A\)和\(B\)之间的判据为,
$$
l=\frac{\vec{r}_{AC}\cdot \vec{r}_\|}{\|\vec{r}_\|\|^2}\\
=\frac{(y-y_1)(y_2-y_1)+(x-x_1)(x_2-x_1)}{(x_2-x_1)^2+(y_2-y_1)^2}
$$

    </mathjax></p>
  </body>
</html>

## end
#274, 56:
https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols
## end
#276, 677:
"""
+[返回目录](,选中框)

"""


X=[pt[0],pt[0]+size[0]/2,pt[0]+size[0]]
Y=[pt[1],pt[1]+size[1]/2,pt[1]+size[1]]
R=6

qp.setBrush(QBrush())
qp.drawRect(pt[0],pt[1],size[0],size[1])

qp.setPen(QPen(QColor(140,140,140),2.5))
qp.setBrush(QBrush(Qt.white))
qp.drawEllipse(X[0]-R,Y[0]-R,2*R,2*R)
qp.drawEllipse(X[2]-R,Y[0]-R,2*R,2*R)

if size[0]>30 or size[0]<-30:
    qp.drawEllipse(X[1]-R,Y[0]-R,2*R,2*R)
    qp.drawEllipse(X[1]-R,Y[2]-R,2*R,2*R)

if size[1]>30 or size[1]<-30:
    qp.drawEllipse(X[0]-R,Y[1]-R,2*R,2*R)
    qp.drawEllipse(X[2]-R,Y[1]-R,2*R,2*R)


qp.drawEllipse(X[0]-R,Y[2]-R,2*R,2*R)
qp.drawEllipse(X[2]-R,Y[2]-R,2*R,2*R)
qp.setBrush(QBrush())
qp.setPen(QPen(Qt.black))

## end
#278, 1007:
"""
+[返回目录](,画图)
+[返回目录](,图形)
输入:...

图形:...
选中框:...

"""


pt=起点
size=尺寸
size_F=字体[0]

lineWidth=线粗细[0]
lineType=线型

if len(面颜色)==0 or 面颜色=='None':
    qp.setBrush(QBrush())
else:
    faceColor=面颜色
    qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen(QColor(0,0,0,0)))
else:
    edgeColor=线颜色
    if lineType=="DashLine":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawRect(pt[0],pt[1],size[0],size[1])
qp.setBrush(QBrush())
qp.setPen(QPen())


qp.setFont(QFont("Decorative",size_F))
qp.drawText(pt[0],pt[1],size[0],size[1],Qt.AlignHCenter|Qt.AlignVCenter,文字)
qp.setFont(QFont())

#if isinstance(文字,str):
#    qp.setFont(QFont("Decorative",size_F))
#    dy=size_F*1.4
#    dx=len(文字)*size_F*1.65
#    qp.drawText(pt[0]-dx/2+size[0]/2,pt[1]+dy/2+size[1]/2,文字)
#    qp.setFont(QFont())





## end
#280, 11:
255,255,255
## end
#282, 5:
0,0,0
## end
#284, 9:
SolidLine
## end
#286, 1:
2
## end
#292, 5:
0,0,0
## end
#294, 9:
SolidLine
## end
#296, 1:
1
## end
#301, 465:
"""
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:...
选中框:...

"""
pt1=起点
pt2=终点

lineWidth=线粗细[0]
lineType=线型

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    if lineType=="DashLine":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
qp.setPen(QPen())



## end
#303, 258:
"""
+[返回目录](,选中框)

"""
X=[pt1[0],pt2[0]]
Y=[pt1[1],pt2[1]]
R=6

qp.setPen(QPen(QColor(140,140,140),2.5))
qp.setBrush(QBrush(Qt.white))
qp.drawEllipse(X[0]-R,Y[0]-R,2*R,2*R)
qp.drawEllipse(X[1]-R,Y[1]-R,2*R,2*R)
qp.setBrush(QBrush())
qp.setPen(QPen(Qt.black))
## end
#305, 642:
+[返回目录](,保存旧版)

+mousePress(_画图,)->+[del](,+mousePress)...
->画(_画图,_矩形)->的(_矩形,类型)->类型"矩形"...
->的(_矩形,起点)->的(_矩形,尺寸)...
->的(_画图,m_mouse)->+[修改内容](m_mouse,起点)->+[修改内容]"0,0"(,尺寸);

+mousePress(_画图,)->+[del](,+mousePress)...
->画(_画图,_直线)->的(_直线,类型)->类型"直线"...
->的(_直线,起点)->的(_直线,终点)...
->的(_画图,m_mouse)->+[修改内容](m_mouse,起点)->+[修改内容](m_mouse,终点);

+mousePress(_画图,)->+[del](,+mousePress)...
->画(_画图,_椭圆)->的(_椭圆,类型)->类型"椭圆"...
->的(_椭圆,中心)->的(_椭圆,长宽)...
->的(_画图,m_mouse)->+[修改内容](m_mouse,中心)->+[修改内容]"0,0"(,长宽);

+mousePress(_画图,)->+[del](,+mousePress)...
->画(_画图,_文本框)->的(_文本框,类型)->类型"文本框"...
->的(_文本框,位置)...
->的(_画图,m_mouse)->+[修改内容](m_mouse,位置);
## end
#307, 128:
"""
+[返回目录](,显示选中框)

"""

+显示选中框(,_物体)->+[del](,+显示选中框)...
->的(_物体,画图)->的(画图,图形)->的(画图,选中框)...
->+[修改内容](图形,画图)->+[增加内容](选中框,画图)
## end
#309, 100:
"""
+[返回目录](,隐藏选中框)

"""

+隐藏选中框(,_物体)->+[del](,+隐藏选中框)...
->的(_物体,画图)->的(画图,图形)...
->+[修改内容](图形,画图)
## end
#311, 784:
+[返回目录](,保存旧版)


+mouseRelease(_画图,)->+[del](,+mouseRelease)...
->画(_画图,_矩形)->的(_矩形,类型)->类型"矩形"...
->的(_矩形,起点)->的(_矩形,尺寸)...
->的(_画图,m_mouse)->+[python]"
ans=pt1-pt
"(Python,尺寸)->+[.]"pt"(+[python],起点)->+[.]"pt1"(+[python],m_mouse);

+mouseRelease(_画图,)->+[del](,+mouseRelease)...
->画(_画图,_直线)->的(_直线,类型)->类型"直线"...
->的(_直线,终点)...
->的(_画图,m_mouse)->+[修改内容](m_mouse,终点);

+mouseRelease(_画图,)->+[del](,+mouseRelease)...
->画(_画图,_椭圆)->的(_椭圆,类型)->类型"椭圆"...
->的(_椭圆,中心)->的(_椭圆,长宽)...
->的(_画图,m_mouse)->+[python]"
import numpy as np
dr=(pt1-pt)
d=2*np.sqrt(np.sum(dr*dr))
ans=[d,d]
"(Python,长宽)->+[.]"pt"(+[python],中心)->+[.]"pt1"(+[python],m_mouse);

+mouseRelease(_画图,)->+[del](,+mouseRelease)...
->画(_画图,_文本框)->的(_文本框,类型)->类型"文本框"...
->的(_文本框,位置)...
->的(_画图,m_mouse)->+[修改内容](m_mouse,位置);
## end
#313, 317:
"""
+[返回目录](,按键)
+[修改标题]"按键"(,设置按键)

矩形:...
圆形:...
直线:...

"""

+按键(,_物体)->在(+按键,_鼠标位置)->+[del](,+按键)...
->按键->的(_物体,类型)->类型:
	->[==]"矩形"(,类型)->的(按键,矩形)->+[做](_鼠标位置,_物体)->+[code](+[做],矩形),
	->[==]"圆形"(,类型)->的(按键,圆形)->+[做](_鼠标位置,_物体)->+[code](+[做],圆形),
	->[==]"直线"(,类型)->的(按键,直线)->+[做](_鼠标位置,_物体)->+[code](+[做],直线);



## end
#314, 2:
左面
## end
#315, 3:
左下角
## end
#316, 2:
上面
## end
#317, 2:
左面
## end
#318, 2:
里面
## end
#319, 2:
左面
## end
#329, 2:
上面
## end
#330, 2:
上面
## end
#331, 2:
上面
## end
#332, 2:
上面
## end
#333, 2:
上面
## end
#334, 2:
上面
## end
#335, 2:
上面
## end
#336, 2:
右面
## end
#337, 2:
左面
## end
#338, 2:
上面
## end
#339, 2:
上面
## end
#340, 2:
下面
## end
#341, 3:
右上角
## end
#342, 3:
右上角
## end
#343, 3:
左下角
## end
#344, 2:
左面
## end
#345, 2:
下面
## end
#346, 2:
里面
## end
#347, 2:
下面
## end
#348, 2:
里面
## end
#349, 2:
里面
## end
#350, 3:
右上角
## end
#351, 2:
里面
## end
#352, 3:
左上角
## end
#353, 2:
上面
## end
#354, 2:
上面
## end
#355, 2:
上面
## end
#356, 3:
左下角
## end
#357, 2:
里面
## end
#358, 2:
里面
## end
#359, 3:
左下角
## end
#360, 3:
右下角
## end
#361, 2:
里面
## end
#362, 3:
右下角
## end
#363, 2:
里面
## end
#364, 2:
里面
## end
#365, 2:
里面
## end
#366, 2:
里面
## end
#367, 2:
里面
## end
#368, 2:
里面
## end
#369, 2:
里面
## end
#370, 2:
里面
## end
#371, 3:
角度点
## end
#372, 3:
角度点
## end
#373, 3:
半径点
## end
#374, 3:
角度点
## end
#375, 2:
里面
## end
#376, 2:
里面
## end
#377, 2:
里面
## end
#378, 2:
里面
## end
#379, 2:
里面
## end
#380, 2:
起点
## end
#381, 2:
终点
## end
#382, 2:
里面
## end
#383, 2:
里面
## end
#384, 2:
终点
## end
#385, 2:
起点
## end
#386, 2:
里面
## end
#387, 2:
里面
## end
#388, 2:
里面
## end
#389, 2:
里面
## end
#390, 2:
里面
## end
#391, 2:
里面
## end
#392, 2:
里面
## end
#393, 2:
里面
## end
#394, 2:
里面
## end
#395, 2:
里面
## end
#396, 2:
里面
## end
#397, 2:
里面
## end
#398, 2:
里面
## end
#399, 2:
里面
## end
#400, 3:
左上角
## end
#401, 3:
半径点
## end
#402, 2:
里面
## end
#403, 3:
角度点
## end
#404, 2:
里面
## end
#405, 3:
左上角
## end
#406, 2:
里面
## end
#407, 2:
里面
## end
#408, 2:
终点
## end
#409, 2:
起点
## end
#410, 2:
起点
## end
#411, 2:
里面
## end
#412, 3:
角度点
## end
#413, 2:
里面
## end
#415, 112:
"""
+[返回目录](,Return)

"""

+Return(_画图,)->+[del](,+Return)...
->的(_画图,m_select)->的(m_select,_物体)->+[设置结构](,_物体)

## end
#416, 3:
半径点
## end
#417, 2:
里面
## end
#418, 2:
里面
## end
#419, 2:
里面
## end
#420, 2:
里面
## end
#421, 2:
里面
## end
#422, 2:
左面
## end
#423, 3:
左上角
## end
#424, 2:
里面
## end
#425, 2:
上面
## end
#426, 2:
里面
## end
#427, 2:
里面
## end
#429, 117:
"""
+[返回目录](,Del)

"""


+Del(_画板,)->+[del](,+Del)...
->的(_画板,m_select)=>的(m_select,_图形)=>+[删除结构](,_图形)->+[del](,_图形)
## end
#431, 122:
"""
+[返回目录](,ctrl+1)

"""


+ctrl+1(_画板,)->+[del](,_画板)...
->的(_画板,m_scene)->m_scene(,_场景)...
->+的(_场景,+矩形)->+[创建矩形](,+矩形)
## end
#433, 122:
"""
+[返回目录](,ctrl+2)

"""


+ctrl+2(_画板,)->+[del](,_画板)...
->的(_画板,m_scene)->m_scene(,_场景)...
->+的(_场景,+直线)->+[创建直线](,+直线)
## end
#434, 2:
起点
## end
#435, 2:
左面
## end
#436, 2:
里面
## end
#437, 2:
里面
## end
#438, 2:
里面
## end
#439, 2:
里面
## end
#440, 2:
里面
## end
#441, 2:
上面
## end
#442, 2:
里面
## end
#443, 2:
里面
## end
#444, 2:
里面
## end
#445, 2:
里面
## end
#446, 2:
起点
## end
#448, 122:
"""
+[返回目录](,ctrl+3)

"""


+ctrl+3(_画板,)->+[del](,_画板)...
->的(_画板,m_scene)->m_scene(,_场景)...
->+的(_场景,+圆形)->+[创建圆形](,+圆形)
## end
#450, 144:
"""
+[返回目录](,timer)

"""

+timer(_画板,)->+[del](,+timer)...
->的(_画板,m_scene)->m_scene(,_场景)->的(_场景,规则)->的(规则,单摆规则)...
->的(单摆规则,P代码)->+[P函数](,P代码)
## end
#452, 3:
右下角
## end
#453, 2:
里面
## end
#454, 2:
里面
## end
#455, 2:
里面
## end
#456, 2:
里面
## end
#457, 2:
里面
## end
#458, 2:
里面
## end
#459, 2:
里面
## end
#460, 3:
右下角
## end
#461, 3:
右下角
## end
#462, 3:
右下角
## end
#463, 3:
右下角
## end
#464, 3:
右下角
## end
#465, 3:
右下角
## end
#466, 3:
右下角
## end
#467, 3:
右下角
## end
#468, 3:
右下角
## end
#469, 2:
里面
## end
#470, 3:
右下角
## end
#471, 3:
右下角
## end
#472, 3:
右上角
## end
#473, 3:
右上角
## end
#474, 3:
右上角
## end
#475, 3:
右上角
## end
#476, 3:
左上角
## end
#478, 2:
10
## end
#480, 3:
左上角
## end
#481, 3:
左上角
## end
#483, 13943:
r"""
+[返回目录](,代码)
+[P函数](,代码)
地址::body\body_draw.py
+[保存文本](,画图)


"""


from PyQt5.QtGui import QFont, QBrush, QColor, QPen, QPainterPath, QScreen, QTransform, QKeySequence, QPixmap
from PyQt5.QtCore import Qt, QRectF, QTimer
import numpy as np


import sys, logging
from PyQt5.QtWidgets import QWidget, QApplication, QVBoxLayout, QLabel, QPushButton
from PyQt5.QtGui import QPainter



class Draw(QWidget):
    def __init__(self,point=None,python=None):
        super().__init__()
        self.m_select=None
        self.m_scene=[]

        self.m_dT=0
        self.m_T=0

        self.m_timer=QTimer()
        self.m_timer.timeout.connect(self.showTime)
        # self.m_timer.start(100)
        self.m_label=QLabel(self.timeConvert(self.m_T))
        layout=QVBoxLayout()
        layout.addWidget(self.m_label)
        layout.addStretch()
        self.setLayout(layout)


        self.setGeometry(30,30,600,400)
        self.show()



    def paintEvent(self,event):
        qp=QPainter()
        qp.begin(self)
        for obj in self.m_scene:
            obj.show(qp)
        qp.end()


            
    def showTime(self):
        dt=self.m_dT
        t=self.m_T+dt
        self.m_label.setText(self.timeConvert(self.m_T))
        self.m_T=t
        self.timeEvents()
    
    def timeConvert(self,t):
        sec=t/1000
        s=sec%60
        minu=sec//60
        m=minu%60
        h=minu//60

        return "%02d:%02d:%05.2f"%(int(h),int(m),s)


    def mouseReleaseEvent(self,event):
        pass


    def mousePressEvent(self,event):
        select=self.inArea([event.x(),event.y()])
        if select!=None:
            select.click([event.x(),event.y()])
            select.m_state=1
            self.m_select=select
        elif self.m_select!=None:
            self.m_select.m_state=0
            self.m_select=None


    def mouseMoveEvent(self,event):
        if self.m_select!=None:
            self.m_select.move([event.x(),event.y()])


    def inArea(self,pos):
        for obj in self.m_scene:
            if obj.area(pos):
                return obj
        return None



    def keyPressEvent(self, event):
        modifier=QApplication.keyboardModifiers()
        if modifier==Qt.ControlModifier:
            key_text=QKeySequence(event.key()).toString()
            # check whether is encoded in utf-8
            try:
                key_text="ctrl"+key_text
                self.runEvent(key_text)
            except:
                pass
        else:
            key_text=QKeySequence(event.key()).toString()
            try:
                self.keyEvents(key_text)
            except:
                pass
        self.update()


    def keyEvents(self,event):
        if event=='ctrlA':
            fun_ctrlA()
        self.update()


    def timeEvents(self):
        fun_1()
        fun_2()
        fun_3()
        fun_4()


# funs


# objs
class obj1:
    def __init__(self):
        self.m_A=1
        self.m_B=1
        self.m_state=0
        self.m_location=''

    def show(self,qp):
        if self.m_state==0:
            pass
        else:
            pass

    def click(self,pos):
        self.m_location=ans

    def move(self):
        if self.m_location=='':
            pass
        


window=Draw()

class 测试图形3:
    def __init__(self):
        self.m_state=0
        self.m_画选中框=''
        self.m_去掉选中框=''
        self.m_线粗细=np.array([[1.0]])
        self.m_线型='DashLine'
        self.m_线颜色=np.array([[0.0, 0.0, 0.0]])
        self.m_类型='直线'
        self.m_终点=np.array([[264.75, 115.75]])
        self.m_起点=np.array([[451.25, 2.25]])
        

    def show(self,qp):
        线粗细=self.m_线粗细
        线型=self.m_线型
        线颜色=self.m_线颜色
        终点=self.m_终点
        起点=self.m_起点
        
        """
        +[返回目录](,图形)
        输入:...
        输出:...
        
        图形:...
        选中框:...
        
        """
        pt1=起点[0]
        pt2=终点[0]
        
        lineWidth=线粗细[0,0]
        lineType=线型
        
        if len(线颜色)==0:
            qp.setPen(QPen())
        else:
            edgeColor=线颜色[0]
            qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))
        
        
        qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
        qp.setPen(QPen())
        
        
        
        if self.m_state==1:
            """
            +[返回目录](,选中框)
            
            """
            X=[pt1[0],pt2[0]]
            Y=[pt1[1],pt2[1]]
            R=6
            
            qp.setPen(QPen(QColor(140,140,140),2.5))
            qp.setBrush(QBrush(Qt.white))
            qp.drawEllipse(X[0]-R,Y[0]-R,2*R,2*R)
            qp.drawEllipse(X[1]-R,Y[1]-R,2*R,2*R)
            qp.setBrush(QBrush())
            qp.setPen(QPen(Qt.black))
        
        

    def inArea(self,mouse_pos):
        终点=self.m_终点
        起点=self.m_起点
        
        """
        +[返回目录](,选中区域)
        输入:...
        
        点线公式:...
        +[网页](web,点线公式)
        
        """
        
        pt1=起点[0]
        pt2=终点[0]
        pt=mouse_pos
        
        R=np.sqrt((pt1[0]-pt2[0])**2+(pt1[1]-pt2[1])**2)
        d=np.abs(((pt[1]-pt1[1])*(pt2[0]-pt1[0])-(pt[0]-pt1[0])*(pt2[1]-pt1[1]))/R)
        l=((pt[1]-pt1[1])*(pt2[1]-pt1[1])+(pt[0]-pt1[0])*(pt2[0]-pt1[0]))/R**2
        
        
        if l>=0 and l<=1 and d<3:
            state=True
        else:
            state=False
        
        
        
        return state

    def click(self,mouse_pos):
        pass

    def move(self,mouse_pos):
        pass

window.m_scene.insert(0,测试图形3())



class 圆形2:
    def __init__(self):
        self.m_state=0
        self.m_画选中框=''
        self.m_去掉选中框=''
        self.m_线粗细=np.array([[2.0]])
        self.m_线型='DashLine'
        self.m_线颜色=np.array([[0.0, 0.0, 0.0]])
        self.m_面颜色=np.array([[255.0, 255.0, 255.0]])
        self.m_角度=np.array([[171.57303097851934]])
        self.m_类型='圆形'
        self.m_半径=np.array([[36.08670115153226]])
        self.m_中心=np.array([[-185.0, 10.0]])
        

    def show(self,qp):
        线粗细=self.m_线粗细
        线型=self.m_线型
        线颜色=self.m_线颜色
        面颜色=self.m_面颜色
        角度=self.m_角度
        半径=self.m_半径
        中心=self.m_中心
        
        """
        +[返回目录](,图形)
        输入:...
        输出:...
        
        图形:....
        选中框:...
        
        """
        pt=中心[0]
        r=半径[0,0]
        angle=角度[0,0]
        theta=np.deg2rad(angle)
        
        lineWidth=线粗细[0,0]
        lineType=线型
        
        if len(面颜色)==0:
            qp.setBrush(QBrush())
        else:
            faceColor=面颜色[0]
            qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))
        
        if len(线颜色)==0:
            qp.setPen(QPen())
        else:
            edgeColor=线颜色[0]
            qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))
        
        qp.drawEllipse(pt[0]-r,pt[1]-r,2*r,2*r)
        qp.setBrush(QBrush())
        qp.setPen(QPen())
        
        
        
        if self.m_state==1:
            """
            +[返回目录](,选中框)
            
            """
            
            X=[pt[0],pt[0]+r*np.cos(theta),pt[0]+r]
            Y=[pt[1],pt[1]-r*np.sin(theta),pt[1]]
            R=6
            
            qp.drawEllipse(pt[0]-r,pt[1]-r,2*r,2*r)
            
            qp.setPen(QPen(Qt.black,1,Qt.DashLine))
            qp.drawLine(X[0],Y[0],X[1],Y[1])
            qp.setPen(QPen(Qt.black,1,Qt.SolidLine))
            qp.drawLine(X[0],Y[0],X[2],Y[2])
            
            qp.setPen(QPen(QColor(140,140,140),2.5))
            qp.setBrush(QBrush(Qt.white))
            qp.drawEllipse(X[2]-R,Y[2]-R,2*R,2*R)
            qp.drawEllipse(X[1]-R,Y[1]-R,2*R,2*R)
            qp.setBrush(QBrush())
            qp.setPen(QPen(Qt.black))
            
            
            
        
        

    def inArea(self,mouse_pos):
        半径=self.m_半径
        中心=self.m_中心
        
        """
        +[返回目录](,选中区域)
        输入:...
        
        """
        
        pt=中心[0]
        r=半径[0,0]
        pt0=mouse_pos
        
        Dx=pt[0]-pt0[0]
        Dy=pt[1]-pt0[1]
        Dr=np.sqrt(Dx**2+Dy**2)
        
        if Dr<=r:
            state=True
        else:
            state=False
        
        
        return state

    def click(self,mouse_pos):
        pass

    def move(self,mouse_pos):
        pass

window.m_scene.insert(0,圆形2())



class 直线1:
    def __init__(self):
        self.m_state=0
        self.m_画选中框=''
        self.m_去掉选中框=''
        self.m_线粗细=np.array([[1.0]])
        self.m_线型='DashLine'
        self.m_线颜色=np.array([[0.0, 0.0, 0.0]])
        self.m_类型='直线'
        self.m_终点=np.array([[-4.0, -124.0]])
        self.m_起点=np.array([[165.0, -53.0]])
        

    def show(self,qp):
        线粗细=self.m_线粗细
        线型=self.m_线型
        线颜色=self.m_线颜色
        终点=self.m_终点
        起点=self.m_起点
        
        """
        +[返回目录](,图形)
        输入:...
        输出:...
        
        图形:...
        选中框:...
        
        """
        pt1=起点[0]
        pt2=终点[0]
        
        lineWidth=线粗细[0,0]
        lineType=线型
        
        if len(线颜色)==0:
            qp.setPen(QPen())
        else:
            edgeColor=线颜色[0]
            qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))
        
        
        qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
        qp.setPen(QPen())
        
        
        
        if self.m_state==1:
            """
            +[返回目录](,选中框)
            
            """
            X=[pt1[0],pt2[0]]
            Y=[pt1[1],pt2[1]]
            R=6
            
            qp.setPen(QPen(QColor(140,140,140),2.5))
            qp.setBrush(QBrush(Qt.white))
            qp.drawEllipse(X[0]-R,Y[0]-R,2*R,2*R)
            qp.drawEllipse(X[1]-R,Y[1]-R,2*R,2*R)
            qp.setBrush(QBrush())
            qp.setPen(QPen(Qt.black))
        
        

    def inArea(self,mouse_pos):
        终点=self.m_终点
        起点=self.m_起点
        
        """
        +[返回目录](,选中区域)
        输入:...
        
        点线公式:...
        +[网页](web,点线公式)
        
        """
        
        pt1=起点[0]
        pt2=终点[0]
        pt=mouse_pos
        
        R=np.sqrt((pt1[0]-pt2[0])**2+(pt1[1]-pt2[1])**2)
        d=np.abs(((pt[1]-pt1[1])*(pt2[0]-pt1[0])-(pt[0]-pt1[0])*(pt2[1]-pt1[1]))/R)
        l=((pt[1]-pt1[1])*(pt2[1]-pt1[1])+(pt[0]-pt1[0])*(pt2[0]-pt1[0]))/R**2
        
        
        if l>=0 and l<=1 and d<3:
            state=True
        else:
            state=False
        
        
        
        return state

    def click(self,mouse_pos):
        pass

    def move(self,mouse_pos):
        pass

window.m_scene.insert(0,直线1())



class 矩形0:
    def __init__(self):
        self.m_state=0
        self.m_字体=np.array([[10.0]])
        self.m_线粗细=np.array([[1.0]])
        self.m_线型='DashLine'
        self.m_线颜色=np.array([[0.0, 0.0, 0.0]])
        self.m_面颜色='None'
        self.m_文字=''
        self.m_类型='矩形'
        self.m_尺寸=np.array([[437.0, -197.0]])
        self.m_起点=np.array([[-237.5, 105.5]])
        

    def show(self,qp):
        字体=self.m_字体
        文字=self.m_文字
        线粗细=self.m_线粗细
        线型=self.m_线型
        线颜色=self.m_线颜色
        面颜色=self.m_面颜色
        尺寸=self.m_尺寸
        起点=self.m_起点
        
        """
        +[返回目录](,画图)
        +[返回目录](,图形)
        输入:...
        
        图形:...
        选中框:...
        
        """
        
        
        pt=起点[0]
        size=尺寸[0]
        size_F=字体[0]
        
        lineWidth=线粗细[0,0]
        lineType=线型
        
        if len(面颜色)==0 or 面颜色=='None':
            qp.setBrush(QBrush())
        else:
            faceColor=面颜色[0]
            qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))
        
        if len(线颜色)==0:
            qp.setPen(QPen())
        else:
            edgeColor=线颜色[0]
            qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))
        
        
        qp.drawRect(pt[0],pt[1],size[0],size[1])
        qp.setBrush(QBrush())
        qp.setPen(QPen())
        
        
        
        qp.setFont(QFont("Decorative",size_F))
        dy=size_F*1.4
        dx=len(文字)*size_F*1.65
        qp.drawText(pt[0]-dx/2+size[0]/2,pt[1]+dy/2+size[1]/2,文字)
        qp.setFont(QFont())
        
        
        if self.m_state==1:
            """
            +[返回目录](,选中框)
            
            """
            
            
            X=[pt[0],pt[0]+size[0]/2,pt[0]+size[0]]
            Y=[pt[1],pt[1]+size[1]/2,pt[1]+size[1]]
            R=6
            
            qp.setBrush(QBrush())
            qp.drawRect(pt[0],pt[1],size[0],size[1])
            
            qp.setPen(QPen(QColor(140,140,140),2.5))
            qp.setBrush(QBrush(Qt.white))
            qp.drawEllipse(X[0]-R,Y[0]-R,2*R,2*R)
            qp.drawEllipse(X[2]-R,Y[0]-R,2*R,2*R)
            
            if size[0]>30 or size[0]<-30:
                qp.drawEllipse(X[1]-R,Y[0]-R,2*R,2*R)
                qp.drawEllipse(X[1]-R,Y[2]-R,2*R,2*R)
            
            if size[1]>30 or size[1]<-30:
                qp.drawEllipse(X[0]-R,Y[1]-R,2*R,2*R)
                qp.drawEllipse(X[2]-R,Y[1]-R,2*R,2*R)
            
            
            qp.drawEllipse(X[0]-R,Y[2]-R,2*R,2*R)
            qp.drawEllipse(X[2]-R,Y[2]-R,2*R,2*R)
            qp.setBrush(QBrush())
            qp.setPen(QPen(Qt.black))
            
        
        

    def inArea(self,mouse_pos):
        尺寸=self.m_尺寸
        起点=self.m_起点
        
        """
        +[返回目录](,选中区域)
        输入:...
        
        """
        
        pt=起点[0]
        pt0=mouse_pos
        size=尺寸[0]
        
        X=[pt[0],pt[0]+size[0]]
        Y=[pt[1],pt[1]+size[1]]
        
        if (pt0[0]-X[0])*(pt0[0]-X[1])<=0 and (pt0[1]-Y[0])*(pt0[1]-Y[1])<=0:
            state=True
        else:
            state=False
        
        
        return state

    def click(self,mouse_pos):
        pass

    def move(self,mouse_pos):
        pass

window.m_scene.insert(0,矩形0())


## end
#484, 2:
里面
## end
#485, 2:
里面
## end
#486, 2:
里面
## end
#487, 2:
里面
## end
#488, 2:
里面
## end
#489, 2:
里面
## end
#490, 2:
里面
## end
#491, 2:
里面
## end
#492, 2:
里面
## end
#493, 2:
里面
## end
#494, 2:
里面
## end
#495, 2:
里面
## end
#496, 2:
里面
## end
#497, 2:
右面
## end
#498, 2:
右面
## end
#499, 2:
下面
## end
#500, 2:
左面
## end
#501, 2:
上面
## end
#502, 2:
右面
## end
#503, 2:
左面
## end
#504, 2:
右面
## end
#505, 2:
里面
## end
#506, 3:
右下角
## end
#507, 3:
左下角
## end
#508, 3:
左上角
## end
#509, 3:
左上角
## end
#510, 2:
里面
## end
#511, 2:
里面
## end
#512, 3:
左下角
## end
#513, 2:
里面
## end
#514, 3:
左下角
## end
#515, 2:
里面
## end
#516, 2:
右面
## end
#517, 3:
左下角
## end
#518, 3:
右上角
## end
#519, 3:
左上角
## end
#520, 2:
里面
## end
#521, 3:
右下角
## end
#522, 2:
里面
## end
#523, 3:
左上角
## end
#524, 3:
左下角
## end
#525, 3:
左上角
## end
#526, 3:
左上角
## end
#527, 3:
左下角
## end
#528, 3:
右上角
## end
#529, 3:
右下角
## end
#530, 3:
右下角
## end
#531, 3:
右上角
## end
#532, 3:
左上角
## end
#533, 3:
左下角
## end
#534, 3:
左下角
## end
#535, 3:
左下角
## end
#536, 3:
左下角
## end
#537, 3:
左下角
## end
#538, 3:
左下角
## end
#539, 3:
左下角
## end
#540, 3:
左下角
## end
#541, 2:
里面
## end
#542, 3:
半径点
## end
#543, 3:
角度点
## end
#544, 3:
半径点
## end
#545, 3:
角度点
## end
#546, 3:
半径点
## end
#547, 3:
半径点
## end
#548, 3:
半径点
## end
#549, 3:
半径点
## end
#550, 3:
半径点
## end
#551, 3:
半径点
## end
#552, 3:
半径点
## end
#553, 3:
半径点
## end
#554, 3:
半径点
## end
#555, 3:
半径点
## end
#556, 3:
半径点
## end
#557, 3:
半径点
## end
#558, 3:
半径点
## end
#559, 3:
半径点
## end
#560, 3:
半径点
## end
#561, 3:
半径点
## end
#562, 3:
半径点
## end
#563, 3:
半径点
## end
#564, 3:
半径点
## end
#565, 2:
里面
## end
#566, 3:
角度点
## end
#567, 3:
角度点
## end
#568, 3:
角度点
## end
#569, 3:
角度点
## end
#570, 2:
起点
## end
#571, 2:
里面
## end
#572, 2:
终点
## end
#573, 2:
里面
## end
#574, 2:
里面
## end
#575, 2:
里面
## end
#576, 2:
里面
## end
#577, 2:
里面
## end
#579, 326:
"""
+[返回目录](,设置缩放)

"""

+设置缩放(_比例,_场景)->_场景->m_scene(,_场景)->的(_画板,m_scene)...
->的(_画板,m_unit)...
->[]{
	_比例->+[修改内容](_比例,m_unit)->+[del](,+设置缩放)
}:->[],->>+[修改内容](+设置缩放,m_unit)->+[del](,+设置缩放);


+设置缩放(_比例,_画板)->的(_画板,m_unit)...
->[]{
	_比例->+[修改内容](_比例,m_unit)->+[del](,+设置缩放)
}:->[],->>+[修改内容](+设置缩放,m_unit)->+[del](,+设置缩放);
## end
#581, 82:
"""
+[返回目录](,设置尺寸)

"""

+设置尺寸(,_矩形)->的(_矩形,尺寸)->+[修改内容](+设置尺寸,尺寸)->+[del](,+设置尺寸)
## end
#583, 82:
"""
+[返回目录](,设置起点)

"""

+设置起点(,_矩形)->的(_矩形,起点)->+[修改内容](+设置起点,起点)->+[del](,+设置起点)
## end
#585, 192:
"""
+[返回目录](,PgUp)

"""

+PgUp(_画图,)->+[del](,+PgUp)...
->的(_画图,m_unit)->+[python]"
r[0]=r[0]*0.9
"(Python,)->+[o]"r"(+[python],m_unit)...
->的(_画图,m_scene)->m_scene(,_场景)->+[更新场景状态](_画图,_场景);

## end
#587, 198:
"""
+[返回目录](,PgDown)

"""

+PgDown(_画图,)->+[del](,+PgDown)...
->的(_画图,m_unit)->+[python]"
r[0]=r[0]*1.1
"(Python,)->+[o]"r"(+[python],m_unit)...
->的(_画图,m_scene)->m_scene(,_场景)->+[更新场景状态](_画图,_场景);

## end
#589, 378:
"""
+[返回目录](,更新场景状态)

"""

+更新场景状态(_画板,_场景)->+[del](,+更新场景状态)...
->的(_画板,m_size)->的(_画板,m_origin)->的(_画板,m_unit):
->坐标系(_场景,)...
->的(坐标系,原点)->+[修改内容](m_origin,原点)...
->的(坐标系,尺寸)->+[修改内容](m_size,尺寸)->+[显示](,尺寸)...
->的(坐标系,比例)->+[修改内容](m_unit,比例),

->+坐标系(_场景,)...
->+的(+坐标系,+原点)->+[修改内容](m_origin,+原点)...
->+的(+坐标系,+尺寸)->+[修改内容](m_size,+尺寸)...
->+的(+坐标系,+比例)->+[修改内容](m_unit,+比例)
## end
#591, 757:
/*
+[返回目录](,HTML)

+[JS函数](,HTML)
+[设置结构](,输入)
*/


var size=[%尺寸];
var pos=[%起点];

if('%线颜色'==='None') {
	ctx.strokeStyle='rgba(255,255,255)';
} else {
	ctx.strokeStyle='rgb(%线颜色)';
        ctx.lineWidth=%线粗细
        if('%线型'==='DashLine') {
            ctx.setLineDash([5,5])
        };
        ctx.strokeRect(%起点,%尺寸);
}

if('%面颜色'==='None') {
	ctx.fillStyle='rgba(255,255,255,0)';
} else {
	ctx.fillStyle='rgb(%面颜色)';
        ctx.fillRect(%起点,%尺寸);
}

ctx.setLineDash([])

//ctx.strokeStyle='rgb(%线颜色)';
//ctx.lineWidth=%线粗细;
//ctx.strokeRect(%起点,%尺寸);

ctx.fillStyle='rgba(0,0,0,1)';
ctx.textAlign='center';
ctx.textBaseline='middle';
ctx.font=%字体*2+'px serif';
ctx.fillText('%文字',pos[0]+size[0]/2,pos[1]+size[1]/2);


/*
+[JS函数](,HTML)
+[设置结构](,输入)
*/
## end
#593, 14:
+[返回目录]
+[内容]

## end
#596, 274:
/*
+[返回目录](,HTML)

+[JS函数](,HTML)
+[设置结构](,输入)
*/

ctx.strokeStyle='rgb(%线颜色)';
ctx.lineWidth=%线粗细;
if('%线型'==='DashLine') {
    ctx.setLineDash([5,5])
}

ctx.beginPath();
ctx.moveTo(%起点);
ctx.lineTo(%终点)
ctx.stroke();
ctx.setLineDash([])

/*
+[JS函数](,HTML)
+[设置结构](,输入)
*/

## end
#598, 18:
1.1053558694552066
## end
#600, 8:
958, 476
## end
#602, 10:
-50.0, 0.0
## end
#605, 3:
半径点
## end
#606, 3:
右下角
## end
#607, 2:
起点
## end
#609, 825:
"""
+[返回目录](,更新图形结构)

...
->的(_图形,画图)->的(画图,输入)...
->的(_图形,类型)->类型:
	->[==]"矩形"(,类型)->的(原型,矩形)->的(矩形,HTML#0)->+的(_图形,+HTML)->+的(+HTML,输入)->+[修改内容](HTML#0,+HTML), 
	->[==]"圆形"(,类型)->的(原型,圆形)->的(圆形,HTML#1)->+的(_图形,+HTML)->+的(+HTML,输入)->+[修改内容](HTML#1,+HTML), 
	->[==]"直线"(,类型)->的(原型,直线)->的(直线,HTML#2)->+的(_图形,+HTML)->+的(+HTML,输入)->+[修改内容](HTML#2,+HTML)


"""

+更新图形结构(,_图形)->+[del](,+更新图形结构):
	->的(_图形,HTML),
->更新图形结构->的(画图动词,更新图形结构)->的(制作画图,画图动词)...
->的(制作画图,样本库)->的(样本库,原型)...
->的(_图形,画图)->的(画图,输入)...
->的(_图形,类型)->类型:
	->[==]"矩形"(,类型)->的(原型,矩形)->的(矩形,HTML#0)->+HTML->+的(_图形,+HTML)->+的(+HTML,输入)->+[修改内容](HTML#0,+HTML), 
	->[==]"圆形"(,类型)->的(原型,圆形)->的(圆形,HTML#1)->+HTML->+的(_图形,+HTML)->+的(+HTML,输入)->+[修改内容](HTML#1,+HTML), 
	->[==]"直线"(,类型)->的(原型,直线)->的(直线,HTML#2)->+HTML->+的(_图形,+HTML)->+的(+HTML,输入)->+[修改内容](HTML#2,+HTML)



## end
#612, 3:
846
## end
#614, 3:
848
## end
#616, 3:
850
## end
#618, 3:
855
## end
#620, 3:
823
## end
#623, 1753:
"""
+[返回目录](,矩形)
+[设置结构](,矩形)
动作:...

"""

+矩形(_鼠标位置,_物体)->+[del](,+矩形)...
->的(_物体,起点)->的(_物体,尺寸)...
->+[.]"pm"([python],_鼠标位置)->+[.]"pt"([python],起点)->+[.]"size"([python],尺寸)...
->+按键位置->[python]"
pt=pt
size=size
pm=pm
R=6

X=[pt[0],pt[0]+size[0],pt[0]+size[0]/2]
Y=[pt[1],pt[1]+size[1],pt[1]+size[1]/2]

got=False
for i in range(len(X)):
    for j in range(len(Y)):
        d=np.sqrt((X[i]-pm[0])**2+(Y[j]-pm[1])**2)
        if d<=R:
            got=True
            break
    if got:
        break

if i==0 and j==0:
    ans='左上角'
elif i==0 and j==1:
    ans='左下角'
elif i==1 and j==0:
    ans='右上角'
elif i==1 and j==1:
    ans='右下角'

elif i==0 and j==2:
    ans='左面'
elif i==1 and j==2:
    ans='右面'
elif i==2 and j==0:
    ans='上面'
elif i==2 and j==1:
    ans='下面'

else:
    ans='里面'

state=True
"(Python,+按键位置)...
->是([动作库],动作#0)->和(动作#0,画图动作)->的(画图动作,mouseMove#0)...
->的(矩形,动作)...
->[]{
	[]:
	->[==]"里面"(,+按键位置)->的(动作,移动)->的(移动,mouseMove#1)...
	->+[修改内容](mouseMove#1,mouseMove#0),

	->[==]"上面"(,+按键位置)->的(动作,上展宽)->的(上展宽,mouseMove#2)...
	->+[修改内容](mouseMove#2,mouseMove#0),

	->[==]"下面"(,+按键位置)->的(动作,下展宽)->的(下展宽,mouseMove#3)...
	->+[修改内容](mouseMove#3,mouseMove#0),

	->[==]"左面"(,+按键位置)->的(动作,左展宽)->的(左展宽,mouseMove#4)...
	->+[修改内容](mouseMove#4,mouseMove#0),

	->[==]"右面"(,+按键位置)->的(动作,右展宽)->的(右展宽,mouseMove#5)...
	->+[修改内容](mouseMove#5,mouseMove#0),

	->[==]"左上角"(,+按键位置)->的(动作,左上展宽)->的(左上展宽,mouseMove#6)...
	->+[修改内容](mouseMove#6,mouseMove#0),

	->[==]"右下角"(,+按键位置)->的(动作,右下展宽)->的(右下展宽,mouseMove#7)...
	->+[修改内容](mouseMove#7,mouseMove#0),

	->[==]"左下角"(,+按键位置)->的(动作,左下展宽)->的(左下展宽,mouseMove#8)...
	->+[修改内容](mouseMove#8,mouseMove#0),

	->[==]"右上角"(,+按键位置)->的(动作,右上展宽)->的(右上展宽,mouseMove#9)...
	->+[修改内容](mouseMove#9,mouseMove#0)

}->+[del](,+按键位置)
## end
#625, 956:
"""
+[返回目录](,圆形)
+[粘贴](,圆形)
动作:...

"""

+圆形(_鼠标位置,_物体)->+[del](,+圆形)...
->的(_物体,中心)->的(_物体,半径)->的(_物体,角度)...
->+[.]"pm"([python],_鼠标位置)->+[.]"pt"([python],中心)->+[.]"r"([python],半径)...
->+[.]"angle"([python],角度)->+按键位置->[python]"
pt=pt
r=r[0]
pm=pm
angle=angle[0]
theta=np.deg2rad(angle)
R=6

X=[pt[0]+r*np.cos(theta),pt[0]+r]
Y=[pt[1]-r*np.sin(theta),pt[1]]

got=False
for i in range(len(X)):
    d=np.sqrt((X[i]-pm[0])**2+(Y[i]-pm[1])**2)
    if d<=R:
        got=True
        break

if got==False:
    ans='里面'
elif i==0:
    ans='角度点'
else:
    ans='半径点'

state=True
"(Python,+按键位置)...
->是([动作库],动作#0)->和(动作#0,画图动作)->的(画图动作,mouseMove#0)...
->的(圆形,动作)...
->[]{
	[]:
	->[==]"里面"(,+按键位置)->的(动作,移动)->的(移动,mouseMove#1)...
	->+[修改内容](mouseMove#1,mouseMove#0),

	->[==]"角度点"(,+按键位置)->的(动作,旋转)->的(旋转,mouseMove#2)...
	->+[修改内容](mouseMove#2,mouseMove#0),

	->[==]"半径点"(,+按键位置)->的(动作,缩放)->的(缩放,mouseMove#3)...
	->+[修改内容](mouseMove#3,mouseMove#0)
}->+[del](,+按键位置)
## end
#627, 900:
"""
+[返回目录](,直线)
动作:...

"""

+直线(_鼠标位置,_物体)->+[del](,+直线)...
->的(_物体,起点)->的(_物体,终点)->的(_物体,线粗细)...
->+[.]"pm"([python],_鼠标位置)->+[.]"pt0"([python],起点)->+[.]"pt1"([python],终点)...
->+[.]"width"([python],线粗细)->+按键位置->[python]"
pt=pt0
pt1=pt1
pm=pm
width=width[0]
R=6

X=[pt[0],pt1[0]]
Y=[pt[1],pt1[1]]

got=False
for i in range(len(X)):
    d=np.sqrt((X[i]-pm[0])**2+(Y[i]-pm[1])**2)
    if d<=R:
        got=True
        break

if got==False:
    ans='里面'
elif i==0:
    ans='起点'
else:
    ans='终点'

state=True
"(Python,+按键位置)...
->是([动作库],动作#0)->和(动作#0,画图动作)->的(画图动作,mouseMove#0)...
->的(直线,动作)...
->[]{
	[]:
	->[==]"里面"(,+按键位置)->的(动作,移动)->的(移动,mouseMove#1)...
	->+[修改内容](mouseMove#1,mouseMove#0),

	->[==]"起点"(,+按键位置)->的(动作,移动起点)->的(移动起点,mouseMove#2)...
	->+[修改内容](mouseMove#2,mouseMove#0),

	->[==]"终点"(,+按键位置)->的(动作,移动终点)->的(移动终点,mouseMove#3)...
	->+[修改内容](mouseMove#3,mouseMove#0)
}->+[del](,+按键位置)
## end
#628, 328:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
size[0]=m[0]-pt[0]
size[1]=m[1]-pt[1]

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[o]"size"(+[python],尺寸)

## end
#630, 29:
+[返回目录](,右下展宽)

mouseMove:...
## end
#631, 366:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
size[0]=m[0]-pt[0]
size[1]=pt[1]+size[1]-m[1]
pt[0]=m[0]-size[0]
pt[1]=m[1]

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[o]"size"(+[python],尺寸)

## end
#633, 29:
+[返回目录](,右上展宽)

mouseMove:...
## end
#634, 366:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
size[0]=pt[0]+size[0]-m[0]
size[1]=m[1]-pt[1]
pt[0]=m[0]
pt[1]=m[1]-size[1]

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[o]"size"(+[python],尺寸)

## end
#636, 29:
+[返回目录](,左下展宽)

mouseMove:...
## end
#637, 366:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
size[0]=pt[0]+size[0]-m[0]
size[1]=pt[1]+size[1]-m[1]
pt[0]=m[0]
pt[1]=m[1]

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[o]"size"(+[python],尺寸)

## end
#639, 29:
+[返回目录](,左上展宽)

mouseMove:...
## end
#640, 321:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
x0=pt[0]
xm=m[0]
size[0]=xm-x0

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[o]"size"(+[python],尺寸)

## end
#642, 28:
+[返回目录](,右展宽)

mouseMove:...
## end
#643, 339:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
x0=pt[0]+size[0]
xm=m[0]
size[0]=x0-xm
pt[0]=xm


"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[o]"size"(+[python],尺寸)

## end
#645, 28:
+[返回目录](,左展宽)

mouseMove:...
## end
#646, 321:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
y0=pt[1]
ym=m[1]
size[1]=ym-y0

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[o]"size"(+[python],尺寸)

## end
#648, 28:
+[返回目录](,下展宽)

mouseMove:...
## end
#649, 339:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
y0=pt[1]+size[1]
ym=m[1]
size[1]=y0-ym
pt[1]=ym


"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[o]"size"(+[python],尺寸)

## end
#651, 28:
+[返回目录](,上展宽)

mouseMove:...
## end
#652, 313:
"""
+[返回目录](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_物体,尺寸)->的(_画板,m_mouse)...
->+[python]"
pt[0]=m[0]-size[0]/2
pt[1]=m[1]-size[1]/2
"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)->+[.]"size"(+[python],尺寸)

## end
#654, 27:
+[返回目录](,移动)

mouseMove:...
## end
#664, 221:
+[返回目录](,动作)

移动:...
上展宽:...
下展宽:...
左展宽:...
右展宽:...
左上展宽:...
左下展宽:...
右上展宽:...
右下展宽:...


是([动作库],动作)->和(动作,画图动作)->的(画图动作,mouseMove)...
->的(下展宽,mouseMove#0)->+[修改内容](mouseMove#0,mouseMove)


是([动作库],动作)->+[打开文件](+新窗口,动作)
## end
#666, 401:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"圆形"...
->的(_物体,中心)->的(_物体,角度)->的(_画板,m_mouse)...
->+[python]"
dx=pt[0]-m[0]
dy=pt[1]-m[1]
r=np.sqrt(dx**2+dy**2)
theta=np.sign(dy)*np.arccos(-dx/r)
angle=np.rad2deg(theta)

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],中心)->+[o]"angle"(+[python],角度)

## end
#668, 46:
+[返回目录](,旋转)

mouseMove:...
+[del](,mouseMove)
## end
#669, 338:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"圆形"...
->的(_物体,中心)->的(_物体,半径)->的(_画板,m_mouse)...
->+[python]"
dx=pt[0]-m[0]
dy=pt[1]-m[1]
r=np.sqrt(dx**2+dy**2)

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],中心)->+[o]"r"(+[python],半径)

## end
#671, 46:
+[返回目录](,缩放)

mouseMove:...
+[del](,mouseMove)
## end
#672, 258:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"圆形"...
->的(_物体,中心)->的(_画板,m_mouse)...
->+[python]"
pt=m

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],中心)

## end
#674, 46:
+[返回目录](,移动)

mouseMove:...
+[del](,mouseMove)
## end
#678, 61:
+[返回目录](,动作)

移动:...
缩放:...
旋转:...

+[粘贴](,旋转)
+[修改内容](移动,旋转)
## end
#680, 259:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"直线"...
->的(_物体,终点)->的(_画板,m_mouse)...
->+[python]"
pt2=m

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt2"(+[python],终点)
## end
#682, 29:
+[返回目录](,移动终点)

mouseMove:...
## end
#683, 259:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"直线"...
->的(_物体,起点)->的(_画板,m_mouse)...
->+[python]"
pt1=m

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt1"(+[python],起点)
## end
#685, 29:
+[返回目录](,移动起点)

mouseMove:...
## end
#686, 239:
"""
+[返回目录](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"矩形"...
->的(_物体,起点)->的(_画板,m_mouse)...
->+[python]"
pt=m
"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt"(+[python],起点)

## end
#687, 376:
"""
+[返回目录](,mouseMove)
+[复制](,mouseMove)

"""
+mouseMove(_画板,)->+[del](,+mouseMove)...
->的(_画板,m_select)->的(m_select,_物体)->的(_物体,类型)->类型"直线"...
->的(_物体,起点)->的(_物体,终点)->的(_画板,m_mouse)...
->+[python]"
dx=pt2[0]-pt1[0]
dy=pt2[1]-pt1[1]
pt1=[m[0]-dx/2,m[1]-dy/2]
pt2=[m[0]+dx/2,m[1]+dy/2]

"(Python,)->+[.]"m"(+[python],m_mouse)->+[o]"pt1"(+[python],起点)->+[o]"pt2"(+[python],终点)

## end
#689, 46:
+[返回目录](,移动)

mouseMove:...
+[del](,mouseMove)
## end
#694, 72:
+[返回目录](,动作)

移动:...
移动起点:...
移动终点:...

+[粘贴](,移动终点)
+[修改内容](移动,移动终点)



## end
#697, 11:
9.0, -189.5
## end
#699, 12:
246.0, 157.0
## end
#704, 129:
+[返回目录](,直线)

起点::300,-150
终点::100,-100
类型::直线

线颜色::0,0,0
线型::DashLine
线粗细::1

画图:...
选中区域:...
HTML:...
的(画图,输入)->+[有](HTML,输入)

## end
#714, 313:
"""
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:...
选中框:...

"""
pt1=起点
pt2=终点

lineWidth=线粗细[0]
lineType=线型

if len(线颜色)==0:
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
qp.setPen(QPen())



## end
#720, 313:
"""
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:...
选中框:...

"""
pt1=起点
pt2=终点

lineWidth=线粗细[0]
lineType=线型

if len(线颜色)==0:
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawLine(pt1[0],pt1[1],pt2[0],pt2[1])
qp.setPen(QPen())



## end
#721, 258:
"""
+[返回目录](,选中框)

"""
X=[pt1[0],pt2[0]]
Y=[pt1[1],pt2[1]]
R=6

qp.setPen(QPen(QColor(140,140,140),2.5))
qp.setBrush(QBrush(Qt.white))
qp.drawEllipse(X[0]-R,Y[0]-R,2*R,2*R)
qp.drawEllipse(X[1]-R,Y[1]-R,2*R,2*R)
qp.setBrush(QBrush())
qp.setPen(QPen(Qt.black))
## end
#722, 2:
直线
## end
#723, 347:
"""
+[返回目录](,选中区域)
输入:...

点线公式:...
+[网页](web,点线公式)

"""

pt1=起点
pt2=终点
pt=mouse_pos

R=np.sqrt((pt1[0]-pt2[0])**2+(pt1[1]-pt2[1])**2)
d=np.abs(((pt[1]-pt1[1])*(pt2[0]-pt1[0])-(pt[0]-pt1[0])*(pt2[1]-pt1[1]))/R)
l=((pt[1]-pt1[1])*(pt2[1]-pt1[1])+(pt[0]-pt1[0])*(pt2[0]-pt1[0]))/R**2


if l>=0 and l<=1 and d<3:
    state=True
else:
    state=False

## end
#727, 42:
+[返回目录](,输入)

起点::200,100
终点::218.0, -9.0

## end
#730, 14:
+[返回目录]
+[内容]

## end
#731, 886:
<!--
+[返回目录](,点线公式)
+[网页](web,点线公式)

LaTeX数学记号::https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols
+[打开](,LaTeX数学记号)
-->

<html>
  <head><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
  </head>
  <body>
    <p><mathjax style="font-size:1.5em">
如果有两个点, 
$$
\vec{p}_A=(x_1,y_1), \vec{p}_B=(x_2,y_2)
$$
那么, \(\overrightarrow{AB}\)平行方向的向量和垂直方向的向量分别是,
$$
\vec{r}_\|=(x_2-x_1,y_2-y_1)
$$$$
\vec{r}_\perp=(-y_2+y_1,x_2-x_1)
$$
于是, 第三个点\(C\)到线段\(AB\)的距离为,
$$
d=\frac{\vec{r}_{AC}\cdot \vec{r}_\perp}{\|\vec{r}_\perp\|}\\
=\frac{(y-y_1)(x_2-x_1)-(x-x_1)(y_2-y_1)}{\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}}
$$
而判断\(C\)在\(A\)和\(B\)之间的判据为,
$$
l=\frac{\vec{r}_{AC}\cdot \vec{r}_\|}{\|\vec{r}_\|\|^2}\\
=\frac{(y-y_1)(y_2-y_1)+(x-x_1)(x_2-x_1)}{(x_2-x_1)^2+(y_2-y_1)^2}
$$

    </mathjax></p>
  </body>
</html>

## end
#733, 56:
https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols
## end
#734, 200:
/*
+[返回目录](,HTML)

+[JS函数](,HTML)
+[设置结构](,输入)
*/

ctx.strokeStyle='rgb(%线颜色)';
ctx.lineWidth=%线粗细;


ctx.beginPath();
ctx.moveTo(%起点);
ctx.lineTo(%终点)
ctx.stroke();

/*
+[JS函数](,HTML)
+[设置结构](,输入)
*/
## end
#736, 31:
线颜色::0,0,0
线型::DashLine
线粗细::2

## end
#742, 13:
-106.0, -52.0
## end
#743, 14:
-366.0, -174.0
## end
#744, 5:
0,0,0
## end
#745, 8:
DashLine
## end
#746, 1:
1
## end
#747, 3:
806
## end
#750, 113:
"""
+[返回目录](,ctrl+C)

"""

+ctrl+C(_画图,)->+[del](,+ctrl+C)...
->的(_画图,m_select)->的(m_select,_物体)->+[复制结构](,_物体)


## end
#752, 112:
"""
+[返回目录](,ctrl+V)

"""

+ctrl+V(_画图,)->+[del](,+ctrl+V)...
->的(_画图,m_scene)->m_scene(,_场景)...
->+[粘贴](,_场景)


## end
#755, 1:
2
## end
#756, 9:
SolidLine
## end
#757, 5:
0,0,0
## end
#758, 4:
None
## end
#759, 17:
-93.3664606634298
## end
#760, 17:
75.23961722390672
## end
#761, 11:
251.0, 90.0
## end
#769, 66:
+[返回目录](,输入)

角度::0
面颜色::255,255,0
线颜色::0,0,0
线型::DashLine
线粗细::2

## end
#771, 519:
/*
+[返回目录](,HTML)

+[JS函数](,HTML)
+[设置结构](,输入)
*/

ctx.beginPath();
ctx.arc(%中心,%半径,0,2*Math.PI)

if('%面颜色'==='None') {
	ctx.fillStyle='rgba(255,255,255,0)';
} else {
	ctx.fillStyle='rgb(%面颜色)';
        ctx.fill();
}

if('%线颜色'==='None') {
	ctx.strokeStyle='rgba(0,0,0)';
} else {
        ctx.strokeStyle='rgb(%线颜色)';
        ctx.lineWidth=%线粗细;
        if('%线型'==='DashLine') {
            ctx.setLineDash([5,5])
        }
        ctx.stroke();
}

ctx.setLineDash([])

//ctx.stroke()

/*
+[JS函数](,HTML)
+[设置结构](,输入)
*/
## end
#774, 39:
+[返回目录](,输入)
+[内容]
中心::200,100
半径::100

## end
#775, 14:
+[返回目录]
+[内容]

## end
#778, 164:
"""
+[返回目录](,选中区域)
输入:...

"""

pt=中心
r=半径[0]
pt0=mouse_pos

Dx=pt[0]-pt0[0]
Dy=pt[1]-pt0[1]
Dr=np.sqrt(Dx**2+Dy**2)

if Dr<=r:
    state=True
else:
    state=False
## end
#779, 2:
圆形
## end
#780, 692:
"""
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:....
选中框:...

"""
pt=中心
r=半径[0]
angle=角度[0]
theta=np.deg2rad(angle)

lineWidth=线粗细[0]
lineType=线型

if len(面颜色)==0 or 面颜色=='None':
    qp.setBrush(QBrush())
else:
    faceColor=面颜色
    qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen(QColor(0,0,0,0)))
else:
    edgeColor=线颜色
    if lineType=="DashLine":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawEllipse(pt[0]-r,pt[1]-r,2*r,2*r)
qp.setBrush(QBrush())
qp.setPen(QPen())



## end
#781, 493:
"""
+[返回目录](,选中框)

"""

X=[pt[0],pt[0]+r*np.cos(theta),pt[0]+r]
Y=[pt[1],pt[1]-r*np.sin(theta),pt[1]]
R=6

qp.drawEllipse(pt[0]-r,pt[1]-r,2*r,2*r)

qp.setPen(QPen(Qt.black,1,Qt.DashLine))
qp.drawLine(X[0],Y[0],X[1],Y[1])
qp.setPen(QPen(Qt.black,1,Qt.SolidLine))
qp.drawLine(X[0],Y[0],X[2],Y[2])

qp.setPen(QPen(QColor(140,140,140),2.5))
qp.setBrush(QBrush(Qt.white))
qp.drawEllipse(X[2]-R,Y[2]-R,2*R,2*R)
qp.drawEllipse(X[1]-R,Y[1]-R,2*R,2*R)
qp.setBrush(QBrush())
qp.setPen(QPen(Qt.black))



## end
#787, 677:
"""
+[返回目录](,画图)
+[返回目录](,图形)
输入:...
输出:...

图形:....
选中框:...

"""
pt=中心
r=半径[0]
angle=角度[0]
theta=np.deg2rad(angle)

lineWidth=线粗细[0]
lineType=线型

if len(面颜色)==0 or 面颜色=='None':
    qp.setBrush(QBrush())
else:
    faceColor=面颜色
    qp.setBrush(QBrush(QColor(faceColor[0],faceColor[1],faceColor[2])))

if len(线颜色)==0 or 线颜色=='None':
    qp.setPen(QPen())
else:
    edgeColor=线颜色
    if lineType=="DashLine":
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth,Qt.DashLine))
    else:
        qp.setPen(QPen(QColor(edgeColor[0],edgeColor[1],edgeColor[2]),lineWidth))


qp.drawEllipse(pt[0]-r,pt[1]-r,2*r,2*r)
qp.setBrush(QBrush())
qp.setPen(QPen())



## end
#799, 145:
+[返回目录](,圆形)

中心::200,100
半径::100
类型::圆形
角度::0


面颜色::255,255,0
线颜色::None
线型::SolidLine
线粗细::2

画图:...
选中区域:...
HTML:...
的(画图,输入)->+[有](HTML,输入)

## end
#802, 147:
"""
+[返回目录](,ctrl+X)

"""

+ctrl+X(_画图,)->+[del](,+ctrl+X)...
->的(_画图,m_select)->的(m_select,_物体)->+[复制结构](,_物体)...
->+[删除结构](,_物体)->+[del](,_物体);


## end
#803, 3:
805
## end
#805, 3:
807
## end
#807, 3:
809
## end
#809, 3:
811
## end
#811, 3:
813
## end
#813, 3:
815
## end
#815, 3:
817
## end
#817, 3:
819
## end
#819, 3:
821
## end
#821, 3:
823
## end
#823, 3:
825
## end
#825, 3:
827
## end
#827, 3:
829
## end
#829, 3:
831
## end
#831, 3:
838
## end
#834, 110:
"""
+[返回目录](,选中)

"""

+选中(_场景,_物体)...
->_场景->m_scene(,_场景)->的(_画板,m_scene)->的(_画板,m_select)->的(m_select,_物体)

## end
#835, 3:
837
## end
#837, 3:
839
## end
#839, 3:
841
## end
#841, 3:
845
## end
#844, 70:
https://www.riverbankcomputing.com/static/Docs/PyQt4/qpainterpath.html
## end
#845, 3:
847
## end
#847, 3:
849
## end
#849, 3:
851
## end
#851, 3:
853
## end
#853, 3:
855
## end
#855, 3:
857
## end
#857, 3:
859
## end
#859, 3:
861
## end
#861, 3:
863
## end
#863, 3:
865
## end
#865, 3:
867
## end
#867, 3:
869
## end
#869, 3:
871
## end
#871, 3:
873
## end
### 结束