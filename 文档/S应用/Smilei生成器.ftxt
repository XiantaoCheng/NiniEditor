### 节点
地址, 的, Smilei生成器, 目录, 的, 的, 节点数目统计, 20220718, 的, 的, 新窗口, 的, 笔记, 的, Profile, 打开网页, 的, 气体密度, 的, 工具, 的, 提取数据, 20220720, 的, 的, 分析数据, 20220731, 的, 打开网页, 打开网页, 的, 激光profile, 的, 操作, 手, Smilei, 的, 测试场景, 的, 生成理论对比, 的, 等离子体折射率, 的, Namelist模板, 打开网页, 的, 折射率场景, 的, 提取数据, 的, 分析数据, 的, 模拟空间, 的, 窗口, 的, 光束, 的, 焦点位置, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 类型, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 类型, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 类型, 的, 空间点, 在, 的, 地址, 20220801, 的, 的, Smilei模拟预览, 手, 速度, 的, 启动时间, 的, 的, M代码, NameList解读器, 喷嘴设计, PIC模拟_MIR, 的, 参考波长, 的, 参考公式, html, 的, [1]., 表达式, 的, 公式, 的, [2]., 表达式, 的, 公式, 打开网页, 的, 归一化单位, 的, M代码, 的, 归一化单位, 打开网页, 的, 保存, 的, 电子, 手, 数密度, 的, 20220811, 的, 保存, 归一化单位, 的, M代码, 保存, 的, NS模板, Namelist模板, 的, 的, 的, 的, 生成Smilei代码, 的, 偏振态, 的, gamma, 的, beta_r, 的, 的, 提取Smilei数据, 的, P代码, 的, P模板, 的, 输出地址, 的, 数据地址, 的, M模板, 的, M代码, 打开网页, 的, Field, 的, Field, 的, list_field, 打开网页, 的, 对比相位, 打开网页, 打开网页, 复制, 的, 打开网页, 的, 单位, 打开网页, 的, 1DMain, 的, 2DFR, 的, 对比相位_1D, 的, 磁场, 手, 场强, 的, 20220815, 的, 的, 1D_PIC_FR, 节点数目统计, 1D_PIC_FR, 的, 等离子体折射率, 节点数目统计, 等离子体折射率, 20220816, 的, 打开网页, 打开网页, 20220820, 的, 打开网页, 的, 粒子追踪, 20220821, 的, 的, 粒子追踪_后处理, 的, 粒子追踪, 打开网页, 的, 粒子轨迹, 打开网页, 的, projector, 打开网页, 的, 粒子均值, 打开网页, 20220824, 的, 20220831, 的, 20220901, 的, 打开网页, 打开网页, 打开网页, 的, 2D模拟, 20220911, 的, 的, NS模板, 的, 探测场, 的, 参考波长, 的, 模拟空间, 的, 窗口, 速度, 的, 启动时间, 的, 的, 电子, 数密度, 的, gamma, 的, beta_r, 的, 的, 磁场, 场强, 的, 的, 光束, 的, 焦点位置, 偏振态, 的, 空间点, 在, y, 的, x, 的, 宽度, 的, 长度, 的, 类型, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 类型, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 类型, 的, 空间点, 在, 的, 分析数据, 的, MIR模拟, 的, 地址, 的, 数据地址, 的, 保存代码, 20220916, 的, 打开网页, 打开网页, 打开网页, 打开网页, 打开网页, 的, 分布测试, 手, 区域1, 的, 区域2, 的, 区域3, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, 方向, 朝向, 的, 电子, 的, 在, 密度, 的, 的, 在, 密度, 的, 的, 在, 密度, 的, 20220925, 的, 的, 密度, 方向, 朝向, 方向, 朝向, 序号, 的, 区域, 的, 3e19, 区域, 的, 2e19, 区域, 的, 1e19, 的, M代码, 类型, 的, 的, 生成Smilei代码_结构, 的, 结构描述, 的, 库, 的, 输出代码, 的, 全局参数, 的, M代码, 的, 归一化单位, 打开网页, 的, 单位定义, html, 的, [1]., 的, [2]., 的, [3]., 的, [4]., 的, [5]., 的, [6]., 表达式, 的, 公式, 表达式, 的, 公式, 表达式, 的, 公式, 表达式, 的, 公式, 表达式, 的, 公式, 表达式, 的, 公式, 的, 空间, 的, 光束, 的, 外场, 的, 粒子追踪, 的, M代码, 的, NS模板, 的, M代码, 的, M代码, 的, NS模板, 的, 模拟结构, 参考波长, 的, 模拟空间, 的, 窗口, 的, 电子, 的, 光束, 的, 探测场, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, 数密度, 的, gamma, 的, beta_r, 的, 速度, 的, 启动时间, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, 偏振态, 的, 焦点位置, 的, 的, A, 空间点, 在, 的, NS模板, Smilei模板, 预览动画_del, 的, 召唤规则, 的, 降临规则, 的, 代码结构, 的, 代码框架, 的, 样本代码, 20220927, 的, 手, 的, 生成代码, 的, 样本代码, 的, 保存, 的, 设置框架, 的, 设置运动电子, 的, 设置光束2, 召唤规则, 的, Smilei预览动画, 的, M模板_画图, 的, M模板_初始化, 的, M代码, 的, M模板_动画, 的, 代码内容, 框架代码, 的, 光束代码, 的, 粒子代码, 的, 初始化, 的, 画图, 的, 动画, 的, 的, 测试结构, 的, M代码, 的, M模板_初始化, 的, M模板_画图, 的, M模板_动画, 腰宽, 的, 展宽, 的, 的, 输出代码, 的, 生成代码, 的, M模板, 的, M代码, 光束2, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, 偏振态, 的, 焦点位置, 的, 腰宽, 的, 展宽, 的, 的, B, 空间点, 在, 的, 保存代码, 打开网页, 的, 偏振态, 打开网页, 的, 偏振态2, 打开网页, 的, 偏振态, 的, 偏振态2, 打开网页, 打开网页, 的, 地址, 的, 数据地址, 的, 分析数据, 探测类型, 的, 探测间隔, 的, 动画, 画图, 初始化, 动画, 画图, 初始化, 的, 分布函数, 的, 分布描述, 区域1, 的, 区域2, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, 方向, 朝向, 电子, 的, 的, 在, 密度, 的, 的, 在, 密度, 的, 的, 密度, 3e25, 输入, 的, 方向, 朝向, 3e25, 1e25, 3e25, 1e25, 20220928, 的, 的, M模板_初始化, 的, M模板_画图, 手, 动画, 画图, 初始化, 动画, 画图, 初始化, 画图, 初始化, 打开网页, 手, 3e25, 输入, 的, 1e25, 输入, 的, 3e25, 输入, 的, 1e25, 输入, 的, 300e25, 输入, 的, 1e25, 输入, 的, 序号, 的, 区域, 的, 300e25, 区域, 的, 1e25, 的, 分布描述2, 区域1, 的, 区域2, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, 的, 左连, 方向, 朝向, 方向, 朝向, 电子, 的, 的, 在, 密度, 的, 的, 在, 密度, 的, 的, 密度, 序号, 的, 区域, 的, 20e25, 区域, 的, 20e25, 的, 分布函数2, 电子2, 的, 数密度, 的, gamma, 的, beta_r, 的, 画图, 初始化, 动画, 画图, 初始化, 动画, 画图, 初始化, 画图, 初始化, 打开网页, 的, 电子注入, 手, 打开网页, 的, 保存, 的, 测试注入, 的, 测试注入, 的, 分析数据, x注入, 的, 地址, 的, 数据地址, 的, xmin注入, 打开网页, 的, 无效注入, 的, 有效注入, 的, 无效注入_LWFA, 的, 无效注入_LWFA2, 20220929, 的, 的, 有效注入_LWFA, 的, 背景证据, 的, 有效注入_无背景, 打开网页, 的, time_delay, 的, 块状分布, 的, NS代码, 的, 手, 的, 保存, 的, y注入, 的, 有效注入_ymax, 的, 有效注入_LWFA, 的, 无效注入_LWFA, 的, 有效注入_LWFA2, 的, Smilei模板, 手, 空间点, 在, M模板_画图, M模板_初始化, M模板_初始化2, 的, 的, 的, 设置电子, 的, 的, M模板_动画, 的, M代码, P代码, NS模板2, M代码, NS模板, 的, 的, 的, 的, 运动粒子, 的, NS模板, M代码, NS模板2, P代码, 的, 的, 的, 的, 粒子, 的, 延时函数, 的, 的, f函数2, 动画, 画图, 初始化, 动画, 画图, 初始化, 动画, 画图, 初始化, 画图, 初始化, 20220930, 的, 的, NS模板2, 20221001, 的, 的, 函数, 的, 函数转换, 动画, 画图, 初始化, 动画, 画图, 初始化, 动画, 画图, 初始化, 画图, 初始化, 的, NS模板2, 的, M模板_画图2, 的, M模板_动画2, 画图, 初始化, 序号, 的, 动画, 画图, 初始化, 动画, 画图, 初始化, 画图, 初始化, 20221002, 的, M模板_动画2, M模板_画图2, M模板_动画, M模板_画图, M模板_初始化, M代码, 的, 的, 的, 的, 的, 的, 设置光束, 的, 20221010, 的, 打开网页, 打开网页, 20221110, 的, 的, 保存, 20221121, 的, 的, 工具库, 的, 的, 保存, 打开网页, 的, 单位, 打开网页, 打开网页, 的, 粒子统计, 的, ParticleBinning, 的, TrackParticles, 20221127, 的, 打开网页, 的, TP输出, 的, PB, 的, TP, 打开网页, 的, Namelist, 的, Smilei, 的, P代码2, 的, 粒子追踪, 的, 分析数据, NS模板, M代码, 的, 的, 探测, 的, 打开网页, 的, 粒子追踪, 打开网页, 打开网页, 的, 场测量, 整理结构, P代码, 创建文件夹, 的, 的, 本地模拟, 库, 描述结构, 的, 的, 探测代码, 操作2, 操作1, 操作0, 的, 的, 的, 库, 描述结构, 的, 的, 整理光束, 整体结构, 描述结构, 模板, 的, 操作1, 的, 库, 的, 的, 电子代码, 库, 描述结构, 的, 的, 光束代码, 框架代码, 的, 的, 的, 的, 的, 的, 库, 描述结构, 的, 的, 代码结构_1D, 内容, 的, 整理代码, P代码, 的, 描述结构, 的, 设置变量, 的, 的, 的, 的, 的, 降临规则, 召唤规则, 的, 的, 结构转Smilei代码, 的, 的, myscript, 的, 模板, 的, M代码, 的, 模板, 的, M代码, 的, 模板2, 的, 保存, 的, 输出场, 的, 输出png, 的, 输出能谱, 的, NS模板, 打开网页, 的, 操作1, 的, M代码, 的, 模板, 模板, M代码, 的, 的, 操作0, 的, 召唤规则, 的, 结构转Smilei代码, 的, M代码, 的, P代码, 的, 结构场景, 的, 参考波长, 模拟空间, 的, 窗口, 的, 探测光, 的, 电子, 的, 正电子, 的, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, 的, 格点尺寸, y, 的, x, 的, 空间点, 在, 宽度, 的, 长度, 的, 样式, 类型, 的, 的, 启动时间, 的, 速度, 的, 数密度, 的, 速度方向, 的, beta, 的, 数密度, 的, 速度方向, 的, beta, 的, 电荷, 的, 波长, 的, 展宽, 的, 腰宽, 的, 偏振, 的, A, 空间点, 在, 的, 焦点位置, 的, 模拟动画, 的, a0, 的, 代码, 地址, 的, 手, 描述结构, 保存, 模板2, 模板, M代码, 的, 的, 的, 的, 框架代码, 描述结构, M代码, 模板, 的, 的, 操作0, 模板, M代码, 的, 的, 操作1, 的, 的, 库, 的, 的, 光束代码, M代码, 模板, 的, 的, 操作1, 的, 库, 描述结构, 的, 的, 电子代码, M代码, 模板, myscript, 的, 的, 的, 整体结构, 描述结构, 操作0, 操作1, 操作2, 的, 的, 的, 库, 的, 的, 整理光束, 描述结构, 输出能谱, 输出png, P代码, NS模板, 的, 的, 输出场, 的, 的, 的, 库, 的, 的, 探测代码, 的, 的, 的, 的, 的, 的, 库, 的, 的, 代码结构, 的, 探测场, 的, 的, 探测类型, 的, 探测间隔, 的, 状态, 的, P代码, M代码, 模板, 的, 的, 操作2, 的, 模板, M代码, 的, 的, 操作0, 的, 的, P代码, 的, P代码2, 模板, M代码, 的, 的, 操作0, 的, 地址, 的, run, 的, 地址, 的, info, 的, 地址, 的, myscript, 的, 的, 外场代码, 的, 描述结构, 的, 库, 的, 操作1, 的, 操作0, 的, M代码, 的, 模板, 的, 外场代码, 的, 描述结构, 的, 库, 的, 操作0, 的, 模板, 的, M代码, 的, 模板_保存1, 的, Install, 的, 参考, 的, 本地安装, 创建文件夹, P代码, 的, 的, 上传文件夹, 的, 的, 保存, 的, 参考, 的, 参考2, 手, 的, 时间步长, 的, 参考, 表达式, 的, 的, 公式, [1]., 的, 表达式, 的, 的, 公式, [2]., 的, 
### 关联
#, 2#0, #, #, 3#2, 3#6, #, #, 6#7, 2#10, #, 2#12, #, 12#14, #, #14, 12#17, #, 2#19, #, 19#21, #, #, 6#22, 19#25, #, #, 6#26, #14, #17, 12#31, #, 2#33, #, #46, #, 2#37, #, 33#39, #, 37#41, #, 39#43, #, #17, 37#46, #, 46#48, #, 46#50, #, 46#52, #, 46#54, #, 46#56, #, 46#58, #, #, 52#59, #, 52#61, #, 52#63, #, 52#65, #, 52#67, #, 52#69, #, 54#71, #, 54#73, #, 54#75, #, 54#77, #, 54#79, #, 54#81, #, 56#83, #, 56#85, #, 56#87, #, 56#89, #, 56#91, #, 56#93, #, 58#95, 46#98, #, #, 6#99, 33#102, #, #46, #, 54#104, #, 54#106, 102#109, #, #, #, #, 46#114, #, 109#116, #, 116#, 116#119, #, #, 119#120, 119#, 116#124, #, #, 124#125, 124#, #17, 12#130, #, 39#132, #, 132#134, #, #134, 39#137, #, 46#139, #, #46, #, 139#141, #, 6#143, #, #, 148#146, #, #, 151#149, #, #, 157#145, 157#148, 157#151, 157#152, #, 33#157, #, 56#159, #, 139#161, #, 139#163, 33#166, #, 166#168, #, 166#170, #, 46#172, #, 46#174, #, 166#176, #, 166#178, #, #17, 12#181, #, 151#183, #, 151#185, #, #185, 50#188, #, #14, #31, #54, 46#191, #31, 12#195, #, #17, 12#198, #, 151#200, #, 50#202, #, 46#204, #, #46, #, 204#206, #, 6#208, 2#211, #, #, #, 2#215, #, #, #, #, 6#218, #146, #17, #, 6#222, #17, 12#226, #, #, 6#227, 12#230, #, 170#232, #, #232, 176#235, #, #195, 12#238, #, #226, 12#241, #, #226, #, 6#243, #, 6#245, #, 6#247, #226, #238, #238, 2#253, #, #, 6#254, 253#257, #, 253#259, #, 253#261, #, 253#263, #, 253#265, #, #, 265#266, #, 265#268, 253#271, #, #, 271#272, #, 271#274, #, 271#276, 253#279, #, #, 279#280, 253#283, #, 253#285, #, #, 283#286, #, 263#288, #, 263#290, #, 263#292, #, 263#294, #, 263#296, #, 263#298, #, 265#300, #, 265#302, #, 265#304, #, 265#306, #, 265#308, #, 265#310, #, 283#312, #, 283#314, #, 283#316, #, 283#318, #, 283#320, #, 283#322, #, 285#324, 253#327, #, 151#329, #, 253#331, #, 253#333, #, 253#335, #, #, 6#336, #31, #17, #31, #195, #17, 2#344, #, #497, #, 344#346, #, 344#348, #, 344#350, #, 346#352, #, 346#354, #, 346#356, #, 346#358, #, 346#360, 346#, #, 346#363, #, 348#365, #, 348#367, #, 348#369, #, 348#371, #, 348#373, 348#, #, 348#376, #, 350#378, #, 350#380, #, 350#382, #, 350#384, #, 350#386, 350#, #, 350#389, #, 350#391, 344#394, #, 344#396, 397#346, #, 394#397, 344#400, 401#348, #, 394#401, 344#404, 405#350, #, 394#405, #, 6#407, 344#410, #, #, 346#411, #, 348#413, #, 410#415, #, 410#417, #, #, 410#420, #, #, 410#423, #, 344#427, #, #, 410#428, 33#431, #, 431#433, #, 431#435, #, 431#437, #, 435#439, #, 439#441, #, 441#443, #, #443, 441#446, #, 446#, 446#449, #, 446#451, #, 446#453, #, 446#455, #, 446#457, #, 446#459, #, #, 449#460, 449#, #, 451#463, 451#, #, 453#466, 453#, #, 455#469, 455#, #, 457#472, 457#, #, 459#475, 459#, 435#479, #, 435#481, #, 435#483, #, 435#485, #, 479#487, #, 479#489, #, 481#491, #, 485#493, #, 485#495, #, 2#497, #, #, 497#498, #, 497#500, #, 497#502, #, 497#504, #, 497#506, #, 497#508, #, 500#510, #, 500#512, #, 500#514, #, 500#516, #, 500#518, 500#, #, 500#521, #, 502#523, #, 502#525, #, 502#527, #, 502#529, #, 502#531, 502#, #, 502#534, #, 504#536, #, 504#538, #, 504#540, #, 502#542, #, 502#544, #, 506#546, #, 506#548, #, 506#550, #, 506#552, #, 506#554, 506#, #, 506#557, #, 506#559, #564, 506#561, 497#564, #, #, 564#565, 481#568, #, #, #, 570#572, #, 570#574, #, 570#576, #, 576#578, #, 576#580, #, #, 6#581, #497, 576#585, #, 574#587, #, 587#589, #, 574#591, #, 574#593, #, 574#595, #, #, 598#596, #, 591#600, #, 591#602, #, 591#604, #, 591#606, #, 576#608, #, #, 608#609, #, 608#611, #, 608#613, #, 609#615, #, 609#617, #, 609#619, 497#622, #, 595#624, #, 595#626, #, 595#628, #, 595#630, #, #, 506#631, #, 506#633, 570#636, #, 574#638, #, 638#640, #, 638#642, #, #, 497#643, #, 643#645, #, 643#647, #, 643#649, #, 643#651, #, 643#653, 643#, #, 643#656, #, 643#658, #667, 643#660, #, 643#662, #, 643#664, 497#667, #, #, 667#668, 497#671, #, #31, 12#674, #, #674, 12#677, #, #677, 491#680, #, 491#682, #, #17, #14, 497#686, #, 497#688, #, 497#690, #, #, 508#691, #, 508#693, #, #, #, #, #, #, 497#702, #, 497#704, #, #, 704#705, #, 704#707, #, 705#709, #, 705#711, #, 705#713, #, 705#715, #, 705#717, 705#, #, 705#720, #, 707#722, #, 707#724, #, 707#726, #, 707#728, #, 707#730, 707#, #, 707#733, #, 707#735, #, 704#737, 704#740, 741#705, #, 737#741, 704#744, 745#707, #, 737#745, 704#748, #, #, #, 750#749, #, 705#752, #, #, #, #, #, 6#758, 593#761, #, 593#763, #, #497, #, #, #, #, #, #, #, #, #14, #497, #, 779#, 776#775, #, #, 779#778, #, 785#, 782#781, #, #, 785#784, #, 791#, 788#787, #, #, 791#790, #, 748#793, #, 748#795, #, #, 748#798, #, 497#802, #, #, 802#803, #, 802#805, #, 803#807, #, 803#809, #, 803#811, #, 803#813, #, 803#815, 803#, #, 803#818, #, 805#820, #, 805#822, #, 805#824, #, 805#826, #, 805#828, 805#, #, 805#831, 802#834, #805, #, 803#835, #, 805#837, #, 802#839, 802#842, 843#803, #, 839#843, 802#846, 847#805, #, 839#847, 802#850, #, #, 850#851, #, 850#853, #, #, 850#856, #, 497#860, #, #, 497#861, #860, 861#863, #, 861#865, #, 861#867, #, #, #, #, #, #, #, #, #, #, #31, 12#881, #, #892, #881, 671#885, #, 671#887, #, 2#889, #, 889#891, #, #, 889#894, #, 889#896, #, 892#898, #, #14, 892#901, #, 892#903, #, 892#905, #, 892#907, #, #, 6#908, 892#911, #, 892#913, #, 892#915, #, #14, 892#918, #, 892#920, #, 889#922, #, 922#892, #922, 922#926, #, 922#928, #, 928#930, #, 928#932, #, 928#934, #, 928#936, #, 2#938, #, #497, #, 861#940, #, #, #, 948#942, 948#943, 948#944, #, 574#948, 593#951, #, 593#953, #, #, #, #, #, 962#954, 962#955, 962#956, 962#957, #, 435#962, #, #, #, #, 972#964, 972#965, 972#966, 972#967, #, 435#972, #977, 861#974, 497#977, #, #, #, #, #, #, #, #, #, #, #, #, #, 6#989, 479#992, #, #, 6#993, 435#996, #, 574#998, #, #, #, #, #, #, #, #, #, #, #, #, 481#1011, #, 595#1013, #, 595#1015, #, #, #, #, 622#1018, #, #, #, #, #, #, #, #, #, 6#1028, #, #, #, #, #, #, 1042#1030, 1042#1031, 1042#1032, 1042#1033, 1042#1034, 1042#1035, #, 574#1042, #, 6#1044, #14, #226, #, 6#1048, 591#1051, #, #, 6#1052, 2#1055, #, 1055#570, 638#1058, #, #181, 166#1061, #, #226, #241, 12#1065, #, 1065#1067, #, 1065#1069, #, #, 6#1070, #230, 1065#1074, #, 1065#1076, #, 1065#1078, #, #1074, 1065#1081, #, 1065#1083, #, 166#1085, #, 1085#1087, #, 1085#1089, #, #, #, 1094#1090, 1094#1091, #, 435#1094, #31, 168#1098, #, #1098, #1098, 168#1102, #, #, #, #, 1108#1104, 1108#1105, #, #, #, 1113#1109, 1113#1110, #, #, #, #, 1120#1114, 1120#1115, 1120#1116, #, #, 1124#1120, 1124#1121, #, #, #, #, 1129#1127, #, 1131#1129, #, 1134#1126, 1134#1131, #, #, #, 1139#1135, 1139#1136, #, #, 1147#1113, 1147#1124, 1147#1125, 1147#1134, 1147#1139, 1147#1140, #, #, 1151#1147, 1151#1148, #, #, 1154#1152, #, #, 1157#1155, #, 1159#1157, #, 1165#1103, 1165#1108, 1165#1151, 1165#1154, 1165#1159, #, #, 1169#1165, 1169#1166, #, 1055#1169, 1125#1172, #, 1125#1174, #, 1140#1176, #, 1140#1178, #, 1125#1180, #, 1140#1182, #, 1140#1184, #, 1109#1186, #, 1109#1188, #, 1109#1190, #, 1186#1192, #, #14, 1135#1195, #, 1195#1197, #, 1195#1199, #, #, #, 1204#1200, 1204#1201, #, 1135#1204, #, 1208#1206, #, 1129#1210, #, 1186#1212, #, 37#1214, #, 1214#1216, #, #, 1214#1217, #, 1214#1219, #, 1214#1221, #, 1214#1223, #, 1214#1225, #, 1217#1227, #, 1217#1229, #, 1217#1231, #, 1217#1233, #, 1217#1235, 1217#, #, 1217#1238, 1217#1241, #, #, 1219#1242, #, 1219#1244, #, 1219#1246, #, 1219#1248, #, 1219#1250, 1219#, #, 1219#1253, 1219#1256, #, 1219#1258, #, 1223#1260, #, 1223#1262, #, 1223#1264, #, 1225#1266, #, 1225#1268, #, 1225#1270, #, 1225#1272, #, 1221#1274, #, 1221#1276, #, 1221#1278, #, 1221#1280, #, 1214#1282, #, #, 1282#1283, 1221#1286, #1282, 1214#1288, #, 1221#1290, #, 1214#1292, #, #, 1214#1293, #1214, #, #, #, #, #, 1305#1297, 1305#1298, 1305#1299, 1305#1300, #, #, #, #, 1311#1307, 1311#1308, #, #, #, 1316#1312, 1316#1313, #, 1319#1311, 1319#1316, #, 1322#1306, 1322#1319, #, #, #, 1327#1323, 1327#1324, #, 1329#1327, #, #, 1333#1329, 1333#1330, #, #, #, #, 1340#1334, 1340#1335, 1340#1336, #, #, #, #, #, 1348#1342, 1348#1343, 1348#1344, #, 1351#1341, 1351#1348, #, #, #, #, #, #, 1359#1355, 1359#1356, #, 1363#1353, 1363#1354, 1363#1359, #, 1366#1352, 1366#1363, #, 1373#1305, 1373#1322, 1373#1333, 1373#1340, 1373#1351, 1373#1366, #, 1376#1296, 1376#1373, #, 1165#1376, #, 1214#1378, 1378#1381, #, 1378#1383, #, 1214#1385, #, 1126#1387, #, #, #, 1392#1388, 1392#1389, #, 1131#1392, #, #, 1398#1394, 1398#1395, #, 1131#1398, 1330#1401, #, 1330#1403, #, #, #, 1408#1404, 1408#1405, #, 1329#1408, #, 1412#1410, #, 1292#1412, #, 1416#1414, #, 1292#1416, #, 1420#1418, #, 1292#1420, 1373#1423, #, 1423#1425, #, 1423#1427, #, 1427#1429, #, 1427#1431, #, 1431#1433, #, 1431#1435, #, 1147#1437, #, 1437#1439, #, 1437#1441, #, 1441#1443, #, 1443#1445, #, 1443#1447, #, 1327#1449, #, 12#1451, #, 1451#1453, #, 1451#1455, #, #, #, 1460#1456, 1460#1457, #, 1165#1460, 1104#1463, #, 881#1465, #, 881#1467, #, #1055, 12#1470, #, 1470#1472, #, #, 1477#1473, 1477#1476, 1477#, #, 1470#1477, #, 1483#1479, 1483#1482, 1483#, #, 1470#1483, 
### 内容
#0, 21:
文档\S应用\Smilei生成器.ftxt
## end
#2, 618:
+[返回目录](,Smilei生成器)
地址::文档\S应用\Smilei生成器.ftxt

Nini, 打开花园(节点)

操作:...
+[设置动词](,操作)
工具库:...
+[新建阅读窗口](,工具库)
+[新建阅读窗口](,操作)

Nini, 导入词典的库. 导入词典
Nini, 导入Smilei生成器的库
Nini, 导入PPT的库. Nini, 导入图形库的库
Nini, 导入公式分析器的库
Nini, 导入网页画板的库
Nini, 导入天书的库
Nini, 导入编程语言parser的库

Nini, 打开plasma(文件)
Nini, 打开Smilei源码分析(文件)
Nini, 打开等离子体折射率(文件)
Nini, 打开PlasmaMirror(文件)
Nini, 打开PIConGPU(文件)

创建"文档\模拟\Smilei"
+[打开文件](+新窗口,+[临时文本])->+[临时文本]"文档\Smilei.txt"
笔记:...
工具:...
+[新建阅读窗口](,笔记)

测试场景:...
+[新建阅读窗口](,测试场景)

2D模拟:...
模拟结构:...
分布测试:...
测试注入:...

+[新建阅读窗口](,模拟结构)
Nini, 打开等离子体折射率(文件)
Nini, 打开LWFA(文件)

Smilei模板:...
+[召唤星辰](+[临时文本],Smilei模板)


## end
#3, 53:
Smilei生成器:...
创建于 20220718

节点数目统计::
+[设置结构](,节点数目统计)
## end
#7, 2:
14
## end
#12, 1234:
Profile::https://smileipic.github.io/Smilei/Use/profiles.html
气体密度::https://smileipic.github.io/Smilei/Use/namelist.html#species
激光profile::https://smileipic.github.io/Smilei/Use/namelist.html#lasers
Field::https://smileipic.github.io/Smilei/Use/namelist.html#fields-diagnostics
(number_density)
+[打开网页](,Profile)
+[打开网页](,激光profile)
+[打开网页](,Field)

单位::https://smileipic.github.io/Smilei/Understand/units.html
+[打开网页](,单位)

1DMain::https://smileipic.github.io/Smilei/Use/namelist.html#main-variables

粒子追踪::https://smileipic.github.io/Smilei/Use/namelist.html#trackparticles-diagnostics
粒子追踪_后处理::https://smileipic.github.io/Smilei/Use/post-processing.html#open-a-trackparticles-diagnostic
粒子均值::https://smileipic.github.io/Smilei/Use/namelist.html#particlebinning-diagnostics
+[打开网页](,粒子追踪_后处理)

projector::https://smileipic.github.io/Smilei/algorithms.html#current-deposition
+[打开网页](,projector)

偏振态::https://en.wikipedia.org/wiki/Elliptical_polarization
偏振态2::https://www.nrcan.gc.ca/maps-tools-and-publications/satellite-imagery-and-air-photos/satellite-imagery-products/educational-resources/tutorial-radar-polarimetry/the-polarization-ellipse/9575
+[打开网页](,偏振态2)


电子注入:...
Install:...
时间步长:...



粒子统计:...
+[新建阅读窗口](,粒子统计)


## end
#14, 52:
https://smileipic.github.io/Smilei/Use/profiles.html
## end
#17, 60:
https://smileipic.github.io/Smilei/Use/namelist.html#species
## end
#19, 119:
Nini, 打开动词(库)


提取数据:...
分析数据:...
+[新建阅读窗口](,提取数据)


Nini, Smilei是什么?
将"文档\S应用\Smilei.txt"记作Smilei
Nini, 打开Smilei(文件)


## end
#21, 628:
r"""
+[返回目录](,提取数据)
+[P函数](,提取数据)
输入:...


elif 类型=="Ex" or 类型=="Ey" or 类型=="Ez" or 类型=="Jx" \
    or 类型=="Bx" or 类型=="By" or 类型=="Bz" or 类型=="Rho":

"""

类型="Ey"
#类型="Ey"
#类型="Rho_eon"

import happi,math
import numpy as np
import scipy.io as sio

lambda_0=0.8e-6
c=3e8
omega_r=2*math.pi*c/lambda_0
fileName="文档\\模拟\\Smilei\\test_2d\\"

S=happi.Open(fileName,reference_angular_frequency_SI=omega_r)
if 类型=="e":
    diag=S.ParticleBinning(0)
elif 类型=="p":
    diag=S.ParticleBinning(1)
else:
    diag=S.Field(0,类型, units={"x":"um","y":"um"})

result=diag.getData()
a=np.array(result)
sio.savemat(fileName+"test.mat",{'result':a})
## end
#22, 2:
30
## end
#25, 356:
%{
+[返回目录](,分析数据)
+[M函数](,分析数据)
%}


physics_constant;
ne=2e25;
gamma=2;
lmbd=800e-9;


fileName='文档\\模拟\\Smilei\\test_2d\\test.mat';
result=load(fileName);
a=result.result;

for i=1:size(a,1)
field=reshape(a(i,:,:),size(a,2),size(a,3));
surf(field)
shading interp
view([0,90])
axis equal
axis([0,size(a,3),0,size(a,2)])
pause(0.1)
end

%{
+[M函数](,分析数据)
%}
## end
#26, 3:
121
## end
#31, 59:
https://smileipic.github.io/Smilei/Use/namelist.html#lasers
## end
#33, 206:


Smilei模拟预览:...
生成Smilei代码:...
生成Smilei代码_结构:...
将生成Smilei代码_结构的"生成Smilei代码"替换为"生成Smilei代码_结构"
+[复制结构](,生成Smilei代码_结构)

生成理论对比:...
将条目"生成Smilei代码"复制为条目"生成理论对比"

提取Smilei数据:...


+[新建阅读窗口](,生成Smilei代码_结构)


## end
#35, 17:
文档\S应用\Smilei.txt
## end
#37, 107:
+[打开]"文档\模拟\Smilei\code"

折射率场景:...
+[新建阅读窗口](,折射率场景)
+[复制结构](,折射率场景)

+[生成Smilei代码](等离子体折射率,)

结构场景:...



## end
#39, 1046:
"""
M代码:...
保存:...
+[新建阅读窗口](,M代码)

"""

+生成理论对比(,_场景)->+[del](,+生成理论对比)...
->的(生成理论对比,M代码)->的(生成理论对比,保存)...

->的(_场景,参考波长)->的(_场景,模拟空间)...
    ->的(模拟空间,长度#0)->的(模拟空间,宽度#0)->在(模拟空间,空间点#0)...
->的(_场景,窗口)...
    ->的(窗口,长度#1)->的(窗口,宽度#1)->在(模拟空间,空间点#1)...
    ->的(窗口,启动时间)->的(窗口,速度)...
->的(_场景,电子)...
    ->的(电子,gamma)->的(电子,beta_r)->的(电子,数密度)...
->的(_场景,光束)->的(_场景,焦点位置)...
    ->的(光束,长度#2)->在(光束,空间点#2)->的(光束,偏振态)->在(焦点位置,空间点#3)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"lm_0"(+[matlab],参考波长)...
->+[.]"L0"(+[matlab],长度#0)->+[.]"W0"(+[matlab],宽度#0)->+[.]"pt0"(+[matlab],空间点#0)...
->+[.]"L1"(+[matlab],长度#1)->+[.]"W1"(+[matlab],宽度#1)->+[.]"pt1"(+[matlab],空间点#1)...
->+[.]"t0"(+[matlab],启动时间)->+[.]"u0"(+[matlab],速度)...
->+[.](+[matlab],gamma)->+[.](+[matlab],beta_r)->+[.]"n_e"(+[matlab],数密度)...
->+[.]"L2"(+[matlab],长度#2)->+[.]"E00"(+[matlab],偏振态)...
->+[.]"pt2"(+[matlab],空间点#2)->+[.]"pt3"(+[matlab],空间点#3)...

->[]{
    []:->的(_场景,磁场)->磁场->的(磁场,场强)->+[.]"B0"(+[matlab],场强),
    ->+[.](+[matlab],+B0)->+B0"0,0,0"->+[del](,+B0)
}

## end
#46, 685:
+[修改天使]
地址::文档\模拟\Smilei\code\run.py
数据地址::文档\\模拟\\Smilei\\code
+[生成Smilei代码](折射率场景,地址)
+[Smilei模拟预览](,折射率场景)
+[生成理论对比](,折射率场景)
+[提取Smilei数据]"Jx"(数据地址,)
+[提取Smilei数据]"Jy"(数据地址,)
+[提取Smilei数据]"Jz"(数据地址,)
+[提取Smilei数据]"Ey"(数据地址,)
+[提取Smilei数据]"Ez"(数据地址,)
+[打开](,数据地址)

参考波长::800e-9
模拟空间::
窗口::
窗口的速度是"0.999"
窗口的启动时间是"250e-15"
+[设置结构](,窗口)

电子::
电子有gamma和beta_r
电子的数密度是"1e25"
电子的gamma是"1"
电子的beta_r是"0,1,0"
+[设置结构](,电子)

m_e*omega_r/e
磁场::
磁场有场强
磁场的场强是"1000,0,0"
磁场的场强是什么

光束::
焦点位置::

模拟空间是长方形"0.3e-3,200e-6"
窗口是长方形"80e-6,200e-6"
窗口距离模拟空间为(0,0)

光束是长方形"0.3e-3,30e-6"
焦点位置在(100e-6,0)
光束有偏振态
光束的偏振态是"1,1"
+[设置结构](,光束)

提取数据:...
分析数据:...
+[运行P代码](,提取数据)
+[新建阅读窗口](,分析数据)

+[显示PPT场景](,折射率场景)
## end
#48, 736:
r"""
+[返回目录](,提取数据)
+[运行P代码](,提取数据)
输入:...

记住"Python"
elif 类型=="Ex" or 类型=="Ey" or 类型=="Ez" or 类型=="Jx" \
    or 类型=="Bx" or 类型=="By" or 类型=="Bz" or 类型=="Rho":
Nini, 打开动词(库)

"""

类型="Ey"
#类型="Ey"
#类型="Rho_eon"
import sys
sys.path.append('C:\\Users\\cheng\\Desktop\\Laser\\TACC\\PIC\\Smilei\\')
import happi,math
import numpy as np
import scipy.io as sio

lambda_0=0.8e-6
c=3e8
omega_r=2*math.pi*c/lambda_0
fileName="文档\\模拟\\Smilei\\code\\"

S=happi.Open(fileName,reference_angular_frequency_SI=omega_r)
if 类型=="e":
    diag=S.ParticleBinning(0)
elif 类型=="p":
    diag=S.ParticleBinning(1)
else:
    diag=S.Field(0,类型, units={"x":"um","y":"um"})

result=diag.getData()
a=np.array(result)
sio.savemat(fileName+"test.mat",{'result':a})


## end
#50, 398:
%{
+[返回目录](,分析数据)
+[M函数](,分析数据)
对比相位:...
对比相位_1D:...
%}


physics_constant;
ne=2e25;
gamma=2;
lmbd=800e-9;


fileName='文档\\模拟\\Smilei\\code\\Ex.mat';
result=load(fileName);
a=result.result;

for i=1:size(a,1)
field=reshape(a(i,:,:),size(a,2),size(a,3));
surf(field)
shading interp
view([90,90])
%axis equal
axis([0,size(a,3),0,size(a,2)])
pause(0.1)
end

result


%{
clf
记住"Matlab"
+[M函数](,分析数据)
%}
## end
#59, 32:
-0.0001, 0.0001, 0.0001, -0.0001
## end
#61, 24:
0.0, 0.0, 0.0003, 0.0003
## end
#63, 8:
0.0, 0.0
## end
#65, 6:
0.0003
## end
#67, 6:
0.0002
## end
#69, 3:
长方形
## end
#71, 32:
-0.0001, 0.0001, 0.0001, -0.0001
## end
#73, 22:
0.0, 0.0, 8e-05, 8e-05
## end
#75, 8:
0.0, 0.0
## end
#77, 5:
8e-05
## end
#79, 6:
0.0002
## end
#81, 3:
长方形
## end
#83, 36:
-1.5e-05, 1.5e-05, 1.5e-05, -1.5e-05
## end
#85, 24:
0.0, 0.0, 0.0003, 0.0003
## end
#87, 8:
0.0, 0.0
## end
#89, 6:
0.0003
## end
#91, 5:
3e-05
## end
#93, 3:
长方形
## end
#95, 8:
100e-6,0
## end
#98, 24:
文档\模拟\Smilei\code\run.py
## end
#99, 3:
159
## end
#102, 883:
"""
M代码:...
+[新建阅读窗口](,M代码)
将"文档\设计文档\PIC模拟_MIR.ftxt"记作PIC模拟_MIR
Nini, 打开NameList解读器(文件)
Nini, 打开喷嘴设计(文件)
Nini, 打开PIC模拟_MIR(文件)

"""

+Smilei模拟预览(,_场景)->+[del](,+Smilei模拟预览)...
->的(Smilei模拟预览,M代码)...

->的(_场景,参考波长)->的(_场景,模拟空间)...
    ->的(模拟空间,长度#0)->的(模拟空间,宽度#0)->在(模拟空间,空间点#0)...
->的(_场景,窗口)...
    ->的(窗口,长度#1)->的(窗口,宽度#1)->在(模拟空间,空间点#1)...
    ->的(窗口,启动时间)->的(窗口,速度)...
->的(_场景,光束)->的(_场景,焦点位置)...
    ->的(光束,长度#2)->的(光束,宽度#2)->在(光束,空间点#2)->在(焦点位置,空间点#3)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"lm0"(+[matlab],参考波长)...
->+[.]"L0"(+[matlab],长度#0)->+[.]"W0"(+[matlab],宽度#0)->+[.]"pt0"(+[matlab],空间点#0)...
->+[.]"L1"(+[matlab],长度#1)->+[.]"W1"(+[matlab],宽度#1)...
->+[.]"t0"(+[matlab],启动时间)->+[.]"v0"(+[matlab],速度)...
->+[.]"L2"(+[matlab],长度#2)->+[.]"pt3"(+[matlab],空间点#3)...

->+[o]"W2"(+[matlab],宽度#2)...
->+[o]"pt1"(+[matlab],空间点#1)->+[o]"pt2"(+[matlab],空间点#2)


## end
#104, 5:
0.999
## end
#106, 7:
250e-15
## end
#109, 1050:
%{
+[M函数](,M代码)
参考公式(html):...
+[新建阅读窗口](,参考公式)
%}

physics_constant;
lm0=800e-9;
% lm0=0.1;

v=v0*c;
Nt=100;
w_0=L2;
pt1(1)=pt0(1);
pt1(2)=pt0(2);
pt2(1)=pt0(1);
pt2(2)=pt3(2);

DW=W0-W1;
Dt=DW/v;
t=linspace(0,t0+Dt,Nt);
x0=0;
x1=0;
W2=W0;

% Gaussian beam
z_R=w_0^2*pi/lm0;
z=linspace(pt0(1),pt0(1)+W0,100);
w=w_0.*sqrt(1+((z-pt3(1))./(z_R)).^(2));

clf
patch([z,fliplr(z)],pt3(2)+[w/2,-fliplr(w)/2],[1,0,0],'FaceAlpha',0.2)
rectangle('Position',[pt0(1),pt0(2)-L0/2,W0,L0],'FaceColor',[0,0,1,0.2]);
h2=rectangle('Position',[pt1(1),pt1(2)-L1/2,W1,L1],'FaceColor',[1,1,0,0.2]);
h3=rectangle('Position',[pt2(1)-W1/2,pt2(2)-L2/2,W1/2,L2],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);
axis equal
axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])

%for i=1
for i=1:length(t)
if t(i)>t0
x0=v*(t(i)-t0);
end
x1=c*t(i);

w_x1=w_0.*sqrt(1+((x1+pt2(1)-W1/2-pt3(1))./(z_R)).^(2));

h2.Position(1)=x0+pt1(1);
h3.Position(1)=x1+pt2(1)-W1/2;
h3.Position(2)=pt2(2)-w_x1/2;
h3.Position(4)=w_x1;
title(sprintf('T=%.2f fs',t(i)/1e-15))
pause(0.03)
end


%{
+[M函数](,M代码)
%}
## end
#110, 22:
文档\S应用\NameList解读器.txt
## end
#111, 16:
文档\设计文档\喷嘴设计.txt
## end
#112, 22:
文档\设计文档\PIC模拟_MIR.ftxt
## end
#114, 6:
800e-9
## end
#116, 232:
<!--
Nini, 导入网页画板的库
Nini, 导入公式分析器的库. Nini, 导入公式结构的库
-->

The shape of a Gaussian beam is,
%[1].
%[2].

<!--
+[H函数](,参考公式)
[2].::
将"w=w_0*\sqrt{1+(\frac{z}{z_R})^2}"记作为式(1)
将"z_R=\frac{w_0^2*\pi}{\lambda}"记作为式(2)

式(1)转换为"Matlab"
-->
## end
#119, 46:
w=w_0\ \sqrt{1+\left(\frac{z}{z_R}\right)^{2}}
## end
#120, 32:
w=w_0*\sqrt{1+(\frac{z}{z_R})^2}
## end
#124, 32:
z_R=\frac{w_0^{2}\ \pi}{\lambda}
## end
#125, 29:
z_R=\frac{w_0^2*\pi}{\lambda}
## end
#130, 45:
https://smileipic.github.io/Smilei/units.html
## end
#132, 1429:
%{
+[M函数](,M代码)
归一化单位::https://smileipic.github.io/Smilei/units.html
+[打开网页](,归一化单位)
%}

clf
physics_constant;
addpath('Matlab\funcs');
addpath('Matlab\plasma');

dx=0.125*lm_0/2/pi;
dt=0.99*dx/c;
ny=40;
npatch_x=128;
% gamma=1.5;
% beta_r=[0,1,0];
% B0=[1000,0,0];

E0=[0,E00];
E0=E0/norm(E0);
nx=W0/dx;
nx=round(nx/npatch_x)*npatch_x;
Lx=nx*dx;

%{
+[M函数](,M代码)
%}

dy=Ly/ny;
u0=v0*c;
nt=W0/u0/dt;
time_start=t0;

waist=L2;
focus_y=(pt3(2)-(pt0(2)-L0/2));
focus_x=(pt3(1)-pt0(1));

omega_0=c/lm_0*2*pi;
k_0=2*pi/lm_0;

[n_out,E1,E2]=plasma_refractive_index(lm_0,[1,0,0],n_e,gamma,beta_r,B0);
[A1,A2]=EigDecomposition(E0,E1,E2);

x=0:dx:Lx-dx;
E_y=A1*E1(2)*exp(1i*k_0*x*n_out(1))+A2*E2(2)*exp(1i*k_0*x*n_out(2));
E_z=A1*E1(3)*exp(1i*k_0*x*n_out(1))+A2*E2(3)*exp(1i*k_0*x*n_out(2));

t=(1:nt)*dt;
% for i=length(t)
for i=1:100:length(t)
Et_y=E_y*exp(-1i*omega_0*t(i));
Et_z=E_z*exp(-1i*omega_0*t(i));
Et_y(x>t(i)*c)=0;
Et_z(x>t(i)*c)=0;

if t(i)<t0
x_win=0;
else
x_win=u0*(t(i)-t0);
end

subplot(2,1,1)
plot(x/1e-6,Et_y,x/1e-6,Et_z);
rectangle('Position',[x_win/1e-6,-1,W1/1e-6,2])
axis([min(x)/1e-6,max(x)/1e-6,-2,2])
xlabel('x [um]')
ylabel('Field strength [a.u.]')
legend('E_y','E_x')

subplot(2,1,2)
plot(x/1e-6,Et_y,x/1e-6,Et_z);
rectangle('Position',[x_win/1e-6,-1,W1/1e-6,2])
axis([x_win/1e-6,(x_win+W1)/1e-6,-1,1])
xlabel('x [um]')
ylabel('Field strength [a.u.]')
legend('E_y','E_x')

pause(0.1)
end



%{
+[M函数](,M代码)
%}
## end
#134, 45:
https://smileipic.github.io/Smilei/units.html
## end
#137, 2217:
"""
保存:...

"""


################### 2D Faraday Rotation Simulation
dx = 0.125
dt = 0.12375
nx = 768.0
Lx = 96.0
# Lx = nx * dx
Ly = 250.00000000000003
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3030.3030303030305)*dt,

    cell_length  = [0.125, 6.250000000000001],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 4],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = 93.68514312500001,
    velocity_x = 0.999
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

Species(
    name = "electron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 16,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 5.742352943729407e-08, 

    mean_velocity = [0.0, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
    ],
)

Species(
    name = "positron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 16,
    c_part_max = 1.0,
    mass = 1.0,
    charge = 1.0,
    number_density = 5.742352943729407e-08, 

    mean_velocity = [0.0, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
    ],
)



LaserGaussian2D(
    box_side         = "xmin",
    a0               = 0.01,
    omega            = 1.,
    focus            = [125.00000000000001, 125.00000000000001],
    waist            = 37.5,
    incidence_angle  = 0.,
    polarization_phi = 0.78539,
    ellipticity      = 0.,
    time_envelope    = tconstant()
)


list_fields = ['Ex','Ey']

DiagFields(
    every = 100,
    fields = list_fields
)


DiagPerformances(
    every = 50,
)



## end
#141, 4:
1e25
## end
#143, 3:
215
## end
#145, 2000:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""


################### 2D MIR Simulation
dt = 0.12375
dx = 0.125
nx = 4992.0
Lx = 624.0
Ly = 1570.7963267948967

npatch_x = 128.0
# npatch_x = 1

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(19039.955476301777)*dt,

    cell_length  = [0.125, 39.269908169872416],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic","periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = 588.6411147840166,
    velocity_x = 0.999
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)


Species(
    name = "electron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0.005742352943729407, 

    mean_velocity = [0,0,0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["periodic", "periodic"],
    ],
)


LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 1.,
    focus            = [0.0, 392.69908169872406],
    waist            = 157.07963267948963,
    incidence_angle  = 0.0,
    polarization_phi = 0.7853981633974484,
    ellipticity      = 0.0,
    time_envelope    = tgaussian(start=0.0, duration=141.273867548164, fwhm=47.091289182721326, center=70.636933774082, order=2.0, )
)



# list_fields = ['Ey','Ez','Jx','Jy','Jz']
list_fields = ['Ey','Rho']

DiagFields(
    every = 100,
    fields = list_fields
)


DiagPerformances(
    every = 50,
)



## end
#146, 45:
https://smileipic.github.io/Smilei/units.html
## end
#148, 671:
%{
+[M函数](,M代码)
归一化单位::https://smileipic.github.io/Smilei/units.html
+[打开网页](,归一化单位)
%}

physics_constant;
dx=0.125;
dt=0.99*dx;
ny=40;
npatch_x=128;

omega_r=c/lm0*2*pi;
T_r=1/omega_r;
L_r=c/omega_r;

nx=W1/L_r/dx;
nx=round(nx/npatch_x)*npatch_x;
Lx=nx*dx;

Ly=L1/L_r;
dy=Ly/ny;

v0=u0;
nt=W0/L_r/dt;
time_start=t0*c/L_r;

waist=L2/L_r;
focus_y=(pt3(2)-(pt0(2)-L0/2))/L_r;
focus_x=(pt3(1)-pt0(1))/L_r;

N_r=epsilon0*m_e*omega_r^2/e^2;
N_e=n_e/N_r;

beta0=(sqrt(gamma.^(2)-1))./(gamma);
V_e=beta_r/norm(beta_r)*beta0;

Bx=B_field(1);
By=B_field(2);
Bz=B_field(3);

E_polar=E_polar0/norm(E_polar0);
p_theta=acos(E_polar(1))*sign_1(E_polar(2));


%{
L_r
L_r
+[M函数](,M代码)
%}
## end
#149, 2128:
"""
保存:...

"""


################### 2D Faraday Rotation Simulation
dx = 0.125
dt = 0.124
nx = 896
Lx = nx * dx
Ly = 120.
npatch_x = 128
laser_fwhm = 19.80

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(2*Lx/dt)*dt,

    cell_length  = [dx, 3.],
    grid_length = [ Lx, Ly],

    number_of_patches = [npatch_x, 4],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = Main.grid_length[0]*0.98,
    velocity_x = 0.9997
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

Species(
    name = "electron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 16,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0.000494, 

    mean_velocity = [0.0, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
    ],
)

Species(
    name = "positron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 16,
    c_part_max = 1.0,
    mass = 1.0,
    charge = 1.0,
    number_density = 0.000494, 

    mean_velocity = [0.0, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
    ],
)



LaserGaussian2D(
    box_side         = "xmin",
    a0               = 0.01,
    omega            = 1.,
    focus            = [0, Ly/2],
    waist            = 26.16,
    incidence_angle  = 0.,
    polarization_phi = 0.78539,
    ellipticity      = 0.,
    time_envelope    = tconstant()
)


list_fields = ['Ex','Ey']

DiagFields(
    every = 100,
    fields = list_fields
)


DiagPerformances(
    every = 50,
)



## end
#151, 2207:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

2DFR:...
MIR模拟:...
(2D法拉第旋转和相对论流体)

"""


################### 1D Faraday Rotation Simulation
dt = %dt
dx = %dx
nx = %nx
Lx = %Lx
npatch_x = %npatch_x

Main(
    geometry = "1Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(%nt)*dt,

    cell_length  = [%dx],
    grid_length = [Lx],

    number_of_patches = [npatch_x],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = %time_start,
    velocity_x = %v0
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)


Species(
    name = "electron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 16,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = %N_e, 

    mean_velocity = [%V_e],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
    ],
)



"""
Species(
    name = "positron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 16,
    c_part_max = 1.0,
    mass = 1.0,
    charge = 1.0,
    number_density = %N_e, 

    mean_velocity = [%V_e],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
    ],
)

"""



LaserPlanar1D(
    box_side         = "xmin",
    a0               = 0.0001,
    omega            = 1.,
    polarization_phi = -0.7854,
    ellipticity      = 0.,
    time_envelope    = tconstant()
)

B_r=1.3388e4
ExternalField(
    field="Bx",
    profile=%Bx/B_r
)

ExternalField(
    field="By",
    profile=%By/B_r
)

ExternalField(
    field="Bz",
    profile=%Bz/B_r
)

# list_fields = ['Ey','Ez','Jx','Jy','Jz']
list_fields = [%探测场]

DiagFields(
    every = 100,
    fields = list_fields
)


DiagPerformances(
    every = 50,
)



## end
#157, 2853:
"""
NS模板:...
M代码:...
M代码的"lm0"替换为"L_r"
保存:...
+[新建阅读窗口](,NS模板)
Nini, 打开Blender(文件)
Nini, 打开动词(库)
创建"文档\模拟\Smilei\code"
Nini, 打开NameList解读器(文件)

"""

+生成Smilei代码(_场景,_地址)->+[del](,+生成Smilei代码)...
->的(生成Smilei代码,NS模板)->的(生成Smilei代码,M代码)...
->的(生成Smilei代码,保存)...

->的(_场景,参考波长)->的(_场景,模拟空间)...
    ->的(模拟空间,长度#0)->的(模拟空间,宽度#0)->在(模拟空间,空间点#0)...
->的(_场景,窗口)...
    ->的(窗口,长度#1)->的(窗口,宽度#1)->在(模拟空间,空间点#1)...
    ->的(窗口,启动时间)->的(窗口,速度)...
->的(_场景,电子)...
    ->的(电子,gamma)->的(电子,beta_r)->的(电子,数密度)...
->的(_场景,光束)->的(_场景,焦点位置)...
    ->的(光束,长度#2)->在(光束,空间点#2)->在(焦点位置,空间点#3)...
->的(_场景,磁场)->的(磁场,场强)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"lm0"(+[matlab],参考波长)...
->+[.]"L0"(+[matlab],长度#0)->+[.]"W0"(+[matlab],宽度#0)->+[.]"pt0"(+[matlab],空间点#0)...
->+[.]"L1"(+[matlab],长度#1)->+[.]"W1"(+[matlab],宽度#1)->+[.]"pt1"(+[matlab],空间点#1)...
->+[.]"t0"(+[matlab],启动时间)->+[.]"u0"(+[matlab],速度)...
->+[.](+[matlab],gamma)->+[.](+[matlab],beta_r)->+[.]"n_e"(+[matlab],数密度)...
->+[.]"L2"(+[matlab],长度#2)...
->+[.]"pt2"(+[matlab],空间点#2)->+[.]"pt3"(+[matlab],空间点#3)...
->+[.]"B_field"(+[matlab],场强)...

->[]{
    []:->的(光束,偏振态)->偏振态->+[.]"E_polar0"(+[matlab],偏振态),
    ->+[临时文本]"1,1"->+[.]"E_polar0"(+[matlab],+[临时文本])
}...

->+[模板文本](,保存)->[]{
    []:->的(_场景,NS模板#1)->NS模板#1->+[code](+[模板文本],NS模板#1),
    ->+[code](+[模板文本],NS模板)
}...
->+[.](+[模板文本],+dx)->+[o](+[matlab],+dx)->+[del](,+dx)...
->+[.](+[模板文本],+nx)->+[o](+[matlab],+nx)->+[del](,+nx)...
->+[.](+[模板文本],+Lx)->+[o](+[matlab],+Lx)->+[del](,+Lx)...
->+[.](+[模板文本],+npatch_x)->+[o](+[matlab],+npatch_x)->+[del](,+npatch_x)...
->+[.](+[模板文本],+dy)->+[o](+[matlab],+dy)->+[del](,+dy)...
->+[.](+[模板文本],+ny)->+[o](+[matlab],+ny)->+[del](,+ny)...
->+[.](+[模板文本],+Ly)->+[o](+[matlab],+Ly)->+[del](,+Ly)...

->+[.](+[模板文本],+dt)->+[o](+[matlab],+dt)->+[del](,+dt)...
->+[.](+[模板文本],+nt)->+[o](+[matlab],+nt)->+[del](,+nt)...
->+[.](+[模板文本],+time_start)->+[o](+[matlab],+time_start)->+[del](,+time_start)...
->+[.](+[模板文本],+v0)->+[o](+[matlab],+v0)->+[del](,+v0)...

->+[.](+[模板文本],+N_e)->+[o](+[matlab],+N_e)->+[del](,+N_e)...
->+[.](+[模板文本],+V_e)->+[o](+[matlab],+V_e)->+[del](,+V_e)...

->+[.](+[模板文本],+Bx)->+[o](+[matlab],+Bx)->+[del](,+Bx)...
->+[.](+[模板文本],+By)->+[o](+[matlab],+By)->+[del](,+By)...
->+[.](+[模板文本],+Bz)->+[o](+[matlab],+Bz)->+[del](,+Bz)...

->+[.](+[模板文本],+waist)->+[o](+[matlab],+waist)->+[del](,+waist)...
->+[.](+[模板文本],+focus_x)->+[o](+[matlab],+focus_x)->+[del](,+focus_x)...
->+[.](+[模板文本],+focus_y)->+[o](+[matlab],+focus_y)->+[del](,+focus_y)...

->+[.](+[模板文本],+p_theta)->+[o](+[matlab],+p_theta)->+[del](,+p_theta)...

->[]{
    []:->的(_场景,探测场)->探测场->+[.](+[模板文本],探测场),
    ->+[.](+[模板文本],+探测场)->+探测场"'Ey','Ez'"->+[del](,+探测场)
}...

->[]{
    []:->的(_场景,保存代码)->保存代码->+[修改内容](保存,保存代码),
    ->[]
}:
    ->_地址->+[保存文本](_地址,保存),
    ->+[保存文本]"文档\模拟\Smilei\code\run.py"(,保存)




## end
#159, 3:
1,1
## end
#161, 1:
1
## end
#163, 5:
0,1,0
## end
#166, 1694:
"""
单位:...
P代码:...
P模板:...
+[设置结构](,P代码)

P代码2:...

M代码:...
M模板:...
+[新建阅读窗口](,P模板)
+[新建阅读窗口](,M代码)

"""

+提取Smilei数据(_输入,_输出)->+[del](,+提取Smilei数据)...
->的(提取Smilei数据,P模板)->的(提取Smilei数据,P代码)->的(提取Smilei数据,P代码2)...
->的(提取Smilei数据,M模板)->的(提取Smilei数据,M代码)...
->的(提取Smilei数据,单位)...

->+[matlab](Matlab,)->+[code](+[matlab],单位)...
->+[模板文本](P模板,P代码)->+[模板文本]#1(M模板,M代码)...
->+[.](+[模板文本],+类型)->+[.](+[模板文本]#1,+类型)...
    ->+[del](,+类型0)->+[del](,+类型)...
    ->+[o]"type_data1"([python],+类型)->+[.]"type_data"([python],+提取Smilei数据)...
    ->[python]"
type_data1=type_data
type_data0=type_data.split('_')[0]
if type_data0=='e':
    ans=type_data
else:
    ans=type_data0
state=True
"(Python,+类型0)...

->+[.]"输入地址"(+[模板文本],_输入)...
->[]{
    []:->_输出->+[.]"输出地址"(+[模板文本],_输出)->+[.]"输出地址"(+[模板文本]#1,_输出),
    ->+[.]"输出地址"(+[模板文本],_输入)->+[.]"输出地址"(+[模板文本]#1,_输入)
}...

->+单位"1"->[]{
    []:->[==]"Bx"(,+类型)->+[o]"B_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),
    ->[==]"By"(,+类型)->+[o]"B_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),
    ->[==]"Bz"(,+类型)->+[o]"B_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),

    ->[==]"Jx"(,+类型0)->+[o]"J_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),
    ->[==]"Jy"(,+类型0)->+[o]"J_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),
    ->[==]"Jz"(,+类型0)->+[o]"J_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),

    ->[==]"Ex"(,+类型)->+[o]"E_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),
    ->[==]"Ey"(,+类型)->+[o]"E_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),
    ->[==]"Ez"(,+类型)->+[o]"E_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),

    ->[==]"Rho"(,+类型0)->+[o]"N_r"(+[matlab],+单位)->+[.](+[模板文本],+单位),

    ->+[.](+[模板文本],+单位)
}->+[del](,+单位)...

->[]{
    []:->[==]"e_track"(,+类型)->+[运行P代码](,P代码2),
    ->+[运行P代码](,P代码)
}...

->+[M函数](,M代码)



## end
#168, 906:
"""
+[P函数](,提取数据)
+[运行P代码](,提取数据)

粒子追踪::https://smileipic.github.io/Smilei/post-processing.html#open-a-trackparticles-diagnostic
+[打开网页](,粒子追踪)

"""

类型="e_track"

import sys
sys.path.append('C:\\Users\\cheng\\Desktop\\Laser\\TACC\\PIC\\Smilei\\')
import happi,math
import numpy as np
import scipy.io as sio

lambda_0=0.8e-6
c=3e8
omega_r=2*math.pi*c/lambda_0
fileName="文档\\模拟\\Smilei\\code"

S=happi.Open(fileName,reference_angular_frequency_SI=omega_r)
if 类型=="e":
    diag=S.ParticleBinning(0)
elif 类型=="p":
    diag=S.ParticleBinning(1)
elif 类型=="e_track":
    diag=S.TrackParticles(species='electron2',axes=["x","py","pz"])
elif 类型=="p_track":
    diag=S.TrackParticles(species='positron',axes=["x","py","pz"])
else:
    diag=S.Field(0,类型, units={"x":"um","y":"um"})

result=diag.getData()
a=np.array(result)*1

saveName="文档\\模拟\\Smilei\\code\\{0}.mat".format(类型)
sio.savemat(saveName,{'result':a})


## end
#170, 874:
"""
+[P函数](,提取数据)
+[运行P代码](,提取数据)

粒子追踪::https://smileipic.github.io/Smilei/post-processing.html#open-a-trackparticles-diagnostic
+[打开网页](,粒子追踪)

"""

类型="%类型"

import sys
sys.path.append('C:\\Users\\cheng\\Desktop\\Laser\\TACC\\PIC\\Smilei\\')
import happi,math
import numpy as np
import scipy.io as sio

lambda_0=0.8e-6
c=3e8
omega_r=2*math.pi*c/lambda_0
fileName="%输入地址"

S=happi.Open(fileName,reference_angular_frequency_SI=omega_r)
if 类型=="e":
    diag=S.ParticleBinning(0)
elif 类型=="p":
    diag=S.ParticleBinning(1)
elif 类型=="e_track":
    diag=S.TrackParticles(species='electron2',axes=["x","py","pz"])
elif 类型=="p_track":
    diag=S.TrackParticles(species='positron',axes=["x","py","pz"])
else:
    diag=S.Field(0,类型, units={"x":"um","y":"um"})

result=diag.getData()
a=np.array(result)*%单位

saveName="%输出地址\\{0}.mat".format(类型)
sio.savemat(saveName,{'result':a})


## end
#172, 17:
文档\模拟\Smilei\code
## end
#174, 20:
文档\\模拟\\Smilei\\code
## end
#176, 479:
%{
+[返回目录](,分析数据)
+[M函数](,分析数据)

粒子轨迹:...
%}


physics_constant;
ne=2e25;
gamma=2;
lmbd=800e-9;


fileName='%输出地址\\%类型.mat';
result=load(fileName);
a=result.result;

demension=length(size(a));

clf
for i=1:size(a,1)

if demension==3
    field=reshape(a(i,:,:),size(a,2),size(a,3));
    surf(field)
    shading interp
    view([90,90])
    axis([0,size(a,3),0,size(a,2)])
else
    field=a(i,:);
    plot(field);
end

title('%类型')
pause(0.1)
end

%{
clf
记住"Matlab"
+[M函数](,分析数据)
%}
## end
#178, 502:
%{
+[返回目录](,分析数据)
+[M函数](,分析数据)

粒子轨迹:...
%}


physics_constant;
ne=2e25;
gamma=2;
lmbd=800e-9;


fileName='文档\\模拟\\Smilei\\code\\e_track.mat';
result=load(fileName);
a=result.result;

demension=length(size(a));

clf
for i=1:size(a,1)

if demension==3
    field=reshape(a(i,:,:),size(a,2),size(a,3));
    surf(field)
    shading interp
    view([90,90])
    axis([0,size(a,3),0,size(a,2)])
else
    field=a(i,:);
    plot(field);
end

title('e_track')
pause(0.1)
end

%{
clf
记住"Matlab"
+[M函数](,分析数据)
%}
## end
#181, 71:
https://smileipic.github.io/Smilei/Use/namelist.html#fields-diagnostics
## end
#183, 67:
https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
## end
#185, 67:
https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
## end
#188, 539:
%{
pi/4
+[M函数](,对比相位)
%}


physics_constant;
ne=2e25;
gamma=2;
lmbd=800e-9;
dx=0.125*lmbd/2/pi;


fileName='文档\\模拟\\Smilei\\code\\Ey.mat';
result=load(fileName);
a1=result.result;
fileName='文档\\模拟\\Smilei\\code\\Ez.mat';
result=load(fileName);
a2=result.result;


for i=1:size(a1,1)
field1=reshape(a1(i,:,:),size(a1,2),size(a1,3));
field2=reshape(a2(i,:,:),size(a2,2),size(a2,3));

I1=mean(field1');
I2=mean(field2');
x=(1:length(I1))*dx;

plot(x/1e-6,I1,x/1e-6,I2)
axis([0,max(x)/1e-6,-2.5e-5,2.5e-5])
pause(0.1)
end


%{
+[M函数](,对比相位)
%}
## end
#195, 56:
https://smileipic.github.io/Smilei/Understand/units.html
## end
#198, 67:
https://smileipic.github.io/Smilei/Use/namelist.html#main-variables
## end
#200, 2202:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""


################### 2D Faraday Rotation Simulation
dx = %dx
dt = %dt
nx = %nx
Lx = %Lx
# Lx = nx * dx
Ly = %Ly
npatch_x = %npatch_x

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(%nt)*dt,

    cell_length  = [%dx, %dy],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 4],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = %time_start,
    velocity_x = %v0
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

Species(
    name = "electron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 16,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = %N_e, 

    mean_velocity = [%V_e],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
    ],
)

Species(
    name = "positron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 16,
    c_part_max = 1.0,
    mass = 1.0,
    charge = 1.0,
    number_density = %N_e, 

    mean_velocity = [%V_e],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
    ],
)



LaserGaussian2D(
    box_side         = "xmin",
    a0               = 0.0001,
    omega            = 1.,
    focus            = [%focus_x, %focus_y],
    waist            = %waist,
    incidence_angle  = 0.,
    polarization_phi = -0.7854,
    ellipticity      = 0.,
    time_envelope    = tconstant()
)


list_fields = ['Ex','Ey','Ez','Rho']

DiagFields(
    every = 100,
    fields = list_fields
)


DiagPerformances(
    every = 50,
)



## end
#202, 499:
%{
+[M函数](,对比相位_1D)
%}


physics_constant;
ne=2e25;
gamma=2;
lmbd=800e-9;
dx=0.125*lmbd/2/pi;


fileName='文档\\模拟\\Smilei\\code\\Ey.mat';
result=load(fileName);
a1=result.result;
fileName='文档\\模拟\\Smilei\\code\\Ez.mat';
result=load(fileName);
a2=result.result;

E_max=max([max(max(a1)),max(max(a2))]);

for i=1:size(a1,1)
I1=a1(i,:);
I2=a2(i,:);

x=(1:length(I1))*dx;

plot(x/1e-6,I1,x/1e-6,I2,'--')
axis([0,max(x)/1e-6,-1.5*E_max,1.5*E_max])
legend('Ey','Ez')
pause(0.1)
end


%{
+[M函数](,对比相位_1D)
%}
## end
#206, 8:
1000,0,0
## end
#208, 3:
227
## end
#211, 20:
文档\模拟\1D_PIC_FR.ftxt
## end
#213, 20:
文档\模拟\1D_PIC_FR.ftxt
## end
#215, 18:
文档\模拟\等离子体折射率.ftxt
## end
#217, 18:
文档\模拟\等离子体折射率.ftxt
## end
#218, 3:
224
## end
#222, 3:
230
## end
#226, 79:
https://smileipic.github.io/Smilei/Use/namelist.html#trackparticles-diagnostics
## end
#227, 3:
251
## end
#230, 92:
https://smileipic.github.io/Smilei/Use/post-processing.html#open-a-trackparticles-diagnostic
## end
#232, 88:
https://smileipic.github.io/Smilei/post-processing.html#open-a-trackparticles-diagnostic
## end
#235, 527:
%{
+[M函数](,粒子轨迹)
%}


physics_constant;
ne=2e25;
gamma=2;
lmbd=800e-9;

fileName='文档\\模拟\\Smilei\\code\\e_track.mat';
result=load(fileName);
a_e=result.result;
fileName='文档\\模拟\\Smilei\\code\\p_track.mat';
result=load(fileName);
a_p=result.result;

x_e=a_e{1}.x;
py_e=a_e{1}.py;
pz_e=a_e{1}.pz;

x_p=a_p{1}.x;
py_p=a_p{1}.py;
pz_p=a_p{1}.pz;

for i=1:size(x_p,1)
subplot(1,2,1)
plot(x_e(i,:),py_e(i,:),x_p(i,:),py_p(i,:),'--')
subplot(1,2,2)
plot(x_e(i,:),pz_e(i,:),x_p(i,:),pz_p(i,:),'--')
pause(0.01)
end

%{
+[M函数](,粒子轨迹)
%}
## end
#238, 69:
https://smileipic.github.io/Smilei/algorithms.html#current-deposition
## end
#241, 80:
https://smileipic.github.io/Smilei/Use/namelist.html#particlebinning-diagnostics
## end
#243, 3:
251
## end
#245, 3:
250
## end
#247, 3:
249
## end
#253, 714:
+[修改天使]
NS模板:...
保存代码:...
地址::文档\模拟\Smilei\code\run.py
数据地址::文档\\模拟\\Smilei\\code
+[生成Smilei代码](2D模拟,地址)
+[Smilei模拟预览](,2D模拟)
+[生成理论对比](,2D模拟)
+[提取Smilei数据]"Jy"(数据地址,)
+[提取Smilei数据]"Jz"(数据地址,)
+[提取Smilei数据]"Ey"(数据地址,)
+[提取Smilei数据]"Rho"(数据地址,)
+[打开](,数据地址)
figure

探测场::'Ey','Rho'

参考波长::1800e-9
模拟空间::
窗口::
窗口有速度和启动时间
窗口的速度是"0.999"
窗口的启动时间是"250e-15"
+[设置结构](,窗口)

电子::
电子有数密度, gamma和beta_r
电子的数密度是"1e25"
电子的gamma是"2.5"
电子的beta_r是"0,0,1"
+[设置结构](,电子)

m_e*omega_r/e
磁场::
磁场有场强
磁场的场强是"0,0,0"
磁场的场强是什么

光束::
焦点位置::
光束有偏振态
光束的偏振态是"1,1"

模拟空间在(0,0)
模拟空间是长方形"0.3e-3,200e-6"
窗口是长方形"80e-6,200e-6"
窗口距离模拟空间为(0,0)

光束是长方形"0.3e-3,30e-6"
光束距离窗口为(0,0)
焦点位置在(100e-6,0)
+[设置结构](,光束)

分析数据:...
+[新建阅读窗口](,分析数据)

+[显示PPT场景](,2D模拟)
## end
#254, 3:
343
## end
#257, 1906:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""


################### 2D MIR Simulation
dt = %dt
dx = %dx
nx = %nx
Lx = %Lx
Ly = %Ly

npatch_x = %npatch_x
# npatch_x = 1

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(%nt)*dt,

    cell_length  = [%dx, %dy],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic","periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = %time_start,
    velocity_x = %v0
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)


Species(
    name = "electron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = %N_e, 

    mean_velocity = [0,0,0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["periodic", "periodic"],
    ],
)


LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 1.,
    focus            = [0.0, 392.69908169872406],
    waist            = 157.07963267948963,
    incidence_angle  = 0.0,
    polarization_phi = %p_theta,
    ellipticity      = 0.0,
    time_envelope    = tgaussian(start=0.0, duration=141.273867548164, fwhm=47.091289182721326, center=70.636933774082, order=2.0, )
)



# list_fields = ['Ey','Ez','Jx','Jy','Jz']
list_fields = [%探测场]

DiagFields(
    every = 100,
    fields = list_fields
)


DiagPerformances(
    every = 50,
)



## end
#259, 10:
'Ey','Rho'
## end
#261, 7:
1800e-9
## end
#266, 5:
0.999
## end
#268, 7:
250e-15
## end
#272, 4:
1e25
## end
#274, 3:
2.5
## end
#276, 5:
0,0,1
## end
#280, 5:
0,0,0
## end
#286, 3:
1,1
## end
#288, 8:
0.0, 0.0
## end
#290, 32:
-0.0001, 0.0001, 0.0001, -0.0001
## end
#292, 24:
0.0, 0.0, 0.0003, 0.0003
## end
#294, 6:
0.0003
## end
#296, 6:
0.0002
## end
#298, 3:
长方形
## end
#300, 32:
-0.0001, 0.0001, 0.0001, -0.0001
## end
#302, 22:
0.0, 0.0, 8e-05, 8e-05
## end
#304, 8:
0.0, 0.0
## end
#306, 5:
8e-05
## end
#308, 6:
0.0002
## end
#310, 3:
长方形
## end
#312, 36:
-1.5e-05, 1.5e-05, 1.5e-05, -1.5e-05
## end
#314, 24:
0.0, 0.0, 0.0003, 0.0003
## end
#316, 8:
0.0, 0.0
## end
#318, 6:
0.0003
## end
#320, 5:
3e-05
## end
#322, 3:
长方形
## end
#324, 8:
100e-6,0
## end
#329, 4190:
################### 2D Smilei

import math
import numpy as np
from scipy.constants import c, e, m_e, m_p
#Import basic units
e0=8.854187817e-12
me=m_e
qe=e

lambda_laser=800*10**(-9)
w_laser=2*math.pi*c/lambda_laser
Lr=c/w_laser
Tr=1/w_laser
Nrho=e0*me*w_laser**2/(qe**2)
Br=me*w_laser/qe

#calculate the Lamor radius
rL=np.sqrt(3)*m_e*c/(e*1000)

#Fbpic code
#plamsa profile
n_e = 4.e27           # The density in the labframe (electrons.meters^-3)
w_plasma=np.sqrt((n_e)*qe**2/(e0*me));
gfactor=np.sqrt(1-(w_plasma**2/w_laser**2));
lambda_plasma=(2*np.pi*c*gfactor/w_plasma);
kp=2*np.pi/lambda_plasma

lambda_wake=lambda_plasma

#Longitudinal Profile
ne_plasma=n_e/Nrho
zmax =200e-6
zmin =0
Nz = 64*int((zmax-zmin)/(4*lambda_laser))

# The density profile
ramp_start = 1.e-5/Lr
ramp_length = 1.e-5/Lr
plateau=1.e-4/Lr
plateau_end=ramp_start+ramp_length+plateau
ramp_end =plateau_end+ramp_length
sim_end=ramp_end+1.e-6/Lr
dt_fbpic = (zmax-zmin)/Nz/c

#laser transverse profile
w0=20e-6
w0_conv=w0/Lr
rmax=5*w0
Ny=20

#External field
B_ext=1000/Br

#Covert to Smilei Variables
dx = (zmax-zmin)/Nz/Lr
dy = rmax/Ny/Lr
#dtrans = 2*rmax/Nr/Lr
dt = 0.6*dx
nx = Nz
Lx = Nz * dx
Ly = Ny * dy
npatch_x = 64

time_start_moving_window = 0.
simulation_time=int(Lx)
particles_per_cell=4

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = 0.23751960586616386,
    simulation_time = 28254.773509632792,

    cell_length  = [0.3958660097769395, 39.26990816987241],
    grid_length = [ 1570.796326794896, 1570.796326794896],

    number_of_patches = [npatch_x, 1],

    clrw = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic","periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


MovingWindow(
    time_start = 1177.282229568033,
    velocity_x = 0.0
)

LoadBalancing(
    initial_balance = False,
        every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)


Species(
    name = "electron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = particles_per_cell,
    c_part_max = 1.0,
    ponderomotive_dynamics = False, # = this species interacts with laser envelope
    mass = 1.0,
    charge = -1,
    number_density = trapezoidal(0.011481321769403384, xvacuum=785.398163397448, xplateau=23561.944901923438, xslope1=785.398163397448, xslope2=785.398163397448, yvacuum=0.0, yplateau=157079.63267948962, yslope1=0.0, yslope2=0.0), 

    mean_velocity = [0,0,0],
    temperature = [0.0],
    pusher = "boris", # pusher to interact with envelope
    #pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["periodic", "periodic"],
    ],
)




LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 2*np.pi/14.137166941154067,
    focus            = [0.0, 392.69908169872406],
    waist            = 157.07963267948963,
    incidence_angle  = 0.0,
    polarization_phi = 0.78539,
    ellipticity      = 0.0,
    time_envelope    = tgaussian(start=0.0, duration=141.273867548164, fwhm=47.091289182721326, center=70.636933774082, order=2.0, )
)


#ExternalField(
#    field = "Bx",
#    profile = constant(B_ext, xvacuum=0),
#)


list_fields = ['Ex','Ey','Rho']

DiagFields(
    every = 100,
    fields = list_fields
)



"""
DiagProbe(
    every = 50,
    origin = [0., Main.grid_length[1]/2.],
    corners = [
        [Main.grid_length[0], Main.grid_length[1]/2.],
    ],
    number = [nx],
    fields = ['Ex','Ey','Ez','Bx','By','Bz','Rho']
)


DiagScalar(
    every = 50,
    vars=[
        'Uelm','Ukin_electron',
    ]
)

DiagPerformances(
    every = 50,
)


DiagParticleBinning(
    name = "e", 
    deposited_quantity = "weight_charge",
    every = 50,
    species = ["electron"],
    axes = [
        ["moving_x", 0, Lx, 300],
        ["py", -3, 4., 100]
    ]
)


DiagParticleBinning(
    name = "p", 
    deposited_quantity = "weight_charge",
    every = 50,
    species = ["positron"],
    axes = [
        ["moving_x", 0, Lx, 300],
        ["py", -3, 4., 100]
    ]
)

"""
## end
#331, 24:
文档\模拟\Smilei\code\run.py
## end
#333, 20:
文档\\模拟\\Smilei\\code
## end
#335, 2000:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""


################### 2D MIR Simulation
dt = 0.12375
dx = 0.125
nx = 4992.0
Lx = 624.0
Ly = 1570.7963267948967

npatch_x = 128.0
# npatch_x = 1

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(19039.955476301777)*dt,

    cell_length  = [0.125, 39.269908169872416],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic","periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = 588.6411147840166,
    velocity_x = 0.999
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)


Species(
    name = "electron",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0.005742352943729407, 

    mean_velocity = [0,0,0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["periodic", "periodic"],
    ],
)


LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 1.,
    focus            = [0.0, 392.69908169872406],
    waist            = 157.07963267948963,
    incidence_angle  = 0.0,
    polarization_phi = 0.7853981633974484,
    ellipticity      = 0.0,
    time_envelope    = tgaussian(start=0.0, duration=141.273867548164, fwhm=47.091289182721326, center=70.636933774082, order=2.0, )
)



# list_fields = ['Ey','Ez','Jx','Jy','Jz']
list_fields = ['Ey','Rho']

DiagFields(
    every = 100,
    fields = list_fields
)


DiagPerformances(
    every = 50,
)



## end
#336, 3:
344
## end
#344, 382:


有区域1, 区域2和区域3
区域1, 区域2和区域3都是长方形(2,3)

区域1在(0,0)
区域2距离区域1为(1,1)
区域3距离区域1为(4,-2)

区域2朝向"0"
区域3朝向"-45"
区域3是长方形(0.3,10)
区域1是长方形(8,3)

电子::
+[设置结构](,电子)
在区域1中, 电子的密度是"1e19"
在区域2中, 电子的密度是"2e19"
在区域3中, 电子的密度是"3e19"

电子=>的(电子,密度)->在(密度,)=>+[显示](,在)

密度:...
+[设置结构](,密度)
+[新建阅读窗口](,密度)
+[删除结构](,密度)->+[召唤星辰]"分布"(电子,密度)
+[删除结构](,密度)->+[召唤星辰](区域1,密度)

M代码:...
+[M函数](,M代码)

+[显示PPT场景](,分布测试)
## end
#346, 3:
多边形
## end
#350, 3:
多边形
## end
#352, 20:
-1.5, 1.5, 1.5, -1.5
## end
#354, 18:
0.0, 0.0, 8.0, 8.0
## end
#356, 3:
0,0
## end
#358, 3:
8.0
## end
#360, 3:
3.0
## end
#362, 3:
多边形
## end
#363, 3:
长方形
## end
#365, 20:
-1.5, 1.5, 1.5, -1.5
## end
#367, 18:
0.0, 0.0, 2.0, 2.0
## end
#369, 8:
1.0, 1.0
## end
#371, 3:
2.0
## end
#373, 3:
3.0
## end
#375, 3:
多边形
## end
#376, 3:
长方形
## end
#378, 20:
-5.0, 5.0, 5.0, -5.0
## end
#380, 18:
0.0, 0.0, 0.3, 0.3
## end
#382, 9:
4.0, -2.0
## end
#384, 3:
0.3
## end
#386, 4:
10.0
## end
#388, 3:
多边形
## end
#389, 3:
长方形
## end
#391, 3:
-45
## end
#397, 4:
1e19
## end
#401, 4:
2e19
## end
#405, 4:
3e19
## end
#407, 3:
621
## end
#410, 115:
类型::Matlab

召唤规则:...
降临规则:...
+[新建阅读窗口](,降临规则)

的(降临规则,产生代码)->+[做](,密度)->+[code](+[做],产生代码)

公式结构:...
输出代码:...





## end
#411, 1:
0
## end
#413, 1:
0
## end
#415, 1:
2
## end
#417, 661:
长度是L. 宽度是W. 角度是\theta. 空间点是(x_0,y_0)
召唤规则:...
降临规则:...
+[新建阅读窗口](,召唤规则)

+[修改标题]"方程公式"(,区域)
方程公式:...
将"\eqs{(x-x_A)*x_1+(y-y_A)*y_1>=0;
-(x-x_A)*x_2-(y-y_A)*y_2>=0;
-(x-x_B)*x_1-(y-y_B)*y_1>=0;
(x-x_B)*x_2+(y-y_B)*y_2>=0}"记作为方程公式

将"x_1=cos(\theta)"代入到方程公式
将"y_1=sin(\theta)"代入到方程公式
将"x_2=-sin(\theta)"代入到方程公式
将"y_2=cos(\theta)"代入到方程公式
方程公式转换为"表达式"

更新方程公式
显示方程公式


参数公式:...
将"\eqs{x_A=x_0-L/2*sin(\theta);
y_A=y_0+L/2*cos(\theta);
x_B=x_0+L/2*sin(\theta)+W*cos(\theta);
y_B=y_0-L/2*cos(\theta)+W*sin(\theta)}"记作为参数公式

更新参数公式
显示参数公式

的(方程公式,表达式)->+[生成区域](表达式,表达式)->+[更新公式起点](,表达式)
的(方程公式,表达式)->+[设置结构](,表达式)
的(方程公式,表达式)->+[删除结构](,表达式)
的(参数公式,表达式)->+[删除结构](,表达式)
## end
#420, 661:
长度是L. 宽度是W. 角度是\theta. 空间点是(x_0,y_0)
召唤规则:...
降临规则:...
+[新建阅读窗口](,召唤规则)

+[修改标题]"方程公式"(,区域)
方程公式:...
将"\eqs{(x-x_A)*x_1+(y-y_A)*y_1>=0;
-(x-x_A)*x_2-(y-y_A)*y_2>=0;
-(x-x_B)*x_1-(y-y_B)*y_1>=0;
(x-x_B)*x_2+(y-y_B)*y_2>=0}"记作为方程公式

将"x_1=cos(\theta)"代入到方程公式
将"y_1=sin(\theta)"代入到方程公式
将"x_2=-sin(\theta)"代入到方程公式
将"y_2=cos(\theta)"代入到方程公式
方程公式转换为"表达式"

更新方程公式
显示方程公式


参数公式:...
将"\eqs{x_A=x_0-L/2*sin(\theta);
y_A=y_0+L/2*cos(\theta);
x_B=x_0+L/2*sin(\theta)+W*cos(\theta);
y_B=y_0-L/2*cos(\theta)+W*sin(\theta)}"记作为参数公式

更新参数公式
显示参数公式

的(方程公式,表达式)->+[生成区域](表达式,表达式)->+[更新公式起点](,表达式)
的(方程公式,表达式)->+[设置结构](,表达式)
的(方程公式,表达式)->+[删除结构](,表达式)
的(参数公式,表达式)->+[删除结构](,表达式)
## end
#423, 661:
长度是L. 宽度是W. 角度是\theta. 空间点是(x_0,y_0)
召唤规则:...
降临规则:...
+[新建阅读窗口](,召唤规则)

+[修改标题]"方程公式"(,区域)
方程公式:...
将"\eqs{(x-x_A)*x_1+(y-y_A)*y_1>=0;
-(x-x_A)*x_2-(y-y_A)*y_2>=0;
-(x-x_B)*x_1-(y-y_B)*y_1>=0;
(x-x_B)*x_2+(y-y_B)*y_2>=0}"记作为方程公式

将"x_1=cos(\theta)"代入到方程公式
将"y_1=sin(\theta)"代入到方程公式
将"x_2=-sin(\theta)"代入到方程公式
将"y_2=cos(\theta)"代入到方程公式
方程公式转换为"表达式"

更新方程公式
显示方程公式


参数公式:...
将"\eqs{x_A=x_0-L/2*sin(\theta);
y_A=y_0+L/2*cos(\theta);
x_B=x_0+L/2*sin(\theta)+W*cos(\theta);
y_B=y_0-L/2*cos(\theta)+W*sin(\theta)}"记作为参数公式

更新参数公式
显示参数公式

的(方程公式,表达式)->+[生成区域](表达式,表达式)->+[更新公式起点](,表达式)
的(方程公式,表达式)->+[设置结构](,表达式)
的(方程公式,表达式)->+[删除结构](,表达式)
的(参数公式,表达式)->+[删除结构](,表达式)
## end
#427, 1397:
%{
+[M函数](,M代码)
%}

xs=linspace(-2,10,100);
ys=linspace(-4,4,100);

[x,y]=meshgrid(xs,ys);

x_A2=0.0-3.0./2.*sin(0.0);
y_A2=0.0+3.0./2.*cos(0.0);
x_B2=0.0+3.0./2.*sin(0.0)+8.0.*cos(0.0);
y_B2=0.0-3.0./2.*cos(0.0)+8.0.*sin(0.0);
x_A1=1.0-3.0./2.*sin(0.0);
y_A1=1.0+3.0./2.*cos(0.0);
x_B1=1.0+3.0./2.*sin(0.0)+2.0.*cos(0.0);
y_B1=1.0-3.0./2.*cos(0.0)+2.0.*sin(0.0);
x_A0=4.0-10.0./2.*sin(-0.7853981633974483);
y_A0=-2.0+10.0./2.*cos(-0.7853981633974483);
x_B0=4.0+10.0./2.*sin(-0.7853981633974483)+0.3.*cos(-0.7853981633974483);
y_B0=-2.0-10.0./2.*cos(-0.7853981633974483)+0.3.*sin(-0.7853981633974483);

n=0.*ones(size(x));
n((x-x_A2).*cos(0.0)+(y-y_A2).*sin(0.0)>=0 & (x-x_A2).*sin(0.0)-(y-y_A2).*cos(0.0)>=0 & -(x-x_B2).*cos(0.0)-(y-y_B2).*sin(0.0)>=0 & -(x-x_B2).*sin(0.0)+(y-y_B2).*cos(0.0)>=0)=1e19;
n((x-x_A1).*cos(0.0)+(y-y_A1).*sin(0.0)>=0 & (x-x_A1).*sin(0.0)-(y-y_A1).*cos(0.0)>=0 & -(x-x_B1).*cos(0.0)-(y-y_B1).*sin(0.0)>=0 & -(x-x_B1).*sin(0.0)+(y-y_B1).*cos(0.0)>=0)=2e19;
n((x-x_A0).*cos(-0.7853981633974483)+(y-y_A0).*sin(-0.7853981633974483)>=0 & (x-x_A0).*sin(-0.7853981633974483)-(y-y_A0).*cos(-0.7853981633974483)>=0 & -(x-x_B0).*cos(-0.7853981633974483)-(y-y_B0).*sin(-0.7853981633974483)>=0 & -(x-x_B0).*sin(-0.7853981633974483)+(y-y_B0).*cos(-0.7853981633974483)>=0)=3e19;

% surf(x,y,n/3e19)
contour(x,y,n/3e19)
axis equal
% view([0,-90])
% shading interp

%{
+[M函数](,M代码)
%}
## end
#428, 6:
Matlab
## end
#431, 1549:
"""
结构描述:...
库:...
输出代码:...
+[新建阅读窗口](,库)

"""

+生成Smilei代码_结构(_场景,_地址)->+[del](,+生成Smilei代码_结构)...
->的(生成Smilei代码_结构,结构描述)->的(生成Smilei代码_结构,库)...
->的(生成Smilei代码_结构,输出代码)...
->的(库,函数)...
->的(库,粒子)->的(库,运动粒子)->的(库,光束)->的(库,外场)->的(库,探测)...
->的(库,空间)->的(库,全局参数)->的(库,粒子追踪)...

->+[code]([想],结构描述)->[想](_场景,)->操作([想],)...
->[]{
    []=>的(操作,函数转换)->函数转换(_表达式,_函数)->_表达式->_函数(,)...
    =>+[做](_表达式,_函数)->+[code](+[做],函数)
}...

->+[做](_场景,)->+[code](+[做],全局参数)...
->+[临时文本]#整体->[]{
    +[做](_场景,+[临时文本]#整体)->+[code](+[做],空间)
}...
->+[临时文本]#粒子->[]{
    []=>的(操作,描述粒子)->描述粒子(,_粒子)...
    =>+[做](_粒子,+[临时文本]#粒子)->+[code](+[做],粒子)
}...
->+[临时文本]#运动粒子->[]{
    []=>的(操作,描述运动粒子)->描述运动粒子(,_粒子)...
    =>+[做](_粒子,+[临时文本]#粒子)->+[code](+[做],运动粒子)
}...
->+[临时文本]#光束->[]{
    []=>的(操作,描述光束)->描述光束(,_光束)...
    =>+[做](_光束,+[临时文本]#光束)->+[code](+[做],光束)
}...
->+[临时文本]#外场->[]{
    []=>的(操作,描述外场)->描述外场(,_外场)...
    =>+[做](_外场,+[临时文本]#外场)->+[code](+[做],外场)
}...
->+[临时文本]#探测->[]{
    []=>的(操作,描述探测)->描述探测(,_探测)...
    =>+[做](_探测,+[临时文本]#探测)->+[code](+[做],探测)
}...
->+[临时文本]#粒子追踪->[]{
    []=>的(操作,描述粒子追踪)->描述粒子追踪(,_粒子追踪)...
    =>+[做](_粒子追踪,+[临时文本]#粒子追踪)->+[code](+[做],粒子追踪)
}...

->+[模板文本](+[临时文本]#整体,输出代码)...
->+[.]"[运动粒子]"(+[模板文本],+[临时文本]#运动粒子)...
->+[.]"[粒子]"(+[模板文本],+[临时文本]#粒子)->+[.]"[光束]"(+[模板文本],+[临时文本]#光束)...
->+[.]"[外场]"(+[模板文本],+[临时文本]#外场)->+[.]"[探测]"(+[模板文本],+[临时文本]#探测)...
->+[.]"[粒子追踪]"(+[模板文本],+[临时文本]#粒子追踪)...

->[]{
    []:->的(_场景,保存代码)->保存代码->+[修改内容](输出代码,保存代码),
    ->[]
}:
    ->_地址->+[保存文本](_地址,输出代码),
    ->+[保存文本]"文档\模拟\Smilei\code\run.py"(,输出代码)


## end
#433, 863:
"""


"""

+结构描述(_场景,)...

->+操作(+结构描述,)...
->[]{
    []=>的(_场景,_电子)->_电子->的(_电子,数密度)=>[]:
        ->的(_电子,gamma)->+描述运动粒子(,_电子)->+的(+操作,+描述运动粒子)...
            ->+[.]([python],gamma)->[python]"state=(not (gamma[0]==1.0))"(Python,),
        ->+描述粒子(,_电子)->+的(+操作,+描述粒子)
}...
->[]{
    []=>的(_场景,_电子)->_电子->的(_电子,数密度)->数密度(,_函数)->的(_函数,表达式)...
    =>+函数转换(表达式,_函数)->+的(+操作,+函数转换)
}...
->[]{
    []=>的(_场景,_电子)->_电子->的(_电子,延时函数)->延时函数(,_函数)->的(_函数,表达式)...
    =>+函数转换(表达式,_函数)->+的(+操作,+函数转换)
}...

->[]{
    []=>的(_场景,_光束)->_光束->的(_光束,焦点位置)=>+描述光束(,_光束)->+的(+操作,+描述光束)
}...
->[]{
    []=>的(_场景,_外场)->_外场->的(_外场,场强)=>+描述外场(,_外场)->+的(+操作,+描述外场)
}...
->[]{
    []=>的(_场景,_探测)->_探测=>[]:
        ->的(_探测,探测类型)->+描述探测(,_探测)->+的(+操作,+描述探测),
        ->[]
}...
->[]{
    []=>的(_场景,_粒子追踪)->_粒子追踪=>[]:
        ->的(_粒子追踪,名称)->+描述粒子追踪(,_粒子追踪)->+的(+操作,+描述粒子追踪),
        ->[]
}



## end
#435, 159:


全局参数:...
空间:...
粒子:...
运动粒子:...
将条目"粒子"复制为条目"运动粒子"
+[新建阅读窗口](,空间)

光束:...
外场:...
探测:...
粒子追踪:...
将条目"探测"复制为条目"粒子追踪"
+[新建阅读窗口](,粒子)

函数:...

将探测的"光束"替换为"探测"


## end
#437, 2304:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""
import numpy as np

dt = 0.12375
nx = 6272.0
Lx = 784.0
Ly = 628.3185307179587
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(37441.294179620694)*dt,

    cell_length  = [0.125, 15.707963267948966],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = 706.3693377408199,
    velocity_x = 0.999
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

Species(
    name = "electron1",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0.005740660892844831, 

    mean_velocity = [0.0, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)



LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 0.4444444444444444,
    focus            = [314.1592653589793, 314.1592653589793],
    waist            = 78.53981633974483,
    polarization_phi = 0.0,
    ellipticity      = 0.0,
    time_envelope    = tgaussian(start=0.0, duration=28.2547735096328*4., fwhm=28.2547735096328, center=28.2547735096328*2., order=2.0, )
)

LaserGaussian2D(
    box_side         = "xmin",
    a0               = 0.01,
    omega            = 0.9163802978235966,
    focus            = [314.1592653589793, 314.1592653589793],
    waist            = 157.07963267948966,
    polarization_phi = 0.7853981633974484,
    ellipticity      = 0.0,
    time_envelope    = tconstant(),
)





DiagFields(
    fields = ['Ey','Bz','Jy'],
    every = 400,
)






DiagPerformances(
    every = 50,
)



## end
#439, 254:
"""
M代码:...
+[新建阅读窗口](,M代码)

"""

+全局参数(_场景,)->+[del](,+全局参数)...
->的(全局参数,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->[]{
    []:->的(_场景,参考波长)->参考波长->+[.]"lm_r"(+[matlab],参考波长),
    ->+[.]"lm_r"(+[matlab],+波长)->+波长"800e-9"->+[del](,+波长)
}

## end
#441, 375:
%{
+[M函数](,M代码)
归一化单位::https://smileipic.github.io/Smilei/Understand/units.html
+[打开网页](,归一化单位)

单位定义(html):...
+[新建阅读窗口](,单位定义)
lm_r=800e-9
B_r
%}

physics_constant;
dx=0.125;
dt=0.99*dx;
ny=40;
npatch_x=128;

omega_r=c/lm_r*2*pi;
T_r=1/omega_r;
L_r=c/omega_r;
E_r=m_e.*c.*omega_r./e;
B_r=m_e.*omega_r./e;
N_r=epsilon_0.*m_e.*omega_r.^(2)./e.^(2);
J_r=c.*e.*N_r;

n_NS_0=0;

## end
#443, 56:
https://smileipic.github.io/Smilei/Understand/units.html
## end
#446, 130:
<!--
+[H函数](,单位定义)
-->

%[1].
%[2].
%[3].
%[4].
%[5].
%[6].



<!--
[6].:
将"J_r=c*e*N_r"记作为式(6)
式(6)转换为"Matlab"

+[H函数](,单位定义)
-->
## end
#449, 18:
T_{r}=1/\omega_{r}
## end
#451, 18:
L_{r}=c/\omega_{r}
## end
#453, 28:
E_{r}=m_{e}\ c\ \omega_{r}/e
## end
#455, 25:
B_{r}=m_{e}\ \omega_{r}/e
## end
#457, 47:
N_{r}=\epsilon_{0}\ m_{e}\ \omega_{r}^{2}/e^{2}
## end
#459, 17:
J_{r}=c\ e\ N_{r}
## end
#460, 14:
T_r=1/\omega_r
## end
#463, 14:
L_r=c/\omega_r
## end
#466, 20:
E_r=m_e*c*\omega_r/e
## end
#469, 18:
B_r=m_e*\omega_r/e
## end
#472, 33:
N_r=\epsilon_0*m_e*\omega_r^2/e^2
## end
#475, 11:
J_r=c*e*N_r
## end
#479, 1455:
"""
M代码:...
NS模板:...
NS模板2:...
(运动窗口的左右边界不能是周期性边界条件. 周期性边界条件似乎不能有EM输入)
(见, Smilei生成器的测试注入)
+[新建阅读窗口](,M代码)

"""

+空间(_场景,_输出)->+[del](,+空间)...
->的(空间,M代码)->的(空间,NS模板)->的(空间,NS模板2)...

->的(_场景,模拟空间)...
    ->的(模拟空间,长度#0)->的(模拟空间,宽度#0)->在(模拟空间,空间点#0)...
->的(_场景,窗口)...
    ->的(窗口,长度#1)->的(窗口,宽度#1)->在(窗口,空间点#1)...
    ->的(窗口,启动时间)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"L0"(+[matlab],长度#0)->+[.]"W0"(+[matlab],宽度#0)->+[.]"pt0"(+[matlab],空间点#0)...
->+[.]"L1"(+[matlab],长度#1)->+[.]"W1"(+[matlab],宽度#1)->+[.]"pt1"(+[matlab],空间点#1)...
->+[.]"t0"(+[matlab],启动时间)...

->+[模板文本](,_输出)...
->+[.](+[模板文本],+dx)->+[o](+[matlab],+dx)->+[del](,+dx)...
->+[.](+[模板文本],+nx)->+[o](+[matlab],+nx)->+[del](,+nx)...
->+[.](+[模板文本],+Lx)->+[o](+[matlab],+Lx)->+[del](,+Lx)...
->+[.](+[模板文本],+npatch_x)->+[o](+[matlab],+npatch_x)->+[del](,+npatch_x)...
->+[.](+[模板文本],+dy)->+[o](+[matlab],+dy)->+[del](,+dy)...
->+[.](+[模板文本],+ny)->+[o](+[matlab],+ny)->+[del](,+ny)...
->+[.](+[模板文本],+Ly)->+[o](+[matlab],+Ly)->+[del](,+Ly)...

->+[.](+[模板文本],+dt)->+[o](+[matlab],+dt)->+[del](,+dt)...
->+[.](+[模板文本],+nt)->+[o](+[matlab],+nt)->+[del](,+nt)...
->+[.](+[模板文本],+time_start)->+[o](+[matlab],+time_start)->+[del](,+time_start)...

->[]{
    []:->的(窗口,速度)->速度->+[.]"u0"(+[matlab],速度)...
        ->+[code](+[模板文本],NS模板)...
        ->+[.](+[模板文本],+v0)->+[o](+[matlab],+v0)->+[del](,+v0),
    ->+[code](+[模板文本],NS模板2)->+[.]"u0"(+[matlab],+[临时文本]#v)->+[临时文本]#v"0"
}



## end
#481, 1605:
"""
M代码:...
NS模板:...
NS模板2:...
+[新建阅读窗口](,M代码)

"""

+光束(_光束,_输出)->+[del](,+光束)...
->的(光束,M代码)->的(光束,NS模板)->的(光束,NS模板2)...

->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#3)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"pt3"(+[matlab],空间点#3)...
->[]{
    []:->的(_光束,腰宽)->腰宽->+[.]"w_0"(+[matlab],腰宽),
    ->+[.]"w_0"(+[matlab],+[临时文本])->+[临时文本]"20e-6"
}...
->[]{
    []:->的(_光束,展宽)->展宽->+[.]"Dtau"(+[matlab],展宽),
    ->+[.]"Dtau"(+[matlab],+[临时文本])->+[临时文本]"20e-15"
}...
->[]{
    []:->的(_光束,偏振态)->偏振态->+[.]"E_polar0"(+[matlab],偏振态),
    ->+[.]"E_polar0"(+[matlab],+[临时文本])->+[临时文本]"0,1"
}...
->[]{
    []:->的(_光束,a0)->a0->+[.]"A0"(+[matlab],a0),
    ->+[.]"A0"(+[matlab],+[临时文本])->+[临时文本]"1"
}...
->[]{
    []:->的(_光束,波长)->波长->+[.]"lm0"(+[matlab],波长),
    ->+[.]"lm0"(+[matlab],+[临时文本])->+[临时文本]"800e-9"
}...

->+[模板文本](,+[增加内容])->+[增加内容](,_输出)...
->+[.](+[模板文本],+waist)->+[o](+[matlab],+waist)->+[del](,+waist)...
->+[.](+[模板文本],+dtau)->+[o](+[matlab],+dtau)->+[del](,+dtau)...
->+[.](+[模板文本],+focus_x)->+[o](+[matlab],+focus_x)->+[del](,+focus_x)...
->+[.](+[模板文本],+focus_y)->+[o](+[matlab],+focus_y)->+[del](,+focus_y)...
->+[.](+[模板文本],+a0)->+[o](+[matlab],+a0)->+[del](,+a0)...
->+[.](+[模板文本],+omega)->+[o](+[matlab],+omega)->+[del](,+omega)...

->+[.](+[模板文本],+p_theta)->+[o](+[matlab],+p_theta)->+[del](,+p_theta)...
->+[.](+[模板文本],+E_phase)->+[o](+[matlab],+E_phase)->+[del](,+E_phase)...

->[]{
    []:->的(_光束,展宽)->展宽->[==]"inf"(,展宽)->+[code](+[模板文本],NS模板2),
    ->+[code](+[模板文本],NS模板)
}...

->[]{
    []:->的(_光束,输入边)->输入边->+[.](+[模板文本],输入边),
    ->+[.]"输入边"(+[模板文本],+[临时文本])->+[临时文本]"xmin"
}


## end
#485, 483:
"""
M代码:...
NS模板:...
+[新建阅读窗口](,M代码)

"""

+粒子追踪(_粒子追踪,_输出)->+[del](,+粒子追踪)...
->的(粒子追踪,NS模板)...

->+[模板文本](NS模板,+[增加内容])->+[增加内容](,_输出)...
->[]{
    []:->的(_粒子追踪,追踪类型)->追踪类型->+[.](+[模板文本],追踪类型),
    ->+[.]"追踪类型"(+[模板文本],+[临时文本])->+[临时文本]"'x','y','px','py','w'"
}...
->[]{
    []:->的(_粒子追踪,名称)->名称->+[.](+[模板文本],名称),
    ->+[.]"名称"(+[模板文本],+[临时文本])->+[临时文本]"electron2"
}...
->[]{
    []:->的(_粒子追踪,追踪间隔)->追踪间隔->+[.](+[模板文本],追踪间隔),
    ->+[.]"追踪间隔"(+[模板文本],+[临时文本])->+[临时文本]"1000"
}



## end
#487, 331:
%{
+[M函数](,M代码)
u0
%}

physics_constant;
dx=0.125;
dt=0.99*dx;
ny=40;
npatch_x=128;


nx=W1/L_r/dx;
nx=round(nx/npatch_x)*npatch_x;
Lx=nx*dx;

Ly=L1/L_r;
dy=Ly/ny;

v0=u0;
time_start=t0*c/L_r;
Dt=(W0-W1)/L_r;
%nt1=W0/L_r/dt;
%nt2=time_start/dt;
%nt=max(nt1,nt2);
nt=(time_start+Dt)/dt;


%{
记住"Matlab"
time_start
nt
+[M函数](,M代码)
%}
## end
#489, 970:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""
import numpy as np

dt = %dt
nx = %nx
Lx = %Lx
Ly = %Ly
npatch_x = %npatch_x

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(%nt)*dt,

    cell_length  = [%dx, %dy],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = %time_start,
    velocity_x = %v0
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

%[粒子]

%[光束]

%[外场]

%[探测]

%[粒子追踪]


DiagPerformances(
    every = 50,
)



## end
#491, 544:
%{
+[M函数](,M代码)
偏振态::https://smileipic.github.io/Smilei/Use/namelist.html#lasers
偏振态2::https://en.wikipedia.org/wiki/Elliptical_polarization
%}

waist=w_0/L_r;
dtau=Dtau/T_r;
focus_x=(pt3(1)-pt0(1))/L_r;
focus_y=(pt3(2)-pt0(2))/L_r+Ly/2;

E_polar=abs(E_polar0)/norm(E_polar0);
p_theta=acos(E_polar(1))*sign_1(E_polar(2));

E_Dr=E_polar0(1)/E_polar0(2);
E_Dr=E_Dr/abs(E_Dr);
E_phase=acos(real(E_Dr))*sign_1(imag(E_Dr))/pi*2;
if isnan(E_phase)
    E_phase=0;
end

omega=lm_r/lm0;

if isempty(A0)
    a0=1.;
else
    a0=A0;
end

%{
+[M函数](,M代码)
%}
## end
#495, 137:
DiagTrackParticles(
    species = "%名称",
    every = %追踪间隔,
#    flush_every = 100,
#    filter = my_filter,
   attributes = [%追踪类型]
)



## end
#497, 1472:
地址::文档\模拟\Smilei\code\run.py
数据地址::文档\\模拟\\Smilei\\code
+[提取Smilei数据]"Rho"(数据地址,)
+[提取Smilei数据]"Jy"(数据地址,)
+[提取Smilei数据]"Ey"(数据地址,)
+[打开](,数据地址)

+[生成Smilei代码_结构](模拟结构,)
+[记录星辰]"Smilei模板"(,模拟结构)
保存代码:...
+[新建阅读窗口](,保存代码)
+[保存文本](地址,保存代码)


探测场有什么
探测场有探测类型和探测间隔
探测场的探测类型是"'Rho','Jy','Ey'"
探测场的探测间隔是"400"

有参考波长, 模拟空间, 窗口, 电子, 光束和探测场
参考波长是"800e-9"

模拟空间是长方形(0.3e-3,100e-6)
模拟空间是长方形(80e-6,100e-6)
模拟空间在(0,0)

窗口是长方形(80e-6,100e-6)
窗口在模拟空间的位置
窗口有速度和启动时间
窗口的速度是"0.999"
窗口的启动时间是"250e-15"
窗口的启动时间是"750e-15"
窗口的启动时间是什么

电子有数密度, gamma和beta_r
电子的数密度是"1e25"
电子的gamma是"1"
电子的beta_r是"0,0,1"
电子的gamma是什么

有电子2
电子2有数密度, gamma和beta_r
电子2的数密度是"1e25"
电子2的gamma是"2.5"
电子2的beta_r是"0,1,0"
电子2距离B为(0,-50e-6)


光束有什么
光束是长方形(300e-6,20e-6)
光束有偏振态, 焦点位置, 腰宽和展宽
光束的腰宽是"40e-6"
光束的展宽是"30e-15"
光束在模拟空间的位置
光束的焦点位置是A
光束的偏振态是(1,1i)
光束的长度是什么
A::
A距离光束为(100e-6,0)

有光束2
光束2是长方形(300e-6,20e-6)
光束2有偏振态, 焦点位置, 腰宽和展宽
光束2的焦点位置是B
光束2的腰宽是"10e-6"
光束2的展宽是"15e-15"
光束2的偏振态是(1,1)
B::
B距离A为(-50e-6,-25e-6)



预览动画
+[记录星辰]"Smilei预览动画"(,预览动画)
+[新建阅读窗口](,预览动画)
光束的腰宽是"2e-6"
Nini, 打开天书(文件)

电子2距离电子2为(0,10e-6)
电子2的gamma是"2.5"
电子2的beta_r是"0,1,0"
电子2有什么
电子2的延时函数是什么
电子2有延时函数

测试结构:...
+[删除结构](,测试结构)->+[召唤星辰](模拟结构,测试结构)
的(测试结构,输出代码)->+[M函数](,输出代码)
+[设置结构](,测试结构)

+[新建阅读窗口](,测试结构)
+[设置结构](,测试结构)
+[删除结构](,测试结构)->+[记录星辰]"Smilei预览动画"(,预览动画)->+[召唤星辰](模拟结构,测试结构)

分布描述:...
分布函数:...
电子的数密度是分布函数
电子的数密度是"0"
+[新建阅读窗口](,分布描述)

分布描述2:...
分布函数2:...
f函数2:...
电子2的数密度是分布函数2
电子2的延时函数是f函数2
+[新建阅读窗口](,分布函数2)


分析数据:...

+[显示PPT场景]"2"(,模拟结构)
## end
#498, 6:
800e-9
## end
#500, 3:
多边形
## end
#502, 3:
多边形
## end
#506, 3:
多边形
## end
#510, 28:
-5e-05, 5e-05, 5e-05, -5e-05
## end
#512, 22:
0.0, 0.0, 8e-05, 8e-05
## end
#514, 8:
0.0, 0.0
## end
#516, 5:
8e-05
## end
#518, 6:
0.0001
## end
#520, 3:
多边形
## end
#521, 3:
长方形
## end
#523, 28:
-5e-05, 5e-05, 5e-05, -5e-05
## end
#525, 22:
0.0, 0.0, 8e-05, 8e-05
## end
#527, 8:
0.0, 0.0
## end
#529, 5:
8e-05
## end
#531, 6:
0.0001
## end
#533, 3:
多边形
## end
#534, 3:
长方形
## end
#536, 1:
0
## end
#538, 1:
1
## end
#540, 5:
0,0,1
## end
#542, 5:
0.999
## end
#544, 7:
250e-15
## end
#546, 28:
-1e-05, 1e-05, 1e-05, -1e-05
## end
#548, 24:
0.0, 0.0, 0.0003, 0.0003
## end
#550, 8:
0.0, 0.0
## end
#552, 6:
0.0003
## end
#554, 5:
2e-05
## end
#556, 3:
多边形
## end
#557, 3:
长方形
## end
#559, 4:
1,1i
## end
#565, 11:
0.0001, 0.0
## end
#568, 357:
LaserGaussian2D(
    box_side         = "%输入边",
    a0               = %a0,
    omega            = %omega,
    focus            = [%focus_x, %focus_y],
    waist            = %waist,
    polarization_phi = %p_theta,
    ellipticity      = %E_phase,
    time_envelope    = tgaussian(start=0.0, duration=%dtau*4., fwhm=%dtau, center=%dtau*2., order=2.0, )
)


## end
#569, 1743:
模拟结构#0"+[生成Smilei代码_结构](模拟结构,)
+[记录星辰]\"Smilei模板\"(,模拟结构)

有参考波长, 模拟空间, 窗口, 电子, 光束和探测场
参考波长是\"1800e-9\"

模拟空间是长方形(0.3e-3,200e-6)
模拟空间再(0,0)

窗口是长方形(80e-6,200e-6)
窗口在模拟空间的位置
窗口有速度和启动时间
窗口的速度是\"0.999\"
窗口的启动时间是\"250e-15\"

电子有数密度, gamma和beta_r
电子的数密度是\"1e25\"
电子的gamma是\"1\"
电子的beta_r是\"0,0,1\"

光束是长方形(300e-6,20e-6)
光束在模拟空间的位置
光束有偏振态和焦点位置
光束的焦点位置是A
光束的偏振态是(1,0)

A::
A距离光束为(100e-6,0)

+[显示PPT场景](,模拟结构)"(,)
的#1""(模拟结构#0,参考波长#2)
参考波长#2"1800e-9"(,)
的#3""(模拟结构#0,模拟空间#4)
模拟空间#4"多边形"(,)
在#5""(模拟空间#4,空间点#6)
空间点#6"0.0, 0.0"(,)
的#7""(模拟空间#4,类型#8)
类型#8"长方形"(,)
的#9""(模拟空间#4,长度#10)
长度#10"0.0002"(,)
的#11""(模拟空间#4,宽度#12)
宽度#12"0.0003"(,)
的#13""(模拟空间#4,x#14)
x#14"0.0, 0.0, 0.0003, 0.0003"(,)
的#15""(模拟空间#4,y#16)
y#16"-0.0001, 0.0001, 0.0001, -0.0001"(,)
的#17""(模拟结构#0,窗口#18)
窗口#18"多边形"(,)
在#19""(窗口#18,空间点#20)
空间点#20"0.0, 0.0"(,)
的#21""(窗口#18,类型#22)
类型#22"长方形"(,)
的#23""(窗口#18,长度#24)
长度#24"0.0002"(,)
的#25""(窗口#18,宽度#26)
宽度#26"8e-05"(,)
的#27""(窗口#18,x#28)
x#28"0.0, 0.0, 8e-05, 8e-05"(,)
的#29""(窗口#18,y#30)
y#30"-0.0001, 0.0001, 0.0001, -0.0001"(,)
的#31""(窗口#18,速度#32)
速度#32"0.999"(,)
的#33""(窗口#18,启动时间#34)
启动时间#34"250e-15"(,)
的#35""(模拟结构#0,电子#36)
电子#36""(,)
的#37""(电子#36,数密度#38)
数密度#38"1e25"(,)
的#39""(电子#36,gamma#40)
gamma#40"1"(,)
的#41""(电子#36,beta_r#42)
beta_r#42"0,0,1"(,)
的#43""(模拟结构#0,光束#44)
光束#44"多边形"(,)
在#45""(光束#44,空间点#46)
空间点#46"0.0, 0.0"(,)
的#47""(光束#44,类型#48)
类型#48"长方形"(,)
的#49""(光束#44,长度#50)
长度#50"2e-05"(,)
的#51""(光束#44,宽度#52)
宽度#52"0.0003"(,)
的#53""(光束#44,x#54)
x#54"0.0, 0.0, 0.0003, 0.0003"(,)
的#55""(光束#44,y#56)
y#56"-1e-05, 1e-05, 1e-05, -1e-05"(,)
的#57""(光束#44,偏振态#58)
偏振态#58"1,0"(,)
的#59""(光束#44,焦点位置#60)
焦点位置#60""(,A#64)
的#61""(模拟结构#0,探测场#62)
探测场#62""(,)
的#63""(模拟结构#0,A#64)
A#64""(,)
在#65""(A#64,空间点#66)
空间点#66"0.0001, 0.0"(,)

## end
#570, 71:
+[设置结构](,预览动画)
召唤规则:...
降临规则:...
+[新建阅读窗口](,降临规则)


代码结构:...
输出代码:...


## end
#572, 736:
"""
Nini, 打开天书(文件)
记住"Python"
state=(not (1==1.0))
print(state)

"""

+召唤规则(_媒介,召唤星辰)->.(+召唤规则,操作)...
->召唤星辰(,_凭依)...

->[==]"生成Smilei预览动画"(,召唤星辰)...
->的(_媒介,模拟空间)->的(_媒介,窗口)...

->+生成代码(_凭依,_凭依)->+的(操作,+生成代码)...
->+设置框架(_媒介,_凭依)->+的(操作,+设置框架)...
->[]{
    []=>的(_媒介,_物体)->_物体=>[]:
        ->的(_物体,gamma)->[python]"state=(not (ans[0]==1.0))"(Python,gamma)...
            ->在(_物体,空间点)->+设置运动电子(_物体,_凭依)->+的(操作,+设置运动电子),
        ->的(_物体,数密度)->+设置电子(_物体,_凭依)->+的(操作,+设置电子),
        ->的(_物体,输入边)->[==]"ymin"(,输入边)...
            ->+设置光束2(_物体,_凭依)->+的(操作,+设置光束2),
        ->的(_物体,焦点位置)->+设置光束(_物体,_凭依)->+的(操作,+设置光束),
        ->[]
}...
->[]{
    []=>的(_媒介,_电子)->_电子->的(_电子,数密度)->数密度(,_函数)->的(_函数,表达式)...
    =>+函数转换(表达式,_函数)->+的(操作,+函数转换)
}


## end
#574, 151:
样本代码:...
+[新建阅读窗口](,样本代码)

函数转换:...

设置框架:...
设置电子:...
设置运动电子:...
设置光束:...
设置光束2:...
生成代码:...
+[新建阅读窗口](,设置光束)
将条目"设置光束"复制为条目"设置光束2"
设置电子的"光束"替换为"电子"


## end
#576, 171:
Nini, 打开编程语言parser(文件)

样本代码:...
代码框架:...
生成代码:...
+[新建阅读窗口](,样本代码)

代码内容:...
+[设置结构](,代码内容)
代码内容有什么
代码内容的框架代码有什么

将样本代码解析为代码框架
按照"Python", 将代码框架转换为生成代码
+[显示星图](,代码框架)




## end
#578, 157:
起点#0""(,块#1)
块#1"初始化
"(,)
块#2""(,)
然后#3""(块#1,块#2)
块#4"运动
"(,)
for#5"条件"(块#2,块#4)
变量#6"i"(for#5,)
eof#7""(,)
然后#8""(块#4,eof#7)
eof#9""(,)
然后#10""(块#2,eof#9)

## end
#580, 28:

初始化
for i in 条件:
    运动




## end
#581, 3:
842
## end
#585, 23:
初始化
for i in 条件:
    运动
## end
#587, 1037:
%{
+[M函数](,样本代码)
记住"Matlab"
保存:...
%}

physics_constant;
lm0=800e-9;
% lm0=0.1;

v=v0*c;
Nt=100;
w_0=L2/2;
pt1(1)=pt0(1);
pt1(2)=pt0(2);
pt2(1)=pt0(1);
pt2(2)=pt3(2);

DW=W0-W1;
Dt=DW/v;
t=linspace(0,t0+Dt,Nt);
x0=0;
x1=0;
W2=W0;

% Gaussian beam
z_R=w_0^2*pi/lm0;
z=linspace(pt0(1),pt0(1)+W0,100);
w=w_0.*sqrt(1+((z-pt3(1))./(z_R)).^(2));

clf
patch([z,fliplr(z)],pt3(2)+[w/2,-fliplr(w)/2],[1,0,0],'FaceAlpha',0.2)
rectangle('Position',[pt0(1),pt0(2)-L0/2,W0,L0],'FaceColor',[0,0,1,0.2]);
h2=rectangle('Position',[pt1(1),pt1(2)-L1/2,W1,L1],'FaceColor',[1,1,0,0.2]);
h3=rectangle('Position',[pt2(1)-W1/2,pt2(2)-L2/2,W1/2,L2],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);
axis equal
axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])



for i=1:length(t)

if t(i)>t0
    x0=v*(t(i)-t0);
end
x1=c*t(i);

w_x1=w_0.*sqrt(1+((x1+pt2(1)-W1/2-pt3(1))./(z_R)).^(2));

h2.Position(1)=x0+pt1(1);
h3.Position(1)=x1+pt2(1)-W1/2;
h3.Position(2)=pt2(2)-w_x1/2;
h3.Position(4)=w_x1;
title(sprintf('T=%.2f fs',t(i)/1e-15))
pause(0.03)
end


%{
+[M函数](,M代码)
%}
## end
#589, 1032:
%{
+[M函数](,样本代码)
记住"Matlab"
%}

physics_constant;
lm0=800e-9;
% lm0=0.1;

v=v0*c;
Nt=100;
w_0=L2/2;
pt1(1)=pt0(1);
pt1(2)=pt0(2);
pt2(1)=pt0(1);
pt2(2)=pt3(2);

DW=W0-W1;
Dt=DW/v;
t=linspace(0,t0+Dt,Nt);
x0=0;
x1=0;
W2=W0;

% Gaussian beam
z_R=w_0^2*pi/lm0;
z=linspace(pt0(1),pt0(1)+W0,100);
w=w_0.*sqrt(1+((z-pt3(1))./(z_R)).^(2));

clf
patch([z,fliplr(z)],pt3(2)+[w/2,-fliplr(w)/2],[1,0,0],'FaceAlpha',0.2)
rectangle('Position',[pt0(1),pt0(2)-L0/2,W0,L0],'FaceColor',[0,0,1,0.2]);
h2=rectangle('Position',[pt1(1),pt1(2)-L1/2,W1,L1],'FaceColor',[1,1,0,0.2]);
h3=rectangle('Position',[pt2(1)-W1/2,pt2(2)-L2/2,W1/2,L2],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);
axis equal
axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])

%for i=1
for i=1:length(t)
if t(i)>t0
x0=v*(t(i)-t0);
end
x1=c*t(i);

w_x1=w_0.*sqrt(1+((x1+pt2(1)-W1/2-pt3(1))./(z_R)).^(2));

h2.Position(1)=x0+pt1(1);
h3.Position(1)=x1+pt2(1)-W1/2;
h3.Position(2)=pt2(2)-w_x1/2;
h3.Position(4)=w_x1;
title(sprintf('T=%.2f fs',t(i)/1e-15))
pause(0.03)
end


%{
+[M函数](,M代码)
%}
## end
#591, 908:
"""
M代码:...
M模板_初始化:...
M模板_画图:...
M模板_动画:...
+[新建阅读窗口](,M代码)

保存:...

"""

+设置框架(_媒介,_凭依)->+[del](,+设置框架)...
->的(设置框架,M代码)...
->的(设置框架,M模板_初始化)->的(设置框架,M模板_画图)->的(设置框架,M模板_动画)...

->的(_媒介,模拟空间)...
->的(模拟空间,长度#0)->的(模拟空间,宽度#0)...
->的(_媒介,窗口)...
->的(窗口,长度#1)->的(窗口,宽度#1)...
->的(窗口,启动时间)...

->的(_凭依,代码结构)->的(代码结构,代码内容)->的(代码内容,框架代码)...
->的(框架代码,初始化)->的(框架代码,画图)->的(框架代码,动画)...

->+[修改内容](M模板_画图,画图)->+[修改内容](M模板_动画,动画)...
->+[模板文本](M模板_初始化,初始化)...
->+[.]"长度0"(+[模板文本],长度#0)->+[.]"宽度0"(+[模板文本],宽度#0)...
->+[.]"长度1"(+[模板文本],长度#1)->+[.]"宽度1"(+[模板文本],宽度#1)...
->+[.](+[模板文本],启动时间)...

->[]{
    []:->在(模拟空间,空间点#0)->空间点#0->+[.]"空间点0"(+[模板文本],空间点#0),
    ->+[.]"空间点0"(+[模板文本],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->在(窗口,空间点#1)->空间点#1->+[.]"空间点1"(+[模板文本],空间点#1),
    ->+[.]"空间点1"(+[模板文本],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->的(窗口,速度)->速度->+[.](+[模板文本],速度),
    ->+[.]"速度"(+[模板文本],+[临时文本])->+[临时文本]"0"
}


## end
#593, 824:
"""
M模板_初始化:...
M模板_画图:...
M模板_动画:...
+[新建阅读窗口](,M模板_初始化)
M代码:...
+[新建阅读窗口](,M代码)

"""

+设置运动电子(_电子,_凭依)->+[del](,+设置运动电子)...
->的(设置运动电子,M模板_初始化)->的(设置运动电子,M模板_画图)...
->的(设置运动电子,M模板_动画)->的(设置运动电子,M代码)...

->的(_电子,beta_r)->的(_电子,gamma)...
->在(_电子,空间点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.](+[matlab],beta_r)->+[.](+[matlab],gamma)...
->+[o]"v"(+[matlab],+[临时文本]#v)...

->[]{
    []:->的(_凭依,序号)->序号->+[python]"ans=int(n[0])+1
print(n)"(Python,序号)->+[.]"n"(+[python],序号),
    ->+的(_凭依,+序号)->+序号"2"
}...
->的(_凭依,序号)...
->的(_凭依,代码结构)->的(代码结构,代码内容)->的(代码内容,粒子代码)...
->+的(粒子代码,+初始化)->+的(粒子代码,+画图)->+的(粒子代码,+动画)...

->+[模板文本](M模板_初始化,+初始化)->+[.]"n"(+[模板文本],序号)...
->+[.]"v"(+[模板文本],+[临时文本]#v)->+[.]"pt"(+[模板文本],空间点)...

->+[模板文本](M模板_画图,+画图)->+[.]"n"(+[模板文本],序号)...
->+[模板文本](M模板_动画,+动画)->+[.]"n"(+[模板文本],序号)



## end
#595, 1124:
"""
M代码:...
M模板_初始化:...
M模板_画图:...
M模板_动画:...
M模板_画图2:...
M模板_动画2:...
+[新建阅读窗口](,M模板_画图2)
h=patch()
get(h)
记住"Matlab"

"""

+设置光束2(_光束,_凭依)->+[del](,+设置光束2)...
->的(设置光束2,M代码)...
->的(设置光束2,M模板_初始化)->的(设置光束2,M模板_画图)->的(设置光束2,M模板_动画)...
->的(设置光束2,M模板_画图2)->的(设置光束2,M模板_动画2)...

->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#A)...
->的(_光束,腰宽)->的(_光束,展宽)...

->[]{
    []:->的(_凭依,序号)->序号->+[python]"ans=int(n[0])+1
print(n)"(Python,序号)->+[.]"n"(+[python],序号),
    ->+的(_凭依,+序号)->+序号"2"
}...
->的(_凭依,序号)...
->的(_凭依,代码结构)->的(代码结构,代码内容)->的(代码内容,光束代码)...
->+的(光束代码,+初始化)->+的(光束代码,+画图)->+的(光束代码,+动画)...

->+[模板文本](M模板_初始化,+初始化)...
->+[.](+[模板文本],展宽)->+[.](+[模板文本],腰宽)...
->+[.]"焦点坐标"(+[模板文本],空间点#A)->+[.]"n"(+[模板文本],序号)...

->[]{
    []:->[==]"inf"(,展宽)...
        ->+[模板文本](M模板_画图2,+画图)->+[.]"n"(+[模板文本],序号)...
        ->+[模板文本](M模板_动画2,+动画)->+[.]"n"(+[模板文本],序号),
        
    ->+[模板文本](M模板_画图,+画图)->+[.]"n"(+[模板文本],序号)...
    ->+[模板文本](M模板_动画,+动画)->+[.]"n"(+[模板文本],序号)
}...

->[]{
    []:->的(_光束,a0)->a0(,)...
        ->+[.]([python],a0)->[python]"state=(a0[0]==0)"(Python,)...
        ->+[del](,+画图)->+[del](,+动画)->+[del](,+初始化),
    ->[]
}


## end
#596, 328:
"""
Nini, 打开天书(文件)

"""

+召唤规则(_媒介,召唤星辰)->.(+召唤规则,操作)...
->召唤星辰(,_凭依)...

->的(_媒介,模拟空间)->的(_媒介,窗口)...

->+生成代码(_凭依,_凭依)->+的(操作,+生成代码)...
->+设置框架(_媒介,_凭依)->+的(操作,+设置框架)...
->[]{
    []=>的(_媒介,_物体)->_物体=>[]:
        ->的(_物体,数密度)->+设置电子(_物体,_凭依)->+的(操作,+设置电子),
        ->的(_物体,焦点位置)->+设置光束(_物体,_凭依)->+的(操作,+设置光束),
        ->[]
}



## end
#598, 9851:
预览动画#0"
召唤规则:...
降临规则:...
+[新建阅读窗口](,降临规则)


代码结构:...
输出代码:...

"(,)
的#1""(预览动画#0,召唤规则#2)
召唤规则#2"\"\"\"
Nini, 打开天书(文件)

\"\"\"

+召唤规则(_媒介,召唤星辰)->.(+召唤规则,操作)...
->召唤星辰(,_凭依)...

->的(_媒介,模拟空间)->的(_媒介,窗口)...

->+生成代码(_凭依,_凭依)->+的(操作,+生成代码)...
->+设置框架(_媒介,_凭依)->+的(操作,+设置框架)...
->[]{
    []=>的(_媒介,_物体)->_物体=>[]:
        ->的(_物体,数密度)->+设置电子(_物体,_凭依)->+的(操作,+设置电子),
        ->的(_物体,焦点位置)->+设置光束(_物体,_凭依)->+的(操作,+设置光束),
        ->[]
}


"(,)
的#3""(召唤规则#2,新窗口#4)
新窗口#4""(天书,)
的#5""(新窗口#4,m_compiler#6)
m_compiler#6""(,compiler)
的#7""(新窗口#4,m_port#8)
m_port#8""(,端口)
的#9""(新窗口#4,m_event#10)
m_event#10""(,event)
的#11""(新窗口#4,m_readPtr#12)
m_readPtr#12""(,记录星辰)
的#13""(新窗口#4,m_cursor#14)
m_cursor#14"116,116"(,)
的#15""(新窗口#4,m_x#16)
m_x#16"958"(,)
的#17""(新窗口#4,m_y#18)
m_y#18"38"(,)
的#19""(新窗口#4,m_height#20)
m_height#20"476"(,)
的#21""(新窗口#4,m_width#22)
m_width#22"961"(,)
的#23""(预览动画#0,降临规则#24)
降临规则#24"样本代码:...
+[新建阅读窗口](,样本代码)

设置框架:...
设置电子:...
设置光束:...
生成代码:...
+[新建阅读窗口](,设置光束)

设置光束的\"_物体\"替换为\"_光束\"

"(,)
的#25""(降临规则#24,样本代码#26)
样本代码#26"%{
+[M函数](,样本代码)
记住\"Matlab\"
保存:...
%}

physics_constant;
lm0=800e-9;
% lm0=0.1;

v=v0*c;
Nt=100;
w_0=L2/2;
pt1(1)=pt0(1);
pt1(2)=pt0(2);
pt2(1)=pt0(1);
pt2(2)=pt3(2);

DW=W0-W1;
Dt=DW/v;
t=linspace(0,t0+Dt,Nt);
x0=0;
x1=0;
W2=W0;

% Gaussian beam
z_R=w_0^2*pi/lm0;
z=linspace(pt0(1),pt0(1)+W0,100);
w=w_0.*sqrt(1+((z-pt3(1))./(z_R)).^(2));

clf
patch([z,fliplr(z)],pt3(2)+[w/2,-fliplr(w)/2],[1,0,0],'FaceAlpha',0.2)
rectangle('Position',[pt0(1),pt0(2)-L0/2,W0,L0],'FaceColor',[0,0,1,0.2]);
h2=rectangle('Position',[pt1(1),pt1(2)-L1/2,W1,L1],'FaceColor',[1,1,0,0.2]);
h3=rectangle('Position',[pt2(1)-W1/2,pt2(2)-L2/2,W1/2,L2],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);
axis equal
axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])



for i=1:length(t)

if t(i)>t0
    x0=v*(t(i)-t0);
end
x1=c*t(i);

w_x1=w_0.*sqrt(1+((x1+pt2(1)-W1/2-pt3(1))./(z_R)).^(2));

h2.Position(1)=x0+pt1(1);
h3.Position(1)=x1+pt2(1)-W1/2;
h3.Position(2)=pt2(2)-w_x1/2;
h3.Position(4)=w_x1;
title(sprintf('T=%.2f fs',t(i)/1e-15))
pause(0.03)
end


%{
+[M函数](,M代码)
%}"(,)
的#27""(样本代码#26,保存#28)
保存#28"%{
+[M函数](,样本代码)
记住\"Matlab\"
%}

physics_constant;
lm0=800e-9;
% lm0=0.1;

v=v0*c;
Nt=100;
w_0=L2/2;
pt1(1)=pt0(1);
pt1(2)=pt0(2);
pt2(1)=pt0(1);
pt2(2)=pt3(2);

DW=W0-W1;
Dt=DW/v;
t=linspace(0,t0+Dt,Nt);
x0=0;
x1=0;
W2=W0;

% Gaussian beam
z_R=w_0^2*pi/lm0;
z=linspace(pt0(1),pt0(1)+W0,100);
w=w_0.*sqrt(1+((z-pt3(1))./(z_R)).^(2));

clf
patch([z,fliplr(z)],pt3(2)+[w/2,-fliplr(w)/2],[1,0,0],'FaceAlpha',0.2)
rectangle('Position',[pt0(1),pt0(2)-L0/2,W0,L0],'FaceColor',[0,0,1,0.2]);
h2=rectangle('Position',[pt1(1),pt1(2)-L1/2,W1,L1],'FaceColor',[1,1,0,0.2]);
h3=rectangle('Position',[pt2(1)-W1/2,pt2(2)-L2/2,W1/2,L2],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);
axis equal
axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])

%for i=1
for i=1:length(t)
if t(i)>t0
x0=v*(t(i)-t0);
end
x1=c*t(i);

w_x1=w_0.*sqrt(1+((x1+pt2(1)-W1/2-pt3(1))./(z_R)).^(2));

h2.Position(1)=x0+pt1(1);
h3.Position(1)=x1+pt2(1)-W1/2;
h3.Position(2)=pt2(2)-w_x1/2;
h3.Position(4)=w_x1;
title(sprintf('T=%.2f fs',t(i)/1e-15))
pause(0.03)
end


%{
+[M函数](,M代码)
%}"(,)
的#29""(降临规则#24,设置框架#30)
设置框架#30"\"\"\"
M代码:...
M模板_初始化:...
M模板_画图:...
M模板_动画:...
+[新建阅读窗口](,M代码)

\"\"\"

+设置框架(_媒介,_凭依)->+[del](,+设置框架)...
->的(设置框架,M代码)...
->的(设置框架,M模板_初始化)->的(设置框架,M模板_画图)->的(设置框架,M模板_动画)...

->的(_媒介,模拟空间)...
->的(模拟空间,长度#0)->的(模拟空间,宽度#0)->在(模拟空间,空间点#0)...
->的(_媒介,窗口)...
->的(窗口,长度#1)->的(窗口,宽度#1)->在(窗口,空间点#1)...
->的(窗口,速度)->的(窗口,启动时间)...

->的(_凭依,代码结构)->的(代码结构,代码内容)->的(代码内容,框架代码)...
->的(框架代码,初始化)->的(框架代码,画图)->的(框架代码,动画)...

->+[修改内容](M模板_画图,画图)->+[修改内容](M模板_动画,动画)...
->+[模板文本](M模板_初始化,初始化)...
->+[.]\"长度0\"(+[模板文本],长度#0)->+[.]\"宽度0\"(+[模板文本],宽度#0)...
->+[.]\"空间点0\"(+[模板文本],空间点#0)...
->+[.]\"长度1\"(+[模板文本],长度#1)->+[.]\"宽度1\"(+[模板文本],宽度#1)...
->+[.]\"空间点1\"(+[模板文本],空间点#1)...
->+[.](+[模板文本],速度)->+[.](+[模板文本],启动时间)


"(,)
的#31""(设置框架#30,M模板_画图#32)
M模板_画图#32"
rectangle('Position',[pt0(1),pt0(2)-L0/2,W0,L0],'FaceColor',[0,0,1,0.2]);
h1=rectangle('Position',[pt1(1),pt1(2)-L1/2,W1,L1],'FaceColor',[1,1,0,0.2]);
axis equal
% axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])

"(,)
的#33""(设置框架#30,M模板_初始化#34)
M模板_初始化#34"physics_constant;
lm_0=800e-9;

v=%速度*c;
t0=%启动时间;
Nt=100;
pt0=[%空间点0];
pt1=[%空间点1];
L0=%长度0;
L1=%长度1;
W0=%宽度0;
W1=%宽度1;

DW=%宽度0-%宽度1;
Dt=DW/v;
t=linspace(0,t0+Dt,Nt);
x1=0;

"(,)
的#35""(设置框架#30,M代码#36)
M代码#36"%{
+[M函数](,M代码)
%}

physics_constant;
lm_0=800e-9;

v=v0*c;
Nt=100;
pt1(1)=pt0(1);
pt1(2)=pt0(2);

DW=W0-W1;
Dt=DW/v;
t=linspace(0,t0+Dt,Nt);
x0=0;
x1=0;


clf
rectangle('Position',[pt0(1),pt0(2)-L0/2,W0,L0],'FaceColor',[0,0,1,0.2]);
h2=rectangle('Position',[pt1(1),pt1(2)-L1/2,W1,L1],'FaceColor',[1,1,0,0.2]);
axis equal
axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])


for i=1:length(t)

if t(i)>t0
    x0=v*(t(i)-t0);
end
x1=c*t(i);
h2.Position(1)=x0+pt1(1);
title(sprintf('T=%.2f fs',t(i)/1e-15))

pause(0.03)
end


%{
+[M函数](,M代码)
%}"(,)
的#37""(设置框架#30,M模板_动画#38)
M模板_动画#38"if t(i)>t0
    x1=v*(t(i)-t0);
end

h1.Position(1)=x1+pt1(1);
title(sprintf('T=%.2f fs',t(i)/1e-15))

"(,)
的#39""(降临规则#24,设置电子#40)
设置电子#40""(,)
的#41""(降临规则#24,设置光束#42)
设置光束#42"\"\"\"
M代码:...
M模板_初始化:...
M模板_画图:...
M模板_动画:...
+[新建阅读窗口](,M模板_初始化)

\"\"\"

+设置光束(_光束,_凭依)->+[del](,+设置光束)...
->的(设置光束,M代码)...
->的(设置光束,M模板_初始化)->的(设置光束,M模板_画图)->的(设置光束,M模板_动画)...

->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#A)...
->的(_光束,腰宽)->的(_光束,展宽)...

->[]{
    []:->的(_凭依,序号)->序号->+[python]\"ans=int(n[0])+1
print(n)\"(Python,序号)->+[.]\"n\"(+[python],序号),
    ->+的(_凭依,+序号)->+序号\"2\"
}...
->的(_凭依,序号)...
->的(_凭依,代码结构)->的(代码结构,代码内容)->的(代码内容,光束代码)...
->+的(光束代码,+初始化)->+的(光束代码,+画图)->+的(光束代码,+动画)...

->+[模板文本](M模板_初始化,+初始化)...
->+[.](+[模板文本],展宽)->+[.](+[模板文本],腰宽)...
->+[.]\"焦点坐标\"(+[模板文本],空间点#A)->+[.]\"n\"(+[模板文本],序号)...

->+[模板文本](M模板_画图,+画图)->+[.]\"n\"(+[模板文本],序号)...
->+[模板文本](M模板_动画,+动画)->+[.]\"n\"(+[模板文本],序号)


"(,)
的#43""(设置光束#42,M代码#44)
M代码#44"%{
+[M函数](,M代码)
%}


w_0=L2;
% Gaussian beam
z_R=w_0^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w=w_0.*sqrt(1+((z-pt3(1))./(z_R)).^(2));

patch([z,fliplr(z)],pt3(2)+[w/2,-fliplr(w)/2],[1,0,0],'FaceAlpha',0.2)
h3=rectangle('Position',[pt2(1)-W1/2,pt2(2)-L2/2,W1/2,L2],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);

for i=1:length(t)

if t(i)>t0
    x0=v*(t(i)-t0);
end
x1=c*t(i);

w_x1=w_0.*sqrt(1+((x1+pt2(1)-W1/2-pt3(1))./(z_R)).^(2));

h3.Position(1)=x1+pt2(1)-W1/2;
h3.Position(2)=pt2(2)-w_x1/2;
h3.Position(4)=w_x1;
title(sprintf('T=%.2f fs',t(i)/1e-15))
pause(0.03)
end





%{
+[M函数](,M代码)
%}"(,)
的#45""(设置光束#42,M模板_初始化#46)
M模板_初始化#46"tau%n=%展宽*2.5;
focus%n=[%焦点坐标];
w_0%n=%腰宽;
% Gaussian beam
z_R%n=w_0%n^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w%n=w_0%n.*sqrt(1+((z-focus%n(1))./(z_R%n)).^(2));

"(,)
的#47""(设置光束#42,M模板_画图#48)
M模板_画图#48"patch([z,fliplr(z)],focus%n(2)+[w%n/2,-fliplr(w%n)/2],[1,0,0],'FaceAlpha',0.2)
h%n=rectangle('Position',[pt1(1)-c*tau%n,pt1(2)-w%n(1)/2,c*tau%n,w%n(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);

"(,)
的#49""(设置光束#42,M模板_动画#50)
M模板_动画#50"w_z%n=w_0%n.*sqrt(1+((c*t(i)+pt1(1)-focus%n(1))./(z_R%n)).^(2));

h%n.Position(1)=c*t(i)+pt1(1)-c*tau%n;
h%n.Position(2)=focus%n(2)-w_z%n/2;
h%n.Position(4)=w_z%n;

"(,)
的#51""(降临规则#24,生成代码#52)
生成代码#52"\"\"\"
M模板:...
M代码:...

\"\"\"

+生成代码(,_凭依)->+[del](,+生成代码)...
->的(生成代码,M模板)->的(生成代码,M代码)...

->的(_凭依,代码结构)->的(代码结构,代码内容)...
->的(代码内容,框架代码)->的(代码内容,光束代码)->的(代码内容,粒子代码)...

->的(_凭依,输出代码)...

->的(框架代码,初始化)->+[修改内容](初始化,+[临时文本]#初始化)...
->[]{
    []=>的(光束代码,初始化#1)->初始化#1=>+[增加内容](初始化#1,+[临时文本]#初始化)
}...
->的(框架代码,画图)->+[修改内容](画图,+[临时文本]#画图)...
->[]{
    []=>的(光束代码,画图#1)->画图#1=>+[增加内容](画图#1,+[临时文本]#画图)
}...
->的(框架代码,动画)->+[修改内容](动画,+[临时文本]#动画)...
->[]{
    []=>的(光束代码,动画#1)->动画#1=>+[增加内容](动画#1,+[临时文本]#动画)
}...

->+[模板文本](M模板,M代码)...
->+[.]\"初始化\"(+[模板文本],+[临时文本]#初始化)...
->+[.]\"画图\"(+[模板文本],+[临时文本]#画图)...
->+[.]\"动画\"(+[模板文本],+[临时文本]#动画)...
->+[修改内容](M代码,输出代码)

"(,)
的#53""(生成代码#52,M模板#54)
M模板#54"%{
+[M函数](,输出代码)
%}


%初始化

clf
%画图

for i=1:length(t)

%动画

title(sprintf('T=%.2f fs',t(i)/1e-15))
pause(0.03)

end
"(,)
的#55""(生成代码#52,M代码#56)
M代码#56""(,)
的#57""(预览动画#0,代码结构#58)
代码结构#58"Nini, 打开编程语言parser(文件)

样本代码:...
代码框架:...
生成代码:...
+[新建阅读窗口](,样本代码)

代码内容:...
+[设置结构](,代码内容)
代码内容有什么
代码内容的框架代码有什么

将样本代码解析为代码框架
按照\"Python\", 将代码框架转换为生成代码
+[显示星图](,代码框架)



"(,)
的#59""(代码结构#58,代码框架#60)
代码框架#60"起点#0\"\"(,块#1)
块#1\"初始化
\"(,)
块#2\"\"(,)
然后#3\"\"(块#1,块#2)
块#4\"运动
\"(,)
for#5\"条件\"(块#2,块#4)
变量#6\"i\"(for#5,)
eof#7\"\"(,)
然后#8\"\"(块#4,eof#7)
eof#9\"\"(,)
然后#10\"\"(块#2,eof#9)
"(,)
的#61""(代码框架#60,起点#62)
起点#62""(,块#64)
的#63""(代码框架#60,块#64)
块#64"初始化
"(,)
的#65""(代码框架#60,块#66)
块#66""(,)
的#67""(代码框架#60,然后#68)
然后#68""(块#64,块#66)
的#69""(代码框架#60,块#70)
块#70"运动
"(,)
的#71""(代码框架#60,for#72)
for#72"条件"(块#66,块#70)
的#73""(代码框架#60,变量#74)
变量#74"i"(for#72,)
的#75""(代码框架#60,eof#76)
eof#76""(,)
的#77""(代码框架#60,然后#78)
然后#78""(块#70,eof#76)
的#79""(代码框架#60,eof#80)
eof#80""(,)
的#81""(代码框架#60,然后#82)
然后#82""(块#66,eof#80)
的#83""(代码结构#58,样本代码#84)
样本代码#84"
初始化
for i in 条件:
    运动



"(,)
的#85""(代码结构#58,新窗口#86)
新窗口#86""(编程语言parser,)
的#87""(新窗口#86,m_compiler#88)
m_compiler#88""(,compiler)
的#89""(新窗口#86,m_port#90)
m_port#90""(,端口)
的#91""(新窗口#86,m_event#92)
m_event#92""(,event)
的#93""(新窗口#86,m_readPtr#94)
m_readPtr#94""(,)
的#95""(新窗口#86,m_cursor#96)
m_cursor#96"44,44"(,)
的#97""(新窗口#86,m_x#98)
m_x#98"1"(,)
的#99""(新窗口#86,m_y#100)
m_y#100"38"(,)
的#101""(新窗口#86,m_height#102)
m_height#102"476"(,)
的#103""(新窗口#86,m_width#104)
m_width#104"956"(,)
的#105""(代码结构#58,生成代码#106)
生成代码#106"初始化
for i in 条件:
    运动"(,)
的#107""(代码结构#58,代码内容#108)
代码内容#108"
有框架代码, 光束代码和粒子代码

框架代码有初始化, 画图和动画
+[设置结构](,框架代码)

显示框架代码的初始化

"(,)
的#109""(代码内容#108,框架代码#110)
框架代码#110""(,)
的#111""(框架代码#110,初始化#112)
初始化#112""(,)
的#113""(框架代码#110,画图#114)
画图#114""(,)
的#115""(框架代码#110,动画#116)
动画#116""(,)
的#117""(代码内容#108,光束代码#118)
光束代码#118""(,)
的#119""(代码内容#108,粒子代码#120)
粒子代码#120""(,)
的#121""(预览动画#0,输出代码#122)
输出代码#122""(,)

## end
#600, 211:

rectangle('Position',[pt0(1),pt0(2)-L0/2,W0,L0],'FaceColor',[1,1,1,0.1]);
h1=rectangle('Position',[pt1(1),pt1(2)-L1/2,W1,L1],'FaceColor',[1,1,1,0.1]);
axis equal
% axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])


## end
#602, 364:
physics_constant;
lm_0=800e-9;
lm_r=lm_0;

omega_r=c/lm_r*2*pi;
T_r=1/omega_r;
L_r=c/omega_r;

v=%速度*c;
t0=%启动时间;
Nt=100;
pt0=[%空间点0];
pt1=[%空间点1];
L0=%长度0;
L1=%长度1;
W0=%宽度0;
W1=%宽度1;

DW=%宽度0-%宽度1;
Dt=DW/v;
if v==0
    Dt=0;
end
t=linspace(0,t0+Dt,Nt);
x1=0;

nx=4992;
ny=40;
xi=linspace(0,W0,nx)+pt0(1);
yi=linspace(0,L0,ny)-L0/2+pt0(2);
[x,y]=meshgrid(xi,yi);


## end
#604, 536:
%{
+[M函数](,M代码)
%}

physics_constant;
lm_0=800e-9;

v=v0*c;
Nt=100;
pt1(1)=pt0(1);
pt1(2)=pt0(2);

DW=W0-W1;
Dt=DW/v;
t=linspace(0,t0+Dt,Nt);
x0=0;
x1=0;


clf
rectangle('Position',[pt0(1),pt0(2)-L0/2,W0,L0],'FaceColor',[0,0,1,0.2]);
h2=rectangle('Position',[pt1(1),pt1(2)-L1/2,W1,L1],'FaceColor',[1,1,0,0.2]);
axis equal
axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])


for i=1:length(t)

if t(i)>t0
    x0=v*(t(i)-t0);
end
x1=c*t(i);
h2.Position(1)=x0+pt1(1);
title(sprintf('T=%.2f fs',t(i)/1e-15))

pause(0.03)
end


%{
+[M函数](,M代码)
%}
## end
#606, 62:
if t(i)>t0
    x1=v*(t(i)-t0);
end
h1.Position(1)=x1+pt1(1);


## end
#608, 63:

有框架代码, 光束代码和粒子代码

框架代码有初始化, 画图和动画
+[设置结构](,框架代码)

显示框架代码的初始化


## end
#622, 71:
+[设置结构](,测试结构)
召唤规则:...
降临规则:...
+[新建阅读窗口](,降临规则)


代码结构:...
输出代码:...


## end
#624, 600:
%{
+[M函数](,M代码)
%}


w_0=L2;
% Gaussian beam
z_R=w_0^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w=w_0.*sqrt(1+((z-pt3(1))./(z_R)).^(2));

patch([z,fliplr(z)],pt3(2)+[w/2,-fliplr(w)/2],[1,0,0],'FaceAlpha',0.2)
h3=rectangle('Position',[pt2(1)-W1/2,pt2(2)-L2/2,W1/2,L2],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);

for i=1:length(t)

if t(i)>t0
    x0=v*(t(i)-t0);
end
x1=c*t(i);

w_x1=w_0.*sqrt(1+((x1+pt2(1)-W1/2-pt3(1))./(z_R)).^(2));

h3.Position(1)=x1+pt2(1)-W1/2;
h3.Position(2)=pt2(2)-w_x1/2;
h3.Position(4)=w_x1;
title(sprintf('T=%.2f fs',t(i)/1e-15))
pause(0.03)
end





%{
+[M函数](,M代码)
%}
## end
#626, 182:
tau%n=%展宽*2.5;
focus%n=[%焦点坐标];
w_0%n=%腰宽;
% Gaussian beam
z_R%n=w_0%n^2*pi/lm_0;
z%n=linspace(pt0(2)-L0/2,pt0(2)-L0/2+L0,100);
w%n=w_0%n.*sqrt(1+((z%n-focus%n(2))./(z_R%n)).^(2));


## end
#628, 202:
patch(focus%n(1)+[w%n/2,-fliplr(w%n)/2],[z%n,fliplr(z%n)],[1,0,0],'FaceAlpha',0.2)
h%n=rectangle('Position',[pt1(1)-c*tau%n,pt1(2)-w%n(1)/2,c*tau%n,w%n(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);

## end
#630, 165:
w_z%n=w_0%n.*sqrt(1+((c*t(i)+pt1(1)-focus%n(1))./(z_R%n)).^(2));

h%n.Position(1)=c*t(i)+pt1(1)-c*tau%n;
h%n.Position(2)=focus%n(2)-w_z%n/2;
h%n.Position(4)=w_z%n;


## end
#631, 5:
40e-6
## end
#633, 6:
30e-15
## end
#638, 901:
"""
M模板:...
M代码:...

保存:...

"""

+生成代码(,_凭依)->+[del](,+生成代码)...
->的(生成代码,M模板)->的(生成代码,M代码)...

->的(_凭依,代码结构)->的(代码结构,代码内容)...
->的(代码内容,框架代码)->的(代码内容,光束代码)->的(代码内容,粒子代码)...

->的(_凭依,输出代码)...

->的(框架代码,初始化)->+[修改内容](初始化,+[临时文本]#初始化)...
->[]{
    []=>的(光束代码,初始化#1)->初始化#1=>+[增加内容](初始化#1,+[临时文本]#初始化)
}...
->[]{
    []=>的(粒子代码,初始化#1)->初始化#1=>+[增加内容](初始化#1,+[临时文本]#初始化)
}...

->+[临时文本]#画图->[]{
    []=>的(粒子代码,画图#1)->画图#1=>+[增加内容](画图#1,+[临时文本]#画图)
}...
->的(框架代码,画图)->+[增加内容](画图,+[临时文本]#画图)...
->[]{
    []=>的(光束代码,画图#1)->画图#1=>+[增加内容](画图#1,+[临时文本]#画图)
}...

->+[临时文本]#动画->的(框架代码,动画)->+[增加内容](动画,+[临时文本]#动画)...
->[]{
    []=>的(粒子代码,动画#1)->动画#1=>+[增加内容](动画#1,+[临时文本]#动画)
}...
->[]{
    []=>的(光束代码,动画#1)->动画#1=>+[增加内容](动画#1,+[临时文本]#动画)
}...

->+[模板文本](M模板,M代码)...
->+[.]"初始化"(+[模板文本],+[临时文本]#初始化)...
->+[.]"画图"(+[模板文本],+[临时文本]#画图)...
->+[.]"动画"(+[模板文本],+[临时文本]#动画)...
->+[修改内容](M代码,_凭依)...

->+[删除结构](,_凭依)



## end
#640, 157:
%{
+[M函数](,输出代码)
%}


%初始化

clf
hold on
%画图
colorbar

for i=1:length(t)

%动画

title(sprintf('T=%.2f fs, L=%.2f um',t(i)/1e-15,t(i)/1e-6*c))
pause(0.03)

end

## end
#645, 28:
-1e-05, 1e-05, 1e-05, -1e-05
## end
#647, 24:
0.0, 0.0, 0.0003, 0.0003
## end
#649, 8:
0.0, 0.0
## end
#651, 6:
0.0003
## end
#653, 5:
2e-05
## end
#655, 3:
多边形
## end
#656, 3:
长方形
## end
#658, 3:
1,1
## end
#662, 5:
10e-6
## end
#664, 6:
15e-15
## end
#668, 15:
5e-05, -2.5e-05
## end
#671, 3304:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""
import numpy as np

dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(5077.321460347141)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = 588.6411147840166,
    velocity_x = 0.999
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

Species(
    name = "electron1",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0.0, 

    mean_velocity = [0.0, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)

def n2_profile(x,y):
    x=x*1.2732395447351627e-07+(0.0)-(5e-05)
    y=(y-Ly/2)*1.2732395447351627e-07+(0.0)-(-5.500000000000001e-05)

    n=0
    if x<4e-6 and x>-4e-6 and y<20e-6:
        n=1e23
    
    n=n/1.741446424138715e+27
    return n

def ft2_profile(t):
    t=t*4.247069967100916e-16-(1.6691563356170152e-14)
    f=1
    if t>20e-15:
        f=0
    
    return f

Species(
    name = "electron2",
    position_initialization = "random",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = n2_profile, 

    mean_velocity = [0.0, 0.9991996797437437, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
    ],
)

ParticleInjector(
    species   = "electron2",
    box_side  = "ymin",
    time_envelope = ft2_profile,
)



LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 1.0,
    focus            = [392.69908169872417, 196.34954084936209],
    waist            = 78.53981633974483,
    polarization_phi = 0.7853981633974484,
    ellipticity      = 0.0,
    time_envelope    = tgaussian(start=0.0, duration=35.318466887041*4., fwhm=35.318466887041, center=35.318466887041*2., order=2.0, )
)

LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 1.0,
    focus            = [785.3981633974483, 392.69908169872417],
    waist            = 314.1592653589793,
    polarization_phi = 0.7853981633974484,
    ellipticity      = -1.0,
    time_envelope    = tgaussian(start=0.0, duration=70.636933774082*4., fwhm=70.636933774082, center=70.636933774082*2., order=2.0, )
)





DiagFields(
    fields = ['Rho','Jy','Ey'],
    every = 400,
)




DiagPerformances(
    every = 50,
)



## end
#674, 53:
https://en.wikipedia.org/wiki/Elliptical_polarization
## end
#677, 190:
https://www.nrcan.gc.ca/maps-tools-and-publications/satellite-imagery-and-air-photos/satellite-imagery-products/educational-resources/tutorial-radar-polarimetry/the-polarization-ellipse/9575
## end
#680, 59:
https://smileipic.github.io/Smilei/Use/namelist.html#lasers
## end
#682, 53:
https://en.wikipedia.org/wiki/Elliptical_polarization
## end
#686, 24:
文档\模拟\Smilei\code\run.py
## end
#688, 20:
文档\\模拟\\Smilei\\code
## end
#690, 395:
%{
+[M函数](,分析数据)
%}

physics_constant;
ne=2e25;
gamma=2;
lmbd=800e-9;


fileName='文档\\模拟\\Smilei\\code\\Rho.mat';
result=load(fileName);
a=result.result;


clf
for i=1:size(a,1)
% for i=1:3
field=reshape(a(i,:,:),size(a,2),size(a,3));
surf(field)
shading interp
view([90,-90])
% view([90,0])
%axis equal
axis([0,size(a,3),0,size(a,2)])
pause(0.1)
end

result


%{
clf
记住"Matlab"
+[M函数](,分析数据)
%}
## end
#691, 15:
'Rho','Jy','Ey'
## end
#693, 3:
400
## end
#695, 154:
w_z2=w_02.*sqrt(1+((c*t(i)+pt1(1)-focus2(1))./(z_R2)).^(2));

h2.Position(1)=c*t(i)+pt1(1)-c*tau2;
h2.Position(2)=focus2(2)-w_z2/2;
h2.Position(4)=w_z2;


## end
#696, 191:
patch([z,fliplr(z)],focus2(2)+[w2/2,-fliplr(w2)/2],[1,0,0],'FaceAlpha',0.2)
h2=rectangle('Position',[pt1(1)-c*tau2,pt1(2)-w2(1)/2,c*tau2,w2(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#697, 176:
tau2=15e-15*2.5;
focus2=[0.00012, -2.5e-05];
w_02=10e-6;
% Gaussian beam
z_R2=w_02^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w2=w_02.*sqrt(1+((z-focus2(1))./(z_R2)).^(2));


## end
#698, 154:
w_z3=w_03.*sqrt(1+((c*t(i)+pt1(1)-focus3(1))./(z_R3)).^(2));

h3.Position(1)=c*t(i)+pt1(1)-c*tau3;
h3.Position(2)=focus3(2)-w_z3/2;
h3.Position(4)=w_z3;


## end
#699, 191:
patch([z,fliplr(z)],focus3(2)+[w3/2,-fliplr(w3)/2],[1,0,0],'FaceAlpha',0.2)
h3=rectangle('Position',[pt1(1)-c*tau3,pt1(2)-w3(1)/2,c*tau3,w3(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#700, 170:
tau3=30e-15*2.5;
focus3=[0.0001, 0.0];
w_03=40e-6;
% Gaussian beam
z_R3=w_03^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w3=w_03.*sqrt(1+((z-focus3(1))./(z_R3)).^(2));


## end
#702, 794:
x_A1=5e-05-0.0002/2*np.sin(0.0)
y_A1=0.0+0.0002/2*np.cos(0.0)
x_B1=5e-05+0.0002/2*np.sin(0.0)+0.00025*np.cos(0.0)
y_B1=0.0-0.0002/2*np.cos(0.0)+0.00025*np.sin(0.0)
x_A0=0.00019999999999999998-0.0002/2*np.sin(0.0)
y_A0=-2e-05+0.0002/2*np.cos(0.0)
x_B0=0.00019999999999999998+0.0002/2*np.sin(0.0)+3e-05*np.cos(0.0)
y_B0=-2e-05-0.0002/2*np.cos(0.0)+3e-05*np.sin(0.0)

n=0
if  (x-x_A1)*np.cos(0.0)+(y-y_A1)*np.sin(0.0)>=0 and (x-x_A1)*np.sin(0.0)-(y-y_A1)*np.cos(0.0)>=0 and -(x-x_B1)*np.cos(0.0)-(y-y_B1)*np.sin(0.0)>=0 and -(x-x_B1)*np.sin(0.0)+(y-y_B1)*np.cos(0.0)>=0 :
    n=1e25
if  (x-x_A0)*np.cos(0.0)+(y-y_A0)*np.sin(0.0)>=0 and (x-x_A0)*np.sin(0.0)-(y-y_A0)*np.cos(0.0)>=0 and -(x-x_B0)*np.cos(0.0)-(y-y_B0)*np.sin(0.0)>=0 and -(x-x_B0)*np.sin(0.0)+(y-y_B0)*np.cos(0.0)>=0 :
    n=300e25


## end
#704, 267:
+[显示PPT场景](,分布描述)

有区域1和区域2
区域1和区域2都是长方形

区域1是长方形(250e-6,200e-6)
区域2是长方形(30e-6,200e-6)

区域1在(50e-6,0)
区域2距离区域1为(150e-6,-20e-6)
区域2朝向"0"
区域1朝向"0"

有电子
在区域2中, 电子有密度
在区域1中, 电子的密度是"1e25"
在区域2中, 电子的密度是"300e25"



密度:...
+[删除结构](,密度)->+[召唤星辰]"分布"(电子,密度)


+[显示PPT场景](,分布描述)
## end
#705, 3:
多边形
## end
#707, 3:
多边形
## end
#709, 32:
-0.0001, 0.0001, 0.0001, -0.0001
## end
#711, 26:
0.0, 0.0, 0.00025, 0.00025
## end
#713, 7:
50e-6,0
## end
#715, 7:
0.00025
## end
#717, 6:
0.0002
## end
#719, 3:
多边形
## end
#720, 3:
长方形
## end
#722, 32:
-0.0001, 0.0001, 0.0001, -0.0001
## end
#724, 22:
0.0, 0.0, 3e-05, 3e-05
## end
#726, 30:
0.00019999999999999998, -2e-05
## end
#728, 5:
3e-05
## end
#730, 6:
0.0002
## end
#732, 3:
多边形
## end
#733, 3:
长方形
## end
#735, 1:
0
## end
#741, 4:
1e25
## end
#745, 6:
300e25
## end
#748, 104:

召唤规则:...
降临规则:...
+[新建阅读窗口](,降临规则)

的(降临规则,产生代码)->+[做](,密度)->+[code](+[做],产生代码)

公式结构:...
输出代码:...





## end
#752, 1:
0
## end
#758, 3:
940
## end
#761, 47:
v%n=[%v]*c;
v_n%n=v%n/norm(v%n);
pt_e%n=[%pt];

## end
#763, 169:
h_p%n=plot(pt_e%n(1),pt_e%n(2),'r*');
h_t%n=text(pt_e%n(1),pt_e%n(2),'electron%n');
plot([pt_e%n(1),pt_e%n(1)+v%n(1)*t(end)],[pt_e%n(2),pt_e%n(2)+v%n(2)*t(end)],'k--');

## end
#765, 154:
w_z2=w_02.*sqrt(1+((c*t(i)+pt1(1)-focus2(1))./(z_R2)).^(2));

h2.Position(1)=c*t(i)+pt1(1)-c*tau2;
h2.Position(2)=focus2(2)-w_z2/2;
h2.Position(4)=w_z2;


## end
#766, 191:
patch([z,fliplr(z)],focus2(2)+[w2/2,-fliplr(w2)/2],[1,0,0],'FaceAlpha',0.2)
h2=rectangle('Position',[pt1(1)-c*tau2,pt1(2)-w2(1)/2,c*tau2,w2(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#767, 176:
tau2=15e-15*2.5;
focus2=[0.00012, -2.5e-05];
w_02=10e-6;
% Gaussian beam
z_R2=w_02^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w2=w_02.*sqrt(1+((z-focus2(1))./(z_R2)).^(2));


## end
#768, 154:
w_z3=w_03.*sqrt(1+((c*t(i)+pt1(1)-focus3(1))./(z_R3)).^(2));

h3.Position(1)=c*t(i)+pt1(1)-c*tau3;
h3.Position(2)=focus3(2)-w_z3/2;
h3.Position(4)=w_z3;


## end
#769, 191:
patch([z,fliplr(z)],focus3(2)+[w3/2,-fliplr(w3)/2],[1,0,0],'FaceAlpha',0.2)
h3=rectangle('Position',[pt1(1)-c*tau3,pt1(2)-w3(1)/2,c*tau3,w3(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#770, 170:
tau3=30e-15*2.5;
focus3=[0.0001, 0.0];
w_03=40e-6;
% Gaussian beam
z_R3=w_03^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w3=w_03.*sqrt(1+((z-focus3(1))./(z_R3)).^(2));


## end
#771, 18:
contourf(x,y,n4);

## end
#772, 940:
x_A1=5e-05-0.0002./2.*sin(0.0);
y_A1=0.0+0.0002./2.*cos(0.0);
x_B1=5e-05+0.0002./2.*sin(0.0)+0.00025.*cos(0.0);
y_B1=0.0-0.0002./2.*cos(0.0)+0.00025.*sin(0.0);
x_A0=0.00015-0.0002./2.*sin(-0.7853981633974483);
y_A0=-2e-05+0.0002./2.*cos(-0.7853981633974483);
x_B0=0.00015+0.0002./2.*sin(-0.7853981633974483)+3e-05.*cos(-0.7853981633974483);
y_B0=-2e-05-0.0002./2.*cos(-0.7853981633974483)+3e-05.*sin(-0.7853981633974483);

n=0.*ones(size(x));
n((x-x_A1).*cos(0.0)+(y-y_A1).*sin(0.0)>=0 & (x-x_A1).*sin(0.0)-(y-y_A1).*cos(0.0)>=0 & -(x-x_B1).*cos(0.0)-(y-y_B1).*sin(0.0)>=0 & -(x-x_B1).*sin(0.0)+(y-y_B1).*cos(0.0)>=0)=1e25;
n((x-x_A0).*cos(-0.7853981633974483)+(y-y_A0).*sin(-0.7853981633974483)>=0 & (x-x_A0).*sin(-0.7853981633974483)-(y-y_A0).*cos(-0.7853981633974483)>=0 & -(x-x_B0).*cos(-0.7853981633974483)-(y-y_B0).*sin(-0.7853981633974483)>=0 & -(x-x_B0).*sin(-0.7853981633974483)+(y-y_B0).*cos(-0.7853981633974483)>=0)=3e25;
n4=n;


## end
#793, 1:
1
## end
#795, 661:
长度是L. 宽度是W. 角度是\theta. 空间点是(x_0,y_0)
召唤规则:...
降临规则:...
+[新建阅读窗口](,召唤规则)

+[修改标题]"方程公式"(,区域)
方程公式:...
将"\eqs{(x-x_A)*x_1+(y-y_A)*y_1>=0;
-(x-x_A)*x_2-(y-y_A)*y_2>=0;
-(x-x_B)*x_1-(y-y_B)*y_1>=0;
(x-x_B)*x_2+(y-y_B)*y_2>=0}"记作为方程公式

将"x_1=cos(\theta)"代入到方程公式
将"y_1=sin(\theta)"代入到方程公式
将"x_2=-sin(\theta)"代入到方程公式
将"y_2=cos(\theta)"代入到方程公式
方程公式转换为"表达式"

更新方程公式
显示方程公式


参数公式:...
将"\eqs{x_A=x_0-L/2*sin(\theta);
y_A=y_0+L/2*cos(\theta);
x_B=x_0+L/2*sin(\theta)+W*cos(\theta);
y_B=y_0-L/2*cos(\theta)+W*sin(\theta)}"记作为参数公式

更新参数公式
显示参数公式

的(方程公式,表达式)->+[生成区域](表达式,表达式)->+[更新公式起点](,表达式)
的(方程公式,表达式)->+[设置结构](,表达式)
的(方程公式,表达式)->+[删除结构](,表达式)
的(参数公式,表达式)->+[删除结构](,表达式)
## end
#798, 661:
长度是L. 宽度是W. 角度是\theta. 空间点是(x_0,y_0)
召唤规则:...
降临规则:...
+[新建阅读窗口](,召唤规则)

+[修改标题]"方程公式"(,区域)
方程公式:...
将"\eqs{(x-x_A)*x_1+(y-y_A)*y_1>=0;
-(x-x_A)*x_2-(y-y_A)*y_2>=0;
-(x-x_B)*x_1-(y-y_B)*y_1>=0;
(x-x_B)*x_2+(y-y_B)*y_2>=0}"记作为方程公式

将"x_1=cos(\theta)"代入到方程公式
将"y_1=sin(\theta)"代入到方程公式
将"x_2=-sin(\theta)"代入到方程公式
将"y_2=cos(\theta)"代入到方程公式
方程公式转换为"表达式"

更新方程公式
显示方程公式


参数公式:...
将"\eqs{x_A=x_0-L/2*sin(\theta);
y_A=y_0+L/2*cos(\theta);
x_B=x_0+L/2*sin(\theta)+W*cos(\theta);
y_B=y_0-L/2*cos(\theta)+W*sin(\theta)}"记作为参数公式

更新参数公式
显示参数公式

的(方程公式,表达式)->+[生成区域](表达式,表达式)->+[更新公式起点](,表达式)
的(方程公式,表达式)->+[设置结构](,表达式)
的(方程公式,表达式)->+[删除结构](,表达式)
的(参数公式,表达式)->+[删除结构](,表达式)
## end
#802, 218:

有区域1和区域2
区域1和区域2都是长方形(20e-6,20e-6)

区域1在(40e-6,20e-6)
区域2距离区域1为(0,-40e-6)

区域1朝向"45"
区域2都朝向"-45"

有电子
在区域2中, 电子有密度
在区域1中, 电子的密度是"20e25"
在区域2中, 电子的密度是"20e25"

密度:...
+[删除结构](,密度)->+[召唤星辰]"分布"(电子,密度)

+[显示PPT场景](,分布描述2)
## end
#807, 28:
-1e-05, 1e-05, 1e-05, -1e-05
## end
#809, 22:
0.0, 0.0, 2e-05, 2e-05
## end
#811, 11:
40e-6,20e-6
## end
#813, 5:
2e-05
## end
#815, 5:
2e-05
## end
#817, 3:
多边形
## end
#818, 3:
长方形
## end
#820, 28:
-1e-05, 1e-05, 1e-05, -1e-05
## end
#822, 22:
0.0, 0.0, 2e-05, 2e-05
## end
#824, 13:
4e-05, -2e-05
## end
#826, 5:
2e-05
## end
#828, 5:
2e-05
## end
#830, 3:
多边形
## end
#831, 3:
长方形
## end
#835, 2:
45
## end
#837, 3:
-45
## end
#843, 5:
20e25
## end
#847, 5:
20e25
## end
#850, 104:

召唤规则:...
降临规则:...
+[新建阅读窗口](,降临规则)

的(降临规则,产生代码)->+[做](,密度)->+[code](+[做],产生代码)

公式结构:...
输出代码:...





## end
#851, 1:
1
## end
#853, 661:
长度是L. 宽度是W. 角度是\theta. 空间点是(x_0,y_0)
召唤规则:...
降临规则:...
+[新建阅读窗口](,召唤规则)

+[修改标题]"方程公式"(,区域)
方程公式:...
将"\eqs{(x-x_A)*x_1+(y-y_A)*y_1>=0;
-(x-x_A)*x_2-(y-y_A)*y_2>=0;
-(x-x_B)*x_1-(y-y_B)*y_1>=0;
(x-x_B)*x_2+(y-y_B)*y_2>=0}"记作为方程公式

将"x_1=cos(\theta)"代入到方程公式
将"y_1=sin(\theta)"代入到方程公式
将"x_2=-sin(\theta)"代入到方程公式
将"y_2=cos(\theta)"代入到方程公式
方程公式转换为"表达式"

更新方程公式
显示方程公式


参数公式:...
将"\eqs{x_A=x_0-L/2*sin(\theta);
y_A=y_0+L/2*cos(\theta);
x_B=x_0+L/2*sin(\theta)+W*cos(\theta);
y_B=y_0-L/2*cos(\theta)+W*sin(\theta)}"记作为参数公式

更新参数公式
显示参数公式

的(方程公式,表达式)->+[生成区域](表达式,表达式)->+[更新公式起点](,表达式)
的(方程公式,表达式)->+[设置结构](,表达式)
的(方程公式,表达式)->+[删除结构](,表达式)
的(参数公式,表达式)->+[删除结构](,表达式)
## end
#856, 661:
长度是L. 宽度是W. 角度是\theta. 空间点是(x_0,y_0)
召唤规则:...
降临规则:...
+[新建阅读窗口](,召唤规则)

+[修改标题]"方程公式"(,区域)
方程公式:...
将"\eqs{(x-x_A)*x_1+(y-y_A)*y_1>=0;
-(x-x_A)*x_2-(y-y_A)*y_2>=0;
-(x-x_B)*x_1-(y-y_B)*y_1>=0;
(x-x_B)*x_2+(y-y_B)*y_2>=0}"记作为方程公式

将"x_1=cos(\theta)"代入到方程公式
将"y_1=sin(\theta)"代入到方程公式
将"x_2=-sin(\theta)"代入到方程公式
将"y_2=cos(\theta)"代入到方程公式
方程公式转换为"表达式"

更新方程公式
显示方程公式


参数公式:...
将"\eqs{x_A=x_0-L/2*sin(\theta);
y_A=y_0+L/2*cos(\theta);
x_B=x_0+L/2*sin(\theta)+W*cos(\theta);
y_B=y_0-L/2*cos(\theta)+W*sin(\theta)}"记作为参数公式

更新参数公式
显示参数公式

的(方程公式,表达式)->+[生成区域](表达式,表达式)->+[更新公式起点](,表达式)
的(方程公式,表达式)->+[设置结构](,表达式)
的(方程公式,表达式)->+[删除结构](,表达式)
的(参数公式,表达式)->+[删除结构](,表达式)
## end
#860, 50:
n=0
if x<4e-6 and x>-4e-6 and y<20e-6:
    n=1e23

## end
#863, 4:
1e25
## end
#865, 3:
2.5
## end
#867, 5:
0,1,0
## end
#869, 18:
contourf(x,y,n2);

## end
#870, 1194:
x_A1=4e-05-2e-05/2*np.sin(0.7853981633974483)
y_A1=2e-05+2e-05/2*np.cos(0.7853981633974483)
x_B1=4e-05+2e-05/2*np.sin(0.7853981633974483)+2e-05*np.cos(0.7853981633974483)
y_B1=2e-05-2e-05/2*np.cos(0.7853981633974483)+2e-05*np.sin(0.7853981633974483)
x_A0=4e-05-2e-05/2*np.sin(-0.7853981633974483)
y_A0=-2e-05+2e-05/2*np.cos(-0.7853981633974483)
x_B0=4e-05+2e-05/2*np.sin(-0.7853981633974483)+2e-05*np.cos(-0.7853981633974483)
y_B0=-2e-05-2e-05/2*np.cos(-0.7853981633974483)+2e-05*np.sin(-0.7853981633974483)

n=0
if  (x-x_A1)*np.cos(0.7853981633974483)+(y-y_A1)*np.sin(0.7853981633974483)>=0 and (x-x_A1)*np.sin(0.7853981633974483)-(y-y_A1)*np.cos(0.7853981633974483)>=0 and -(x-x_B1)*np.cos(0.7853981633974483)-(y-y_B1)*np.sin(0.7853981633974483)>=0 and -(x-x_B1)*np.sin(0.7853981633974483)+(y-y_B1)*np.cos(0.7853981633974483)>=0 :
    n=20e25
if  (x-x_A0)*np.cos(-0.7853981633974483)+(y-y_A0)*np.sin(-0.7853981633974483)>=0 and (x-x_A0)*np.sin(-0.7853981633974483)-(y-y_A0)*np.cos(-0.7853981633974483)>=0 and -(x-x_B0)*np.cos(-0.7853981633974483)-(y-y_B0)*np.sin(-0.7853981633974483)>=0 and -(x-x_B0)*np.sin(-0.7853981633974483)+(y-y_B0)*np.cos(-0.7853981633974483)>=0 :
    n=20e25


n2=n;


## end
#871, 154:
w_z3=w_03.*sqrt(1+((c*t(i)+pt1(1)-focus3(1))./(z_R3)).^(2));

h3.Position(1)=c*t(i)+pt1(1)-c*tau3;
h3.Position(2)=focus3(2)-w_z3/2;
h3.Position(4)=w_z3;


## end
#872, 191:
patch([z,fliplr(z)],focus3(2)+[w3/2,-fliplr(w3)/2],[1,0,0],'FaceAlpha',0.2)
h3=rectangle('Position',[pt1(1)-c*tau3,pt1(2)-w3(1)/2,c*tau3,w3(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#873, 176:
tau3=15e-15*2.5;
focus3=[0.00012, -2.5e-05];
w_03=10e-6;
% Gaussian beam
z_R3=w_03^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w3=w_03.*sqrt(1+((z-focus3(1))./(z_R3)).^(2));


## end
#874, 154:
w_z4=w_04.*sqrt(1+((c*t(i)+pt1(1)-focus4(1))./(z_R4)).^(2));

h4.Position(1)=c*t(i)+pt1(1)-c*tau4;
h4.Position(2)=focus4(2)-w_z4/2;
h4.Position(4)=w_z4;


## end
#875, 191:
patch([z,fliplr(z)],focus4(2)+[w4/2,-fliplr(w4)/2],[1,0,0],'FaceAlpha',0.2)
h4=rectangle('Position',[pt1(1)-c*tau4,pt1(2)-w4(1)/2,c*tau4,w4(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#876, 170:
tau4=30e-15*2.5;
focus4=[0.0001, 0.0];
w_04=40e-6;
% Gaussian beam
z_R4=w_04^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w4=w_04.*sqrt(1+((z-focus4(1))./(z_R4)).^(2));


## end
#877, 18:
contourf(x,y,n5);

## end
#878, 21:
n5=0*ones(size(x));


## end
#881, 363:
电子注入::https://smileipic.github.io/Smilei/Use/namelist.html#particle-injector
+[打开网页](,电子注入)

注入电子的时间profile好像不能设置为float
额... 问题可能找到了. Injection的电子初始化好像必须是random的... 
但是这是测试的结果, 没有找到ref

参考::https://github.com/SmileiPIC/Smilei/issues/293
+[打开网页](,参考)
周期边条件的话, 粒子的边条件是一定要和EM的一致

有空间分布的速度
参考2::https://smileipic.github.io/Smilei/Use/profiles.html#python-profiles




## end
#885, 4141:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""
import numpy as np

dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(14270.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = 1765.92334435205,
    velocity_x = 0.999
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

def n1_profile(x,y):
    x=x*1.2732395447351627e-07+0.0
    y=(y-Ly/2)*1.2732395447351627e-07+0.0

    x_A1=4e-05-2e-05/2*np.sin(0.7853981633974483)
    y_A1=2e-05+2e-05/2*np.cos(0.7853981633974483)
    x_B1=4e-05+2e-05/2*np.sin(0.7853981633974483)+2e-05*np.cos(0.7853981633974483)
    y_B1=2e-05-2e-05/2*np.cos(0.7853981633974483)+2e-05*np.sin(0.7853981633974483)
    x_A0=4e-05-2e-05/2*np.sin(-0.7853981633974483)
    y_A0=-2e-05+2e-05/2*np.cos(-0.7853981633974483)
    x_B0=4e-05+2e-05/2*np.sin(-0.7853981633974483)+2e-05*np.cos(-0.7853981633974483)
    y_B0=-2e-05-2e-05/2*np.cos(-0.7853981633974483)+2e-05*np.sin(-0.7853981633974483)
    
    n=0
    if  (x-x_A1)*np.cos(0.7853981633974483)+(y-y_A1)*np.sin(0.7853981633974483)>=0 and (x-x_A1)*np.sin(0.7853981633974483)-(y-y_A1)*np.cos(0.7853981633974483)>=0 and -(x-x_B1)*np.cos(0.7853981633974483)-(y-y_B1)*np.sin(0.7853981633974483)>=0 and -(x-x_B1)*np.sin(0.7853981633974483)+(y-y_B1)*np.cos(0.7853981633974483)>=0 :
        n=20e25
    if  (x-x_A0)*np.cos(-0.7853981633974483)+(y-y_A0)*np.sin(-0.7853981633974483)>=0 and (x-x_A0)*np.sin(-0.7853981633974483)-(y-y_A0)*np.cos(-0.7853981633974483)>=0 and -(x-x_B0)*np.cos(-0.7853981633974483)-(y-y_B0)*np.sin(-0.7853981633974483)>=0 and -(x-x_B0)*np.sin(-0.7853981633974483)+(y-y_B0)*np.cos(-0.7853981633974483)>=0 :
        n=20e25
    
    
    n=n/1.741446424138715e+27
    return n

Species(
    name = "electron1",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = n1_profile, 

    mean_velocity = [0.916515138991168, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["periodic", "periodic"],
    ],
)

Species(
    name = "electron2",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0.0, 

    mean_velocity = [0.0, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["periodic", "periodic"],
    ],
)



LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 1.0,
    focus            = [942.4777960769379, 196.34954084936209],
    waist            = 78.53981633974483,
    polarization_phi = 1.5707963267948966,
    ellipticity      = 0.0,
    time_envelope    = tgaussian(start=0.0, duration=35.318466887041*4., fwhm=35.318466887041, center=35.318466887041*2., order=2.0, )
)

LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 1.0,
    focus            = [785.3981633974483, 392.69908169872417],
    waist            = 314.1592653589793,
    polarization_phi = 0.7853981633974484,
    ellipticity      = -1.0,
    time_envelope    = tgaussian(start=0.0, duration=70.636933774082*4., fwhm=70.636933774082, center=70.636933774082*2., order=2.0, )
)





DiagFields(
    fields = ['Rho','Ey','Ex'],
    every = 400,
)




DiagPerformances(
    every = 50,
)



## end
#887, 1722:
"""
保存:...
测试注入:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""
import numpy as np

dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(4270.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

MovingWindow(
    time_start = 1765.92334435205,
    velocity_x = 0.999
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

Species(
    name = "electron2",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0.1, 

    mean_velocity = [0.0, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["periodic", "periodic"],
    ],
)

ParticleInjector(
    name      = "injector1",
    species   = "electron2",
    box_side  = "xmin",

    position_initialization = "regular",
    momentum_initialization = "cold",
    mean_velocity = [0.5,0.,0.],
    number_density = 1,
    particles_per_cell = 1,
)





DiagFields(
    fields = ['Rho','Jx'],
    every = 400,
)




DiagPerformances(
    every = 50,
)



## end
#889, 242:
地址::文档\模拟\Smilei\code\run.py
数据地址::文档\\模拟\\Smilei\\code
+[打开](,数据地址)
+[提取Smilei数据]"Rho"(数据地址,)
+[提取Smilei数据]"Jy"(数据地址,)
+[提取Smilei数据]"Ex"(数据地址,)
+[提取Smilei数据]"Ey"(数据地址,)

NS代码:...
+[保存文本](地址,NS代码)
+[新建阅读窗口](,NS代码)


分析数据:...
+[新建阅读窗口](,分析数据)

## end
#891, 405:
%{
+[M函数](,分析数据)
%}

physics_constant;
ne=2e25;
gamma=2;
lmbd=800e-9;


fileName='文档\\模拟\\Smilei\\code\\Ey.mat';
result=load(fileName);
a=result.result;


clf
for i=1:size(a,1)
%for i=1
field=reshape(a(i,:,:),size(a,2),size(a,3));
surf(field)
shading interp
view([90,-90])
%view([0,0])
%axis equal
axis([0,size(a,3),0,size(a,2)])
pause(0.1)
end

result


%{
min(min(field))
clf
记住"Matlab"
+[M函数](,分析数据)
%}
## end
#892, 1852:
"""
xmin注入:...
无效注入:...
有效注入:...

无效注入_LWFA:...
无效注入_LWFA2:...
有效注入_LWFA:...
背景证据:...
有效注入_无背景:...
+[新建阅读窗口](,有效注入)

time_delay:...
块状分布:...


"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, xvacuum=-Main.grid_length[0]/16, xplateau=Main.grid_length[0]/8., yvacuum=Ly/4., yplateau=Ly/4.)

Species(
	name = 'eon1',
	position_initialization = 'regular',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [0., 0.9, 0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["periodic", "periodic"],
            ["remove", "remove"],
        ],
)


ParticleInjector(
    species   = "eon1",
    box_side  = "ymin",
    time_envelope = ttrapezoidal(start=Lx/8.,plateau=Lx/8),

    position_initialization = "regular",
    mean_velocity = [0., 0.9, 0.],
#     number_density = fp,
    particles_per_cell = 1,
)


DiagFields(
    fields = ['Rho','Jx','Ex','Ey'],
    every = 200,
)




DiagPerformances(
    every = 50,
)



## end
#894, 24:
文档\模拟\Smilei\code\run.py
## end
#896, 20:
文档\\模拟\\Smilei\\code
## end
#898, 2901:
"""
xmin注入:...

"""


import math
import numpy as np

# Mean velocity
mean_velocity = 0.999
# Electron temperature
Te = 0.01
# Ion temperature
Ti = 0.001
# Ion charge
Zi = 1
# Density
n0 = 1
# Debye length
Debye_length = 1. / np.sqrt( n0 / Te + Zi * n0 / Ti )
# Cell length
cell_length = [Debye_length*0.5, Debye_length*0.5]
# Number of patches
number_of_patches =[4, 16]
# Cells per patches (patch shape)
cells_per_patch = [32., 8.]
# Grid length
grid_length = [0.,0.]
for i in range(2):
    grid_length[i] = number_of_patches[i] * cell_length[i] * cells_per_patch[i]
# Number of particles per cell
particles_per_cell = 32
# Position init
position_initialization = 'random'
# Time step
timestep = 0.95/np.sqrt(1./ cell_length[0]**2 + 1./ cell_length[1]**2 )
# Total simulation time
simulation_time = ((1.5 - 0.125)*grid_length[0])/mean_velocity          # duration of the simulation
# Period of output for the diags
diag_every = int(simulation_time / timestep)
# Boundary conditions for particles
particle_boundary_conditions = [["remove", "remove"],["periodic", "periodic"]]
# Boundary conditions for fields
field_boundary_conditions = [['silver-muller'],['periodic']]

Main(
    geometry = "2Dcartesian",
    interpolation_order = 2 ,
    cell_length = cell_length,
    grid_length  = grid_length,
    number_of_patches = number_of_patches,
    timestep = timestep,
    simulation_time = simulation_time,
    EM_boundary_conditions = field_boundary_conditions,
)

LoadBalancing(
	every = 100
)

# Initial plasma shape
fp = trapezoidal(1., xvacuum=0.                 ,xplateau=grid_length[0]/8.)
fm = trapezoidal(1., xvacuum=7*grid_length[0]/8.,xplateau=grid_length[0])

Species(
	name = 'pon1',
	position_initialization = position_initialization,
	momentum_initialization = 'mj',
	ionization_model = 'none',
	particles_per_cell = particles_per_cell,
	c_part_max = 1.0,
	mass = 1836.0,
	charge = 1.0,
	number_density = fp,
	mean_velocity = [mean_velocity,0.,0.],
	temperature = [Ti],
	time_frozen = 0.0,
	boundary_conditions = particle_boundary_conditions,
)

ParticleInjector(
    species = 'pon1',
    box_side = 'xmin',
)

Species(
	name = 'eon1',
	position_initialization = position_initialization,
	momentum_initialization = 'mj',
	ionization_model = 'none',
	particles_per_cell = particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [mean_velocity,0.,0.],
	temperature = [Te],
	time_frozen = 0.0,
	boundary_conditions = particle_boundary_conditions,
)
ParticleInjector(
    species = 'eon1',
    box_side = 'xmin',
)


DiagScalar(every=1)


DiagFields(
    every = 20,
    fields = ["Rho","Jx","Jy","Jz"]
)

#DiagProbe(
#    every = 5,
#    origin = [0., Main.grid_length[1]/2.],
#    corners = [[Main.grid_length[0],Main.grid_length[1]/2.]],
#    number = [256],
#    fields = ['Ex','Ey','Ez','Rho_pon1','Jx_pon1','Jy_pon1','Jz_pon1']
#)

## end
#901, 2702:
"""
xmin注入:...
无效注入:...

"""


import math
import numpy as np

# Mean velocity
mean_velocity = 0.999
# Electron temperature
Te = 0.01
# Ion temperature
Ti = 0.001
# Ion charge
Zi = 1
# Density
n0 = 1
# Debye length
Debye_length = 1. / np.sqrt( n0 / Te + Zi * n0 / Ti )
# Cell length
cell_length = [Debye_length*0.5, Debye_length*0.5]
# Number of patches
number_of_patches =[4, 16]
# Cells per patches (patch shape)
cells_per_patch = [32., 8.]
# Grid length
grid_length = [0.,0.]
for i in range(2):
    grid_length[i] = number_of_patches[i] * cell_length[i] * cells_per_patch[i]
# Number of particles per cell
particles_per_cell = 32
# Position init
position_initialization = 'random'
# Time step
timestep = 0.95/np.sqrt(1./ cell_length[0]**2 + 1./ cell_length[1]**2 )
# Total simulation time
simulation_time = ((1.5 - 0.125)*grid_length[0])/mean_velocity          # duration of the simulation
# Period of output for the diags
diag_every = int(simulation_time / timestep)
# Boundary conditions for particles
particle_boundary_conditions = [["remove", "remove"],["periodic", "periodic"]]
# Boundary conditions for fields
field_boundary_conditions = [['silver-muller'],['periodic']]

Main(
    geometry = "2Dcartesian",
    interpolation_order = 2 ,
    cell_length = cell_length,
    grid_length  = grid_length,
    number_of_patches = number_of_patches,
    timestep = timestep,
    simulation_time = simulation_time,
    EM_boundary_conditions = field_boundary_conditions,
)

LoadBalancing(
	every = 100
)

# Initial plasma shape
fp = trapezoidal(1., xvacuum=0.                 ,xplateau=grid_length[0]/8.)


Species(
	name = 'eon1',
	position_initialization = position_initialization,
	momentum_initialization = 'mj',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = 0.,
	mean_velocity = [0.,0.,0.],
	temperature = [1e-10],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["periodic", "periodic"]
        ],
)

ParticleInjector(
    species   = "eon1",
    box_side  = "xmin",

    position_initialization = "regular",
    mean_velocity = [0.5, 0., 0.],
    number_density = 1.,
    particles_per_cell = 1,
)

"""
ParticleInjector(
    species = 'eon1',
    box_side = 'xmin',

    mean_velocity = [0.9999,0.,0.],
    number_density = 1.,
)

"""

DiagScalar(every=1)


DiagFields(
    every = 20,
    fields = ["Rho","Jx","Jy","Jz"]
)

#DiagProbe(
#    every = 5,
#    origin = [0., Main.grid_length[1]/2.],
#    corners = [[Main.grid_length[0],Main.grid_length[1]/2.]],
#    number = [256],
#    fields = ['Ex','Ey','Ez','Rho_pon1','Jx_pon1','Jy_pon1','Jz_pon1']
#)

## end
#903, 2732:
"""
xmin注入:...
无效注入:...
记住"Python"
print(Debye_length)

"""


import math
import numpy as np

# Mean velocity
mean_velocity = 0.999
# Electron temperature
Te = 0.01
# Ion temperature
Ti = 0.001
# Ion charge
Zi = 1
# Density
n0 = 1
# Debye length
Debye_length = 1. / np.sqrt( n0 / Te + Zi * n0 / Ti )
# Cell length
cell_length = [Debye_length*0.5, Debye_length*0.5]
# Number of patches
number_of_patches =[4, 16]
# Cells per patches (patch shape)
cells_per_patch = [32., 8.]
# Grid length
grid_length = [0.,0.]
for i in range(2):
    grid_length[i] = number_of_patches[i] * cell_length[i] * cells_per_patch[i]
# Number of particles per cell
particles_per_cell = 32
# Position init
position_initialization = 'random'
# Time step
timestep = 0.95/np.sqrt(1./ cell_length[0]**2 + 1./ cell_length[1]**2 )
# Total simulation time
simulation_time = ((1.5 - 0.125)*grid_length[0])/mean_velocity          # duration of the simulation
# Period of output for the diags
diag_every = int(simulation_time / timestep)
# Boundary conditions for particles
particle_boundary_conditions = [["remove", "remove"],["periodic", "periodic"]]
# Boundary conditions for fields
field_boundary_conditions = [['silver-muller'],['periodic']]

Main(
    geometry = "2Dcartesian",
    interpolation_order = 2 ,
    cell_length = cell_length,
    grid_length  = grid_length,
    number_of_patches = number_of_patches,
    timestep = timestep,
    simulation_time = simulation_time,
    EM_boundary_conditions = field_boundary_conditions,
)

LoadBalancing(
	every = 100
)

# Initial plasma shape
fp = trapezoidal(1., xvacuum=0.                 ,xplateau=grid_length[0]/8.)


Species(
	name = 'eon1',
	position_initialization = position_initialization,
	momentum_initialization = 'mj',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = 0.,
	mean_velocity = [0.,0.,0.],
	temperature = [1e-10],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["periodic", "periodic"]
        ],
)

ParticleInjector(
    species   = "eon1",
    box_side  = "xmin",

    position_initialization = "random",
    mean_velocity = [0.5, 0., 0.],
    number_density = 1.,
    particles_per_cell = 1,
)

"""
ParticleInjector(
    species = 'eon1',
    box_side = 'xmin',

    mean_velocity = [0.9999,0.,0.],
    number_density = 1.,
)

"""

DiagScalar(every=1)


DiagFields(
    every = 20,
    fields = ["Rho","Jx","Jy","Jz"]
)

#DiagProbe(
#    every = 5,
#    origin = [0., Main.grid_length[1]/2.],
#    corners = [[Main.grid_length[0],Main.grid_length[1]/2.]],
#    number = [256],
#    fields = ['Ex','Ey','Ez','Rho_pon1','Jx_pon1','Jy_pon1','Jz_pon1']
#)

## end
#905, 2606:
"""
xmin注入:...
无效注入:...
有效注入:...

无效注入_LWFA:...
+[新建阅读窗口](,有效注入)

"""
import numpy as np

dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(8270.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

#MovingWindow(
#    time_start = 1765.92334435205,
#    velocity_x = 0.999
#)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

Species(
    name = "electron2",
#    position_initialization = "random",
    position_initialization = "regular",
    momentum_initialization = "mj",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0., 

    mean_velocity = [0.0, 0.0, 0.0],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)

ParticleInjector(
    species   = "electron2",
    box_side  = "xmin",

    position_initialization = "random",
    momentum_initialization = "rectangular",
    mean_velocity = [0.9999, 0., 0.],
    number_density = 1.,
    particles_per_cell = 1,
)




"""
LaserGaussian2D(
    box_side         = "ymin",
    a0               = 1.0,
    omega            = 1.0,
    focus            = [42.4777960769379, 196.34954084936209],
    waist            = 78.53981633974483,
    polarization_phi = 0.0,
    ellipticity      = 0.0,
    time_envelope    = tgaussian(start=0.0, duration=35.318466887041*4., fwhm=35.318466887041, center=35.318466887041*2., order=2.0, )
)

LaserGaussian2D(
    box_side         = "xmin",
    a0               = 1.0,
    omega            = 1.0,
    focus            = [785.3981633974483, 392.69908169872417],
    waist            = 314.1592653589793,
    polarization_phi = 0.7853981633974484,
    ellipticity      = -1.0,
    time_envelope    = tgaussian(start=0.0, duration=70.636933774082*4., fwhm=70.636933774082, center=70.636933774082*2., order=2.0, )
)

"""





DiagFields(
    fields = ['Rho','Jx','Ey'],
    every = 400,
)




DiagPerformances(
    every = 50,
)



## end
#907, 1610:
"""
xmin注入:...
无效注入:...
有效注入:...

无效注入_LWFA:...
+[新建阅读窗口](,有效注入)

"""
import numpy as np

dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(8270.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

#MovingWindow(
#    time_start = 1765.92334435205,
#    velocity_x = 0.999
#)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

Species(
	name = 'eon1',
	position_initialization = position_initialization,
	momentum_initialization = 'mj',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = 0.,
	mean_velocity = [0.,0.,0.],
	temperature = [1e-10],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["periodic", "periodic"]
        ],
)

ParticleInjector(
    species   = "eon1",
    box_side  = "xmin",

    position_initialization = "random",
    mean_velocity = [0.5, 0., 0.],
    number_density = 1.,
    particles_per_cell = 1,
)







DiagFields(
    fields = ['Rho','Jx','Ey'],
    every = 400,
)




DiagPerformances(
    every = 50,
)



## end
#908, 4:
1012
## end
#911, 1640:
"""
xmin注入:...
无效注入:...
有效注入:...

无效注入_LWFA:...
无效注入_LWFA2:...
+[新建阅读窗口](,有效注入)

"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, xvacuum=0., xplateau=Main.grid_length[0]/8.)

Species(
	name = 'eon1',
	position_initialization = 'regular',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [0.9,0.,0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["periodic", "periodic"]
        ],
)

ParticleInjector(
    species   = "eon1",
    box_side  = "xmin",

    position_initialization = "regular",
    mean_velocity = [0.9, 0., 0.],
    number_density = 1e-6*0.9,
    particles_per_cell = 1,
)








DiagFields(
    fields = ['Rho','Jx','Ex','Ey'],
    every = 200,
)




DiagPerformances(
    every = 50,
)



## end
#913, 1661:
"""
xmin注入:...
无效注入:...
有效注入:...

无效注入_LWFA:...
无效注入_LWFA2:...
有效注入_LWFA:...
+[新建阅读窗口](,有效注入)

"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, xvacuum=0., xplateau=Main.grid_length[0]/8.)

Species(
	name = 'eon1',
	position_initialization = 'regular',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [0.9,0.,0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["periodic", "periodic"]
        ],
)

"""
ParticleInjector(
    species   = "eon1",
    box_side  = "xmin",

    position_initialization = "regular",
    mean_velocity = [0.9, 0., 0.],
    number_density = 1e-6*0.9,
    particles_per_cell = 1,
)

"""






DiagFields(
    fields = ['Rho','Jx','Ex','Ey'],
    every = 200,
)




DiagPerformances(
    every = 50,
)



## end
#915, 1670:
"""
xmin注入:...
无效注入:...
有效注入:...

无效注入_LWFA:...
无效注入_LWFA2:...
有效注入_LWFA:...
背景证据:...
有效注入_无背景:
+[新建阅读窗口](,有效注入)

"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, xvacuum=0., xplateau=Main.grid_length[0]/8.)

Species(
	name = 'eon1',
	position_initialization = 'regular',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = 0.,
	mean_velocity = [0.9,0.,0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["periodic", "periodic"]
        ],
)


ParticleInjector(
    species   = "eon1",
    box_side  = "xmin",

    position_initialization = "regular",
    mean_velocity = [0.9, 0., 0.],
    number_density = 1e-6,
    particles_per_cell = 1,
)








DiagFields(
    fields = ['Rho','Jx','Ex','Ey'],
    every = 200,
)




DiagPerformances(
    every = 50,
)



## end
#918, 1767:
"""
xmin注入:...
无效注入:...
有效注入:...

无效注入_LWFA:...
无效注入_LWFA2:...
有效注入_LWFA:...
背景证据:...
有效注入_无背景:...
+[新建阅读窗口](,有效注入)

time_delay


"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, xvacuum=-Main.grid_length[0]/16, xplateau=Main.grid_length[0]/8.)

Species(
	name = 'eon1',
	position_initialization = 'regular',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [0.9,0.,0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["periodic", "periodic"]
        ],
)


ParticleInjector(
    species   = "eon1",
    box_side  = "xmin",
    time_envelope = ttrapezoidal(start=Lx/8.,plateau=Lx/8),

    position_initialization = "regular",
    mean_velocity = [0.9, 0., 0.],
#     number_density = fp,
    particles_per_cell = 1,
)








DiagFields(
    fields = ['Rho','Jx','Ex','Ey'],
    every = 200,
)




DiagPerformances(
    every = 50,
)



## end
#920, 1811:
"""
xmin注入:...
无效注入:...
有效注入:...

无效注入_LWFA:...
无效注入_LWFA2:...
有效注入_LWFA:...
背景证据:...
有效注入_无背景:...
+[新建阅读窗口](,有效注入)

time_delay:...
块状分布:...


"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, xvacuum=-Main.grid_length[0]/16, xplateau=Main.grid_length[0]/8., yvacuum=Ly/4., yplateau=Ly/4.)

Species(
	name = 'eon1',
	position_initialization = 'regular',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [0.9,0.,0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["periodic", "periodic"]
        ],
)


ParticleInjector(
    species   = "eon1",
    box_side  = "xmin",
    time_envelope = ttrapezoidal(start=Lx/8.,plateau=Lx/8),

    position_initialization = "regular",
    mean_velocity = [0.9, 0., 0.],
#     number_density = fp,
    particles_per_cell = 1,
)








DiagFields(
    fields = ['Rho','Jx','Ex','Ey'],
    every = 200,
)




DiagPerformances(
    every = 50,
)



## end
#922, 1785:
"""
有什么
x注入:...
y注入:...
保存:...
+[新建阅读窗口](,y注入)

"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, xvacuum=Main.grid_length[0]/4., xplateau=Main.grid_length[0]/8., yvacuum=0., yplateau=Ly/4.)

Species(
	name = 'eon1',
	position_initialization = 'random',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [0.9, 0., 0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["remove", "remove"],
#            ["periodic", "periodic"]
        ],
)

ParticleInjector(
    species   = "eon1",
    box_side  = "ymin",
    time_envelope = ttrapezoidal(start=Lx/8.,plateau=Lx/8),

#    position_initialization = "random",
    mean_velocity = [0., 0.9, 0.],
#     number_density = fp,
    particles_per_cell = 1,
)


DiagFields(
    fields = ['Rho','Jy','Ex','Ey'],
    every = 200,
)

DiagPerformances(
    every = 50,
)






## end
#926, 1507:
"""
有什么
x注入:...
保存:...

"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["periodic", "periodic"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, yvacuum=0., yplateau=Ly/4.)

Species(
	name = 'eon1',
	position_initialization = 'regular',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [0., 0.9, 0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["periodic", "periodic"],
            ["remove", "remove"],
#            ["periodic", "periodic"]
        ],
)


ParticleInjector(
    species   = "eon1",
    box_side  = "ymin",
)








DiagFields(
    fields = ['Rho','Jx','Ex','Ey'],
    every = 200,
)




DiagPerformances(
    every = 50,
)



## end
#928, 152:

有效注入_ymax:...
有效注入_LWFA:...
(LWFA这里位置初始化必须是'random', 大概是因为cell的dy太大了. ymax里面就没有这个问题)

无效注入_LWFA:...
有效注入_LWFA2:...
(上面这俩是对应的. 问题比较傻, 注入位置应该是'ymin')




## end
#930, 2413:
"""
有什么
x注入:...
y注入:...
保存:...
+[新建阅读窗口](,y注入)

"""
# ----------------------------------------------------------------------------------------
# SIMULATION PARAMETERS FOR THE PIC-CODE SMILEI
#
# Particle injection from the Xmin and Xmax boundaries
#
# ----------------------------------------------------------------------------------------

import math
import numpy as np

# Mean velocity
mean_velocity = 0.999
# Electron temperature
Te = 0.01
# Ion temperature
Ti = 0.001
# Ion charge
Zi = 1
# Density
n0 = 1
# Debye length
Debye_length = 1. / np.sqrt( n0 / Te + Zi * n0 / Ti )
# Cell length
cell_length = [Debye_length*0.5, Debye_length*0.5]
# Number of patches
number_of_patches =[16, 4]
# Cells per patches (patch shape)
cells_per_patch = [8., 32.]
# Grid length
grid_length = [0.,0.]
for i in range(2):
    grid_length[i] = number_of_patches[i] * cell_length[i] * cells_per_patch[i]
# Number of particles per cell
particles_per_cell = 32
# Position init
position_initialization = 'random'
# Time step
timestep = 0.95/np.sqrt(1./ cell_length[0]**2 + 1./ cell_length[1]**2 )
# Total simulation time
simulation_time = ((1.5 - 0.125)*grid_length[1])/mean_velocity
# Period of output for the diags
diag_every = int(simulation_time / timestep)

particle_boundary_conditions = [
    ["periodic", "periodic"],
    ["remove", "remove"],
]

field_boundary_conditions = [['periodic'],['silver-muller']]

Main(
    geometry = "2Dcartesian",
    interpolation_order = 2 ,
    cell_length = cell_length,
    grid_length  = grid_length,
    number_of_patches = number_of_patches,
    timestep = timestep,
    simulation_time = simulation_time,
    EM_boundary_conditions = field_boundary_conditions,
)

LoadBalancing(
	every = 100
)

# Initial plasma shape
fp = trapezoidal(1., yvacuum=0.                 ,yplateau=grid_length[1]/8.)
fm = trapezoidal(1., yvacuum=7*grid_length[1]/8.,yplateau=grid_length[1])


Species(
	name = 'eon2',
	position_initialization = 'random',
	momentum_initialization = 'mj',
	ionization_model = 'none',
	particles_per_cell = 1.,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fm,
	mean_velocity = [0.,-mean_velocity,0.],
	temperature = [1e-4],
	time_frozen = 0.0,
	boundary_conditions = particle_boundary_conditions
)
ParticleInjector(
    species = 'eon2',
    box_side = 'ymax',
)

DiagScalar(every=1)

DiagFields(
    every = 10,
    fields = ['Rho',"Jy","Ey"]
)








## end
#932, 1547:
"""
有什么
x注入:...
y注入:...
保存:...
+[新建阅读窗口](,y注入)

"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["periodic", "periodic"],
        ["silver-muller","silver-muller"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, yvacuum=0.                 ,yplateau=Main.grid_length[1]/8.)
fm = trapezoidal(1e-6, yvacuum=7*Main.grid_length[1]/8.,yplateau=Main.grid_length[1])

Species(
	name = 'eon2',
	position_initialization = 'random',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fm,
	mean_velocity = [0., -0.9, 0.],
	temperature = [1e-4],
	time_frozen = 0.0,
	boundary_conditions = [
            ["periodic", "periodic"],
            ["remove", "remove"],
        ]
)
ParticleInjector(
    species = 'eon2',
    box_side = 'ymax',
)



DiagFields(
    fields = ['Rho','Jy','Ex','Ey'],
    every = 200,
)


DiagPerformances(
    every = 50,
)





## end
#934, 1786:
"""
有什么
x注入:...
y注入:...
保存:...
+[新建阅读窗口](,y注入)

"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, xvacuum=Main.grid_length[0]/4., xplateau=Main.grid_length[0]/8., yvacuum=0., yplateau=Ly/4.)

Species(
	name = 'eon1',
	position_initialization = 'random',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [0., 0.9, 0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["remove", "remove"],
#            ["periodic", "periodic"]
        ],
)

ParticleInjector(
    species   = "eon1",
    box_side  = "xmin",
#    time_envelope = ttrapezoidal(start=Lx/8.,plateau=Lx/8),

#    position_initialization = "random",
    mean_velocity = [0., 0.9, 0.],
#     number_density = fp,
    particles_per_cell = 1,
)


DiagFields(
    fields = ['Rho','Jy','Ex','Ey'],
    every = 200,
)

DiagPerformances(
    every = 50,
)






## end
#936, 1785:
"""
有什么
x注入:...
y注入:...
保存:...
+[新建阅读窗口](,y注入)

"""
import numpy as np


dt = 0.12375
nx = 4992.0
Lx = 624.0
Ly = 785.3981633974483
npatch_x = 128.0

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(3870.087631127677)*dt,

    cell_length  = [0.125, 19.634954084936208],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

# Initial plasma shape
fp = trapezoidal(1e-6, xvacuum=Main.grid_length[0]/4., xplateau=Main.grid_length[0]/8., yvacuum=0., yplateau=Ly/4.)

Species(
	name = 'eon1',
	position_initialization = 'random',
	momentum_initialization = 'cold',
	ionization_model = 'none',
	particles_per_cell = 1.,#particles_per_cell,
	c_part_max = 1.0,
	mass = 1.0,
	charge = -1.0,
	number_density = fp,
	mean_velocity = [0., 0.9, 0.],
	temperature = [0.0],
	time_frozen = 0.0,
	boundary_conditions = [
            ["remove", "remove"],
            ["remove", "remove"],
#            ["periodic", "periodic"]
        ],
)

ParticleInjector(
    species   = "eon1",
    box_side  = "ymin",
    time_envelope = ttrapezoidal(start=Lx/8.,plateau=Lx/8),

#    position_initialization = "random",
    mean_velocity = [0., 0.9, 0.],
#     number_density = fp,
    particles_per_cell = 1,
)


DiagFields(
    fields = ['Rho','Jy','Ex','Ey'],
    every = 200,
)

DiagPerformances(
    every = 50,
)






## end
#940, 29:
5e-05, -5.500000000000001e-05
## end
#942, 19:
contourf(x,y,n%n);

## end
#943, 12:
%代码
n%n=n;


## end
#944, 25:
n%n=%数密度*ones(size(x));


## end
#948, 719:
"""
M模板_初始化:...
M模板_初始化2:...
M模板_画图:...
+[新建阅读窗口](,M模板_初始化)

"""

+设置电子(_电子,_凭依)->+[del](,+设置电子)...
->的(设置电子,M模板_初始化)->的(设置电子,M模板_初始化2)->的(设置电子,M模板_画图)...

->的(_电子,数密度)->数密度(,_代码)...

->[]{
    []:->的(_凭依,序号)->序号->+[python]"ans=int(n[0])+1
print(n)"(Python,序号)->+[.]"n"(+[python],序号),
    ->+的(_凭依,+序号)->+序号"2"
}...
->的(_凭依,序号)...
->的(_凭依,代码结构)->的(代码结构,代码内容)->的(代码内容,粒子代码)...
->+的(粒子代码,+初始化)->+的(粒子代码,+画图)...

->+[模板文本](,+初始化)->+[.]"n"(+[模板文本],序号)...
->[]{
    []:->_代码->+[code](+[模板文本],M模板_初始化)...
        ->+[.]"代码"(+[模板文本],_代码),
    ->+[code](+[模板文本],M模板_初始化2)->[]{
        []:->[==](,数密度)->+[.]"数密度"(+[模板文本],+[临时文本])->+[临时文本]"0",
        ->+[.](+[模板文本],数密度)
    }
}...

->+[模板文本](M模板_画图,+画图)->+[.]"n"(+[模板文本],序号)



## end
#951, 134:
x%n=pt_e%n(1)+v%n(1)*t(i);
y%n=pt_e%n(2)+v%n(2)*t(i);
h_p%n.XData=x%n;
h_p%n.YData=y%n;
h_t%n.Position(1)=x%n;
h_t%n.Position(2)=y%n;

## end
#953, 75:
%{

%}

beta0=(sqrt(gamma.^(2)-1))./(gamma);
v=beta_r/norm(beta_r)*beta0;


## end
#954, 52:
"""


"""

ans='    '+text.replace('\n','\n    ')



## end
#955, 671:
def ft%n_ei_profile(t):
    t=t*%Tr-%t_ei
    f=1
%延时函数
    return f

Species(
    name = "electron%n_ei",
    position_initialization = "random",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0., 

    mean_velocity = [%V_e],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)

ParticleInjector(
    species   = "electron%n_ei",
    box_side  = "%入射边",
    time_envelope = ft%n_ei_profile,
    number_density = %N_e, 
)


## end
#956, 591:
%{
记住"Matlab"
%}

physics_constant;
n_NS_0=n_NS_0+1;
N_e=n_e/N_r;
N_e(isempty(N_e))=0;

beta0=(sqrt(gamma.^(2)-1))./(gamma);
V_e=beta_r/norm(beta_r)*beta0;

Tr=T_r;
Lr=L_r;
Nr=N_r;
x0=pt0(1);
y0=pt0(2);
n_ei=int32(n_NS_0);

xe=pt_e(1);
ye=pt_e(2);

type_str='xmin';
if V_e(1)>1e-16
    t_ei=(pt1(1)-pt_e(1))/V_e(1)/c;
    type_str='xmin';
elseif V_e(1)<-1e-16
    t_ei=(pt1(1)+W1-pt_e(1))/V_e(1)/c;
    type_str='xmax';
end

if V_e(2)>1e-16
    t_ei=(pt1(2)-L1/2-pt_e(2))/V_e(2)/c;
    type_str='ymin';
elseif V_e(2)<-1e-16
    t_ei=(pt1(2)+L1/2-pt_e(2))/V_e(2)/c;
    type_str='ymax';
end


## end
#957, 767:
def n%n_ei_profile(x,y):
    x=x*%Lr+(%x0)-(%xe)
    y=(y-Ly/2)*%Lr+(%y0)-(%ye)
    n=0.
%代码
    n=n/%Nr
    return n

def ft%n_ei_profile(t):
    t=t*%Tr-(%t_ei)
    f=1
%延时函数
    return f

Species(
    name = "electron%n_ei",
    position_initialization = "random",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0., 

    mean_velocity = [%V_e],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
    ],
)

ParticleInjector(
    species   = "electron%n_ei",
    box_side  = "%入射边",
    time_envelope = ft%n_ei_profile,
    number_density = n%n_ei_profile, 
)


## end
#962, 1680:
"""
M代码:...
NS模板:...
NS模板2:...
+[新建阅读窗口](,NS模板)
P代码:...
+[设置结构](,运动粒子)

"""

+运动粒子(_运动粒子,_输出)->+[del](,+运动粒子)...
->的(运动粒子,M代码)->的(运动粒子,P代码)...
->的(运动粒子,NS模板)->的(运动粒子,NS模板2)...

->的(_运动粒子,gamma)->的(_运动粒子,beta_r)...
->的(_运动粒子,数密度)->数密度(,_函数)...
->的(_运动粒子,延时函数)->延时函数(,_延时函数)...
->在(_运动粒子,空间点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.](+[matlab],gamma)->+[.](+[matlab],beta_r)->+[.]"n_e"(+[matlab],数密度)...
->+[.]"pt_e"(+[matlab],空间点)...

->+[模板文本](,+[增加内容])->+[增加内容](,_输出)...
->+[.](+[模板文本],+V_e)->+[o](+[matlab],+V_e)->+[del](,+V_e)...
->+[.](+[模板文本],+Tr)->+[o](+[matlab],+Tr)->+[del](,+Tr)...
->+[.](+[模板文本],+t_ei)->+[o](+[matlab],+t_ei)->+[del](,+t_ei)...
->+[.](+[模板文本],+n_ei)->+[o](+[matlab],+n_ei)->+[del](,+n_ei)...
->+[.](+[模板文本],+入射边)->+[o]"type_str"(+[matlab],+入射边)->+[del](,+入射边)...

->+[临时文本]#ft->Python->[]{
    []:->_延时函数->+[.]"text"([python],_延时函数)->+[code]([python],P代码)...
        ->[python](Python,+[临时文本]#ft),
    ->[]
}...
->+[.]"延时函数"(+[模板文本],+[临时文本]#ft)...

->[]{
    []:->_函数->+[.]"text"([python]#1,_函数)->+[code]([python]#1,P代码)...
        ->[python]#1(Python,+[临时文本])...

        ->+[code](+[模板文本],NS模板)...
        ->+[.]"代码"(+[模板文本],+[临时文本])...
        ->+[.](+[模板文本],+Lr)->+[o](+[matlab],+Lr)->+[del](,+Lr)...
        ->+[.](+[模板文本],+Nr)->+[o](+[matlab],+Nr)->+[del](,+Nr)...
        ->+[.](+[模板文本],+x0)->+[o](+[matlab],+x0)->+[del](,+x0)...
        ->+[.](+[模板文本],+y0)->+[o](+[matlab],+y0)->+[del](,+y0)...
        ->+[.](+[模板文本],+xe)->+[o](+[matlab],+xe)->+[del](,+xe)...
        ->+[.](+[模板文本],+ye)->+[o](+[matlab],+ye)->+[del](,+ye),

    ->+[code](+[模板文本],NS模板2)...
        ->+[.](+[模板文本],+N_e)->+[o](+[matlab],+N_e)->+[del](,+N_e)
}


## end
#964, 566:
def n%n_ei_profile(x,y):
    x=x*%Lr+%x0
    y=(y-Ly/2)*%Lr+%y0

%代码
    n=n/%Nr
    return n

Species(
    name = "electron%n_ei",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = n%n_ei_profile, 

    mean_velocity = [%V_e],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)


## end
#965, 176:
%{
记住"Matlab"
%}

n_NS_0=n_NS_0+1;
N_e=n_e/N_r;

beta0=(sqrt(gamma.^(2)-1))./(gamma);
V_e=beta_r/norm(beta_r)*beta0;

Lr=L_r;
Nr=N_r;
x0=pt0(1);
y0=pt0(2);
n_ei=int32(n_NS_0);

## end
#966, 461:
Species(
    name = "electron%n_ei",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = %N_e, 

    mean_velocity = [%V_e],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)


## end
#967, 52:
"""


"""

ans='    '+text.replace('\n','\n    ')



## end
#972, 1290:
"""
M代码:...
NS模板:...
NS模板2:...
+[新建阅读窗口](,NS模板)
P代码:...
+[设置结构](,粒子)

"""

+粒子(_粒子,_输出)->+[del](,+粒子)...
->的(粒子,M代码)->的(粒子,P代码)...
->的(粒子,NS模板)->的(粒子,NS模板2)...

->的(_粒子,数密度)->数密度(,_函数)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"n_e"(+[matlab],数密度)...

->[]{
    []:->的(_粒子,gamma)->gamma->+[.](+[matlab],gamma),
    ->+[.]"gamma"(+[matlab],+[临时文本])->+[临时文本]"1"
}...

->[]{
    []:->的(_粒子,beta_r)->beta_r->+[.](+[matlab],beta_r),
    ->+[.]"beta_r"(+[matlab],+[临时文本])->+[临时文本]"1,0,0"
}...

->+[模板文本](,+[增加内容])->+[增加内容](,_输出)...
->+[.](+[模板文本],+V_e)->+[o](+[matlab],+V_e)->+[del](,+V_e)...

->[]{
    []:->_函数->+[.]"text"([python],_函数)->+[code]([python],P代码)...
        ->[python](Python,+[临时文本])...

        ->+[code](+[模板文本],NS模板)->+[.]"代码"(+[模板文本],+[临时文本])...
        ->+[.](+[模板文本],+Lr)->+[o](+[matlab],+Lr)->+[del](,+Lr)...
        ->+[.](+[模板文本],+Nr)->+[o](+[matlab],+Nr)->+[del](,+Nr)...
        ->+[.](+[模板文本],+x0)->+[o](+[matlab],+x0)->+[del](,+x0)...
        ->+[.](+[模板文本],+y0)->+[o](+[matlab],+y0)->+[del](,+y0)...
        ->+[.](+[模板文本],+n_ei)->+[o](+[matlab],+n_ei)->+[del](,+n_ei),

    ->+[code](+[模板文本],NS模板2)...
        ->+[.](+[模板文本],+N_e)->+[o](+[matlab],+N_e)->+[del](,+N_e)...
        ->+[.](+[模板文本],+n_ei#2)->+[o](+[matlab],+n_ei#2)->+[del](,+n_ei#2)
}


## end
#977, 21:
if t>20e-15:
    f=0

## end
#978, 120:
x2=pt_e2(1)+v2(1)*t(i);
y2=pt_e2(2)+v2(2)*t(i);
h_p2.XData=x2;
h_p2.YData=y2;
h_t2.Position(1)=x2;
h_t2.Position(2)=y2;

## end
#979, 156:
h_p2=plot(pt_e2(1),pt_e2(2),'r*');
h_t2=text(pt_e2(1),pt_e2(2),'electron2');
plot([pt_e2(1),pt_e2(1)+v2(1)*t(end)],[pt_e2(2),pt_e2(2)+v2(2)*t(end)],'k--');

## end
#980, 93:
v2=[0.0, 0.916515138991168, 0.0]*c;
v_n2=v2/norm(v2);
pt_e2=[5e-05, -5.500000000000001e-05];

## end
#981, 154:
w_z3=w_03.*sqrt(1+((c*t(i)+pt1(1)-focus3(1))./(z_R3)).^(2));

h3.Position(1)=c*t(i)+pt1(1)-c*tau3;
h3.Position(2)=focus3(2)-w_z3/2;
h3.Position(4)=w_z3;


## end
#982, 191:
patch([z,fliplr(z)],focus3(2)+[w3/2,-fliplr(w3)/2],[1,0,0],'FaceAlpha',0.2)
h3=rectangle('Position',[pt1(1)-c*tau3,pt1(2)-w3(1)/2,c*tau3,w3(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#983, 174:
tau3=15e-15*2.5;
focus3=[5e-05, -2.5e-05];
w_03=10e-6;
% Gaussian beam
z_R3=w_03^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w3=w_03.*sqrt(1+((z-focus3(1))./(z_R3)).^(2));


## end
#984, 154:
w_z4=w_04.*sqrt(1+((c*t(i)+pt1(1)-focus4(1))./(z_R4)).^(2));

h4.Position(1)=c*t(i)+pt1(1)-c*tau4;
h4.Position(2)=focus4(2)-w_z4/2;
h4.Position(4)=w_z4;


## end
#985, 191:
patch([z,fliplr(z)],focus4(2)+[w4/2,-fliplr(w4)/2],[1,0,0],'FaceAlpha',0.2)
h4=rectangle('Position',[pt1(1)-c*tau4,pt1(2)-w4(1)/2,c*tau4,w4(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#986, 170:
tau4=30e-15*2.5;
focus4=[0.0001, 0.0];
w_04=40e-6;
% Gaussian beam
z_R4=w_04^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w4=w_04.*sqrt(1+((z-focus4(1))./(z_R4)).^(2));


## end
#987, 18:
contourf(x,y,n5);

## end
#988, 21:
n5=0*ones(size(x));


## end
#989, 4:
1003
## end
#992, 901:
"""
保存:...
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""
import numpy as np

dt = %dt
nx = %nx
Lx = %Lx
Ly = %Ly
npatch_x = %npatch_x

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(%nt)*dt,

    cell_length  = [%dx, %dy],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

%[粒子]

%[光束]

%[外场]

%[探测]

%[粒子追踪]

DiagPerformances(
    every = 50,
)



## end
#993, 4:
1045
## end
#996, 114:
"""


"""

+函数(表达式,_函数)->+[del](,+函数)...

->+[表达式转结构](表达式,表达式)->+[算式结构转换]"Python"(表达式,+[修改内容])...
->+[修改内容](,_函数)

## end
#998, 118:
"""


"""

+函数转换(表达式,_函数)->+[del](,+函数转换)...

->+[表达式转结构](表达式,表达式)->+[算式结构转换]"Matlab"(表达式,+[修改内容])...
->+[修改内容](,_函数)

## end
#999, 120:
x2=pt_e2(1)+v2(1)*t(i);
y2=pt_e2(2)+v2(2)*t(i);
h_p2.XData=x2;
h_p2.YData=y2;
h_t2.Position(1)=x2;
h_t2.Position(2)=y2;

## end
#1000, 156:
h_p2=plot(pt_e2(1),pt_e2(2),'r*');
h_t2=text(pt_e2(1),pt_e2(2),'electron2');
plot([pt_e2(1),pt_e2(1)+v2(1)*t(end)],[pt_e2(2),pt_e2(2)+v2(2)*t(end)],'k--');

## end
#1001, 93:
v2=[0.0, 0.916515138991168, 0.0]*c;
v_n2=v2/norm(v2);
pt_e2=[5e-05, -5.500000000000001e-05];

## end
#1002, 154:
w_z3=w_03.*sqrt(1+((c*t(i)+pt1(1)-focus3(1))./(z_R3)).^(2));

h3.Position(1)=c*t(i)+pt1(1)-c*tau3;
h3.Position(2)=focus3(2)-w_z3/2;
h3.Position(4)=w_z3;


## end
#1003, 191:
patch([z,fliplr(z)],focus3(2)+[w3/2,-fliplr(w3)/2],[1,0,0],'FaceAlpha',0.2)
h3=rectangle('Position',[pt1(1)-c*tau3,pt1(2)-w3(1)/2,c*tau3,w3(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#1004, 174:
tau3=15e-15*2.5;
focus3=[5e-05, -2.5e-05];
w_03=10e-6;
% Gaussian beam
z_R3=w_03^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w3=w_03.*sqrt(1+((z-focus3(1))./(z_R3)).^(2));


## end
#1005, 154:
w_z4=w_04.*sqrt(1+((c*t(i)+pt1(1)-focus4(1))./(z_R4)).^(2));

h4.Position(1)=c*t(i)+pt1(1)-c*tau4;
h4.Position(2)=focus4(2)-w_z4/2;
h4.Position(4)=w_z4;


## end
#1006, 191:
patch([z,fliplr(z)],focus4(2)+[w4/2,-fliplr(w4)/2],[1,0,0],'FaceAlpha',0.2)
h4=rectangle('Position',[pt1(1)-c*tau4,pt1(2)-w4(1)/2,c*tau4,w4(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);


## end
#1007, 170:
tau4=30e-15*2.5;
focus4=[0.0001, 0.0];
w_04=40e-6;
% Gaussian beam
z_R4=w_04^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w4=w_04.*sqrt(1+((z-focus4(1))./(z_R4)).^(2));


## end
#1008, 18:
contourf(x,y,n5);

## end
#1009, 21:
n5=0*ones(size(x));


## end
#1011, 288:
LaserGaussian2D(
    box_side         = "%输入边",
    a0               = %a0,
    omega            = %omega,
    focus            = [%focus_x, %focus_y],
    waist            = %waist,
    polarization_phi = %p_theta,
    ellipticity      = %E_phase,
    time_envelope    = tconstant(),
)


## end
#1013, 183:
patch(focus%n(1)+[w%n/2,-fliplr(w%n)/2],[z%n,fliplr(z%n)],[1,0,0],'FaceAlpha',0.1)
h%n=patch(focus%n(1)+[w%n(1)/2,-fliplr(w%n(1))/2],[z%n(1),fliplr(z%n(1))],[1,0,0],'FaceAlpha',0.2);

## end
#1015, 153:
z_t0_%n=c*t(i)+pt1(1);
z_t%n=z%n(z%n<z_t0_%n);
w_t%n=w%n(z%n<z_t0_%n);
h%n.XData=focus%n(1)+[w_t%n/2,-fliplr(w_t%n)/2];
h%n.YData=[z_t%n,fliplr(z_t%n)];

## end
#1016, 18:
contourf(x,y,n2);

## end
#1017, 58:
n=0
if x<4e-6 and x>-4e-6 and y<20e-6:
    n=1e23

n2=n;


## end
#1018, 1:
5
## end
#1020, 154:
w_z3=w_03.*sqrt(1+((c*t(i)+pt1(1)-focus3(1))./(z_R3)).^(2));

h3.Position(1)=c*t(i)+pt1(1)-c*tau3;
h3.Position(2)=focus3(2)-w_z3/2;
h3.Position(4)=w_z3;


## end
#1021, 190:
patch([z,fliplr(z)],focus3(2)+[w3/2,-fliplr(w3)/2],[1,0,0],'FaceAlpha',0.2)
h3=rectangle('Position',[pt1(1)-c*tau3,pt1(2)-w3(1)/2,c*tau3,w3(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);

## end
#1022, 174:
tau3=15e-15*2.5;
focus3=[5e-05, -2.5e-05];
w_03=10e-6;
% Gaussian beam
z_R3=w_03^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w3=w_03.*sqrt(1+((z-focus3(1))./(z_R3)).^(2));


## end
#1023, 154:
w_z4=w_04.*sqrt(1+((c*t(i)+pt1(1)-focus4(1))./(z_R4)).^(2));

h4.Position(1)=c*t(i)+pt1(1)-c*tau4;
h4.Position(2)=focus4(2)-w_z4/2;
h4.Position(4)=w_z4;


## end
#1024, 190:
patch([z,fliplr(z)],focus4(2)+[w4/2,-fliplr(w4)/2],[1,0,0],'FaceAlpha',0.2)
h4=rectangle('Position',[pt1(1)-c*tau4,pt1(2)-w4(1)/2,c*tau4,w4(1)],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);

## end
#1025, 170:
tau4=30e-15*2.5;
focus4=[0.0001, 0.0];
w_04=40e-6;
% Gaussian beam
z_R4=w_04^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w4=w_04.*sqrt(1+((z-focus4(1))./(z_R4)).^(2));


## end
#1026, 18:
contourf(x,y,n5);

## end
#1027, 21:
n5=0*ones(size(x));


## end
#1028, 4:
1049
## end
#1030, 147:
z_t0_%n=c*t(i)+pt1(1);
z_t%n=z(z<z_t0_%n);
w_t%n=w%n(z<z_t0_%n);
h%n.XData=[z_t%n,fliplr(z_t%n)];
h%n.YData=focus%n(2)+[w_t%n/2,-fliplr(w_t%n)/2];

## end
#1031, 176:
patch([z,fliplr(z)],focus%n(2)+[w%n/2,-fliplr(w%n)/2],[1,0,0],'FaceAlpha',0.1);
h%n=patch([z(1),fliplr(z(1))],focus%n(2)+[w%n(1)/2,-fliplr(w%n(1))/2],[1,0,0],'FaceAlpha',0.2);

## end
#1032, 169:
w_z%n=w_0%n.*sqrt(1+((c*t(i)+pt1(1)-focus%n(1))./(z_R%n)).^(2));

h%n.Position(1)=c*t(i)+pt1(1)-c*tau%n*1.2;
h%n.Position(2)=focus%n(2)-w_z%n/2;
h%n.Position(4)=w_z%n;


## end
#1033, 208:
patch([z,fliplr(z)],focus%n(2)+[w%n/2,-fliplr(w%n)/2],[1,0,0],'FaceAlpha',0.2)
h%n=rectangle('Position',[pt1(1)-c*tau%n*1.2,pt1(2)-w%n(1)/2,c*tau%n/sqrt(2),w%n(1)],'Curvature',[1,1],'FaceColor',[1,1,1,0.1]);

## end
#1034, 168:
tau%n=%展宽*2.5;
focus%n=[%焦点坐标];
w_0%n=%腰宽;
% Gaussian beam
z_R%n=w_0%n^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w%n=w_0%n.*sqrt(1+((z-focus%n(1))./(z_R%n)).^(2));


## end
#1035, 600:
%{
+[M函数](,M代码)
%}


w_0=L2;
% Gaussian beam
z_R=w_0^2*pi/lm_0;
z=linspace(pt0(1),pt0(1)+W0,100);
w=w_0.*sqrt(1+((z-pt3(1))./(z_R)).^(2));

patch([z,fliplr(z)],pt3(2)+[w/2,-fliplr(w)/2],[1,0,0],'FaceAlpha',0.2)
h3=rectangle('Position',[pt2(1)-W1/2,pt2(2)-L2/2,W1/2,L2],'Curvature',[1,1],'FaceColor',[1,0.5,0,0.8]);

for i=1:length(t)

if t(i)>t0
    x0=v*(t(i)-t0);
end
x1=c*t(i);

w_x1=w_0.*sqrt(1+((x1+pt2(1)-W1/2-pt3(1))./(z_R)).^(2));

h3.Position(1)=x1+pt2(1)-W1/2;
h3.Position(2)=pt2(2)-w_x1/2;
h3.Position(4)=w_x1;
title(sprintf('T=%.2f fs',t(i)/1e-15))
pause(0.03)
end





%{
+[M函数](,M代码)
%}
## end
#1042, 1148:
"""
M代码:...
M模板_初始化:...
M模板_画图:...
M模板_动画:...
M模板_画图2:...
M模板_动画2:...
+[新建阅读窗口](,M模板_画图2)
h=patch()
get(h)
记住"Matlab"
[python]"print(0==0)"(Python,)

"""

+设置光束(_光束,_凭依)->+[del](,+设置光束)...
->的(设置光束,M代码)...
->的(设置光束,M模板_初始化)->的(设置光束,M模板_画图)->的(设置光束,M模板_动画)...
->的(设置光束,M模板_画图2)->的(设置光束,M模板_动画2)...

->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#A)...
->的(_光束,腰宽)->的(_光束,展宽)...

->[]{
    []:->的(_凭依,序号)->序号->+[python]"ans=int(n[0])+1
print(n)"(Python,序号)->+[.]"n"(+[python],序号),
    ->+的(_凭依,+序号)->+序号"2"
}...
->的(_凭依,序号)...
->的(_凭依,代码结构)->的(代码结构,代码内容)->的(代码内容,光束代码)...
->+的(光束代码,+初始化)->+的(光束代码,+画图)->+的(光束代码,+动画)...

->+[模板文本](M模板_初始化,+初始化)...
->+[.](+[模板文本],展宽)->+[.](+[模板文本],腰宽)...
->+[.]"焦点坐标"(+[模板文本],空间点#A)->+[.]"n"(+[模板文本],序号)...

->[]{
    []:->[==]"inf"(,展宽)...
        ->+[模板文本](M模板_画图2,+画图)->+[.]"n"(+[模板文本],序号)...
        ->+[模板文本](M模板_动画2,+动画)->+[.]"n"(+[模板文本],序号),
        
    ->+[模板文本](M模板_画图,+画图)->+[.]"n"(+[模板文本],序号)...
    ->+[模板文本](M模板_动画,+动画)->+[.]"n"(+[模板文本],序号)
}...

->[]{
    []:->的(_光束,a0)->a0(,)...
        ->+[.]([python],a0)->[python]"state=(a0[0]==0)"(Python,)...
        ->+[del](,+画图)->+[del](,+动画)->+[del](,+初始化),
    ->[]
}



## end
#1044, 4:
1050
## end
#1048, 4:
1053
## end
#1051, 982:
"""
M代码:...
M模板_初始化:...
M模板_画图:...
M模板_动画:...
+[新建阅读窗口](,M代码)

保存:...

"""

+设置框架(_媒介,_凭依)->+[del](,+设置框架)...
->的(设置框架,M代码)...
->的(设置框架,M模板_初始化)->的(设置框架,M模板_画图)->的(设置框架,M模板_动画)...

->的(_媒介,模拟空间)...
->的(模拟空间,长度#0)->的(模拟空间,宽度#0)->在(模拟空间,空间点#0)...
->的(_媒介,窗口)...
->的(窗口,长度#1)->的(窗口,宽度#1)->在(窗口,空间点#1)...
->的(窗口,启动时间)...

->的(_凭依,代码结构)->的(代码结构,代码内容)->的(代码内容,框架代码)...
->的(框架代码,初始化)->的(框架代码,画图)->的(框架代码,动画)...

->+[修改内容](M模板_画图,画图)->+[修改内容](M模板_动画,动画)...
->+[模板文本](M模板_初始化,初始化)...
->+[.]"长度0"(+[模板文本],长度#0)->+[.]"宽度0"(+[模板文本],宽度#0)...
->+[.]"空间点0"(+[模板文本],空间点#0)...
->+[.]"长度1"(+[模板文本],长度#1)->+[.]"宽度1"(+[模板文本],宽度#1)...
->+[.]"空间点1"(+[模板文本],空间点#1)->+[.](+[模板文本],启动时间)...

->[]{
    []:->在(模拟空间,空间点#0)->空间点#0->+[.](+[模板文本],空间点#0),
    ->+[.]"空间点0"(+[模板文本],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->在(窗口,空间点#1)->空间点#1->+[.](+[模板文本],空间点#1),
    ->+[.]"空间点1"(+[模板文本],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->的(窗口,速度)->速度->+[.](+[模板文本],速度),
    ->+[.]"速度"(+[模板文本],+[临时文本])->+[临时文本]"0"
}


## end
#1052, 4:
1064
## end
#1055, 131:
+[粘贴](,工具库)
Nini, 打开PIConGPU(文件)

预览动画_del:...
结构转Smilei代码:...
+[修改标题]"预览动画_del"(,预览动画)
+[新建阅读窗口](,结构转Smilei代码)
封印'结构转Smilei代码'




## end
#1058, 873:
"""
M模板:...
M代码:...

"""

+生成代码(,_凭依)->+[del](,+生成代码)...
->的(生成代码,M模板)->的(生成代码,M代码)...

->的(_凭依,代码结构)->的(代码结构,代码内容)...
->的(代码内容,框架代码)->的(代码内容,光束代码)->的(代码内容,粒子代码)...

->的(_凭依,输出代码)...

->的(框架代码,初始化)->+[修改内容](初始化,+[临时文本]#初始化)...
->[]{
    []=>的(光束代码,初始化#1)->初始化#1=>+[增加内容](初始化#1,+[临时文本]#初始化)
}...
->[]{
    []=>的(粒子代码,初始化#1)->初始化#1=>+[增加内容](初始化#1,+[临时文本]#初始化)
}...

->+[临时文本]#画图->[]{
    []=>的(粒子代码,画图#1)->画图#1=>+[增加内容](画图#1,+[临时文本]#画图)
}...
->的(框架代码,画图)->+[增加内容](画图,+[临时文本]#画图)...
->[]{
    []=>的(光束代码,画图#1)->画图#1=>+[增加内容](画图#1,+[临时文本]#画图)
}...

->+[临时文本]#动画->的(框架代码,动画)->+[增加内容](动画,+[临时文本]#动画)...
->[]{
    []=>的(粒子代码,动画#1)->动画#1=>+[增加内容](动画#1,+[临时文本]#动画)
}...
->[]{
    []=>的(光束代码,动画#1)->动画#1=>+[增加内容](动画#1,+[临时文本]#动画)
}...

->+[模板文本](M模板,M代码)...
->+[.]"初始化"(+[模板文本],+[临时文本]#初始化)...
->+[.]"画图"(+[模板文本],+[临时文本]#画图)...
->+[.]"动画"(+[模板文本],+[临时文本]#动画)...
->+[修改内容](M代码,输出代码)


## end
#1061, 204:
%{
+[M函数](,单位)
%}

physics_constant;

lm_r=800e-9;
omega_r=c/lm_r*2*pi;
T_r=1/omega_r;
L_r=c/omega_r;
E_r=m_e.*c.*omega_r./e;
B_r=m_e.*omega_r./e;
N_r=epsilon_0.*m_e.*omega_r.^(2)./e.^(2);
J_r=c.*e.*N_r;

## end
#1065, 410:
PB::https://smileipic.github.io/Smilei/Use/namelist.html#particlebinning-diagnostics
TP::https://smileipic.github.io/Smilei/Use/namelist.html#trackparticles-diagnostics
TP输出::https://smileipic.github.io/Smilei/Use/post-processing.html#open-a-trackparticles-diagnostic
+[打开网页](,TP输出)

Particle binning输出的是电子密度. 额, 我不太喜欢用这种二手信息. 还是用Particle tracking吧
Namelist:...
Smilei:...
+[消息窗口](,Namelist)
+[消息窗口](,Smilei)


## end
#1067, 80:
https://smileipic.github.io/Smilei/Use/namelist.html#particlebinning-diagnostics
## end
#1069, 79:
https://smileipic.github.io/Smilei/Use/namelist.html#trackparticles-diagnostics
## end
#1070, 4:
1091
## end
#1074, 92:
https://smileipic.github.io/Smilei/Use/post-processing.html#open-a-trackparticles-diagnostic
## end
#1076, 80:
https://smileipic.github.io/Smilei/Use/namelist.html#particlebinning-diagnostics
## end
#1078, 79:
https://smileipic.github.io/Smilei/Use/namelist.html#trackparticles-diagnostics
## end
#1081, 166:
DiagTrackParticles(
    species = "electron",
    every = 10,
#    flush_every = 100,
#    filter = my_filter,
#    attributes = ["x", "px", "py", "Ex", "Ey", "Bz"]
)
## end
#1083, 62:
diag=S.TrackParticles(species='electron',axes=["x","py","pz"])
## end
#1085, 784:
"""
粒子追踪::https://smileipic.github.io/Smilei/post-processing.html#open-a-trackparticles-diagnostic
+[打开网页](,粒子追踪)

分析数据:...

"""

类型="e_track"

import sys
sys.path.append('C:\\Users\\cheng\\Desktop\\Laser\\TACC\\PIC\\Smilei\\')
import happi,math
import numpy as np
import scipy.io as sio

lambda_0=0.8e-6
c=3e8
omega_r=2*math.pi*c/lambda_0
fileName="文档\\模拟\\Smilei\\code"

S=happi.Open(fileName,reference_angular_frequency_SI=omega_r)
diag=S.TrackParticles(species='electron2',axes=["x","y","px","py","w"])

result=diag.getData()
a=np.array(result)

saveName="文档\\模拟\\Smilei\\code\\{0}.mat".format(类型)
sio.savemat(saveName,{'result':a})


"""
记住"Python"
+[运行P代码](,P代码2)

diag=S.TrackParticles(species='electron2',axes=["x","y","px","py","w"])
print(diag)
print(saveName)
print(a)

"""
## end
#1087, 88:
https://smileipic.github.io/Smilei/post-processing.html#open-a-trackparticles-diagnostic
## end
#1089, 568:
%{
+[M函数](,分析数据)
%}

physics_constant;
lmbd=800e-9;

fileName='文档\\模拟\\Smilei\\code\\e_track.mat';
result=load(fileName);
a=result.result;

i=21;
xs=result.result{1}.x(i,:);
ys=result.result{1}.y(i,:);
pxs=result.result{1}.px(i,:);
pys=result.result{1}.py(i,:);
ws=result.result{1}.w(i,:);
% plot(xs,ys,'.')
hist(w)

%{
clf
sum(pys(~isnan(ws)).*ws(~isnan(ws))/sum(ws(~isnan(ws))))

result.result{1}
plot(xs,pxs.*ws,'.')
plot(xs,pys.*ws,'.')
plot(xs,pxs,'.')
plot3(xs,ys,pxs.*ws/sum(ws(~isnan(ws))),'.')
plot(xs,pys./pxs,'.')
plot(xs,ws,'.')
记住"Matlab"
+[M函数](,分析数据)
%}
## end
#1090, 56:
DiagFields(
    fields = [%探测类型],
    every = %探测间隔,
)


## end
#1094, 347:
"""
M代码:...
NS模板:...
+[新建阅读窗口](,M代码)

"""

+探测(_探测,_输出)->+[del](,+探测)...
->的(探测,NS模板)...

->+[模板文本](NS模板,+[增加内容])->+[增加内容](,_输出)...
->[]{
    []:->的(_探测,探测类型)->探测类型->+[.](+[模板文本],探测类型),
    ->+[.]"探测类型"(+[模板文本],+[临时文本])->+[临时文本]"'Rho'"
}...
->[]{
    []:->的(_探测,探测间隔)->探测间隔->+[.](+[模板文本],探测间隔),
    ->+[.]"探测间隔"(+[模板文本],+[临时文本])->+[临时文本]"200"
}



## end
#1098, 92:
https://smileipic.github.io/Smilei/Use/post-processing.html#open-a-trackparticles-diagnostic
## end
#1102, 83:
https://smileipic.github.io/Smilei/Use/post-processing.html#open-a-field-diagnostic
## end
#1103, 188:
"""

"""
+整理结构(_媒介,_凭依)->+[del](,+整理结构)...

->的(_凭依,召唤规则)->+[删除结构](,召唤规则)->+[del](,召唤规则)...
->的(_凭依,降临规则)->+[删除结构](,降临规则)->+[del](,降临规则)...
->的(_凭依,命名空间)->+[删除结构](,命名空间)->+[del](,命名空间)




## end
#1104, 330:
"""
记住"Python"
保存:...

print(address,code_2)

"""
import subprocess as sp
import os

sim_folder="/home/xiantao/Documents/sim_output/sim_folder_smilei"

code="nautilus %s"%(sim_folder)
t_code=code.split(' ')
p=sp.Popen(t_code)

code_2="cd %s;~/Documents/PIC/Smilei/Smilei/smilei %s/run.py"%(sim_folder,address)
os.system(code_2)



## end
#1105, 10:
mkdir %地址/
## end
#1108, 432:
"""
创建文件夹:...
P代码:...
+[修改天使]

"""


+本地模拟(_媒介,_凭依)->+[del](,+本地模拟)...
->的(本地模拟,创建文件夹)->的(本地模拟,P代码)...

->[]{
    []:->的(_媒介,地址)->地址,
    ->+的(_媒介,+地址)->+地址"/home/xiantao/Documents/PIC/output"
}->的(_媒介,地址#0)...

->+[模板文本](创建文件夹,+[命令行]#0)->+[命令行]#0->+[显示](,+[命令行]#0)...
    ->+[.](+[模板文本],地址#0)...

->[]{
    []=>的(_凭依,_文件)->_文件=>+[保存文本](,_文件)
}...

->+[python](Python,)->+[code](+[python],P代码)...
->+[.]"address"(+[python],地址#0)




## end
#1109, 109:
+[删除结构](,库)

输出场:...
将'输出场'的"输出场间隔"替换为"探测间隔"
输出png:...
将条目"输出场"复制为条目"输出png"

输出能谱:...
将条目"输出png"复制为条目"输出能谱"


## end
#1110, 204:
"""


"""
+描述结构(,_探测)->+操作(+描述结构,)...

->的(_探测,探测类型)...
->[]{
    []:->[==]"png"(,探测类型)->+输出png(,_探测)->+的(+操作,+输出png),
    ->[==]"能谱"(,探测类型)->+输出能谱(,_探测)->+的(+操作,+输出能谱),
    ->+输出场(,_探测)->+的(+操作,+输出场)
}


## end
#1113, 325:
"""
描述结构:...
库:...
+[新建阅读窗口](,库)
输出

"""
+探测代码(_探测,_凭依)->+[del](,+探测代码)...
->的(探测代码,描述结构)->的(探测代码,库)...

->."媒介"(+探测代码,_媒介)...

->+[code]([想],描述结构)->[想](,_探测)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_条目,_操作)...
        ->+[做](_探测,_凭依)->+[code](+[做],_条目)->+[.]"媒介"(+[做],_媒介)
}




## end
#1114, 192:
"""


"""
+操作2(_X,_凭依)->+[del](,+操作2)...

->顺序(_X,)->的(_X,顺序)->+[修改内容]", "(,顺序)...
    ->+[修改内容]"MakeSeq_t<%内容>"(,_X)...
->+插入(_X,)->+的(_X,+插入)->+的(+插入,+内容)...
->+[左连](顺序,+内容)->+[左连](的,+内容)



## end
#1115, 38:
"""


"""
+操作1(_X,_凭依)->+[del](,+操作1)

## end
#1116, 73:
"""


"""
+操作0(_X,_凭依)->+[del](,+操作0)...

->+[修改内容]"profiles::None"(,_X)

## end
#1120, 29:


操作2:...
操作1:...
操作0:...




## end
#1121, 294:
"""


"""

+描述结构(注入方式,_凭依)->+操作(+描述结构,)...

->插入(注入方式,)...
->[]{
    []=>的(插入,_re)->_re"[XYZ]M"=>[]:
        ->顺序(_re,)->的(顺序,_节点)->_节点(,_节点1)...
            ->+操作2(_re,_凭依)->+的(+操作,+操作2),
        ->顺序(_re,)...
            ->+操作1(_re,_凭依)->+的(+操作,+操作1),
        ->+操作0(_re,_凭依)->+的(+操作,+操作0)
}

## end
#1124, 370:
"""
描述结构:...
库:...

"""
+整理光束(,_凭依)->+[del](,+整理光束)...
->的(整理光束,描述结构)->的(整理光束,库)...

->的(_凭依,incidentField)->的(incidentField,插入)...
    ->的(插入,注入方式)...

->+[code]([想],描述结构)->[想](注入方式,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"凭依"(+[做],_凭依)
}

## end
#1125, 983:
"""
模板:...
myscript:...
M代码:...

"""
+整体结构(_媒介,_凭依)->+[del](,+整体结构)...
->的(整体结构,M代码)->的(整体结构,模板)->的(整体结构,myscript)...

->[]{
    []:->的(_媒介,地址)->地址,
    ->+的(_媒介,+地址)->+地址"/home/xiantao/Documents/PIC/output"
}->的(_媒介,地址#0)->+[修改内容](地址#0,+[临时文本])...

->+的(_凭依,+myscript)->+的(+myscript,+地址#m)...
    ->+[修改内容]"%s/myscript.txt"(地址#0,+地址#m)...
->+的(_凭依,+info)->+的(+info,+地址#f)...
    ->+[修改内容]"%s/info.txt"(地址#0,+地址#f)->+[修改内容](_媒介,+info)...
->+的(_凭依,+run)->+的(+run,+地址#r)...
    ->+[修改内容]"%s/run.py"(地址#0,+地址#r)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->[]{
    []:->的(_场景,参考波长)->参考波长->+[.]"lm_r"(+[matlab],参考波长),
    ->+[.]"lm_r"(+[matlab],+波长)->+波长"800e-9"->+[del](,+波长)
}...

->+[修改内容](myscript,+myscript)...
->+的(_凭依,+代码)->+[修改内容](模板,+代码)...
    ->+[文本结构_插入](+代码,+地址)->+[修改内容](+地址#r,+地址)...
    ->+[文本结构_插入](+代码,+空间)->+[文本结构_插入](+代码,+窗口)...
    ->+[文本结构_插入](+代码,+光束)->+[文本结构_插入](+代码,+粒子)...
    ->+[文本结构_插入](+代码,+外场)...
    ->+[文本结构_插入](+代码,+探测)->+[文本结构_插入](+代码,+追踪)




## end
#1126, 442:
"""
P代码:...

"""
+描述结构(_电子,_凭依)->+操作(+描述结构,)...

->+[临时文本]->Python->[]{
    []:->不注入(_电子,),
    ->的(_电子,速度方向)->速度方向->+[code]([python],P代码)...
        ->+[.]"v"([python],速度方向)->[python](Python,+[临时文本])...
        ->[]{
            []:->[==]"xmin"(,+[临时文本])->+操作1(_电子,_凭依)->+的(+操作,+操作1),
            ->[==]"xmax"(,+[临时文本])->+操作2(_电子,_凭依)->+的(+操作,+操作2),
            ->+操作0(_电子,_凭依)->+的(+操作,+操作0)
        },
    ->+操作0(_电子,_凭依)->+的(+操作,+操作0)
}



## end
#1127, 545:

Species(
    name = "%变量",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = %charge,
    number_density = %N_e, 

    mean_velocity = [%v],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)

ParticleInjector(
    species   = "%变量",
    box_side  = "xmin",
    time_envelope = 1.,
    number_density = %N_e, 
)




## end
#1129, 983:
"""
模板:...
M代码:...
->+[.](+[模板文本],上升沿)->+[.](+[模板文本],宽度)
->的(_电子,上升沿)

"""
+操作1(_电子,_凭依)->+[del](,+操作1)...
->的(操作1,模板)->的(操作1,M代码)...

->."媒介"(+操作1,_媒介)...
->的(_媒介,模拟空间)->的(模拟空间,宽度)...
->的(_凭依,命名空间)->的(命名空间,变量)...
->变量(,_电子)->的(_电子,数密度)...

->的(_凭依,代码)->插入(代码,)->的(插入,粒子)...
->+[文本结构_插入尾部](粒子,+节点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"N0"(+[matlab],数密度)...
->+[模板文本](模板,+节点)...
->+[.](+[模板文本],+N_e)->+[o](+[matlab],+N_e)->+[del](,+N_e)...
->[]{
    []:->[==](,_电子)->+[.](+[模板文本],变量),
    ->+[.]"变量"(+[模板文本],_电子)
}...
->[]{
    []:->的(_电子,电荷)->电荷->+[.]"charge"(+[模板文本],电荷),
    ->+[临时文本]"-1.0"->+[.]"charge"(+[模板文本],+[临时文本])
}...
->[]{
    []:->的(_电子,beta)->beta->的(_电子,速度方向)->速度方向(,)...
        ->+[.](+[matlab],beta)->+[.]"v0"(+[matlab],速度方向)...
        ->+[o](+[matlab],+v)->+[.](+[模板文本],+v)->+[del](,+v),

    ->+[临时文本]"0.,0.,0."->+[.]"v"(+[模板文本],+[临时文本])...
        ->+[.]"v0"(+[matlab],+[临时文本])...
        ->+[临时文本]"0."->+[.]"beta"(+[matlab],+[临时文本])
}




## end
#1131, 45:


操作0:...
操作1:...
操作2:...
将条目"操作0"复制为条目"操作2"

## end
#1134, 329:
"""
描述结构:...
库:...

"""
+电子代码(_电子,_凭依)->+[del](,+电子代码)...
->的(电子代码,描述结构)->的(电子代码,库)...

->."媒介"(+电子代码,_媒介)...

->+[code]([想],描述结构)->[想](_电子,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"媒介"(+[做],_媒介)
}



## end
#1135, 73:

操作1:...
将条目"操作0"复制为条目"操作1"

操作0:...
将'操作0'的"电子"替换为"光束"
+[新建阅读窗口](,操作0)


## end
#1136, 276:
"""

"""
+描述结构(_光束,_凭依)->+操作(+描述结构,)...

->_光束->[]{
    []:->的(_光束,展宽)->展宽->[]{
        []:->[==]"inf"(,展宽)->+操作0(_光束,_凭依)->+的(+操作,+操作0),
        ->[==]"Inf"(,展宽)->+操作0(_光束,_凭依)->+的(+操作,+操作0),
        ->+操作1(_光束,_凭依)->+的(+操作,+操作1)
    },
    ->+操作0(_光束,_凭依)->+的(+操作,+操作0)
}



## end
#1139, 354:
"""
描述结构:...
库:...

"""
+光束代码(_光束,_凭依)->+[del](,+光束代码)...
->的(光束代码,描述结构)->的(光束代码,库)...

->.(+光束代码,_媒介)...
->+[code]([想],描述结构)->[想](_光束,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"凭依"(+[做],_凭依)...
        ->+[.]"媒介"(+[做],_媒介)
}

## end
#1140, 1849:
"""
模板:...
模板2:...
M代码:...
+[新建阅读窗口](,M代码)

保存:...
dtt

"""
+框架代码(_媒介,_凭依)->+[del](,+框架代码)...
->的(框架代码,M代码)->的(框架代码,模板)->的(框架代码,模板2)...

->的(_凭依,代码)->插入(代码,)->的(插入,空间#0)->的(插入,窗口#0)...

->的(_媒介,模拟空间)...
    ->的(模拟空间,宽度#0)->的(模拟空间,长度#0)...
->的(_媒介,窗口)...
    ->的(窗口,宽度#1)->的(窗口,长度#1)->的(窗口,启动时间)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"W0"(+[matlab],宽度#0)->+[.]"W1"(+[matlab],宽度#1)...
->+[.]"L1"(+[matlab],长度#1)->+[.]"Dt"(+[matlab],启动时间)...

->[]{
    []:->的(窗口,启动时间)->启动时间->+[.]"Dt"(+[matlab],启动时间),
    ->+[临时文本]"-1"->+[.]"Dt"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(模拟空间,深度)->深度->+[.]"Depth"(+[matlab],深度),
    ->+[.]"Depth"(+[matlab],长度#1)
}...
->[]{
    []:->的(模拟空间,时间步长)->时间步长->+[.]"dtt"(+[matlab],时间步长),
    ->+[临时文本]"1.39e-16"->+[.]"dtt"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(模拟空间,格点尺寸)->格点尺寸->+[.]"dsiz"(+[matlab],格点尺寸),
    ->+[临时文本]"4.43e-8,1.772e-7,1.772e-7"->+[.]"dsiz"(+[matlab],+[临时文本])
}...

->+[模板文本](模板,空间#0)...
->+[.](+[模板文本],+dx)->+[o](+[matlab],+dx)->+[del](,+dx)...
->+[.](+[模板文本],+dy)->+[o](+[matlab],+dy)->+[del](,+dy)...
->+[.](+[模板文本],+dz)->+[o](+[matlab],+dz)->+[del](,+dz)...
->+[.](+[模板文本],+dt)->+[o](+[matlab],+dt)->+[del](,+dt)...
->+[.](+[模板文本],+nx)->+[o](+[matlab],+nx)->+[del](,+nx)...
->+[.](+[模板文本],+ny)->+[o](+[matlab],+ny)->+[del](,+ny)...
->+[.](+[模板文本],+nz)->+[o](+[matlab],+nz)->+[del](,+nz)...
->+[.](+[模板文本],+nt)->+[o](+[matlab],+nt)->+[del](,+nt)...
->+[.](+[模板文本],+npatch_x)->+[o](+[matlab],+npatch_x)->+[del](,+npatch_x)...
->+[.](+[模板文本],+Lx)->+[o](+[matlab],+Lx)->+[del](,+Lx)...
->+[.](+[模板文本],+Ly)->+[o](+[matlab],+Ly)->+[del](,+Ly)...

->[]{
    []:->+[.]"W0"([matlab],宽度#0)->+[.]"W1"([matlab],宽度#1)...
        ->[matlab]"state=(W0-W1==0);"(Matlab,),

    ->+[模板文本](模板2,窗口#0)...
        ->+[.](+[模板文本],+启动时间)->+[o]"time_start"(+[matlab],+启动时间)...
        ->+[del](,+启动时间)
}



## end
#1147, 208:


整体结构:...
+[新建阅读窗口](,整体结构)

框架代码:...
+[新建阅读窗口](,框架代码)
探测代码:...
+[新建阅读窗口](,探测代码)

电子代码:...
光束代码:...
外场代码:...
在选择区域中, 将'框架代码'的"nt"替换为"dt"
将'光束代码'的"电子"替换为"光束"
+[新建阅读窗口](,电子代码)

整理光束:...
将'整理光束'的"_光束"替换为"注入方式"


## end
#1148, 461:
"""


"""
+描述结构(_媒介,_凭依)->+操作(+描述结构,)...

->[]{
    []=>的(_媒介,_实体)->_实体=>[]:
        ->的(_实体,数密度)...
            ->+电子代码(_实体,_凭依)->+的(+操作,+电子代码),
        ->的(_实体,场强)...
            ->+外场代码(_实体,_凭依)->+的(+操作,+外场代码),
        ->的(_实体,探测间隔)...
            ->+探测代码(_实体,_凭依)->+的(+操作,+探测代码),
        ->的(_实体,a0)->[]{[]=>[==]"0"(,a0)}...
            ->+光束代码(_实体,_凭依)->+的(+操作,+光束代码),
        ->[]
}...

->+框架代码(_媒介,_凭依)->+的(+操作,+框架代码)...
->+整体结构(_媒介,_凭依)->+的(+操作,+整体结构)


## end
#1151, 318:
"""
描述结构:...
库:...

"""
+代码结构_1D(_媒介,_凭依)->+[del](,+代码结构_1D)...
->的(代码结构_1D,描述结构)->的(代码结构_1D,库)...

->+[code]([想],描述结构)->[想](_媒介,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"媒介"(+[做],_媒介)
}



## end
#1152, 52:

run:...
info:...
myscript:...

+[保存文本](,myscript)


## end
#1154, 205:
"""
内容:...

"""
+整理代码(_媒介,_凭依)->+[del](,+整理代码)...
->的(整理代码,内容)...
->+[修改内容](内容,_凭依)...

->[]{
    []:->的(_凭依,run)->run->的(_凭依,代码)->代码->+[结构转文本](代码,run)...
        ->+[删除结构](,代码)->+[del](,代码),
    ->[]
}



## end
#1155, 460:
"""
记住"Python"
Nini, 打开公式分析器(文件)

a=re.search("r","ere")
print(a)
print(re.match("[a-zA-Z_0-9]+","212")==None)

"""

import re

print(name,var_num)

type="_varb"
if "探针" in name:
    type="_probe"
elif "泵光" in name or "驱动光" in name:
    type="_pump"
elif "光" in name:
    type="_light"
elif "电子" in name:
    type="_plasma"
elif re.match("[a-zA-Z_0-9]+",name)!=None:
    type=name


n_v=var_num.get(type,0)+1
var_num.update({type:n_v})

ans="%s_%d"%(type,n_v)

## end
#1157, 431:
"""
P代码:...

"""

+描述结构(,_结构)->+操作(+描述结构,)...
->的(描述结构,P代码)...

->[python]"var_num={}
state=True"(Python,)...

->[]{
    []=>的(_结构,_节点)->_节点{
            []:->的(_节点,波长)->波长,
            ->的(_节点,焦点位置)->焦点位置,
            ->的(_节点,数密度)->数密度
        }->[]{[]=>变量名(,_节点)->的(+操作,变量名)}...
    =>+变量名(,_节点)->+的(+操作,+变量名)...
        ->[标题](_节点,)->+[s]"name"([python]#0,[标题])...
        ->+[code]([python]#0,P代码)->[python]#0(Python,+变量名)
}



## end
#1159, 320:
"""
描述结构:...

"""

+设置变量(_题目,_代码)->+[del](,+设置变量)...
->的(设置变量,描述结构)...

->[]{
    []:->的(_代码,命名空间)->命名空间=>的(命名空间,_名字)=>+[del](,_名字),
    ->+的(_代码,+命名空间)
}->的(_代码,命名空间)...

->+[code]([想],描述结构)->[想](,_题目)...

->操作([想],)...
->[]{
    []=>的(操作,_操作)->_操作(,_物体)->_物体(,)...
    =>+的(命名空间,+变量)->+变量(,_物体)->[m_text](_操作,+变量)
}



## end
#1165, 209:
+[粘贴](,降临规则)

设置变量:...

代码结构:...
代码结构_1D:...
将条目"代码结构"复制为条目"代码结构_1D"
+[新建阅读窗口](,代码结构)
+[新建阅读窗口](,代码结构_1D)

整理代码:...

上传文件夹:...
本地模拟:...
将条目"上传文件夹"复制为条目"本地模拟"

整理结构:...
将'上传文件夹'的"_凭依"替换为"_媒介"
+[新建阅读窗口](,代码结构)


## end
#1166, 520:
"""


"""

+召唤规则(_媒介,召唤星辰)->.(+召唤规则,操作)...
->召唤星辰(,_凭依)...

->[==]"生成Smilei代码"(,召唤星辰)...

->+整理结构(_媒介,_凭依)->+的(操作,+整理结构)...
->[]{
    []:->的(_媒介,状态)->状态->[]{
        []:->[==]"上传"(,状态)...
            ->+上传文件夹(_媒介,_凭依)->+的(操作,+上传文件夹),
        ->[==]"本地"(,状态)...
            ->+本地模拟(_媒介,_凭依)->+的(操作,+本地模拟)
    },
    ->[]
}...

->+整理代码(_媒介,_凭依)->+的(操作,+整理代码)...
->[]{
    []:->."不构造"(召唤星辰,),
    ->."1D"(召唤星辰,)->+代码结构_1D(_媒介,_凭依)->+的(操作,+代码结构_1D),
    ->+代码结构(_媒介,_凭依)->+的(操作,+代码结构)
}...

->+设置变量(_媒介,_凭依)->+的(操作,+设置变量)



## end
#1169, 21:

召唤规则:...
降临规则:...



## end
#1172, 1553:
#!/bin/bash
#----------------------------------------------------
# Sample Slurm job script
#   for TACC Lonestar6 AMD Milan nodes
#
#   *** Serial Job in Normal Queue***
# 
# Last revised: October 22, 2021
#
# Notes:
#
#  -- Copy/edit this script as desired.  Launch by executing
#     "sbatch milan.serial.slurm" on a Lonestar6 login node.
#
#  -- Serial codes run on a single node (upper case N = 1).
#       A serial code ignores the value of lower case n,
#       but slurm needs a plausible value to schedule the job.
#
#  -- Use TACC's launcher utility to run multiple serial 
#       executables at the same time, execute "module load launcher" 
#       followed by "module help launcher".
#----------------------------------------------------

#SBATCH -J testSmilei           # Job name
#SBATCH -o stdout.txt       # Name of stdout output file
#SBATCH -e errlog.txt       # Name of stderr error file
#SBATCH -p normal          # Queue (partition) name
#SBATCH -N 1               # Total # of nodes (must be 1 for serial)
#SBATCH -n 1               # Total # of mpi tasks (should be 1 for serial)
#SBATCH -t 02:40:00        # Run time (hh:mm:ss)
#SBATCH --mail-type=all    # Send email at begin and end of job
#SBATCH -A PHY22016       # Project/Allocation name (req'd if you have more than 1)
#SBATCH --mail-user=chengxiantao@utexas.edu


# Any other commands must follow all #SBATCH directives...
module list
pwd
date

# export OMP_NUM_THREADS=32

# Launch serial code...
echo hello world!
echo $LD_LIBRARY_PATH


$WORK/Smilei/smilei run.py



## end
#1174, 322:
"""
地址::%地址
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""
import numpy as np

%空间
%窗口

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

%粒子
%光束
%外场
%探测
%追踪


DiagPerformances(
    every = 50,
)



## end
#1176, 438:
%{
+[M函数](,M代码)
nt
%}

physics_constant;

dt=dtt/T_r;
dx=dsiz(1)/L_r;
dy=dsiz(2)/L_r;
dz=dsiz(3)/L_r;
if dt>dx
    dt=dx*0.99;
end

nx=W1/dx/L_r;
if nx>128
    npatch_x=128;
else
    npatch_x=4;
end
nx=round(nx/npatch_x)*npatch_x;
Lx=nx*dx;



Ly=L1/L_r;
ny=Ly/dy;

nx=int32(nx);
ny=int32(ny);
npatch_x=int32(npatch_x);

v0=1;
if Dt==-1
    Dt=W1/c;
end
t_tol=Dt+(W0-W1)/c;
nt=int32(t_tol/T_r/dt);
time_start=Dt/T_r;



%{
+[M函数](,M代码)
%}
## end
#1178, 514:

dt = %dt
nx = %nx
Lx = %Lx
Ly = %Ly
npatch_x = %npatch_x

Main(
    geometry = "1Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = %nt*dt,

    cell_length  = [%dx],
    grid_length = [Lx],

    number_of_patches = [npatch_x],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

## end
#1180, 385:
%{
+[M函数](,M代码)
归一化单位::https://smileipic.github.io/Smilei/Understand/units.html
+[打开网页](,归一化单位)

单位定义(html):...
+[新建阅读窗口](,单位定义)
lm_r=800e-9
B_r
%}
pt0=[0,0];
physics_constant;
dx=0.125;
dt=0.99*dx;
ny=40;
npatch_x=128;

omega_r=c/lm_r*2*pi;
T_r=1/omega_r;
L_r=c/omega_r;
E_r=m_e.*c.*omega_r./e;
B_r=m_e.*omega_r./e;
N_r=epsilon_0.*m_e.*omega_r.^(2)./e.^(2);
J_r=c.*e.*N_r;

n_NS_0=0;

## end
#1182, 62:

MovingWindow(
    time_start = %启动时间,
    velocity_x = 1.0
)

## end
#1184, 1736:
"""
模板:...
模板2:...
M代码:...

"""
+框架代码(_媒介,_凭依)->+[del](,+框架代码)...
->的(框架代码,M代码)->的(框架代码,模板)->的(框架代码,模板2)...

->的(_凭依,myscript)->插入(myscript,)->+[修改内容](模板,myscript)...
    ->+的(插入,+运行参数)->+的(插入,+移动窗口)->+的(插入,+输出)...
    ->+[修改内容](默认输出,+输出)...
->的(_凭依,grid)...

->的(_媒介,模拟空间)...
    ->的(模拟空间,宽度#0)->的(模拟空间,长度#0)...
->的(_媒介,窗口)...
    ->的(窗口,宽度#1)->的(窗口,长度#1)->的(窗口,启动时间)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"W0"(+[matlab],宽度#0)->+[.]"W1"(+[matlab],宽度#1)...
->+[.]"L1"(+[matlab],长度#1)->+[.]"Dt"(+[matlab],启动时间)...

->[]{
    []:->的(模拟空间,深度)->深度->+[.]"Depth"(+[matlab],深度),
    ->+[.]"Depth"(+[matlab],长度#1)
}...
->[]{
    []:->的(模拟空间,时间步长)->时间步长->+[.]"dtt"(+[matlab],时间步长),
    ->+[临时文本]"1.39e-16"->+[.]"dtt"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(模拟空间,格点尺寸)->格点尺寸->+[.]"dsiz"(+[matlab],格点尺寸),
    ->+[临时文本]"4.43e-8,1.772e-7,1.772e-7"->+[.]"dsiz"(+[matlab],+[临时文本])
}...

->+[模板文本](grid模板,grid)...
->+[.](+[模板文本],+dx)->+[o](+[matlab],+dx)->+[del](,+dx)...
->+[.](+[模板文本],+dy)->+[o](+[matlab],+dy)->+[del](,+dy)...
->+[.](+[模板文本],+dz)->+[o](+[matlab],+dz)->+[del](,+dz)...
->+[.](+[模板文本],+dt)->+[o](+[matlab],+dt)->+[del](,+dt)...

->+[模板文本](运行模板,+运行参数)...
->+[.](+[模板文本],+nx)->+[o](+[matlab],+nx)->+[del](,+nx)...
->+[.](+[模板文本],+ny)->+[o](+[matlab],+ny)->+[del](,+ny)...
->+[.](+[模板文本],+nz)->+[o](+[matlab],+nz)->+[del](,+nz)...
->+[.](+[模板文本],+nt)->+[o](+[matlab],+nt)->+[del](,+nt)...

->[]{
    []:->+[.]"W0"([matlab],宽度#0)->+[.]"W1"([matlab],宽度#1)...
        ->[matlab]"state=(W0-W1==0);"(Matlab,)...
        ->+[修改内容](单核模板,myscript),
    ->+顺序(+移动窗口,)->+[文本结构_插入尾部](+移动窗口,+节点)...
        ->+[模板文本](窗口模板,+节点)...
        ->+[.](+[模板文本],+启动时间)->+[o]"start_point"(+[matlab],+启动时间)...
        ->+[del](,+启动时间)
}



## end
#1186, 509:
"""
P代码:...
M代码:...
NS模板:...
+[新建阅读窗口](,M代码)

"""

+输出场(_探测,_凭依)->+[del](,+输出场)...
->的(输出场,NS模板)->的(输出场,P代码)...

->的(_凭依,代码)->插入(代码,)->的(插入,探测)...
->+[文本结构_插入尾部](探测,+节点)...

->+[模板文本](NS模板,+节点)->+[.]"探测类型"(+[模板文本],+[临时文本])...
->Python->+[临时文本]"Rho"->[]{
    []:->的(_探测,探测类型)->探测类型(,)...
        ->+[code]([python],P代码)->+[.]"type_txt"([python],探测类型)...
        ->[python](Python,+[临时文本]),
    ->[]
}...
->[]{
    []:->的(_探测,探测间隔)->探测间隔->+[.](+[模板文本],探测间隔),
    ->+[.]"探测间隔"(+[模板文本],+[临时文本])->+[临时文本]"200"
}



## end
#1192, 56:

DiagFields(
    fields = [%探测类型],
    every = %探测间隔,
)

## end
#1195, 1636:
"""
M代码:...
模板:...
+[新建阅读窗口](,M代码)

"""

+操作1(_光束,_凭依)->+[del](,+操作1)...
->的(操作1,M代码)->的(操作1,模板)...

->的(_凭依,代码)->插入(代码,)->的(插入,光束)...
->+[文本结构_插入尾部](光束,+节点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->[]{
    []:->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#3)...
        ->+[.]"pt3"(+[matlab],空间点#3),
    ->+[临时文本]"0,0"->+[.]"pt3"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(_光束,腰宽)->腰宽->+[.]"w_0"(+[matlab],腰宽),
    ->+[.]"w_0"(+[matlab],+[临时文本])->+[临时文本]"20e-6"
}...
->[]{
    []:->的(_光束,展宽)->展宽->+[.]"Dtau"(+[matlab],展宽),
    ->+[.]"Dtau"(+[matlab],+[临时文本])->+[临时文本]"20e-15"
}...
->[]{
    []:->的(_光束,偏振态)->偏振态->+[.]"E_polar0"(+[matlab],偏振态),
    ->+[.]"E_polar0"(+[matlab],+[临时文本])->+[临时文本]"0,1"
}...
->[]{
    []:->的(_光束,a0)->a0->+[.]"A0"(+[matlab],a0),
    ->+[.]"A0"(+[matlab],+[临时文本])->+[临时文本]"1"
}...
->[]{
    []:->的(_光束,波长)->波长->+[.]"lm0"(+[matlab],波长),
    ->+[.]"lm0"(+[matlab],+[临时文本])->+[临时文本]"800e-9"
}...

->+[模板文本](,+[增加内容])->+[增加内容](,+节点)...
->+[code](+[模板文本],模板)...
->+[.](+[模板文本],+waist)->+[o](+[matlab],+waist)->+[del](,+waist)...
->+[.](+[模板文本],+dtau)->+[o](+[matlab],+dtau)->+[del](,+dtau)...
->+[.](+[模板文本],+focus_x)->+[o](+[matlab],+focus_x)->+[del](,+focus_x)...
->+[.](+[模板文本],+focus_y)->+[o](+[matlab],+focus_y)->+[del](,+focus_y)...
->+[.](+[模板文本],+a0)->+[o](+[matlab],+a0)->+[del](,+a0)...
->+[.](+[模板文本],+omega)->+[o](+[matlab],+omega)->+[del](,+omega)...

->+[.](+[模板文本],+p_theta)->+[o](+[matlab],+p_theta)->+[del](,+p_theta)...
->+[.](+[模板文本],+E_phase)->+[o](+[matlab],+E_phase)->+[del](,+E_phase)...

->[]{
    []:->的(_光束,输入边)->输入边->+[.](+[模板文本],输入边),
    ->+[.]"输入边"(+[模板文本],+[临时文本])->+[临时文本]"xmin"
}


## end
#1197, 554:
%{
+[M函数](,M代码)
偏振态::https://smileipic.github.io/Smilei/Use/namelist.html#lasers
偏振态2::https://en.wikipedia.org/wiki/Elliptical_polarization
pt0=[0,0]
%}

waist=w_0/L_r;
dtau=Dtau/T_r;
focus_x=(pt3(1)-pt0(1))/L_r;
focus_y=(pt3(2)-pt0(2))/L_r+Ly/2;

E_polar=abs(E_polar0)/norm(E_polar0);
p_theta=acos(E_polar(1))*sign_1(E_polar(2));

E_Dr=E_polar0(1)/E_polar0(2);
E_Dr=E_Dr/abs(E_Dr);
E_phase=acos(real(E_Dr))*sign_1(imag(E_Dr))/pi*2;
if isnan(E_phase)
    E_phase=0;
end

omega=lm_r/lm0;

if isempty(A0)
    a0=1.;
else
    a0=A0;
end

%{
+[M函数](,M代码)
%}
## end
#1199, 318:
LaserPlanar1D(
    box_side                = "%输入边",
    a0                            = %a0,
    omega                    = %omega,
    polarization_phi  = %p_theta,
    ellipticity               = %E_phase,
    time_envelope     = tgaussian(start=0.0, duration=%dtau*4., fwhm=%dtau, center=%dtau*2., order=2.0, )
)


## end
#1200, 249:
LaserPlanar1D(
    box_side                = "%输入边",
    a0                            = %a0,
    omega                    = %omega,
    polarization_phi  = %p_theta,
    ellipticity               = %E_phase,
    time_envelope     = tconstant(),
)


## end
#1201, 548:
%{
+[M函数](,M代码)
偏振态::https://smileipic.github.io/Smilei/Use/namelist.html#lasers
偏振态2::https://en.wikipedia.org/wiki/Elliptical_polarization
pt3
%}

waist=w_0/L_r;
dtau=Dtau/T_r;
focus_x=(pt3(1)-pt0(1))/L_r;
focus_y=(pt3(2)-pt0(2))/L_r+Ly/2;

E_polar=abs(E_polar0)/norm(E_polar0);
p_theta=acos(E_polar(1))*sign_1(E_polar(2));

E_Dr=E_polar0(1)/E_polar0(2);
E_Dr=E_Dr/abs(E_Dr);
E_phase=acos(real(E_Dr))*sign_1(imag(E_Dr))/pi*2;
if isnan(E_phase)
    E_phase=0;
end

omega=lm_r/lm0;

if isempty(A0)
    a0=1.;
else
    a0=A0;
end

%{
+[M函数](,M代码)
%}
## end
#1204, 1636:
"""
M代码:...
模板:...
+[新建阅读窗口](,M代码)

"""

+操作0(_光束,_凭依)->+[del](,+操作0)...
->的(操作0,M代码)->的(操作0,模板)...

->的(_凭依,代码)->插入(代码,)->的(插入,光束)...
->+[文本结构_插入尾部](光束,+节点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->[]{
    []:->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#3)...
        ->+[.]"pt3"(+[matlab],空间点#3),
    ->+[临时文本]"0,0"->+[.]"pt3"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(_光束,腰宽)->腰宽->+[.]"w_0"(+[matlab],腰宽),
    ->+[.]"w_0"(+[matlab],+[临时文本])->+[临时文本]"20e-6"
}...
->[]{
    []:->的(_光束,展宽)->展宽->+[.]"Dtau"(+[matlab],展宽),
    ->+[.]"Dtau"(+[matlab],+[临时文本])->+[临时文本]"20e-15"
}...
->[]{
    []:->的(_光束,偏振态)->偏振态->+[.]"E_polar0"(+[matlab],偏振态),
    ->+[.]"E_polar0"(+[matlab],+[临时文本])->+[临时文本]"0,1"
}...
->[]{
    []:->的(_光束,a0)->a0->+[.]"A0"(+[matlab],a0),
    ->+[.]"A0"(+[matlab],+[临时文本])->+[临时文本]"1"
}...
->[]{
    []:->的(_光束,波长)->波长->+[.]"lm0"(+[matlab],波长),
    ->+[.]"lm0"(+[matlab],+[临时文本])->+[临时文本]"800e-9"
}...

->+[模板文本](,+[增加内容])->+[增加内容](,+节点)...
->+[code](+[模板文本],模板)...
->+[.](+[模板文本],+waist)->+[o](+[matlab],+waist)->+[del](,+waist)...
->+[.](+[模板文本],+dtau)->+[o](+[matlab],+dtau)->+[del](,+dtau)...
->+[.](+[模板文本],+focus_x)->+[o](+[matlab],+focus_x)->+[del](,+focus_x)...
->+[.](+[模板文本],+focus_y)->+[o](+[matlab],+focus_y)->+[del](,+focus_y)...
->+[.](+[模板文本],+a0)->+[o](+[matlab],+a0)->+[del](,+a0)...
->+[.](+[模板文本],+omega)->+[o](+[matlab],+omega)->+[del](,+omega)...

->+[.](+[模板文本],+p_theta)->+[o](+[matlab],+p_theta)->+[del](,+p_theta)...
->+[.](+[模板文本],+E_phase)->+[o](+[matlab],+E_phase)->+[del](,+E_phase)...

->[]{
    []:->的(_光束,输入边)->输入边->+[.](+[模板文本],输入边),
    ->+[.]"输入边"(+[模板文本],+[临时文本])->+[临时文本]"xmin"
}


## end
#1206, 328:
"""


"""

+召唤规则(_媒介,召唤星辰)->.(+召唤规则,操作)...
->召唤星辰(,_凭依)...

->[==]"生成Smilei代码"(,召唤星辰)...

->+整理结构(_媒介,_凭依)->+的(操作,+整理结构)...
->[]{
    []:->的(_媒介,状态)->状态->[==]"上传"(,状态)...
        ->+上传文件夹(_媒介,_凭依)->+的(操作,+上传文件夹),
    ->[]
}...
->+整理代码(_媒介,_凭依)->+的(操作,+整理代码)...
->+代码结构(_媒介,_凭依)->+的(操作,+代码结构)...
->+设置变量(_媒介,_凭依)->+的(操作,+设置变量)



## end
#1208, 22922:
结构转Smilei代码#0"
召唤规则:...
降临规则:...


"(,)
的#1""(结构转Smilei代码#0,降临规则#2)
降临规则#2"+[粘贴](,降临规则)

设置变量:...
代码结构:...
整理代码:...
上传文件夹:...
整理结构:...
将'上传文件夹'的\"_凭依\"替换为\"_媒介\"
+[新建阅读窗口](,代码结构)

"(,)
的#3""(降临规则#2,整理结构#4)
整理结构#4"\"\"\"

\"\"\"
+整理结构(_媒介,_凭依)->+[del](,+整理结构)...

->的(_凭依,召唤规则)->+[删除结构](,召唤规则)->+[del](,召唤规则)...
->的(_凭依,降临规则)->+[删除结构](,降临规则)->+[del](,降临规则)...
->的(_凭依,命名空间)->+[删除结构](,命名空间)->+[del](,命名空间)



"(,)
的#5""(降临规则#2,上传文件夹#6)
上传文件夹#6"\"\"\"
创建文件夹:...
P代码:...
+[修改天使]

\"\"\"


+上传文件夹(_媒介,_凭依)->+[del](,+上传文件夹)...
->的(上传文件夹,创建文件夹)->的(上传文件夹,P代码)...

->[]{
    []:->的(_媒介,地址)->地址,
    ->+的(_媒介,+地址)->+地址\"/home/xiantao/Documents/PIC/output\"
}->的(_媒介,地址#0)...

->+[模板文本](创建文件夹,+[命令行]#0)->+[命令行]#0->+[显示](,+[命令行]#0)...
    ->+[.](+[模板文本],地址#0)...

->[]{
    []=>的(_凭依,_文件)->_文件=>+[保存文本](,_文件)
}...

->+[python](Python,)->+[code](+[python],P代码)...
->+[.]\"address\"(+[python],地址#0)



"(,)
的#7""(上传文件夹#6,P代码#8)
P代码#8"\"\"\"
记住\"Python\"

scp -r %s xtcheng@ls6.tacc.utexas.edu:$WORK/test_folder

\"\"\"
import subprocess as sp
code=\"scp -r %s xtcheng@stampede2.tacc.utexas.edu:$WORK/sim_folder\"%(address)
t_code=code.split(' ')
p=sp.Popen(t_code)




"(,)
的#9""(上传文件夹#6,创建文件夹#10)
创建文件夹#10"mkdir %地址/"(,)
的#11""(降临规则#2,代码结构#12)
代码结构#12"\"\"\"
描述结构:...
库:...

\"\"\"
+代码结构(_媒介,_凭依)->+[del](,+代码结构)...
->的(代码结构,描述结构)->的(代码结构,库)...

->+[code]([想],描述结构)->[想](_媒介,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]\"媒介\"(+[做],_媒介)
}


"(,)
的#13""(代码结构#12,库#14)
库#14"

整体结构:...
+[新建阅读窗口](,整体结构)

框架代码:...
探测代码:...
+[新建阅读窗口](,探测代码)

电子代码:...
光束代码:...
在选择区域中, 将'框架代码'的\"nt\"替换为\"dt\"
将'光束代码'的\"电子\"替换为\"光束\"

+[新建阅读窗口](,框架代码)

整理光束:...
将'整理光束'的\"_光束\"替换为\"注入方式\"

"(,)
的#15""(库#14,探测代码#16)
探测代码#16"\"\"\"
描述结构:...
库:...
+[新建阅读窗口](,库)
输出

\"\"\"
+探测代码(_探测,_凭依)->+[del](,+探测代码)...
->的(探测代码,描述结构)->的(探测代码,库)...

->.\"媒介\"(+探测代码,_媒介)...

->+[code]([想],描述结构)->[想](,_探测)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_条目,_操作)...
        ->+[做](_探测,_凭依)->+[code](+[做],_条目)->+[.]\"媒介\"(+[做],_媒介)
}



"(,)
的#17""(探测代码#16,库#18)
库#18"+[删除结构](,库)

输出场:...
将'输出场'的\"输出场间隔\"替换为\"探测间隔\"
输出png:...
将条目\"输出场\"复制为条目\"输出png\"

输出能谱:...
将条目\"输出png\"复制为条目\"输出能谱\"

"(,)
的#19""(库#18,输出场#20)
输出场#20"\"\"\"
M代码:...
NS模板:...
+[新建阅读窗口](,M代码)

\"\"\"

+输出场(_探测,_凭依)->+[del](,+输出场)...
->的(输出场,NS模板)...

->的(_凭依,代码)->插入(代码,)->的(插入,探测)...
->+[文本结构_插入尾部](探测,+节点)...

->+[模板文本](NS模板,+节点)...
->[]{
    []:->的(_探测,探测类型)->探测类型->+[.](+[模板文本],探测类型),
    ->+[.]\"探测类型\"(+[模板文本],+[临时文本])->+[临时文本]\"'Rho'\"
}...
->[]{
    []:->的(_探测,探测间隔)->探测间隔->+[.](+[模板文本],探测间隔),
    ->+[.]\"探测间隔\"(+[模板文本],+[临时文本])->+[临时文本]\"200\"
}


"(,)
的#21""(输出场#20,NS模板#22)
NS模板#22"
DiagFields(
    fields = [%探测类型],
    every = %探测间隔,
)
"(,)
的#23""(库#18,输出png#24)
输出png#24""(,)
的#25""(库#18,输出能谱#26)
输出能谱#26""(,)
的#27""(探测代码#16,描述结构#28)
描述结构#28"\"\"\"


\"\"\"
+描述结构(,_探测)->+操作(+描述结构,)...

->的(_探测,探测类型)...
->[]{
    []:->[==]\"png\"(,探测类型)->+输出png(,_探测)->+的(+操作,+输出png),
    ->[==]\"能谱\"(,探测类型)->+输出能谱(,_探测)->+的(+操作,+输出能谱),
    ->+输出场(,_探测)->+的(+操作,+输出场)
}

"(,)
的#29""(库#14,整理光束#30)
整理光束#30"\"\"\"
描述结构:...
库:...

\"\"\"
+整理光束(,_凭依)->+[del](,+整理光束)...
->的(整理光束,描述结构)->的(整理光束,库)...

->的(_凭依,incidentField)->的(incidentField,插入)...
    ->的(插入,注入方式)...

->+[code]([想],描述结构)->[想](注入方式,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]\"凭依\"(+[做],_凭依)
}
"(,)
的#31""(整理光束#30,库#32)
库#32"

操作2:...
操作1:...
操作0:...



"(,)
的#33""(库#32,操作2#34)
操作2#34"\"\"\"


\"\"\"
+操作2(_X,_凭依)->+[del](,+操作2)...

->顺序(_X,)->的(_X,顺序)->+[修改内容]\", \"(,顺序)...
    ->+[修改内容]\"MakeSeq_t<%内容>\"(,_X)...
->+插入(_X,)->+的(_X,+插入)->+的(+插入,+内容)...
->+[左连](顺序,+内容)->+[左连](的,+内容)


"(,)
的#35""(库#32,操作1#36)
操作1#36"\"\"\"


\"\"\"
+操作1(_X,_凭依)->+[del](,+操作1)
"(,)
的#37""(库#32,操作0#38)
操作0#38"\"\"\"


\"\"\"
+操作0(_X,_凭依)->+[del](,+操作0)...

->+[修改内容]\"profiles::None\"(,_X)
"(,)
的#39""(整理光束#30,描述结构#40)
描述结构#40"\"\"\"


\"\"\"

+描述结构(注入方式,_凭依)->+操作(+描述结构,)...

->插入(注入方式,)...
->[]{
    []=>的(插入,_re)->_re\"[XYZ]M\"=>[]:
        ->顺序(_re,)->的(顺序,_节点)->_节点(,_节点1)...
            ->+操作2(_re,_凭依)->+的(+操作,+操作2),
        ->顺序(_re,)...
            ->+操作1(_re,_凭依)->+的(+操作,+操作1),
        ->+操作0(_re,_凭依)->+的(+操作,+操作0)
}
"(,)
的#41""(库#14,整体结构#42)
整体结构#42"\"\"\"
模板:...
myscript:...
M代码:...

\"\"\"
+整体结构(_媒介,_凭依)->+[del](,+整体结构)...
->的(整体结构,M代码)->的(整体结构,模板)->的(整体结构,myscript)...

->[]{
    []:->的(_媒介,地址)->地址,
    ->+的(_媒介,+地址)->+地址\"/home/xiantao/Documents/PIC/output\"
}->的(_媒介,地址#0)->+[修改内容](地址#0,+[临时文本])...

->+的(_凭依,+myscript)->+的(+myscript,+地址#m)...
    ->+[修改内容]\"%s/myscript.txt\"(地址#0,+地址#m)...
->+的(_凭依,+info)->+的(+info,+地址#f)...
    ->+[修改内容]\"%s/info.txt\"(地址#0,+地址#f)->+[修改内容](_媒介,+info)...
->+的(_凭依,+run)->+的(+run,+地址#r)...
    ->+[修改内容]\"%s/run.py\"(地址#0,+地址#r)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->[]{
    []:->的(_场景,参考波长)->参考波长->+[.]\"lm_r\"(+[matlab],参考波长),
    ->+[.]\"lm_r\"(+[matlab],+波长)->+波长\"800e-9\"->+[del](,+波长)
}...

->+[修改内容](myscript,+myscript)...
->+的(_凭依,+代码)->+[修改内容](模板,+代码)...
    ->+[文本结构_插入](+代码,+地址)->+[修改内容](+地址#r,+地址)...
    ->+[文本结构_插入](+代码,+空间)->+[文本结构_插入](+代码,+窗口)...
    ->+[文本结构_插入](+代码,+光束)->+[文本结构_插入](+代码,+粒子)...
    ->+[文本结构_插入](+代码,+外场)...
    ->+[文本结构_插入](+代码,+探测)->+[文本结构_插入](+代码,+追踪)



"(,)
的#43""(整体结构#42,myscript#44)
myscript#44"#!/bin/bash
#----------------------------------------------------
# Sample Slurm job script
#   for TACC Lonestar6 AMD Milan nodes
#
#   *** Serial Job in Normal Queue***
# 
# Last revised: October 22, 2021
#
# Notes:
#
#  -- Copy/edit this script as desired.  Launch by executing
#     \"sbatch milan.serial.slurm\" on a Lonestar6 login node.
#
#  -- Serial codes run on a single node (upper case N = 1).
#       A serial code ignores the value of lower case n,
#       but slurm needs a plausible value to schedule the job.
#
#  -- Use TACC's launcher utility to run multiple serial 
#       executables at the same time, execute \"module load launcher\" 
#       followed by \"module help launcher\".
#----------------------------------------------------

#SBATCH -J testSmilei           # Job name
#SBATCH -o stdout.txt       # Name of stdout output file
#SBATCH -e errlog.txt       # Name of stderr error file
#SBATCH -p normal          # Queue (partition) name
#SBATCH -N 1               # Total # of nodes (must be 1 for serial)
#SBATCH -n 1               # Total # of mpi tasks (should be 1 for serial)
#SBATCH -t 00:15:00        # Run time (hh:mm:ss)
#SBATCH --mail-type=all    # Send email at begin and end of job
#SBATCH -A A-pcsli       # Project/Allocation name (req'd if you have more than 1)
#SBATCH --mail-user=chengxiantao@utexas.edu


# Any other commands must follow all #SBATCH directives...
module list
pwd
date

# export OMP_NUM_THREADS=32

# Launch serial code...
echo hello world!
echo $LD_LIBRARY_PATH


$WORK/Smilei/Smilei/smilei run.py


"(,)
的#45""(整体结构#42,模板#46)
模板#46"\"\"\"
地址::%地址
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

\"\"\"
import numpy as np

%空间
%窗口

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

%粒子
%光束
%外场
%探测
%追踪


DiagPerformances(
    every = 50,
)


"(,)
的#47""(整体结构#42,M代码#48)
M代码#48"%{
+[M函数](,M代码)
归一化单位::https://smileipic.github.io/Smilei/Understand/units.html
+[打开网页](,归一化单位)

单位定义(html):...
+[新建阅读窗口](,单位定义)
lm_r=800e-9
B_r
%}

physics_constant;
dx=0.125;
dt=0.99*dx;
ny=40;
npatch_x=128;

omega_r=c/lm_r*2*pi;
T_r=1/omega_r;
L_r=c/omega_r;
E_r=m_e.*c.*omega_r./e;
B_r=m_e.*omega_r./e;
N_r=epsilon_0.*m_e.*omega_r.^(2)./e.^(2);
J_r=c.*e.*N_r;

n_NS_0=0;
"(,)
的#49""(库#14,电子代码#50)
电子代码#50"\"\"\"
描述结构:...
库:...

\"\"\"
+电子代码(_电子,_凭依)->+[del](,+电子代码)...
->的(电子代码,描述结构)->的(电子代码,库)...

->.\"媒介\"(+电子代码,_媒介)...

->+[code]([想],描述结构)->[想](_电子,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]\"媒介\"(+[做],_媒介)
}


"(,)
的#51""(电子代码#50,描述结构#52)
描述结构#52"\"\"\"


\"\"\"
+描述结构(_电子,_凭依)->+操作(+描述结构,)...

->[]{
    []:->+操作0(_电子,_凭依)->+的(+操作,+操作0)
}

"(,)
的#53""(电子代码#50,库#54)
库#54"

操作0:...

"(,)
的#55""(库#54,操作0#56)
操作0#56"\"\"\"
模板:...
M代码:...
->+[.](+[模板文本],上升沿)->+[.](+[模板文本],宽度)
->的(_电子,上升沿)

\"\"\"
+操作0(_电子,_凭依)->+[del](,+操作0)...
->的(操作0,模板)->的(操作0,M代码)...

->.\"媒介\"(+操作0,_媒介)...
->的(_媒介,模拟空间)->的(模拟空间,宽度)...
->的(_凭依,命名空间)->的(命名空间,变量)...
->变量(,_电子)->的(_电子,数密度)...

->的(_凭依,代码)->插入(代码,)->的(插入,粒子)...
->+[文本结构_插入尾部](粒子,+节点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]\"N0\"(+[matlab],数密度)...
->+[模板文本](模板,+节点)...
->+[.](+[模板文本],+N_e)->+[o](+[matlab],+N_e)->+[del](,+N_e)...
->[]{
    []:->[==](,_电子)->+[.](+[模板文本],变量),
    ->+[.]\"变量\"(+[模板文本],_电子)
}



"(,)
的#57""(操作0#56,模板#58)
模板#58"
Species(
    name = \"%变量\",
    position_initialization = \"regular\",
    momentum_initialization = \"cold\",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = %N_e, 

    mean_velocity = [0., 0., 0.],
    temperature = [0.0],
    pusher = \"boris\",
    time_frozen = 0.0,
    boundary_conditions = [
        [\"remove\", \"remove\"],
        [\"remove\", \"remove\"],
#        [\"periodic\", \"periodic\"],
    ],
)
"(,)
的#59""(操作0#56,M代码#60)
M代码#60"%{
N_r
%}

N_e=N0/N_r;
"(,)
的#61""(库#14,光束代码#62)
光束代码#62"\"\"\"
描述结构:...
库:...

\"\"\"
+光束代码(_光束,_凭依)->+[del](,+光束代码)...
->的(光束代码,描述结构)->的(光束代码,库)...

->.(+光束代码,_媒介)...
->+[code]([想],描述结构)->[想](_光束,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]\"凭依\"(+[做],_凭依)...
        ->+[.]\"媒介\"(+[做],_媒介)
}
"(,)
的#63""(光束代码#62,库#64)
库#64"
操作1:...
将条目\"操作0\"复制为条目\"操作1\"

操作0:...
将'操作0'的\"电子\"替换为\"光束\"
+[新建阅读窗口](,操作0)

"(,)
的#65""(库#64,操作1#66)
操作1#66"\"\"\"
M代码:...
模板:...
+[新建阅读窗口](,M代码)

\"\"\"

+操作1(_光束,_凭依)->+[del](,+操作1)...
->的(操作1,M代码)->的(操作1,模板)...

->的(_凭依,代码)->插入(代码,)->的(插入,光束)...
->+[文本结构_插入尾部](光束,+节点)...
->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#3)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]\"pt3\"(+[matlab],空间点#3)...
->[]{
    []:->的(_光束,腰宽)->腰宽->+[.]\"w_0\"(+[matlab],腰宽),
    ->+[.]\"w_0\"(+[matlab],+[临时文本])->+[临时文本]\"20e-6\"
}...
->[]{
    []:->的(_光束,展宽)->展宽->+[.]\"Dtau\"(+[matlab],展宽),
    ->+[.]\"Dtau\"(+[matlab],+[临时文本])->+[临时文本]\"20e-15\"
}...
->[]{
    []:->的(_光束,偏振态)->偏振态->+[.]\"E_polar0\"(+[matlab],偏振态),
    ->+[.]\"E_polar0\"(+[matlab],+[临时文本])->+[临时文本]\"0,1\"
}...
->[]{
    []:->的(_光束,a0)->a0->+[.]\"A0\"(+[matlab],a0),
    ->+[.]\"A0\"(+[matlab],+[临时文本])->+[临时文本]\"1\"
}...
->[]{
    []:->的(_光束,波长)->波长->+[.]\"lm0\"(+[matlab],波长),
    ->+[.]\"lm0\"(+[matlab],+[临时文本])->+[临时文本]\"800e-9\"
}...

->+[模板文本](,+[增加内容])->+[增加内容](,+节点)...
->+[code](+[模板文本],模板)...
->+[.](+[模板文本],+waist)->+[o](+[matlab],+waist)->+[del](,+waist)...
->+[.](+[模板文本],+dtau)->+[o](+[matlab],+dtau)->+[del](,+dtau)...
->+[.](+[模板文本],+focus_x)->+[o](+[matlab],+focus_x)->+[del](,+focus_x)...
->+[.](+[模板文本],+focus_y)->+[o](+[matlab],+focus_y)->+[del](,+focus_y)...
->+[.](+[模板文本],+a0)->+[o](+[matlab],+a0)->+[del](,+a0)...
->+[.](+[模板文本],+omega)->+[o](+[matlab],+omega)->+[del](,+omega)...

->+[.](+[模板文本],+p_theta)->+[o](+[matlab],+p_theta)->+[del](,+p_theta)...
->+[.](+[模板文本],+E_phase)->+[o](+[matlab],+E_phase)->+[del](,+E_phase)...

->[]{
    []:->的(_光束,输入边)->输入边->+[.](+[模板文本],输入边),
    ->+[.]\"输入边\"(+[模板文本],+[临时文本])->+[临时文本]\"xmin\"
}

"(,)
的#67""(操作1#66,M代码#68)
M代码#68"%{
+[M函数](,M代码)
偏振态::https://smileipic.github.io/Smilei/Use/namelist.html#lasers
偏振态2::https://en.wikipedia.org/wiki/Elliptical_polarization
%}

waist=w_0/L_r;
dtau=Dtau/T_r;
focus_x=(pt3(1)-pt0(1))/L_r;
focus_y=(pt3(2)-pt0(2))/L_r+Ly/2;

E_polar=abs(E_polar0)/norm(E_polar0);
p_theta=acos(E_polar(1))*sign_1(E_polar(2));

E_Dr=E_polar0(1)/E_polar0(2);
E_Dr=E_Dr/abs(E_Dr);
E_phase=acos(real(E_Dr))*sign_1(imag(E_Dr))/pi*2;
if isnan(E_phase)
    E_phase=0;
end

omega=lm_r/lm0;

if isempty(A0)
    a0=1.;
else
    a0=A0;
end

%{
+[M函数](,M代码)
%}"(,)
的#69""(操作1#66,模板#70)
模板#70"LaserGaussian2D(
    box_side                = \"%输入边\",
    a0                            = %a0,
    omega                    = %omega,
    focus                       = [%focus_x, %focus_y],
    waist                       = %waist,
    polarization_phi  = %p_theta,
    ellipticity               = %E_phase,
    time_envelope     = tgaussian(start=0.0, duration=%dtau*4., fwhm=%dtau, center=%dtau*2., order=2.0, )
)

"(,)
的#71""(库#64,操作0#72)
操作0#72"\"\"\"
M代码:...
模板:...
+[新建阅读窗口](,M代码)

\"\"\"

+操作0(_光束,_凭依)->+[del](,+操作0)...
->的(操作0,M代码)->的(操作0,模板)...

->的(_凭依,代码)->插入(代码,)->的(插入,光束)...
->+[文本结构_插入尾部](光束,+节点)...
->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#3)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]\"pt3\"(+[matlab],空间点#3)...
->[]{
    []:->的(_光束,腰宽)->腰宽->+[.]\"w_0\"(+[matlab],腰宽),
    ->+[.]\"w_0\"(+[matlab],+[临时文本])->+[临时文本]\"20e-6\"
}...
->[]{
    []:->的(_光束,展宽)->展宽->+[.]\"Dtau\"(+[matlab],展宽),
    ->+[.]\"Dtau\"(+[matlab],+[临时文本])->+[临时文本]\"20e-15\"
}...
->[]{
    []:->的(_光束,偏振态)->偏振态->+[.]\"E_polar0\"(+[matlab],偏振态),
    ->+[.]\"E_polar0\"(+[matlab],+[临时文本])->+[临时文本]\"0,1\"
}...
->[]{
    []:->的(_光束,a0)->a0->+[.]\"A0\"(+[matlab],a0),
    ->+[.]\"A0\"(+[matlab],+[临时文本])->+[临时文本]\"1\"
}...
->[]{
    []:->的(_光束,波长)->波长->+[.]\"lm0\"(+[matlab],波长),
    ->+[.]\"lm0\"(+[matlab],+[临时文本])->+[临时文本]\"800e-9\"
}...

->+[模板文本](,+[增加内容])->+[增加内容](,+节点)...
->+[code](+[模板文本],模板)...
->+[.](+[模板文本],+waist)->+[o](+[matlab],+waist)->+[del](,+waist)...
->+[.](+[模板文本],+dtau)->+[o](+[matlab],+dtau)->+[del](,+dtau)...
->+[.](+[模板文本],+focus_x)->+[o](+[matlab],+focus_x)->+[del](,+focus_x)...
->+[.](+[模板文本],+focus_y)->+[o](+[matlab],+focus_y)->+[del](,+focus_y)...
->+[.](+[模板文本],+a0)->+[o](+[matlab],+a0)->+[del](,+a0)...
->+[.](+[模板文本],+omega)->+[o](+[matlab],+omega)->+[del](,+omega)...

->+[.](+[模板文本],+p_theta)->+[o](+[matlab],+p_theta)->+[del](,+p_theta)...
->+[.](+[模板文本],+E_phase)->+[o](+[matlab],+E_phase)->+[del](,+E_phase)...

->[]{
    []:->的(_光束,输入边)->输入边->+[.](+[模板文本],输入边),
    ->+[.]\"输入边\"(+[模板文本],+[临时文本])->+[临时文本]\"xmin\"
}

"(,)
的#73""(操作0#72,模板#74)
模板#74"LaserGaussian2D(
    box_side                = \"%输入边\",
    a0                            = %a0,
    omega                    = %omega,
    focus                       = [%focus_x, %focus_y],
    waist                       = %waist,
    polarization_phi  = %p_theta,
    ellipticity               = %E_phase,
    time_envelope     = tconstant(),
)

"(,)
的#75""(操作0#72,M代码#76)
M代码#76"%{
+[M函数](,M代码)
偏振态::https://smileipic.github.io/Smilei/Use/namelist.html#lasers
偏振态2::https://en.wikipedia.org/wiki/Elliptical_polarization
%}

waist=w_0/L_r;
dtau=Dtau/T_r;
focus_x=(pt3(1)-pt0(1))/L_r;
focus_y=(pt3(2)-pt0(2))/L_r+Ly/2;

E_polar=abs(E_polar0)/norm(E_polar0);
p_theta=acos(E_polar(1))*sign_1(E_polar(2));

E_Dr=E_polar0(1)/E_polar0(2);
E_Dr=E_Dr/abs(E_Dr);
E_phase=acos(real(E_Dr))*sign_1(imag(E_Dr))/pi*2;
if isnan(E_phase)
    E_phase=0;
end

omega=lm_r/lm0;

if isempty(A0)
    a0=1.;
else
    a0=A0;
end

%{
+[M函数](,M代码)
%}"(,)
的#77""(光束代码#62,描述结构#78)
描述结构#78"\"\"\"

\"\"\"
+描述结构(_光束,_凭依)->+操作(+描述结构,)...

->_光束->[]{
    []:->的(_光束,展宽)->展宽->[]{
        []:->[==]\"inf\"(,展宽)->+操作0(_光束,_凭依)->+的(+操作,+操作0),
        ->[==]\"Inf\"(,展宽)->+操作0(_光束,_凭依)->+的(+操作,+操作0),
        ->+操作1(_光束,_凭依)->+的(+操作,+操作1)
    },
    ->+操作0(_光束,_凭依)->+的(+操作,+操作0)
}


"(,)
的#79""(库#14,框架代码#80)
框架代码#80"\"\"\"
模板:...
模板2:...
M代码:...
+[新建阅读窗口](,M代码)

保存:...
空间

\"\"\"
+框架代码(_媒介,_凭依)->+[del](,+框架代码)...
->的(框架代码,M代码)->的(框架代码,模板)->的(框架代码,模板2)...

->的(_凭依,代码)->插入(代码,)->的(插入,空间#0)->的(插入,窗口#0)...

->的(_媒介,模拟空间)...
    ->的(模拟空间,宽度#0)->的(模拟空间,长度#0)...
->的(_媒介,窗口)...
    ->的(窗口,宽度#1)->的(窗口,长度#1)->的(窗口,启动时间)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]\"W0\"(+[matlab],宽度#0)->+[.]\"W1\"(+[matlab],宽度#1)...
->+[.]\"L1\"(+[matlab],长度#1)->+[.]\"Dt\"(+[matlab],启动时间)...

->[]{
    []:->的(模拟空间,深度)->深度->+[.]\"Depth\"(+[matlab],深度),
    ->+[.]\"Depth\"(+[matlab],长度#1)
}...
->[]{
    []:->的(模拟空间,时间步长)->时间步长->+[.]\"dtt\"(+[matlab],时间步长),
    ->+[临时文本]\"1.39e-16\"->+[.]\"dtt\"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(模拟空间,格点尺寸)->格点尺寸->+[.]\"dsiz\"(+[matlab],格点尺寸),
    ->+[临时文本]\"4.43e-8,1.772e-7,1.772e-7\"->+[.]\"dsiz\"(+[matlab],+[临时文本])
}...

->+[模板文本](模板,空间#0)...
->+[.](+[模板文本],+dx)->+[o](+[matlab],+dx)->+[del](,+dx)...
->+[.](+[模板文本],+dy)->+[o](+[matlab],+dy)->+[del](,+dy)...
->+[.](+[模板文本],+dz)->+[o](+[matlab],+dz)->+[del](,+dz)...
->+[.](+[模板文本],+dt)->+[o](+[matlab],+dt)->+[del](,+dt)...
->+[.](+[模板文本],+nx)->+[o](+[matlab],+nx)->+[del](,+nx)...
->+[.](+[模板文本],+ny)->+[o](+[matlab],+ny)->+[del](,+ny)...
->+[.](+[模板文本],+nz)->+[o](+[matlab],+nz)->+[del](,+nz)...
->+[.](+[模板文本],+nt)->+[o](+[matlab],+nt)->+[del](,+nt)...
->+[.](+[模板文本],+npatch_x)->+[o](+[matlab],+npatch_x)->+[del](,+npatch_x)...
->+[.](+[模板文本],+Lx)->+[o](+[matlab],+Lx)->+[del](,+Lx)...
->+[.](+[模板文本],+Ly)->+[o](+[matlab],+Ly)->+[del](,+Ly)...

->[]{
    []:->+[.]\"W0\"([matlab],宽度#0)->+[.]\"W1\"([matlab],宽度#1)...
        ->[matlab]\"state=(W0-W1==0);\"(Matlab,),

    ->+[模板文本](模板2,窗口#0)...
        ->+[.](+[模板文本],+启动时间)->+[o]\"time_start\"(+[matlab],+启动时间)...
        ->+[del](,+启动时间)
}


"(,)
的#81""(框架代码#80,M代码#82)
M代码#82"%{
+[M函数](,M代码)
u0
%}

physics_constant;

dt=dtt/T_r;
dx=dsiz(1)/L_r;
dy=dsiz(2)/L_r;
dz=dsiz(3)/L_r;

npatch_x=128;

nx=W1/dx/L_r;
nx=round(nx/npatch_x)*npatch_x;
Lx=nx*dx;

Ly=L1/L_r;
ny=Ly/dy;

nx=int32(nx);
ny=int32(ny);
npatch_x=int32(npatch_x);

v0=1;
t_tol=Dt+(W0-W1)/c;
nt=int32(t_tol/T_r/dt);
time_start=Dt/T_r;



%{
+[M函数](,M代码)
%}"(,)
的#83""(框架代码#80,模板#84)
模板#84"
dt = %dt
nx = %nx
Lx = %Lx
Ly = %Ly
npatch_x = %npatch_x

Main(
    geometry = \"2Dcartesian\",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(%nt)*dt,

    cell_length  = [%dx, %dy],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        [\"silver-muller\",\"silver-muller\"],
        [\"silver-muller\",\"silver-muller\"],
#        [\"periodic\", \"periodic\"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)
"(,)
的#85""(框架代码#80,模板2#86)
模板2#86"
MovingWindow(
    time_start = %启动时间,
    velocity_x = 1.0
)
"(,)
的#87""(框架代码#80,保存#88)
保存#88"\"\"\"
模板:...
模板2:...
M代码:...

\"\"\"
+框架代码(_媒介,_凭依)->+[del](,+框架代码)...
->的(框架代码,M代码)->的(框架代码,模板)->的(框架代码,模板2)...

->的(_凭依,myscript)->插入(myscript,)->+[修改内容](模板,myscript)...
    ->+的(插入,+运行参数)->+的(插入,+移动窗口)->+的(插入,+输出)...
    ->+[修改内容](默认输出,+输出)...
->的(_凭依,grid)...

->的(_媒介,模拟空间)...
    ->的(模拟空间,宽度#0)->的(模拟空间,长度#0)...
->的(_媒介,窗口)...
    ->的(窗口,宽度#1)->的(窗口,长度#1)->的(窗口,启动时间)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]\"W0\"(+[matlab],宽度#0)->+[.]\"W1\"(+[matlab],宽度#1)...
->+[.]\"L1\"(+[matlab],长度#1)->+[.]\"Dt\"(+[matlab],启动时间)...

->[]{
    []:->的(模拟空间,深度)->深度->+[.]\"Depth\"(+[matlab],深度),
    ->+[.]\"Depth\"(+[matlab],长度#1)
}...
->[]{
    []:->的(模拟空间,时间步长)->时间步长->+[.]\"dtt\"(+[matlab],时间步长),
    ->+[临时文本]\"1.39e-16\"->+[.]\"dtt\"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(模拟空间,格点尺寸)->格点尺寸->+[.]\"dsiz\"(+[matlab],格点尺寸),
    ->+[临时文本]\"4.43e-8,1.772e-7,1.772e-7\"->+[.]\"dsiz\"(+[matlab],+[临时文本])
}...

->+[模板文本](grid模板,grid)...
->+[.](+[模板文本],+dx)->+[o](+[matlab],+dx)->+[del](,+dx)...
->+[.](+[模板文本],+dy)->+[o](+[matlab],+dy)->+[del](,+dy)...
->+[.](+[模板文本],+dz)->+[o](+[matlab],+dz)->+[del](,+dz)...
->+[.](+[模板文本],+dt)->+[o](+[matlab],+dt)->+[del](,+dt)...

->+[模板文本](运行模板,+运行参数)...
->+[.](+[模板文本],+nx)->+[o](+[matlab],+nx)->+[del](,+nx)...
->+[.](+[模板文本],+ny)->+[o](+[matlab],+ny)->+[del](,+ny)...
->+[.](+[模板文本],+nz)->+[o](+[matlab],+nz)->+[del](,+nz)...
->+[.](+[模板文本],+nt)->+[o](+[matlab],+nt)->+[del](,+nt)...

->[]{
    []:->+[.]\"W0\"([matlab],宽度#0)->+[.]\"W1\"([matlab],宽度#1)...
        ->[matlab]\"state=(W0-W1==0);\"(Matlab,)...
        ->+[修改内容](单核模板,myscript),
    ->+顺序(+移动窗口,)->+[文本结构_插入尾部](+移动窗口,+节点)...
        ->+[模板文本](窗口模板,+节点)...
        ->+[.](+[模板文本],+启动时间)->+[o]\"start_point\"(+[matlab],+启动时间)...
        ->+[del](,+启动时间)
}


"(,)
的#89""(代码结构#12,描述结构#90)
描述结构#90"\"\"\"


\"\"\"
+描述结构(_媒介,_凭依)->+操作(+描述结构,)...

->[]{
    []=>的(_媒介,_实体)->_实体=>[]:
        ->的(_实体,数密度)...
            ->+电子代码(_实体,_凭依)->+的(+操作,+电子代码),
        ->的(_实体,探测间隔)...
            ->+探测代码(_实体,_凭依)->+的(+操作,+探测代码),
        ->的(_实体,a0)->[]{[]=>[==]\"0\"(,a0)}...
            ->+光束代码(_实体,_凭依)->+的(+操作,+光束代码),
        ->[]
}...

->+框架代码(_媒介,_凭依)->+的(+操作,+框架代码)...
->+整体结构(_媒介,_凭依)->+的(+操作,+整体结构)

"(,)
的#91""(降临规则#2,整理代码#92)
整理代码#92"\"\"\"
内容:...

->+[修改内容](内容,_凭依)...
=>的(_凭依,_节点)->的(_节点,地址)=>+[结构转文本](_节点,_节点)...
    ->+[删除结构](,_节点)->+[有](_节点,+地址)->[m_text](地址,+地址)

\"\"\"
+整理代码(_媒介,_凭依)->+[del](,+整理代码)...
->的(整理代码,内容)...

->的(_凭依,run)->的(_凭依,代码)->+[结构转文本](代码,run)...
->+[修改内容](内容,_凭依)...
->+[删除结构](,代码)->+[del](,代码)


"(,)
的#93""(整理代码#92,内容#94)
内容#94"
run:...
info:...
myscript:...

+[保存文本](,myscript)

"(,)
的#95""(降临规则#2,设置变量#96)
设置变量#96"\"\"\"
描述结构:...

\"\"\"

+设置变量(_题目,_代码)->+[del](,+设置变量)...
->的(设置变量,描述结构)...

->[]{
    []:->的(_代码,命名空间)->命名空间=>的(命名空间,_名字)=>+[del](,_名字),
    ->+的(_代码,+命名空间)
}->的(_代码,命名空间)...

->+[code]([想],描述结构)->[想](,_题目)...

->操作([想],)...
->[]{
    []=>的(操作,_操作)->_操作(,_物体)->_物体(,)...
    =>+的(命名空间,+变量)->+变量(,_物体)->[m_text](_操作,+变量)
}


"(,)
的#97""(设置变量#96,描述结构#98)
描述结构#98"\"\"\"
P代码:...

\"\"\"

+描述结构(,_结构)->+操作(+描述结构,)...
->的(描述结构,P代码)...

->[python]\"var_num={}
state=True\"(Python,)...

->[]{
    []=>的(_结构,_节点)->_节点{
            []:->的(_节点,波长)->波长,
            ->的(_节点,焦点位置)->焦点位置,
            ->的(_节点,数密度)->数密度
        }->[]{[]=>变量名(,_节点)->的(+操作,变量名)}...
    =>+变量名(,_节点)->+的(+操作,+变量名)...
        ->[标题](_节点,)->+[s]\"name\"([python]#0,[标题])...
        ->+[code]([python]#0,P代码)->[python]#0(Python,+变量名)
}


"(,)
的#99""(描述结构#98,P代码#100)
P代码#100"\"\"\"
记住\"Python\"
Nini, 打开公式分析器(文件)

a=re.search(\"r\",\"ere\")
print(a)
print(re.match(\"[a-zA-Z_0-9]+\",\"212\")==None)

\"\"\"

import re

print(name,var_num)

type=\"_varb\"
if \"探针\" in name:
    type=\"_probe\"
elif \"泵光\" in name or \"驱动光\" in name:
    type=\"_pump\"
elif \"光\" in name:
    type=\"_light\"
elif \"电子\" in name:
    type=\"_plasma\"
elif re.match(\"[a-zA-Z_0-9]+\",name)!=None:
    type=name


n_v=var_num.get(type,0)+1
var_num.update({type:n_v})

ans=\"%s_%d\"%(type,n_v)
"(,)
的#101""(结构转Smilei代码#0,召唤规则#102)
召唤规则#102"\"\"\"


\"\"\"

+召唤规则(_媒介,召唤星辰)->.(+召唤规则,操作)...
->召唤星辰(,_凭依)...

->[==]\"生成Smilei代码\"(,召唤星辰)...

->+整理结构(_媒介,_凭依)->+的(操作,+整理结构)...
->[]{
    []:->的(_媒介,状态)->状态->[==]\"上传\"(,状态)...
        ->+上传文件夹(_媒介,_凭依)->+的(操作,+上传文件夹),
    ->[]
}...
->+整理代码(_媒介,_凭依)->+的(操作,+整理代码)...
->+代码结构(_媒介,_凭依)->+的(操作,+代码结构)...
->+设置变量(_媒介,_凭依)->+的(操作,+设置变量)


"(,)

## end
#1210, 45:
%{
N_r
%}

N_e=N0/N_r;
v=beta*v0/norm(v0);



## end
#1212, 208:
"""
记住"Python"
print('a,b'.split(','))
print(type_txt,list_txt)

"""

list_txt=type_txt.split(',')
for i in range(len(list_txt)):
    txt=list_txt[i]
    list_txt[i]=" '%s'"%(txt)
ans=','.join(list_txt)+" "


## end
#1214, 788:
地址::/home/xiantao/Documents/sim_output/Smilei_out/RFB_1D
运行指令"nautilus /home/xiantao/Documents/sim_output/Smilei_out/FDH_1"
状态::
状态::上传


代码:...
+[删除结构](,代码)->+[召唤星辰]"生成Smilei代码"(结构场景,代码)
+[删除结构](,代码)->+[召唤星辰]"生成Smilei代码"(结构场景,代码)->+[1D](+[召唤星辰],)



有探测场
探测场的探测类型是"Ex,Ey,Ez,Bx,By,Bz,Jx,Jy,Jz,Rho"
探测场的探测间隔是"500"

参考波长::800e-9
有模拟空间和窗口
有探测光, 电子和正电子
有什么

模拟空间是长方形(600e-6,80e-6)
模拟空间的格点尺寸是"1.5e-8,20.e-7,20.e-7"

窗口是长方形(100e-6,80e-6)
窗口的启动时间是"300e-15"
窗口的速度是"0.999"

电子的数密度是"1e25"
电子的速度方向是"1,0.5,0.5"
电子的beta是"0.2"

正电子的数密度是"1e25"
正电子的电荷是"1"
正电子的速度方向是"1,0.5,0.5"
正电子的beta是"0.2"

探测光有什么
探测光的a0是"0.01"
探测光的波长是"873e-9"
探测光的展宽是"inf"
探测光的腰宽是"20e-6"
探测光的偏振是(1,1)
探测光的焦点位置是A

A::
A在(40e-6,0)


模拟动画:...
+[召唤星辰]"生成PIC一维动画"(结构场景,模拟动画)->+[M函数](,模拟动画)
+[召唤星辰]"生成PIC预览动画"(结构场景,模拟动画)->+[M函数](,模拟动画)





## end
#1216, 6:
800e-9
## end
#1227, 36:
-4e-05, 4e-05, 4e-05, -4e-05, -4e-05
## end
#1229, 29:
0.0, 0.0, 0.0006, 0.0006, 0.0
## end
#1231, 8:
0.0, 0.0
## end
#1233, 6:
0.0006
## end
#1235, 5:
8e-05
## end
#1237, 3:
多边形
## end
#1238, 3:
长方形
## end
#1241, 20:
1.5e-8,20.e-7,20.e-7
## end
#1242, 36:
-4e-05, 4e-05, 4e-05, -4e-05, -4e-05
## end
#1244, 29:
0.0, 0.0, 0.0001, 0.0001, 0.0
## end
#1246, 8:
0.0, 0.0
## end
#1248, 6:
0.0001
## end
#1250, 5:
8e-05
## end
#1252, 3:
多边形
## end
#1253, 3:
长方形
## end
#1256, 7:
300e-15
## end
#1258, 5:
0.999
## end
#1260, 4:
1e25
## end
#1262, 9:
1,0.5,0.5
## end
#1264, 3:
0.2
## end
#1266, 4:
1e25
## end
#1268, 9:
1,0.5,0.5
## end
#1270, 3:
0.2
## end
#1272, 1:
1
## end
#1274, 6:
873e-9
## end
#1276, 3:
inf
## end
#1278, 5:
20e-6
## end
#1280, 3:
1,1
## end
#1283, 10:
4e-05, 0.0
## end
#1288, 1795:
%{
+[M函数](,模拟动画)
%}


physics_constant;
lm_0=800e-9;
lm_r=lm_0;

omega_r=c/lm_r*2*pi;
T_r=1/omega_r;
L_r=c/omega_r;

v=0.999*c;
t0=300e-15;
ts=0;
Nt=100;
pt0=[0.0, 0.0];
pt1=[0.0, 0.0];
L0=8e-05;
L1=8e-05;
W0=0.0006;
W1=0.0001;

DW=0.0006-0.0001;
Dt=DW/v;
if v==0
    Dt=W1/c;
end
t=linspace(0,t0+Dt+ts,Nt);
x1=0;
x=linspace(pt0(1),pt0(1)+W0,10000);

%代码
edge_plasma_2=0;
left_edge=edge_plasma_2*3;
right_edge=W0-edge_plasma_2*3;

n_plasma_2=ones(size(x));
z=x;
n_plasma_2(z<left_edge)=exp(-(z(z<left_edge)-left_edge).^2/edge_plasma_2^2);
n_plasma_2(z>right_edge)=exp(-(z(z>right_edge)-right_edge).^2/edge_plasma_2^2);

%代码
edge_plasma_1=0;
left_edge=edge_plasma_1*3;
right_edge=W0-edge_plasma_1*3;

n_plasma_1=ones(size(x));
z=x;
n_plasma_1(z<left_edge)=exp(-(z(z<left_edge)-left_edge).^2/edge_plasma_1^2);
n_plasma_1(z>right_edge)=exp(-(z(z>right_edge)-right_edge).^2/edge_plasma_1^2);

omega_light_1=2*pi*c/873e-9;
focus_light_1=[4e-05, 0.0];

if isnan(nan)
    init_light_1=0;
else
    init_light_1=focus_light_1(1)-nan;
end

% Continus beam
f_light_1=@(t)cos(t*omega_light_1).*(sign(-t)+1)/2;



clf
hold on

axis([pt0(1),pt0(1)+W0,0,1.2])


patch([x,x(1)],[n_plasma_2,n_plasma_2(1)],[0,0,1],'faceAlpha',0.1)
plot(x,n_plasma_2,'b','lineWidth',2)
patch([x,x(1)],[n_plasma_1,n_plasma_1(1)],[0,0,1],'faceAlpha',0.1)
plot(x,n_plasma_1,'b','lineWidth',2)
y=f_light_1((x-init_light_1)/c);
y=real(y)/max(abs(y))*0.4+0.6;
h_light_1=plot(x,y);


for i=1:length(t)

if t(i)>t0 && t(i)<t0+Dt
    x1=v*(t(i)-t0);
end

axis([pt0(1)+x1,pt0(1)+x1+W1,0,1.2])
% axis([pt0(1),pt0(1)+W0,pt0(2)-L0,pt0(2)+L0])

x_t=x-init_light_1-t(i)*c;
y=f_light_1(x_t/c);
y=real(y)/max(abs(y))*0.4+0.6;
h_light_1.YData=y;


title(sprintf('T=%.2f fs, L=%.2f um',t(i)/1e-15,t(i)/1e-6*c))
pause(0.03)

end


%{
+[M函数](,模拟动画)
%}
## end
#1290, 4:
0.01
## end
#1292, 52:

run:...
info:...
myscript:...

+[保存文本](,myscript)


## end
#1293, 52:
/home/xiantao/Documents/sim_output/Smilei_out/RFB_1D
## end
#1296, 461:
"""


"""
+描述结构(_媒介,_凭依)->+操作(+描述结构,)...

->[]{
    []=>的(_媒介,_实体)->_实体=>[]:
        ->的(_实体,数密度)...
            ->+电子代码(_实体,_凭依)->+的(+操作,+电子代码),
        ->的(_实体,场强)...
            ->+外场代码(_实体,_凭依)->+的(+操作,+外场代码),
        ->的(_实体,探测间隔)...
            ->+探测代码(_实体,_凭依)->+的(+操作,+探测代码),
        ->的(_实体,a0)->[]{[]=>[==]"0"(,a0)}...
            ->+光束代码(_实体,_凭依)->+的(+操作,+光束代码),
        ->[]
}...

->+框架代码(_媒介,_凭依)->+的(+操作,+框架代码)...
->+整体结构(_媒介,_凭依)->+的(+操作,+整体结构)


## end
#1297, 1736:
"""
模板:...
模板2:...
M代码:...

"""
+框架代码(_媒介,_凭依)->+[del](,+框架代码)...
->的(框架代码,M代码)->的(框架代码,模板)->的(框架代码,模板2)...

->的(_凭依,myscript)->插入(myscript,)->+[修改内容](模板,myscript)...
    ->+的(插入,+运行参数)->+的(插入,+移动窗口)->+的(插入,+输出)...
    ->+[修改内容](默认输出,+输出)...
->的(_凭依,grid)...

->的(_媒介,模拟空间)...
    ->的(模拟空间,宽度#0)->的(模拟空间,长度#0)...
->的(_媒介,窗口)...
    ->的(窗口,宽度#1)->的(窗口,长度#1)->的(窗口,启动时间)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"W0"(+[matlab],宽度#0)->+[.]"W1"(+[matlab],宽度#1)...
->+[.]"L1"(+[matlab],长度#1)->+[.]"Dt"(+[matlab],启动时间)...

->[]{
    []:->的(模拟空间,深度)->深度->+[.]"Depth"(+[matlab],深度),
    ->+[.]"Depth"(+[matlab],长度#1)
}...
->[]{
    []:->的(模拟空间,时间步长)->时间步长->+[.]"dtt"(+[matlab],时间步长),
    ->+[临时文本]"1.39e-16"->+[.]"dtt"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(模拟空间,格点尺寸)->格点尺寸->+[.]"dsiz"(+[matlab],格点尺寸),
    ->+[临时文本]"4.43e-8,1.772e-7,1.772e-7"->+[.]"dsiz"(+[matlab],+[临时文本])
}...

->+[模板文本](grid模板,grid)...
->+[.](+[模板文本],+dx)->+[o](+[matlab],+dx)->+[del](,+dx)...
->+[.](+[模板文本],+dy)->+[o](+[matlab],+dy)->+[del](,+dy)...
->+[.](+[模板文本],+dz)->+[o](+[matlab],+dz)->+[del](,+dz)...
->+[.](+[模板文本],+dt)->+[o](+[matlab],+dt)->+[del](,+dt)...

->+[模板文本](运行模板,+运行参数)...
->+[.](+[模板文本],+nx)->+[o](+[matlab],+nx)->+[del](,+nx)...
->+[.](+[模板文本],+ny)->+[o](+[matlab],+ny)->+[del](,+ny)...
->+[.](+[模板文本],+nz)->+[o](+[matlab],+nz)->+[del](,+nz)...
->+[.](+[模板文本],+nt)->+[o](+[matlab],+nt)->+[del](,+nt)...

->[]{
    []:->+[.]"W0"([matlab],宽度#0)->+[.]"W1"([matlab],宽度#1)...
        ->[matlab]"state=(W0-W1==0);"(Matlab,)...
        ->+[修改内容](单核模板,myscript),
    ->+顺序(+移动窗口,)->+[文本结构_插入尾部](+移动窗口,+节点)...
        ->+[模板文本](窗口模板,+节点)...
        ->+[.](+[模板文本],+启动时间)->+[o]"start_point"(+[matlab],+启动时间)...
        ->+[del](,+启动时间)
}



## end
#1298, 62:

MovingWindow(
    time_start = %启动时间,
    velocity_x = 1.0
)

## end
#1299, 574:

dt = %dt
nx = %nx
Lx = %Lx
Ly = %Ly
npatch_x = %npatch_x

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(%nt)*dt,

    cell_length  = [%dx, %dy],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)

## end
#1300, 436:
%{
+[M函数](,M代码)
u0
%}

physics_constant;

dt=dtt/T_r;
dx=dsiz(1)/L_r;
dy=dsiz(2)/L_r;
dz=dsiz(3)/L_r;

dx_t=dx*dy/(dx+dy);
if dt>dx_t
    dt=dx_t*0.99;
end


nx=W1/dx/L_r;
if nx>128
    npatch_x=128;
else
    npatch_x=4;
end
nx=round(nx/npatch_x)*npatch_x;
Lx=nx*dx;


Ly=L1/L_r;
ny=Ly/dy;

nx=int32(nx);
ny=int32(ny);
npatch_x=int32(npatch_x);

v0=1;
t_tol=Dt+(W0-W1)/c;
nt=int32(t_tol/T_r/dt);
time_start=Dt/T_r;



%{
+[M函数](,M代码)
%}
## end
#1305, 1738:
"""
模板:...
模板2:...
M代码:...
+[新建阅读窗口](,M代码)

保存:...
dtt

"""
+框架代码(_媒介,_凭依)->+[del](,+框架代码)...
->的(框架代码,M代码)->的(框架代码,模板)->的(框架代码,模板2)...

->的(_凭依,代码)->插入(代码,)->的(插入,空间#0)->的(插入,窗口#0)...

->的(_媒介,模拟空间)...
    ->的(模拟空间,宽度#0)->的(模拟空间,长度#0)...
->的(_媒介,窗口)...
    ->的(窗口,宽度#1)->的(窗口,长度#1)->的(窗口,启动时间)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"W0"(+[matlab],宽度#0)->+[.]"W1"(+[matlab],宽度#1)...
->+[.]"L1"(+[matlab],长度#1)->+[.]"Dt"(+[matlab],启动时间)...

->[]{
    []:->的(模拟空间,深度)->深度->+[.]"Depth"(+[matlab],深度),
    ->+[.]"Depth"(+[matlab],长度#1)
}...
->[]{
    []:->的(模拟空间,时间步长)->时间步长->+[.]"dtt"(+[matlab],时间步长),
    ->+[临时文本]"1.39e-16"->+[.]"dtt"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(模拟空间,格点尺寸)->格点尺寸->+[.]"dsiz"(+[matlab],格点尺寸),
    ->+[临时文本]"4.43e-8,1.772e-7,1.772e-7"->+[.]"dsiz"(+[matlab],+[临时文本])
}...

->+[模板文本](模板,空间#0)...
->+[.](+[模板文本],+dx)->+[o](+[matlab],+dx)->+[del](,+dx)...
->+[.](+[模板文本],+dy)->+[o](+[matlab],+dy)->+[del](,+dy)...
->+[.](+[模板文本],+dz)->+[o](+[matlab],+dz)->+[del](,+dz)...
->+[.](+[模板文本],+dt)->+[o](+[matlab],+dt)->+[del](,+dt)...
->+[.](+[模板文本],+nx)->+[o](+[matlab],+nx)->+[del](,+nx)...
->+[.](+[模板文本],+ny)->+[o](+[matlab],+ny)->+[del](,+ny)...
->+[.](+[模板文本],+nz)->+[o](+[matlab],+nz)->+[del](,+nz)...
->+[.](+[模板文本],+nt)->+[o](+[matlab],+nt)->+[del](,+nt)...
->+[.](+[模板文本],+npatch_x)->+[o](+[matlab],+npatch_x)->+[del](,+npatch_x)...
->+[.](+[模板文本],+Lx)->+[o](+[matlab],+Lx)->+[del](,+Lx)...
->+[.](+[模板文本],+Ly)->+[o](+[matlab],+Ly)->+[del](,+Ly)...

->[]{
    []:->+[.]"W0"([matlab],宽度#0)->+[.]"W1"([matlab],宽度#1)...
        ->[matlab]"state=(W0-W1==0);"(Matlab,),

    ->+[模板文本](模板2,窗口#0)...
        ->+[.](+[模板文本],+启动时间)->+[o]"time_start"(+[matlab],+启动时间)...
        ->+[del](,+启动时间)
}



## end
#1306, 276:
"""

"""
+描述结构(_光束,_凭依)->+操作(+描述结构,)...

->_光束->[]{
    []:->的(_光束,展宽)->展宽->[]{
        []:->[==]"inf"(,展宽)->+操作0(_光束,_凭依)->+的(+操作,+操作0),
        ->[==]"Inf"(,展宽)->+操作0(_光束,_凭依)->+的(+操作,+操作0),
        ->+操作1(_光束,_凭依)->+的(+操作,+操作1)
    },
    ->+操作0(_光束,_凭依)->+的(+操作,+操作0)
}



## end
#1307, 544:
%{
+[M函数](,M代码)
偏振态::https://smileipic.github.io/Smilei/Use/namelist.html#lasers
偏振态2::https://en.wikipedia.org/wiki/Elliptical_polarization
%}

waist=w_0/L_r;
dtau=Dtau/T_r;
focus_x=(pt3(1)-pt0(1))/L_r;
focus_y=(pt3(2)-pt0(2))/L_r+Ly/2;

E_polar=abs(E_polar0)/norm(E_polar0);
p_theta=acos(E_polar(1))*sign_1(E_polar(2));

E_Dr=E_polar0(1)/E_polar0(2);
E_Dr=E_Dr/abs(E_Dr);
E_phase=acos(real(E_Dr))*sign_1(imag(E_Dr))/pi*2;
if isnan(E_phase)
    E_phase=0;
end

omega=lm_r/lm0;

if isempty(A0)
    a0=1.;
else
    a0=A0;
end

%{
+[M函数](,M代码)
%}
## end
#1308, 349:
LaserGaussian2D(
    box_side                = "%输入边",
    a0                            = %a0,
    omega                    = %omega,
    focus                       = [%focus_x, %focus_y],
    waist                       = %waist,
    polarization_phi  = %p_theta,
    ellipticity               = %E_phase,
    time_envelope     = tconstant(),
)


## end
#1311, 1563:
"""
M代码:...
模板:...
+[新建阅读窗口](,M代码)

"""

+操作0(_光束,_凭依)->+[del](,+操作0)...
->的(操作0,M代码)->的(操作0,模板)...

->的(_凭依,代码)->插入(代码,)->的(插入,光束)...
->+[文本结构_插入尾部](光束,+节点)...
->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#3)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"pt3"(+[matlab],空间点#3)...
->[]{
    []:->的(_光束,腰宽)->腰宽->+[.]"w_0"(+[matlab],腰宽),
    ->+[.]"w_0"(+[matlab],+[临时文本])->+[临时文本]"20e-6"
}...
->[]{
    []:->的(_光束,展宽)->展宽->+[.]"Dtau"(+[matlab],展宽),
    ->+[.]"Dtau"(+[matlab],+[临时文本])->+[临时文本]"20e-15"
}...
->[]{
    []:->的(_光束,偏振态)->偏振态->+[.]"E_polar0"(+[matlab],偏振态),
    ->+[.]"E_polar0"(+[matlab],+[临时文本])->+[临时文本]"0,1"
}...
->[]{
    []:->的(_光束,a0)->a0->+[.]"A0"(+[matlab],a0),
    ->+[.]"A0"(+[matlab],+[临时文本])->+[临时文本]"1"
}...
->[]{
    []:->的(_光束,波长)->波长->+[.]"lm0"(+[matlab],波长),
    ->+[.]"lm0"(+[matlab],+[临时文本])->+[临时文本]"800e-9"
}...

->+[模板文本](,+[增加内容])->+[增加内容](,+节点)...
->+[code](+[模板文本],模板)...
->+[.](+[模板文本],+waist)->+[o](+[matlab],+waist)->+[del](,+waist)...
->+[.](+[模板文本],+dtau)->+[o](+[matlab],+dtau)->+[del](,+dtau)...
->+[.](+[模板文本],+focus_x)->+[o](+[matlab],+focus_x)->+[del](,+focus_x)...
->+[.](+[模板文本],+focus_y)->+[o](+[matlab],+focus_y)->+[del](,+focus_y)...
->+[.](+[模板文本],+a0)->+[o](+[matlab],+a0)->+[del](,+a0)...
->+[.](+[模板文本],+omega)->+[o](+[matlab],+omega)->+[del](,+omega)...

->+[.](+[模板文本],+p_theta)->+[o](+[matlab],+p_theta)->+[del](,+p_theta)...
->+[.](+[模板文本],+E_phase)->+[o](+[matlab],+E_phase)->+[del](,+E_phase)...

->[]{
    []:->的(_光束,输入边)->输入边->+[.](+[模板文本],输入边),
    ->+[.]"输入边"(+[模板文本],+[临时文本])->+[临时文本]"xmin"
}


## end
#1312, 418:
LaserGaussian2D(
    box_side                = "%输入边",
    a0                            = %a0,
    omega                    = %omega,
    focus                       = [%focus_x, %focus_y],
    waist                       = %waist,
    polarization_phi  = %p_theta,
    ellipticity               = %E_phase,
    time_envelope     = tgaussian(start=0.0, duration=%dtau*4., fwhm=%dtau, center=%dtau*2., order=2.0, )
)


## end
#1313, 554:
%{
+[M函数](,M代码)
偏振态::https://smileipic.github.io/Smilei/Use/namelist.html#lasers
偏振态2::https://en.wikipedia.org/wiki/Elliptical_polarization
pt0=[0,0]
%}

waist=w_0/L_r;
dtau=Dtau/T_r;
focus_x=(pt3(1)-pt0(1))/L_r;
focus_y=(pt3(2)-pt0(2))/L_r+Ly/2;

E_polar=abs(E_polar0)/norm(E_polar0);
p_theta=acos(E_polar(1))*sign_1(E_polar(2));

E_Dr=E_polar0(1)/E_polar0(2);
E_Dr=E_Dr/abs(E_Dr);
E_phase=acos(real(E_Dr))*sign_1(imag(E_Dr))/pi*2;
if isnan(E_phase)
    E_phase=0;
end

omega=lm_r/lm0;

if isempty(A0)
    a0=1.;
else
    a0=A0;
end

%{
+[M函数](,M代码)
%}
## end
#1316, 1563:
"""
M代码:...
模板:...
+[新建阅读窗口](,M代码)

"""

+操作1(_光束,_凭依)->+[del](,+操作1)...
->的(操作1,M代码)->的(操作1,模板)...

->的(_凭依,代码)->插入(代码,)->的(插入,光束)...
->+[文本结构_插入尾部](光束,+节点)...
->的(_光束,焦点位置)->焦点位置(,_A)->在(_A,空间点#3)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"pt3"(+[matlab],空间点#3)...
->[]{
    []:->的(_光束,腰宽)->腰宽->+[.]"w_0"(+[matlab],腰宽),
    ->+[.]"w_0"(+[matlab],+[临时文本])->+[临时文本]"20e-6"
}...
->[]{
    []:->的(_光束,展宽)->展宽->+[.]"Dtau"(+[matlab],展宽),
    ->+[.]"Dtau"(+[matlab],+[临时文本])->+[临时文本]"20e-15"
}...
->[]{
    []:->的(_光束,偏振态)->偏振态->+[.]"E_polar0"(+[matlab],偏振态),
    ->+[.]"E_polar0"(+[matlab],+[临时文本])->+[临时文本]"0,1"
}...
->[]{
    []:->的(_光束,a0)->a0->+[.]"A0"(+[matlab],a0),
    ->+[.]"A0"(+[matlab],+[临时文本])->+[临时文本]"1"
}...
->[]{
    []:->的(_光束,波长)->波长->+[.]"lm0"(+[matlab],波长),
    ->+[.]"lm0"(+[matlab],+[临时文本])->+[临时文本]"800e-9"
}...

->+[模板文本](,+[增加内容])->+[增加内容](,+节点)...
->+[code](+[模板文本],模板)...
->+[.](+[模板文本],+waist)->+[o](+[matlab],+waist)->+[del](,+waist)...
->+[.](+[模板文本],+dtau)->+[o](+[matlab],+dtau)->+[del](,+dtau)...
->+[.](+[模板文本],+focus_x)->+[o](+[matlab],+focus_x)->+[del](,+focus_x)...
->+[.](+[模板文本],+focus_y)->+[o](+[matlab],+focus_y)->+[del](,+focus_y)...
->+[.](+[模板文本],+a0)->+[o](+[matlab],+a0)->+[del](,+a0)...
->+[.](+[模板文本],+omega)->+[o](+[matlab],+omega)->+[del](,+omega)...

->+[.](+[模板文本],+p_theta)->+[o](+[matlab],+p_theta)->+[del](,+p_theta)...
->+[.](+[模板文本],+E_phase)->+[o](+[matlab],+E_phase)->+[del](,+E_phase)...

->[]{
    []:->的(_光束,输入边)->输入边->+[.](+[模板文本],输入边),
    ->+[.]"输入边"(+[模板文本],+[临时文本])->+[临时文本]"xmin"
}


## end
#1319, 73:

操作1:...
将条目"操作0"复制为条目"操作1"

操作0:...
将'操作0'的"电子"替换为"光束"
+[新建阅读窗口](,操作0)


## end
#1322, 354:
"""
描述结构:...
库:...

"""
+光束代码(_光束,_凭依)->+[del](,+光束代码)...
->的(光束代码,描述结构)->的(光束代码,库)...

->.(+光束代码,_媒介)...
->+[code]([想],描述结构)->[想](_光束,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"凭依"(+[做],_凭依)...
        ->+[.]"媒介"(+[做],_媒介)
}

## end
#1323, 45:
%{
N_r
%}

N_e=N0/N_r;
v=beta*v0/norm(v0);



## end
#1324, 256:

def n_profile%变量 (x,y):
    return %N_e
def t_profile%变量 (t):
    return 1.

ParticleInjector(
    species   = "%变量",
    box_side  = "%方向",
    time_envelope = t_profile%变量,
    number_density = n_profile%变量, 
    position_initialization = "random",

)


## end
#1327, 991:
"""
模板:...
M代码:...
模板_保存1:...

"""
+操作1(_电子,_凭依)->+[del](,+操作1)...
->的(操作1,模板)->的(操作1,M代码)...

->."媒介"(+操作1,_媒介)->."方向"(+操作1,_方向)...
->的(_媒介,模拟空间)->的(模拟空间,宽度)...
->的(_凭依,命名空间)->的(命名空间,变量)...
->变量(,_电子)->的(_电子,数密度)...

->的(_凭依,代码)->插入(代码,)->的(插入,粒子)...
->+[文本结构_插入尾部](粒子,+节点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"N0"(+[matlab],数密度)...
->+[模板文本](模板,+节点)...
->+[.](+[模板文本],+N_e)->+[o](+[matlab],+N_e)->+[del](,+N_e)...
->+[.]"方向"(+[模板文本],_方向)...
->[]{
    []:->[==](,_电子)->+[.](+[模板文本],变量),
    ->+[.]"变量"(+[模板文本],_电子)
}...
->[]{
    []:->的(_电子,电荷)->电荷->+[.]"charge"(+[模板文本],电荷),
    ->+[临时文本]"-1.0"->+[.]"charge"(+[模板文本],+[临时文本])
}...
->[]{
    []:->的(_电子,beta)->beta->的(_电子,速度方向)->速度方向(,)...
        ->+[.](+[matlab],beta)->+[.]"v0"(+[matlab],速度方向)...
        ->+[o](+[matlab],+v)->+[.](+[模板文本],+v)->+[del](,+v),

    ->+[临时文本]"0.,0.,0."->+[.]"v"(+[模板文本],+[临时文本])...
        ->+[.]"v0"(+[matlab],+[临时文本])...
        ->+[临时文本]#1"0."->+[.]"beta"(+[matlab],+[临时文本]#1)
}




## end
#1329, 38:

操作0:...
操作1:...
将条目"操作0"复制为条目"操作1"



## end
#1330, 639:
"""
P代码:...
P代码2:...

"""
+描述结构(_电子,_凭依)->+操作(+描述结构,)...

->+[临时文本]->Python->[]{
    []:->不注入(_电子,),
    ->的(_电子,速度方向)->速度方向->+[.]"v"([python],速度方向)...
        ->[python]"state=True"(Python,)->[]{
            []:->+[code]([python]#1,P代码)->[python]#1(Python,+[临时文本]#1)...
                ->+操作1(_电子,_凭依)...
                ->+[.]"方向"(+操作1,+[临时文本]#1)->+的(+操作,+操作1),
            ->[]
        }->[]{
            []:->+[code]([python]#1,P代码2)->[python]#1(Python,+[临时文本]#1)...
                ->+操作1(_电子,_凭依)...
                ->+[.]"方向"(+操作1,+[临时文本]#1)->+的(+操作,+操作1),
            ->[]
        },

    ->[]
}...
->+操作0(_电子,_凭依)->+的(+操作,+操作0)



## end
#1333, 430:
"""
描述结构:...
库:...

"""
+电子代码(_电子,_凭依)->+[del](,+电子代码)...
->的(电子代码,描述结构)->的(电子代码,库)...

->."媒介"(+电子代码,_媒介)...

->+[code]([想],描述结构)->[想](_电子,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"媒介"(+[做],_媒介)...
        =>.(_操作,_参数)=>+[.](+[做],+[临时文本])...
            ->[m_text](.,+[.])->[m_text](_参数,+[临时文本])
}



## end
#1334, 385:
%{
+[M函数](,M代码)
归一化单位::https://smileipic.github.io/Smilei/Understand/units.html
+[打开网页](,归一化单位)

单位定义(html):...
+[新建阅读窗口](,单位定义)
lm_r=800e-9
B_r
%}
pt0=[0,0];
physics_constant;
dx=0.125;
dt=0.99*dx;
ny=40;
npatch_x=128;

omega_r=c/lm_r*2*pi;
T_r=1/omega_r;
L_r=c/omega_r;
E_r=m_e.*c.*omega_r./e;
B_r=m_e.*omega_r./e;
N_r=epsilon_0.*m_e.*omega_r.^(2)./e.^(2);
J_r=c.*e.*N_r;

n_NS_0=0;

## end
#1335, 322:
"""
地址::%地址
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""
import numpy as np

%空间
%窗口

LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)

%粒子
%光束
%外场
%探测
%追踪


DiagPerformances(
    every = 50,
)



## end
#1336, 1553:
#!/bin/bash
#----------------------------------------------------
# Sample Slurm job script
#   for TACC Lonestar6 AMD Milan nodes
#
#   *** Serial Job in Normal Queue***
# 
# Last revised: October 22, 2021
#
# Notes:
#
#  -- Copy/edit this script as desired.  Launch by executing
#     "sbatch milan.serial.slurm" on a Lonestar6 login node.
#
#  -- Serial codes run on a single node (upper case N = 1).
#       A serial code ignores the value of lower case n,
#       but slurm needs a plausible value to schedule the job.
#
#  -- Use TACC's launcher utility to run multiple serial 
#       executables at the same time, execute "module load launcher" 
#       followed by "module help launcher".
#----------------------------------------------------

#SBATCH -J testSmilei           # Job name
#SBATCH -o stdout.txt       # Name of stdout output file
#SBATCH -e errlog.txt       # Name of stderr error file
#SBATCH -p normal          # Queue (partition) name
#SBATCH -N 1               # Total # of nodes (must be 1 for serial)
#SBATCH -n 1               # Total # of mpi tasks (should be 1 for serial)
#SBATCH -t 02:40:00        # Run time (hh:mm:ss)
#SBATCH --mail-type=all    # Send email at begin and end of job
#SBATCH -A PHY22016       # Project/Allocation name (req'd if you have more than 1)
#SBATCH --mail-user=chengxiantao@utexas.edu


# Any other commands must follow all #SBATCH directives...
module list
pwd
date

# export OMP_NUM_THREADS=32

# Launch serial code...
echo hello world!
echo $LD_LIBRARY_PATH


$WORK/Smilei/smilei run.py



## end
#1340, 983:
"""
模板:...
myscript:...
M代码:...

"""
+整体结构(_媒介,_凭依)->+[del](,+整体结构)...
->的(整体结构,M代码)->的(整体结构,模板)->的(整体结构,myscript)...

->[]{
    []:->的(_媒介,地址)->地址,
    ->+的(_媒介,+地址)->+地址"/home/xiantao/Documents/PIC/output"
}->的(_媒介,地址#0)->+[修改内容](地址#0,+[临时文本])...

->+的(_凭依,+myscript)->+的(+myscript,+地址#m)...
    ->+[修改内容]"%s/myscript.txt"(地址#0,+地址#m)...
->+的(_凭依,+info)->+的(+info,+地址#f)...
    ->+[修改内容]"%s/info.txt"(地址#0,+地址#f)->+[修改内容](_媒介,+info)...
->+的(_凭依,+run)->+的(+run,+地址#r)...
    ->+[修改内容]"%s/run.py"(地址#0,+地址#r)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->[]{
    []:->的(_场景,参考波长)->参考波长->+[.]"lm_r"(+[matlab],参考波长),
    ->+[.]"lm_r"(+[matlab],+波长)->+波长"800e-9"->+[del](,+波长)
}...

->+[修改内容](myscript,+myscript)...
->+的(_凭依,+代码)->+[修改内容](模板,+代码)...
    ->+[文本结构_插入](+代码,+地址)->+[修改内容](+地址#r,+地址)...
    ->+[文本结构_插入](+代码,+空间)->+[文本结构_插入](+代码,+窗口)...
    ->+[文本结构_插入](+代码,+光束)->+[文本结构_插入](+代码,+粒子)...
    ->+[文本结构_插入](+代码,+外场)...
    ->+[文本结构_插入](+代码,+探测)->+[文本结构_插入](+代码,+追踪)




## end
#1341, 294:
"""


"""

+描述结构(注入方式,_凭依)->+操作(+描述结构,)...

->插入(注入方式,)...
->[]{
    []=>的(插入,_re)->_re"[XYZ]M"=>[]:
        ->顺序(_re,)->的(顺序,_节点)->_节点(,_节点1)...
            ->+操作2(_re,_凭依)->+的(+操作,+操作2),
        ->顺序(_re,)...
            ->+操作1(_re,_凭依)->+的(+操作,+操作1),
        ->+操作0(_re,_凭依)->+的(+操作,+操作0)
}

## end
#1342, 73:
"""


"""
+操作0(_X,_凭依)->+[del](,+操作0)...

->+[修改内容]"profiles::None"(,_X)

## end
#1343, 38:
"""


"""
+操作1(_X,_凭依)->+[del](,+操作1)

## end
#1344, 192:
"""


"""
+操作2(_X,_凭依)->+[del](,+操作2)...

->顺序(_X,)->的(_X,顺序)->+[修改内容]", "(,顺序)...
    ->+[修改内容]"MakeSeq_t<%内容>"(,_X)...
->+插入(_X,)->+的(_X,+插入)->+的(+插入,+内容)...
->+[左连](顺序,+内容)->+[左连](的,+内容)



## end
#1348, 29:


操作2:...
操作1:...
操作0:...




## end
#1351, 370:
"""
描述结构:...
库:...

"""
+整理光束(,_凭依)->+[del](,+整理光束)...
->的(整理光束,描述结构)->的(整理光束,库)...

->的(_凭依,incidentField)->的(incidentField,插入)...
    ->的(插入,注入方式)...

->+[code]([想],描述结构)->[想](注入方式,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"凭依"(+[做],_凭依)
}

## end
#1352, 204:
"""


"""
+描述结构(,_探测)->+操作(+描述结构,)...

->的(_探测,探测类型)...
->[]{
    []:->[==]"png"(,探测类型)->+输出png(,_探测)->+的(+操作,+输出png),
    ->[==]"能谱"(,探测类型)->+输出能谱(,_探测)->+的(+操作,+输出能谱),
    ->+输出场(,_探测)->+的(+操作,+输出场)
}


## end
#1355, 208:
"""
记住"Python"
print('a,b'.split(','))
print(type_txt,list_txt)

"""

list_txt=type_txt.split(',')
for i in range(len(list_txt)):
    txt=list_txt[i]
    list_txt[i]=" '%s'"%(txt)
ans=','.join(list_txt)+" "


## end
#1356, 56:

DiagFields(
    fields = [%探测类型],
    every = %探测间隔,
)

## end
#1359, 509:
"""
P代码:...
M代码:...
NS模板:...
+[新建阅读窗口](,M代码)

"""

+输出场(_探测,_凭依)->+[del](,+输出场)...
->的(输出场,NS模板)->的(输出场,P代码)...

->的(_凭依,代码)->插入(代码,)->的(插入,探测)...
->+[文本结构_插入尾部](探测,+节点)...

->+[模板文本](NS模板,+节点)->+[.]"探测类型"(+[模板文本],+[临时文本])...
->Python->+[临时文本]"Rho"->[]{
    []:->的(_探测,探测类型)->探测类型(,)...
        ->+[code]([python],P代码)->+[.]"type_txt"([python],探测类型)...
        ->[python](Python,+[临时文本]),
    ->[]
}...
->[]{
    []:->的(_探测,探测间隔)->探测间隔->+[.](+[模板文本],探测间隔),
    ->+[.]"探测间隔"(+[模板文本],+[临时文本])->+[临时文本]"200"
}



## end
#1363, 109:
+[删除结构](,库)

输出场:...
将'输出场'的"输出场间隔"替换为"探测间隔"
输出png:...
将条目"输出场"复制为条目"输出png"

输出能谱:...
将条目"输出png"复制为条目"输出能谱"


## end
#1366, 325:
"""
描述结构:...
库:...
+[新建阅读窗口](,库)
输出

"""
+探测代码(_探测,_凭依)->+[del](,+探测代码)...
->的(探测代码,描述结构)->的(探测代码,库)...

->."媒介"(+探测代码,_媒介)...

->+[code]([想],描述结构)->[想](,_探测)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_条目,_操作)...
        ->+[做](_探测,_凭依)->+[code](+[做],_条目)->+[.]"媒介"(+[做],_媒介)
}




## end
#1373, 226:


整体结构:...
+[新建阅读窗口](,整体结构)

框架代码:...
探测代码:...
+[新建阅读窗口](,探测代码)
+[新建阅读窗口](,框架代码)

电子代码:...
光束代码:...
外场代码:...
在选择区域中, 将'框架代码'的"nt"替换为"dt"
将'外场代码'的"电子"替换为"外场"
+[新建阅读窗口](,电子代码)
+[新建阅读窗口](,外场代码)


整理光束:...
将'整理光束'的"_光束"替换为"注入方式"


## end
#1376, 306:
"""
描述结构:...
库:...

"""
+代码结构(_媒介,_凭依)->+[del](,+代码结构)...
->的(代码结构,描述结构)->的(代码结构,库)...

->+[code]([想],描述结构)->[想](_媒介,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"媒介"(+[做],_媒介)
}



## end
#1381, 30:
Ex,Ey,Ez,Bx,By,Bz,Jx,Jy,Jz,Rho
## end
#1383, 3:
500
## end
#1387, 123:
"""
记住"Python"
print(v)

"""
state=True

if v[0]>1e-7:
    ans="xmin"
elif v[0]<-1e-7:
    ans="xmax"
else:
    ans="none"

## end
#1388, 45:
%{
N_r
%}

N_e=N0/N_r;
v=beta*v0/norm(v0);



## end
#1389, 543:

Species(
    name = "%变量",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = %charge,
    number_density = %N_e, 

    mean_velocity = [%v],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)


ParticleInjector(
    species   = "%变量",
    box_side  = "xmax",
    time_envelope = 1.,
    number_density = %N_e, 
)

## end
#1392, 983:
"""
模板:...
M代码:...
->+[.](+[模板文本],上升沿)->+[.](+[模板文本],宽度)
->的(_电子,上升沿)

"""
+操作2(_电子,_凭依)->+[del](,+操作2)...
->的(操作2,模板)->的(操作2,M代码)...

->."媒介"(+操作2,_媒介)...
->的(_媒介,模拟空间)->的(模拟空间,宽度)...
->的(_凭依,命名空间)->的(命名空间,变量)...
->变量(,_电子)->的(_电子,数密度)...

->的(_凭依,代码)->插入(代码,)->的(插入,粒子)...
->+[文本结构_插入尾部](粒子,+节点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"N0"(+[matlab],数密度)...
->+[模板文本](模板,+节点)...
->+[.](+[模板文本],+N_e)->+[o](+[matlab],+N_e)->+[del](,+N_e)...
->[]{
    []:->[==](,_电子)->+[.](+[模板文本],变量),
    ->+[.]"变量"(+[模板文本],_电子)
}...
->[]{
    []:->的(_电子,电荷)->电荷->+[.]"charge"(+[模板文本],电荷),
    ->+[临时文本]"-1.0"->+[.]"charge"(+[模板文本],+[临时文本])
}...
->[]{
    []:->的(_电子,beta)->beta->的(_电子,速度方向)->速度方向(,)...
        ->+[.](+[matlab],beta)->+[.]"v0"(+[matlab],速度方向)...
        ->+[o](+[matlab],+v)->+[.](+[模板文本],+v)->+[del](,+v),

    ->+[临时文本]"0.,0.,0."->+[.]"v"(+[模板文本],+[临时文本])...
        ->+[.]"v0"(+[matlab],+[临时文本])...
        ->+[临时文本]"0."->+[.]"beta"(+[matlab],+[临时文本])
}




## end
#1394, 422:

Species(
    name = "%变量",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = %charge,
    number_density = %N_e, 

    mean_velocity = [%v],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)

## end
#1395, 45:
%{
N_r
%}

N_e=N0/N_r;
v=beta*v0/norm(v0);



## end
#1398, 1118:
"""
模板:...
M代码:...
->+[.](+[模板文本],上升沿)->+[.](+[模板文本],宽度)
->的(_电子,上升沿)

"""
+操作0(_电子,_凭依)->+[del](,+操作0)...
->的(操作0,模板)->的(操作0,M代码)...

->."媒介"(+操作0,_媒介)...
->的(_媒介,模拟空间)->的(模拟空间,宽度)...
->的(_凭依,命名空间)->的(命名空间,变量)...
->变量(,_电子)->的(_电子,数密度)...

->的(_凭依,代码)->插入(代码,)->的(插入,粒子)...
->+[文本结构_插入尾部](粒子,+节点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"N0"(+[matlab],数密度)...
->+[模板文本](模板,+节点)...
->+[.](+[模板文本],+N_e)->+[o](+[matlab],+N_e)->+[del](,+N_e)...
->[]{
    []:->[==](,_电子)->+[.](+[模板文本],变量),
    ->+[.]"变量"(+[模板文本],_电子)
}...
->[]{
    []:->的(_电子,电荷)->电荷->+[.]"charge"(+[模板文本],电荷),
    ->+[临时文本]"-1.0"->+[.]"charge"(+[模板文本],+[临时文本])
}...
->[]{
    []:->的(_电子,beta)->beta->的(_电子,速度方向)->速度方向(,)...
        ->+[.](+[matlab],beta)->+[.]"v0"(+[matlab],速度方向)...
        ->+[o](+[matlab],+v)->+[.](+[模板文本],+v)->+[del](,+v),

    ->的(_电子,速度)->速度->+[.]"v"(+[模板文本],速度)...
        ->+[临时文本]"-1"...
        ->+[.]"beta"(+[matlab],+[临时文本])->+[.]"v0"(+[matlab],速度),

    ->+[临时文本]"0.,0.,0."->+[.]"v"(+[模板文本],+[临时文本])...
        ->+[.]"v0"(+[matlab],+[临时文本])...
        ->+[临时文本]"0."->+[.]"beta"(+[matlab],+[临时文本])
}




## end
#1401, 124:
"""
记住"Python"
print(v)

"""

state=True
if v[0]>1e-7:
    ans="xmin"
elif v[0]<-1e-7:
    ans="xmax"
else:
    state=False

## end
#1403, 124:
"""
记住"Python"
print(v)

"""

state=True
if v[1]>1e-7:
    ans="ymin"
elif v[1]<-1e-7:
    ans="ymax"
else:
    state=False

## end
#1404, 452:

Species(
    name = "%变量",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = %charge,
    number_density = %N_e, 

    mean_velocity = [%v],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)

## end
#1405, 45:
%{
N_r
%}

N_e=N0/N_r;
v=beta*v0/norm(v0);



## end
#1408, 987:
"""
模板:...
M代码:...
->+[.](+[模板文本],上升沿)->+[.](+[模板文本],宽度)
->的(_电子,上升沿)

"""
+操作0(_电子,_凭依)->+[del](,+操作0)...
->的(操作0,模板)->的(操作0,M代码)...

->."媒介"(+操作0,_媒介)...
->的(_媒介,模拟空间)->的(模拟空间,宽度)...
->的(_凭依,命名空间)->的(命名空间,变量)...
->变量(,_电子)->的(_电子,数密度)...

->的(_凭依,代码)->插入(代码,)->的(插入,粒子)...
->+[文本结构_插入尾部](粒子,+节点)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"N0"(+[matlab],数密度)...
->+[模板文本](模板,+节点)...
->+[.](+[模板文本],+N_e)->+[o](+[matlab],+N_e)->+[del](,+N_e)...
->[]{
    []:->[==](,_电子)->+[.](+[模板文本],变量),
    ->+[.]"变量"(+[模板文本],_电子)
}...
->[]{
    []:->的(_电子,电荷)->电荷->+[.]"charge"(+[模板文本],电荷),
    ->+[临时文本]"-1.0"->+[.]"charge"(+[模板文本],+[临时文本])
}...
->[]{
    []:->的(_电子,beta)->beta->的(_电子,速度方向)->速度方向(,)...
        ->+[.](+[matlab],beta)->+[.]"v0"(+[matlab],速度方向)...
        ->+[o](+[matlab],+v)->+[.](+[模板文本],+v)->+[del](,+v),

    ->+[临时文本]"0.,0.,0."->+[.]"v"(+[模板文本],+[临时文本])...
        ->+[.]"v0"(+[matlab],+[临时文本])...
        ->+[临时文本]#1"0."->+[.]"beta"(+[matlab],+[临时文本]#1)
}




## end
#1410, 59:
/home/xiantao/Documents/sim_output/Smilei_out/RFB_1D/run.py
## end
#1412, 3213:
"""
地址::/home/xiantao/Documents/sim_output/Smilei_out/RFB_1D/run.py
list_field::https://smileipic.github.io/Smilei/namelist.html#fields-diagnostics
+[打开网页](,list_field)

"""
import numpy as np


dt = 0.11663162726452106
nx = 6656
Lx = 784.1415263360122
Ly = 628.3185307179587
npatch_x = 128

Main(
    geometry = "2Dcartesian",
    
    interpolation_order = 2,

    timestep = dt,
    simulation_time = int(39726)*dt,

    cell_length  = [0.11780972450961723, 15.707963267948966],
    grid_length = [Lx, Ly],

    number_of_patches = [npatch_x, 1],

    cluster_width = nx/npatch_x,
    
    EM_boundary_conditions = [
        ["silver-muller","silver-muller"],
        ["silver-muller","silver-muller"],
#        ["periodic", "periodic"],
    ],
    
    solve_poisson = False,
    print_every = 200,

    random_seed = smilei_mpi_rank
)


MovingWindow(
    time_start = 706.3693377408199,
    velocity_x = 1.0
)


LoadBalancing(
    initial_balance = False,
    every = 150,
    cell_load = 1.,
    frozen_particle_load = 0.1
)


Species(
    name = "_plasma_2",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = 1,
    number_density = 0.005740660892844831, 

    mean_velocity = [0.16329931618554522, 0.08164965809277261, 0.08164965809277261],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)

ParticleInjector(
    species   = "_plasma_2",
    box_side  = "ymin",
    time_envelope = 1.,
    number_density = 0.005740660892844831, 
)


ParticleInjector(
    species   = "_plasma_2",
    box_side  = "xmin",
    time_envelope = 1.,
    number_density = 0.005740660892844831, 
)


Species(
    name = "_plasma_1",
    position_initialization = "regular",
    momentum_initialization = "cold",
    particles_per_cell = 1,
    c_part_max = 1.0,
    mass = 1.0,
    charge = -1.0,
    number_density = 0.005740660892844831, 

    mean_velocity = [0.16329931618554522, 0.08164965809277261, 0.08164965809277261],
    temperature = [0.0],
    pusher = "boris",
    time_frozen = 0.0,
    boundary_conditions = [
        ["remove", "remove"],
        ["remove", "remove"],
#        ["periodic", "periodic"],
    ],
)

ParticleInjector(
    species   = "_plasma_1",
    box_side  = "ymin",
    time_envelope = 1.,
    number_density = 0.005740660892844831, 
)


ParticleInjector(
    species   = "_plasma_1",
    box_side  = "xmin",
    time_envelope = 1.,
    number_density = 0.005740660892844831, 
)


LaserGaussian2D(
    box_side                = "xmin",
    a0                            = 0.01,
    omega                    = 0.9163802978235966,
    focus                       = [314.1592653589793, 314.1592653589793],
    waist                       = 157.07963267948966,
    polarization_phi  = 1.5707963267948966,
    ellipticity               = 0.0,
    time_envelope     = tconstant(),
)




DiagFields(
    fields = [ 'Ex', 'Ey', 'Ez', 'Bx', 'By', 'Bz', 'Jx', 'Jy', 'Jz', 'Rho' ],
    every = 500,
)




DiagPerformances(
    every = 50,
)



## end
#1414, 61:
/home/xiantao/Documents/sim_output/Smilei_out/RFB_1D/info.txt
## end
#1416, 788:
地址::/home/xiantao/Documents/sim_output/Smilei_out/RFB_1D
运行指令"nautilus /home/xiantao/Documents/sim_output/Smilei_out/FDH_1"
状态::
状态::上传


代码:...
+[删除结构](,代码)->+[召唤星辰]"生成Smilei代码"(结构场景,代码)
+[删除结构](,代码)->+[召唤星辰]"生成Smilei代码"(结构场景,代码)->+[1D](+[召唤星辰],)



有探测场
探测场的探测类型是"Ex,Ey,Ez,Bx,By,Bz,Jx,Jy,Jz,Rho"
探测场的探测间隔是"500"

参考波长::800e-9
有模拟空间和窗口
有探测光, 电子和正电子
有什么

模拟空间是长方形(600e-6,80e-6)
模拟空间的格点尺寸是"1.5e-8,20.e-7,20.e-7"

窗口是长方形(100e-6,80e-6)
窗口的启动时间是"300e-15"
窗口的速度是"0.999"

电子的数密度是"1e25"
电子的速度方向是"1,0.5,0.5"
电子的beta是"0.2"

正电子的数密度是"1e25"
正电子的电荷是"1"
正电子的速度方向是"1,0.5,0.5"
正电子的beta是"0.2"

探测光有什么
探测光的a0是"0.01"
探测光的波长是"873e-9"
探测光的展宽是"inf"
探测光的腰宽是"20e-6"
探测光的偏振是(1,1)
探测光的焦点位置是A

A::
A在(40e-6,0)


模拟动画:...
+[召唤星辰]"生成PIC一维动画"(结构场景,模拟动画)->+[M函数](,模拟动画)
+[召唤星辰]"生成PIC预览动画"(结构场景,模拟动画)->+[M函数](,模拟动画)





## end
#1418, 65:
/home/xiantao/Documents/sim_output/Smilei_out/RFB_1D/myscript.txt
## end
#1420, 1559:
#!/bin/bash
#----------------------------------------------------
# Sample Slurm job script
#   for TACC Lonestar6 AMD Milan nodes
#
#   *** Serial Job in Normal Queue***
# 
# Last revised: October 22, 2021
#
# Notes:
#
#  -- Copy/edit this script as desired.  Launch by executing
#     "sbatch milan.serial.slurm" on a Lonestar6 login node.
#
#  -- Serial codes run on a single node (upper case N = 1).
#       A serial code ignores the value of lower case n,
#       but slurm needs a plausible value to schedule the job.
#
#  -- Use TACC's launcher utility to run multiple serial 
#       executables at the same time, execute "module load launcher" 
#       followed by "module help launcher".
#----------------------------------------------------

#SBATCH -J testSmilei           # Job name
#SBATCH -o stdout.txt       # Name of stdout output file
#SBATCH -e errlog.txt       # Name of stderr error file
#SBATCH -p normal          # Queue (partition) name
#SBATCH -N 1               # Total # of nodes (must be 1 for serial)
#SBATCH -n 1               # Total # of mpi tasks (should be 1 for serial)
#SBATCH -t 02:40:00        # Run time (hh:mm:ss)
#SBATCH --mail-type=all    # Send email at begin and end of job
#SBATCH -A A-pcsli       # Project/Allocation name (req'd if you have more than 1)
#SBATCH --mail-user=chengxiantao@utexas.edu


# Any other commands must follow all #SBATCH directives...
module list
pwd
date

# export OMP_NUM_THREADS=32

# Launch serial code...
echo hello world!
echo $LD_LIBRARY_PATH


$WORK/Smilei/Smilei/smilei run.py



## end
#1423, 430:
"""
描述结构:...
库:...

"""
+外场代码(_外场,_凭依)->+[del](,+外场代码)...
->的(外场代码,描述结构)->的(外场代码,库)...

->."媒介"(+外场代码,_媒介)...

->+[code]([想],描述结构)->[想](_外场,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"媒介"(+[做],_媒介)...
        =>.(_操作,_参数)=>+[.](+[做],+[临时文本])...
            ->[m_text](.,+[.])->[m_text](_参数,+[临时文本])
}



## end
#1425, 150:
"""


"""
+描述结构(_外场,_凭依)->+操作(+描述结构,)...

->的(_外场,类型)->[]{
    []:->[==]"电场"(,类型)->+操作1(_外场,_凭依)->+的(+操作,+操作1),
    ->+操作0(_外场,_凭依)->+的(+操作,+操作0)
}



## end
#1427, 38:


操作1:...
操作0:...
将'操作0'的"电子"替换为"外场"


## end
#1431, 1036:
"""
模板:...
M代码:...

"""
+操作0(_外场,_凭依)->+[del](,+操作0)...
->的(操作0,模板)->的(操作0,M代码)...

->的(_外场,场强)...

->的(_凭依,代码)->插入(代码,)->的(插入,外场)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"intensity"(+[matlab],场强)...

->+[.]"field"([python],场强)->[python]"state=True"(Python,)...
->[]{
    []:->[python]"state=np.abs(field[0])>1e-7"(Python,)...
        ->+[文本结构_插入尾部](外场,+节点)->+[模板文本](模板,+节点)...
        ->+[.]"val"(+[模板文本],+Bx)->+[o](+[matlab],+Bx)->+[del](,+Bx)...
        ->+[.]"类型"(+[模板文本],+[临时文本])->+[临时文本]"Bx",
    ->[]
}...

->[]{
    []:->[python]"state=np.abs(field[1])>1e-7"(Python,)...
        ->+[文本结构_插入尾部](外场,+节点)->+[模板文本](模板,+节点)...
        ->+[.]"val"(+[模板文本],+By)->+[o](+[matlab],+By)->+[del](,+By)...
        ->+[.]"类型"(+[模板文本],+[临时文本])->+[临时文本]"By",
    ->[]
}...

->[]{
    []:->[python]"state=np.abs(field[2])>1e-7"(Python,)...
        ->+[文本结构_插入尾部](外场,+节点)->+[模板文本](模板,+节点)...
        ->+[.]"val"(+[模板文本],+Bz)->+[o](+[matlab],+Bz)->+[del](,+Bz)...
        ->+[.]"类型"(+[模板文本],+[临时文本])->+[临时文本]"Bz",
    ->[]
}





## end
#1433, 82:
%{
N_r
%}

B_field=intensity/B_r;
Bx=B_field(1);
By=B_field(2);
Bz=B_field(3);




## end
#1435, 51:
ExternalField(
    field="%类型",
    profile=%val
)

## end
#1437, 430:
"""
描述结构:...
库:...

"""
+外场代码(_外场,_凭依)->+[del](,+外场代码)...
->的(外场代码,描述结构)->的(外场代码,库)...

->."媒介"(+外场代码,_媒介)...

->+[code]([想],描述结构)->[想](_外场,_凭依)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(_主语,_宾语)->_主语->_宾语=>[说](,_操作)...
        ->的(库,_条目)->_条目->[eq](_操作,_条目)...
        ->+[做](_主语,_宾语)->+[code](+[做],_条目)->+[.]"媒介"(+[做],_媒介)...
        =>.(_操作,_参数)=>+[.](+[做],+[临时文本])...
            ->[m_text](.,+[.])->[m_text](_参数,+[临时文本])
}



## end
#1439, 150:
"""


"""
+描述结构(_外场,_凭依)->+操作(+描述结构,)...

->的(_外场,类型)->[]{
    []:->[==]"电场"(,类型)->+操作1(_外场,_凭依)->+的(+操作,+操作1),
    ->+操作0(_外场,_凭依)->+的(+操作,+操作0)
}



## end
#1441, 38:


操作1:...
操作0:...
将'操作0'的"电子"替换为"外场"


## end
#1443, 1036:
"""
模板:...
M代码:...

"""
+操作0(_外场,_凭依)->+[del](,+操作0)...
->的(操作0,模板)->的(操作0,M代码)...

->的(_外场,场强)...

->的(_凭依,代码)->插入(代码,)->的(插入,外场)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"intensity"(+[matlab],场强)...

->+[.]"field"([python],场强)->[python]"state=True"(Python,)...
->[]{
    []:->[python]"state=np.abs(field[0])>1e-7"(Python,)...
        ->+[文本结构_插入尾部](外场,+节点)->+[模板文本](模板,+节点)...
        ->+[.]"val"(+[模板文本],+Bx)->+[o](+[matlab],+Bx)->+[del](,+Bx)...
        ->+[.]"类型"(+[模板文本],+[临时文本])->+[临时文本]"Bx",
    ->[]
}...

->[]{
    []:->[python]"state=np.abs(field[1])>1e-7"(Python,)...
        ->+[文本结构_插入尾部](外场,+节点)->+[模板文本](模板,+节点)...
        ->+[.]"val"(+[模板文本],+By)->+[o](+[matlab],+By)->+[del](,+By)...
        ->+[.]"类型"(+[模板文本],+[临时文本])->+[临时文本]"By",
    ->[]
}...

->[]{
    []:->[python]"state=np.abs(field[2])>1e-7"(Python,)...
        ->+[文本结构_插入尾部](外场,+节点)->+[模板文本](模板,+节点)...
        ->+[.]"val"(+[模板文本],+Bz)->+[o](+[matlab],+Bz)->+[del](,+Bz)...
        ->+[.]"类型"(+[模板文本],+[临时文本])->+[临时文本]"Bz",
    ->[]
}





## end
#1445, 51:
ExternalField(
    field="%类型",
    profile=%val
)

## end
#1447, 82:
%{
N_r
%}

B_field=intensity/B_r;
Bx=B_field(1);
By=B_field(2);
Bz=B_field(3);




## end
#1449, 131:

ParticleInjector(
    species   = "%变量",
    box_side  = "%方向",
    time_envelope = tconstant(),
#     number_density = %N_e, 
)


## end
#1451, 86:
参考::https://smileipic.github.io/Smilei/Use/installation.html
+[打开网页](,参考)

本地安装:...



## end
#1453, 56:
https://smileipic.github.io/Smilei/Use/installation.html
## end
#1456, 10:
mkdir %地址/
## end
#1457, 299:
"""
记住"Python"

scp -r %s xtcheng@ls6.tacc.utexas.edu:$WORK/test_folder

"""
import subprocess as sp
# code="scp -r %s xtcheng@stampede2.tacc.utexas.edu:$WORK/sim_folder"%(address)
code="scp -r %s xtcheng@ls6.tacc.utexas.edu:$WORK/sim_folder"%(address)
t_code=code.split(' ')
p=sp.Popen(t_code)





## end
#1460, 436:
"""
创建文件夹:...
P代码:...
+[修改天使]

"""


+上传文件夹(_媒介,_凭依)->+[del](,+上传文件夹)...
->的(上传文件夹,创建文件夹)->的(上传文件夹,P代码)...

->[]{
    []:->的(_媒介,地址)->地址,
    ->+的(_媒介,+地址)->+地址"/home/xiantao/Documents/PIC/output"
}->的(_媒介,地址#0)...

->+[模板文本](创建文件夹,+[命令行]#0)->+[命令行]#0->+[显示](,+[命令行]#0)...
    ->+[.](+[模板文本],地址#0)...

->[]{
    []=>的(_凭依,_文件)->_文件=>+[保存文本](,_文件)
}...

->+[python](Python,)->+[code](+[python],P代码)...
->+[.]"address"(+[python],地址#0)




## end
#1463, 120:
"""
记住"Python"


"""
import subprocess as sp
code="nautilus %s"%(address)
t_code=code.split(' ')
p=sp.Popen(t_code)





## end
#1465, 46:
https://github.com/SmileiPIC/Smilei/issues/293
## end
#1467, 68:
https://smileipic.github.io/Smilei/Use/profiles.html#python-profiles
## end
#1470, 385:
<!--
+[H函数](,时间步长)
参考::https://en.wikipedia.org/wiki/Courant%E2%80%93Friedrichs%E2%80%93Lewy_condition
+[打开网页](,参考)
-->

<h2>Courant–Friedrichs–Lewy condition</h2>
The condition in 1D simulations is,
%[1].
The condition in 2D simulations is,
%[2].



<!--
将"\frac{c*\Delta t}{\Delta x}<=1"记作为式(1)
将"\frac{c*\Delta t}{\Delta x}+\frac{c*\Delta t}{\Delta y}<=1"记作为式(2)


+[H函数](,时间步长)
-->
## end
#1472, 79:
https://en.wikipedia.org/wiki/Courant%E2%80%93Friedrichs%E2%80%93Lewy_condition
## end
#1473, 30:
\frac{c*\Delta t}{\Delta x}<=1
## end
#1477, 32:
\frac{c \Delta t}{\Delta x}\le 1
## end
#1479, 58:
\frac{c*\Delta t}{\Delta x}+\frac{c*\Delta t}{\Delta y}<=1
## end
#1483, 60:
\frac{c \Delta t}{\Delta x}+\frac{c \Delta t}{\Delta y}\le 1
## end
### 结束