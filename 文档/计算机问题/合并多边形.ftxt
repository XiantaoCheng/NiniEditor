### 节点
地址, 的, 合并多边形, 目录, 的, 的, 节点数目统计, 的, PIP, html, 的, 参考, 打开网页, 的, 参考2, 的, 图2, 图片, 的, 图1, 图片, 的, 验证公式, M函数, 手, 的, 测试交点, 的, PtInPolygon, M函数, 的, 地址, PtInPolygon, 的, 记忆, PtInPolygon, 的, 测试, 的, 测试多点, 的, PtsInPolygon, M函数, 的, 地址, PtsInPolygon, 的, PtsInPolygon, 的, 区域内点, 的, 合并算法, html, 的, 验证算法, M函数, 的, 保存, 的, 单步测试, 的, 初值单步, 的, 检测单步, 的, 行走方向, 的, 行走方向2, 的, 行走方向3, 的, 行走方向4, 的, 行走方向5, 的, shape_cut, M函数, 的, 地址, shape_merge, 的, shape_merge, 的, 测试, 的, 测试merge, 的, 测试图形1, 的, 保存, 的, 测试图形0, 的, 测试图形1, 的, 测试图形2, 的, 测试图形2, 测试图形2, 测试图形1, 测试图形0, 保存, 的, 的, 的, 的, 测试, 地址, 的, 的, M函数, shape_inter, 的, shape_cut, 的, shape_cut, 的, 算法内容, 的, 保存, 的, 测试图形0, 的, 测试cut, 保存, 地址, 算法内容, 保存, 测试图形0, 测试图形1, 测试图形2, 的, 的, 的, 的, 的, 测试, 的, M函数, 的, 的, shape_merge, 的, shape_inter, 的, shape_inter, 的, 测试图形3, 的, 测试图形3, 的, 测试图形4, 的, 测试图形4, 的, 含顶点, 
### 关联
#, 2#0, #, #, 3#2, 3#6, #, 2#8, #, 8#, 8#11, #, #11, 8#14, #, 8#16, #, 16#, 8#19, #, 19#, 8#22, #, 22#, #54, 22#26, #, 22#28, #, 28#, 28#31, #, #28, 34#32, 3#, #, 28#37, #, 22#39, #, 22#41, #, 41#, 41#44, #, #41, 34#45, #, 22#49, #, 2#51, #, 51#, 51#54, #, 54#, 54#57, #, 54#59, #, 54#61, #, 54#63, #, 54#65, #, 54#67, #, 54#69, #, 54#71, #, 54#73, #, 54#75, #, 75#, 75#78, #, #141, 34#79, #, 75#83, #, 54#85, #, 54#87, #, 83#89, #, 83#91, #, 83#93, #, 54#95, #, 83#97, #, #, #, #, #, 106#98, 106#99, 106#100, 106#101, #, #, 111#106, 111#107, 111#, #, 54#111, #75, 34#113, #, 106#117, #, 111#119, #, 54#121, #, 54#123, #, #, #, #, #, #, #, #, 136#126, 136#127, 136#128, 136#129, 136#130, #, 141#124, 141#, 141#125, 141#136, #, 54#141, #111, 34#143, #, 54#147, #, 136#149, #, 54#151, #, 136#153, #, 41#155, #, 
### 内容
#0, 19:
文档\计算机问题\合并多边形.ftxt
## end
#2, 73:
+[返回目录](,合并多边形)
地址::文档\计算机问题\合并多边形.ftxt



PIP(html):...
合并算法(html):...


## end
#3, 49:
合并多边形:...
创建于 20230125

节点数目统计::
+[设置结构](,节点数目统计)
## end
#8, 486:
<!--
+[H函数](,PIP)
参考::https://en.wikipedia.org/wiki/Point_in_polygon
参考2::https://en.wikipedia.org/wiki/Winding_number
+[打开网页](,参考)
-->

%图1<br>
%图2





<!--
图1(图片)::https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/RecursiveEvenPolygon.svg/1024px-RecursiveEvenPolygon.svg.png
图2(图片)::https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/Winding_number_algorithm_example.svg/1024px-Winding_number_algorithm_example.svg.png

验证公式(M函数):...
+[新建阅读窗口](,验证公式)

+[H函数](,PIP)
-->
## end
#11, 46:
https://en.wikipedia.org/wiki/Point_in_polygon
## end
#14, 44:
https://en.wikipedia.org/wiki/Winding_number
## end
#16, 142:
https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/Winding_number_algorithm_example.svg/1024px-Winding_number_algorithm_example.svg.png
## end
#19, 118:
https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/RecursiveEvenPolygon.svg/1024px-RecursiveEvenPolygon.svg.png
## end
#22, 1203:
%{
Nini, 打开直线交点(文件)
+[M函数](,验证公式)

测试交点:...
测试多点:...
区域内点:...

PtInPolygon(M函数):...
PtsInPolygon(M函数):...
+[新建阅读窗口](,PtsInPolygon)
%}

addpath('Matlab/space');
addpath('Matlab/draw');

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

Dx=5;
Dy=5;
x0=mean(x1);
y0=mean(y1);
N=100;

%x2=(rand(1,N)-1/2)*Dx+x0;
%y2=(rand(1,N)-1/2)*Dy+y0;
x2=x1;
y2=y1;

[n_i,n_w]=PtsInPolygon(x1,y1,x2,y2);

plot(x1,y1,x2,y2,'k.',x2(1,n_w~=0),y2(1,n_w~=0),'r*',x2(1,n_i==0),y2(1,n_i==0),'ro')
axis equal
axis([-4,4,-2,2])


%{
clf
+[M函数](,验证公式)
%}
## end
#26, 1076:
%{
Nini, 打开直线交点(文件)
+[M函数](,验证公式)

测试交点:...
%}

addpath('Matlab\space');

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x2=-3;
y2=0.5;

x2(end+1)=max(x1)+3;
y2(end+1)=y2;
x1(end+1)=x1(1);
y1(end+1)=y1(1);

[x0,y0,i]=intersection_line_curve(x2,y2,x1,y1);
n=sum(sign(y2(1)-y1(i)));

plot(x1,y1,x2,y2,x2(1),y2(1),'r*',x0,y0,'bo',x1(i),y1(i),'o')
axis equal
axis([-4,4,-2,2])
title(sprintf("Wind number is %d",n))


%{
+[M函数](,验证公式)
%}
## end
#28, 277:
%{
地址::Matlab\space\PtInPolygon.m
+[保存M函数](,PtInPolygon)

测试:...
%}



function [ioo,n_w]=PtInPolygon(x1,y1,x2,y2)

x2(end+1)=max(x1)+3;
y2(end+1)=y2;
[x0,y0,i]=intersection_line_curve(x2,y2,x1,y1);

ioo=1-mod(length(i),2);
n_w=sum(sign(y2(1)-y1(i)));

end

%{
+[M函数](,验证公式)
%}
## end
#31, 26:
Matlab\space\PtInPolygon.m
## end
#37, 1097:
%{
Nini, 打开直线交点(文件)
+[M函数](,验证公式)

测试交点:...
PtInPolygon(M函数):...
%}

addpath('Matlab\space');

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x2=-3;
y2=0.5;

x2(end+1)=max(x1)+3;
y2(end+1)=y2;
x1(end+1)=x1(1);
y1(end+1)=y1(1);

[x0,y0,i]=intersection_line_curve(x2,y2,x1,y1);
n=sum(sign(y2(1)-y1(i)));

plot(x1,y1,x2,y2,x2(1),y2(1),'r*',x0,y0,'bo',x1(i),y1(i),'o')
axis equal
axis([-4,4,-2,2])
title(sprintf("Wind number is %d",n))


%{
+[M函数](,验证公式)
%}
## end
#39, 1167:
%{
Nini, 打开直线交点(文件)
+[M函数](,验证公式)

测试交点:...
PtInPolygon(M函数):...
%}

addpath('Matlab\space');

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);


y2=linspace(-1,1,10);
x2=-2*ones(size(y2));

x2(end+1,:)=max(x1)+3;
y2(end+1,:)=y2;
n=zeros(1,size(x2,2));

clf
hold on
for k=1:size(x2,2)
[x0,y0,i]=intersection_line_curve(x2(:,k),y2(:,k),x1,y1);
n(k)=sum(sign(y2(1,k)-y1(i)));

plot(x0,y0,'o')
end

plot(x1,y1,x2,y2,x2(1,n~=0),y2(1,n~=0),'r*')
axis equal
axis([-4,4,-2,2])


%{
+[M函数](,验证公式)
%}
## end
#41, 809:
%{
地址::Matlab\space\PtsInPolygon.m
+[保存M函数](,PtsInPolygon)

测试:...
含顶点:...
%}

function [n_i,n_w]=PtsInPolygon(x1,y1,xs,ys)

xs(end+1,:)=max(x1)+3;
ys(end+1,:)=ys;
n_i=zeros(1,size(xs,2));
n_w=zeros(1,size(xs,2));

for k=1:size(xs,2)
    ns=find(xs(1,k)==x1 & ys(1,k)==y1);
    if isempty(ns)
        [x0,y0,i]=intersection_line_curve(xs(:,k),ys(:,k),x1,y1);

        if length(i)>1
            n_nodes=length(x0(abs(x0-x0([2:end,1]))<1e-10...
                & abs(y0-y0([2:end,1]))<1e-10));
        else
            n_nodes=0;
        end

        n_w(k)=sum(sign(ys(1,k)-y1(i)));
        n_i(k)=1-mod(length(i)-n_nodes,2);

%         n_w(k)=sum(sign(ys(1,k)-y1(i)));
%         n_i(k)=1-mod(length(i),2);
    
    else
        n_w(k)=0;
        n_i(k)=1;
    
    end
end

end

%{
+[保存M函数](,PtsInPolygon)
%}
## end
#44, 27:
Matlab\space\PtsInPolygon.m
## end
#49, 1160:
%{
Nini, 打开直线交点(文件)
+[M函数](,验证公式)

测试交点:...
测试多点:...
区域内点:...

PtInPolygon(M函数):...
PtsInPolygon(M函数):...
+[新建阅读窗口](,PtsInPolygon)
%}

addpath('Matlab\space');

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

Dx=5;
Dy=5;
x0=mean(x1);
y0=mean(y1);

x2=(rand(1,100)-1/2)*Dx+x0;
y2=(rand(1,100)-1/2)*Dy+y0;

[n_i,n_w]=PtsInPolygon(x1,y1,x2,y2);

plot(x1,y1,x2,y2,'k.',x2(1,n_w~=0),y2(1,n_w~=0),'r*',x2(1,n_i==0),y2(1,n_i==0),'ro')
axis equal
axis([-4,4,-2,2])


%{
clf
+[M函数](,验证公式)
%}
## end
#51, 170:
<!--
+[H函数](,合并算法)

算法是这样, 从交点开始出发, 沿第一个图形的边收集点. 每次经过一个交点就一定换一个图形取边. Merge就取离开另一个图形的方向, cut就取进入图形的方向. 是否进入图形, 由行走小步长后是否是内点来决定
-->



<!--
验证算法(M函数):...

+[H函数](,合并算法)
-->
## end
#54, 560:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...
行走方向:...
行走方向2:...
行走方向3:...
行走方向4:...
行走方向5:...

shape_merge(M函数):...
shape_cut(M函数):...
shape_inter(M函数):...
将条目"shape_merge"复制为条目"shape_inter"
+[新建阅读窗口](,shape_merge)

测试图形0:...
测试图形1:...
测试图形2:...
测试图形3:...
测试图形4:...
+[M函数](,测试图形4)

测试merge:...
测试cut:...
保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

[x3,y3]=shape_merge(x1,y1,x2,y2);

clf
subplot(1,2,1)
plot(x1,y1,x2,y2,x3(1:end),y3(1:end),'o-',x3([1,end]),y3([1,end]),'r*--');

subplot(1,2,2)
plot3(x3,y3,1:length(x3),'o-')


%{
+[M函数](,验证算法)
%}
## end
#57, 887:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...
行走方向:...
行走方向2:...
行走方向3:...
行走方向4:...
行走方向5:...

shape_merge(M函数):...
+[新建阅读窗口](,shape_merge)

测试图形1:...
+[M函数](,测试图形1)

测试merge:...
保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')



[x3,y3]=shape_merge(x1,y1,x2,y2);

clf
% plot(x1,y1,x2,y2,x3(2:end),y3(2:end),'o-',x1(1),y1(1),'r*',x3(1),y3(1),'bo')
plot(x1,y1,x2,y2,x3(1:end-6),y3(1:end-6),'o-',x3([1,end]),y3([1,end]),'r*--');axis equal
% plot(x1,y1,x2,y2,x3,y3,'o-')
plot3(x3,y3,1:length(x3),'o-')
% axis equal
%axis([-3,2,-2,2])

%{
clipboard('copy',x_0)
x3([1,126])
y3([1,126])
length(x3)
plot(x3(end-6:end),y3(end-6:end))

N=1;
x30=x3(1:end-N);
y30=y3(1:end-N);
sum(x30(1:end-1)==x30(end)&y30(1:end-1)==y30(end))

plot(1:length(x30)-1,y30(1:end-1)==y30(end),1:length(x30)-1,x30(1:end-1)==x30(end),'--')
plot(1:length(x30),x30,'.-',1:length(x30),y30,'.-')


+[M函数](,验证算法)
%}
## end
#59, 2778:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...
行走方向:...
行走方向2:...


保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=11;
x3=x2(si);
y3=y2(si);
shape_i=2;
ds=-1;

%{
length(x1)
si
shape_i
+[M函数](,验证算法)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

for i=1:2
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

if ds>0
    j=find(si==L_i);
else
    j=find(si-1==L_i);
end

%{
shape_i
ds
+[M函数](,验证算法)
%}

if ~isempty(j)
    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
    j=j(L==min(L(L>1e-9)));
    if sum(L<1e-9)==0
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

    if n_w==0
        ds=1;
    else
        ds=-1;
    end
else
    x3(end+1)=xs(si);
    y3(end+1)=ys(si);
    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end

end

%{
+[M函数](,验证算法)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,验证算法)
%}
## end
#61, 2002:
%{
+[M函数](,验证算法)

单步测试:...

保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

x3=xs0(1);
y3=ys0(1);
shape_i=1;
ii=1;
si=L1_i(ii)+1;
ds=1;

%{
+[M函数](,验证算法)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])


if shape_i==1
    xs=x1;
    ys=y1;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    L_i=L2_i;
    L_i_a=L1_i;
end

x3(end+1)=xs(si);
y3(end+1)=ys(si);

if ds>0
    j=find(si==L_i);
else
L_i
end

if ~isempty(j)
    j=j(1);
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(L_i(j));
    y3(end+1)=ys0(L_i(j));
    si=L_i_a(j); 
    ds=-ds;
else
    si=si+ds;
end

%{
+[M函数](,验证算法)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,验证算法)
%}
## end
#63, 2357:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...

保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=4;
x3=x2(si);
y3=y2(si);
shape_i=2;
ds=-1;

%{
+[M函数](,验证算法)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])


for i=1:2
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

x3(end+1)=xs(si);
y3(end+1)=ys(si);


if ds>0
    j=find(si==L_i);
else
    j=find(si-1==L_i);
end

if ~isempty(j)
    L=sqrt((xs0(j)-xs(si)).^2+(ys0(j)-ys(si)).^2);
    j=j(L==min(L));
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);
    
    if n_w==0
        ds=1;
    else
        ds=-1;
    end
else
    si=si+ds;
end

end

%{
+[M函数](,验证算法)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,验证算法)
%}
## end
#65, 2418:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...


保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=10;
x3=x1(si);
y3=y1(si);
shape_i=1;
ds=-1;

%{
length(x1)
si
shape_i
+[M函数](,验证算法)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])


for i=1:1
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

if ds>0
    j=find(si==L_i);
else
    j=find(si-1==L_i);
end

if ~isempty(j)
    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
    j=j(L==min(L(L>1e-8)));
end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);
    
    if n_w==0
        ds=1;
    else
        ds=-1;
    end
else
    x3(end+1)=xs(si);
    y3(end+1)=ys(si);
    si=si+ds;
end

end

%{
+[M函数](,验证算法)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,验证算法)
%}
## end
#67, 2560:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...
行走方向:...
行走方向2:...


保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=4;
x3=[];
y3=[];
shape_i=1;
ds=1;
move_flag=0;

%{
length(x1)
si
shape_i
+[M函数](,验证算法)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])


for i=1:4
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

if ds>0
    j=find(si==L_i);
else
    j=find(si-1==L_i);
end

%{
+[M函数](,验证算法)
%}

if ~isempty(j)
    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
    j=j(L==min(L(L>1e-9)));
    if sum(L<1e-9)==0
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    si=L_i_a(j);
    move_flag=1;

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);
    
    if n_w==0
        ds=1;
    else
        ds=-1;
    end
else
    x3(end+1)=xs(si);
    y3(end+1)=ys(si);
    si=si+ds;
end

end

%{
+[M函数](,验证算法)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,验证算法)
%}
## end
#69, 2826:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...
行走方向:...
行走方向2:...


保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=11;
x3=x2(si);
y3=y2(si);
shape_i=2;
ds=-1;

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,验证算法)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

for i=1:6
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

if ds>0
    j=find(si==L_i);
else
    j=find(si-1==L_i);
end

%{
shape_i
ds
+[M函数](,验证算法)
%}

if ~isempty(j)
    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
    j=j(L==min(L(L>1e-9)));
    if sum(L<1e-9)==0
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

%{
+[M函数](,验证算法)
%}

    if n_w==0
        ds=1;
        si=si+1;
    else
        ds=-1;
    end
else
    x3(end+1)=xs(si);
    y3(end+1)=ys(si);
    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end

end

%{
+[M函数](,验证算法)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,验证算法)
%}
## end
#71, 2898:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...
行走方向:...
行走方向2:...
行走方向3:...


保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=8;
x3=x1(si);
y3=y1(si);
shape_i=1;
ds=1;

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,验证算法)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
+[M函数](,验证算法)
%}

for i=1:8
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

if ds>0
    j=find(si==L_i);
else
    j=find(si-1==L_i);
end

%{
shape_i
j=find(si-1==L_i)
L2_i
si
+[M函数](,验证算法)
%}

if ~isempty(j)
    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
    j=j(L==min(L(L>1e-9)));
    if sum(L<1e-9)==0
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

%{
si
+[M函数](,验证算法)
%}

    if n_w==0
        ds=1;
        si=si+1;
    else
        ds=-1;
        si=si+1;
    end
else
    x3(end+1)=xs(si);
    y3(end+1)=ys(si);
    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end

end

%{
+[M函数](,验证算法)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,验证算法)
%}
## end
#73, 3050:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...
行走方向:...
行走方向2:...
行走方向3:...
行走方向4:...


保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=17;
x3=x1(si);
y3=y1(si);
shape_i=1;
ds=1;
move_over=0;

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,验证算法)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
si
shape_i
+[M函数](,验证算法)
%}

for i=1:3
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

if ds>0
    j=find(si==L_i);
else
    j=find(si-1==L_i);
end

%{
shape_i
j=find(si-1==L_i)
L2_i

+[M函数](,验证算法)
%}

if ~isempty(j)
    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
    j=j(L==min(L(L>1e-9)));
    if sum(L<1e-9)==0
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    elseif length(L)==1 && L==0
        move_over=1;
    end
end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

%{
si
+[M函数](,验证算法)
%}

    if n_w==0
        ds=1;
        si=si+1;
    else
        ds=-1;
        si=si+1;
    end
else
    if move_over==1
        move_over=0;
    else
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end

end

%{
+[M函数](,验证算法)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,验证算法)
%}
## end
#75, 3606:
%{
+[保存M函数](,shape_cut)
地址::Matlab\draw\shape_cut.m

测试:...
+[新建阅读窗口](,测试)
%}

function [x3,y3]=shape_cut(x1,y1,x2,y2)

if x1(end)~=x1(1) || y1(end)~=y1(1)
    x1(end+1)=x1(1);
    y1(end+1)=y1(1);
end

if x2(end)~=x2(1) || y2(end)~=y2(1)
    x2(end+1)=x2(1);
    y2(end+1)=y2(1);
end

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

%{
+[保存M函数](,shape_merge)
%}

if isempty(L1_i)
    x3=x1;
    y3=y1;
else
    si=L1_i(1);
    x3=xs0(1);
    y3=ys0(1);
    shape_i=1;
    on_intersection=1;

    % init direction
    dx=x1(si)-xs0(1);
    dy=y1(si)-ys0(1);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);
    
    if n_w==0
        ds=1;
    else
        ds=-1;
    end

    for i=1:200
        if shape_i==1
            xs=x1;
            ys=y1;
            xa=x2;
            ya=y2;
            L_i=L1_i;
            L_i_a=L2_i;
        else
            xs=x2;
            ys=y2;
            xa=x1;
            ya=y1;
            L_i=L2_i;
            L_i_a=L1_i;
        end

        j=find(si==L_i);

        if ~isempty(j)
            Dvx=-(xs(si)-x3(end))*ds;
            Dvy=-(ys(si)-y3(end))*ds;
            if on_intersection==1
                if length(j)==1
                    j=[];
                else
                    DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
                    j=j(DL>0);
                    DL=DL(DL>0);
                    j=j(DL==min(DL));
                end
                if isempty(j) && ds>0
                    si=si+ds;
                    on_intersection=0;
                
                    if si==0
                        si=length(xs);
                    elseif si>length(xs)
                        si=1;
                    end
                    continue;
                end
            else
                if ds<0
                    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
                    j=j(L==min(L));
                else
                    L=sqrt((xs0(j)-xs(si)).^2+(ys0(j)-ys(si)).^2);
                    j=j(L==min(L));
                    if x3(end)~=xs(si) || y3(end)~=ys(si)
                        x3(end+1)=xs(si);
                        y3(end+1)=ys(si);
                    end
                    on_intersection=0;
                end
            end
        
        end
        
        
        if ~isempty(j)
            shape_i=2-mod(shape_i+1,2);
            x3(end+1)=xs0(j);
            y3(end+1)=ys0(j);
            on_intersection=1;
            si=L_i_a(j);
        
            % direction
            dx=xa(si)-xs0(j);
            dy=ya(si)-ys0(j);
            L=sqrt(dx.^2+dy.^2);
            dx=dx/L*1e-7;
            dy=dy/L*1e-7;
            n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);
        
            if shape_i==1
                if n_w==0
                    ds=1;
                else
                    ds=-1;
                end
            else
                if n_w==0
                    ds=-1;
                else
                    ds=1;
                end
            end
        else
            if x3(end)~=xs(si) || y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        
            si=si+ds;
        
            if si==0
                si=length(xs);
            elseif si>length(xs)
                si=1;
            end
        
        end
        
        
        if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
            break;
        end
    
    end

end


%{
+[保存M函数](,shape_cut)
%}
## end
#78, 23:
Matlab\draw\shape_cut.m
## end
#83, 2974:
%{
+[M函数](,测试)

测试图形0:...
测试图形1:...
测试图形2:...
+[M函数](,测试图形2)

保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')


[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=L1_i(1);
x3=xs0(1);
y3=ys0(1);
shape_i=1;
ds=-1;
on_intersection=1;

%{
+[M函数](,测试)
%}

%{
% init direction
dx=x1(si)-xs0(1);
dy=y1(si)-ys0(1);
L=sqrt(dx.^2+dy.^2);
dx=dx/L*1e-7;
dy=dy/L*1e-7;
n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);

if n_w==0
    ds=1;
else
    ds=-1;
end
%}

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,测试)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
size(x3)
+[M函数](,测试)
%}

for i=1:200
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

%{
ds
si
shape_i
on_intersection
+[M函数](,测试)
%}

j=find(si==L_i);

%{
+[M函数](,测试)
%}

if ~isempty(j)
    Dvx=-(xs(si)-x3(end))*ds;
    Dvy=-(ys(si)-y3(end))*ds;
    if on_intersection==1
        if length(j)==1
            j=[];
        else
            DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
            j=j(DL>0);
            DL=DL(DL>0);
            j=j(DL==min(DL));
        end
        if isempty(j) && ds>0
            si=si+ds;
            on_intersection=0;
        
            if si==0
                si=length(xs);
            elseif si>length(xs)
                si=1;
            end
            continue;
        end
    else
        if ds<0
            L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
            j=j(L==min(L));
        else
            L=sqrt((xs0(j)-xs(si)).^2+(ys0(j)-ys(si)).^2);
            j=j(L==min(L));
            if x3(end)~=xs(si) || y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        end
    end

end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    on_intersection=1;
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

    if shape_i==1
        if n_w==0
            ds=1;
        else
            ds=-1;
        end
    else
        if n_w==0
            ds=-1;
        else
            ds=1;
        end
    end

%{
+[M函数](,测试)
%}

else
    if x3(end)~=xs(si) || y3(end)~=ys(si)
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
    on_intersection=0;

    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end


if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
    break;
end

end

%{
+[M函数](,测试)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,测试)
%}
## end
#85, 505:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...
行走方向:...
行走方向2:...
行走方向3:...
行走方向4:...
行走方向5:...

shape_merge(M函数):...
shape_cut(M函数):...
将条目"shape_merge"复制为条目"shape_cut"
+[新建阅读窗口](,shape_cut)

测试图形0:...
测试图形1:...
测试图形2:...
+[M函数](,测试图形2)

测试merge:...
保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

[x3,y3]=shape_merge(x1,y1,x2,y2);

clf
subplot(1,2,1)
plot(x1,y1,x2,y2,x3(1:end),y3(1:end),'o-',x3([1,end]),y3([1,end]),'r*--');

subplot(1,2,2)
plot3(x3,y3,1:length(x3),'o-')


%{
+[M函数](,验证算法)
%}
## end
#87, 3701:

x1=[0.766044443118978 -0.766044443118978 -0.123256833432439 1.40883205280552 0.766044443118978];
y1=[-0.642787609686539 0.642787609686539 1.40883205280552 0.123256833432439 -0.642787609686539];


x2=[1.6 1.59879200588313 1.59517288769848 1.58915721835762 1.58076922083781 1.57004267064457 1.55702075980964 1.54175592297197 1.52430962624187 1.50475211969871 1.48316215451864 1.45962666587139 1.43424042286304 1.40710564693428 1.37833160025071 1.34803414574272 1.3163352805663 1.28336264486361 1.24924900780113 1.21413173295512 1.17815222519696 1.14145536130566 1.10418890660016 1.06650291994061 1.02854914949425 0.990480421699115 0.952450025885927 0.914611097036029 0.877115999160886 0.840115711785979 0.803759222009547 0.768192924584123 0.733560032436536 0.7 0.667647961680334 0.6366341877174 0.607083559632829 0.579115067376207 0.552841330194547 0.528368143154328 0.5057940511421 0.485209952059014 0.466698730807046 0.450334925540758 0.436184427528455 0.424304215831302 0.414742127868756 0.407536666794163 0.402716846456149 0.400302074570089 0.400302074570089 0.402716846456149 0.407536666794163 0.414742127868756 0.424304215831302 0.436184427528455 0.450334925540758 0.466698730807046 0.485209952059014 0.5057940511421 0.528368143154328 0.552841330194547 0.579115067376207 0.607083559632829 0.6366341877174 0.667647961680334 0.7 0.733560032436535 0.768192924584123 0.803759222009547 0.840115711785979 0.877115999160886 0.914611097036029 0.952450025885927 0.990480421699115 1.02854914949425 1.06650291994061 1.10418890660016 1.14145536130566 1.17815222519696 1.21413173295512 1.24924900780113 1.28336264486361 1.3163352805663 1.34803414574272 1.37833160025071 1.40710564693428 1.43424042286304 1.45962666587139 1.48316215451864 1.50475211969871 1.52430962624187 1.54175592297197 1.55702075980964 1.57004267064457 1.58076922083781 1.58915721835762 1.59517288769848 1.59879200588313 1.6];
y2=[-1 -0.961945648206061 -0.92404452785575 -0.886449253383754 -0.849311207691352 -0.812779932580908 -0.777002526603804 -0.742123052746497 -0.708281958339719 -0.675615509526641 -0.644255242567216 -0.614327434188076 -0.585952593110733 -0.55924497480548 -0.534312121424946 -0.511254428769799 -0.490164742030291 -0.471127981931451 -0.454220802787289 -0.439511283840936 -0.427058655133556 -0.416913059005875 -0.409115348192675 -0.403696921323248 -0.400679596490195 -0.400075523395675 -0.401887134428835 -0.40610713487144 -0.412718532271133 -0.421694704864035 -0.432999508771199 -0.446587423537251 -0.462403735425199 -0.480384757729337 -0.500458087219137 -0.522542895681501 -0.546550255387445 -0.572383497172682 -0.599938599690225 -0.629104608267637 -0.659764081682338 -0.691793565055956 -0.725064086963554 -0.759441678756032 -0.794787914004599 -0.830960465895142 -0.867813680328076 -0.90519916241599 -0.94296637401749 -0.980963239901159 -1.01903676009884 -1.05703362598251 -1.09480083758401 -1.13218631967192 -1.16903953410486 -1.2052120859954 -1.24055832124397 -1.27493591303645 -1.30820643494404 -1.34023591831766 -1.37089539173236 -1.40006140030977 -1.42761650282732 -1.45344974461255 -1.4774571043185 -1.49954191278086 -1.51961524227066 -1.5375962645748 -1.55341257646275 -1.5670004912288 -1.57830529513597 -1.58728146772887 -1.59389286512856 -1.59811286557117 -1.59992447660433 -1.5993204035098 -1.59630307867675 -1.59088465180732 -1.58308694099413 -1.57294134486644 -1.56048871615906 -1.54577919721271 -1.52887201806855 -1.50983525796971 -1.4887455712302 -1.46568787857505 -1.44075502519452 -1.41404740688927 -1.38567256581192 -1.35574475743278 -1.32438449047336 -1.29171804166028 -1.2578769472535 -1.2229974733962 -1.18722006741909 -1.15068879230865 -1.11355074661625 -1.07595547214425 -1.03805435179394 -1];

## end
#89, 2120:
%{
+[M函数](,测试)

测试图形0:...
测试图形1:...
测试图形2:...
+[M函数](,测试图形0)

保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')


[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=11;
x3=x1(si);
y3=y1(si);
shape_i=1;
ds=-1;
move_over=0;

%{
+[M函数](,测试)
%}

%{
% init direction
dx=x1(si)-xs0(1);
dy=y1(si)-ys0(1);
L=sqrt(dx.^2+dy.^2);
dx=dx/L*1e-7;
dy=dy/L*1e-7;
n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);

if n_w==0
    ds=1;
else
    ds=-1;
end
%}

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,测试)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
size(x3)
shape_i
+[M函数](,测试)
%}

for i=1:20
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

if ds>0
    j=find(si==L_i);
else
    j=find(si-1==L_i);
end

%{
shape_i
j=find(si-1==L_i)
L2_i

ds
si
+[M函数](,测试)
%}

if ~isempty(j)
    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
    j=j(L==min(L(L>1e-9)));
    if sum(L<1e-9)==0
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    elseif length(L)==1 && L==0
        move_over=1;
    end
end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

    if n_w==0
        ds=1;
        % si=si+1;
    else
        ds=-1;
        si=si+1;
    end
else
    if move_over==1
        move_over=0;
    else
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end


if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
22
    break;
end

end

%{
+[M函数](,测试)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,测试)
%}
## end
#91, 1172:

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);
## end
#93, 3701:

x1=[0.766044443118978 -0.766044443118978 -0.123256833432439 1.40883205280552 0.766044443118978];
y1=[-0.642787609686539 0.642787609686539 1.40883205280552 0.123256833432439 -0.642787609686539];


x2=[1.6 1.59879200588313 1.59517288769848 1.58915721835762 1.58076922083781 1.57004267064457 1.55702075980964 1.54175592297197 1.52430962624187 1.50475211969871 1.48316215451864 1.45962666587139 1.43424042286304 1.40710564693428 1.37833160025071 1.34803414574272 1.3163352805663 1.28336264486361 1.24924900780113 1.21413173295512 1.17815222519696 1.14145536130566 1.10418890660016 1.06650291994061 1.02854914949425 0.990480421699115 0.952450025885927 0.914611097036029 0.877115999160886 0.840115711785979 0.803759222009547 0.768192924584123 0.733560032436536 0.7 0.667647961680334 0.6366341877174 0.607083559632829 0.579115067376207 0.552841330194547 0.528368143154328 0.5057940511421 0.485209952059014 0.466698730807046 0.450334925540758 0.436184427528455 0.424304215831302 0.414742127868756 0.407536666794163 0.402716846456149 0.400302074570089 0.400302074570089 0.402716846456149 0.407536666794163 0.414742127868756 0.424304215831302 0.436184427528455 0.450334925540758 0.466698730807046 0.485209952059014 0.5057940511421 0.528368143154328 0.552841330194547 0.579115067376207 0.607083559632829 0.6366341877174 0.667647961680334 0.7 0.733560032436535 0.768192924584123 0.803759222009547 0.840115711785979 0.877115999160886 0.914611097036029 0.952450025885927 0.990480421699115 1.02854914949425 1.06650291994061 1.10418890660016 1.14145536130566 1.17815222519696 1.21413173295512 1.24924900780113 1.28336264486361 1.3163352805663 1.34803414574272 1.37833160025071 1.40710564693428 1.43424042286304 1.45962666587139 1.48316215451864 1.50475211969871 1.52430962624187 1.54175592297197 1.55702075980964 1.57004267064457 1.58076922083781 1.58915721835762 1.59517288769848 1.59879200588313 1.6];
y2=[-1 -0.961945648206061 -0.92404452785575 -0.886449253383754 -0.849311207691352 -0.812779932580908 -0.777002526603804 -0.742123052746497 -0.708281958339719 -0.675615509526641 -0.644255242567216 -0.614327434188076 -0.585952593110733 -0.55924497480548 -0.534312121424946 -0.511254428769799 -0.490164742030291 -0.471127981931451 -0.454220802787289 -0.439511283840936 -0.427058655133556 -0.416913059005875 -0.409115348192675 -0.403696921323248 -0.400679596490195 -0.400075523395675 -0.401887134428835 -0.40610713487144 -0.412718532271133 -0.421694704864035 -0.432999508771199 -0.446587423537251 -0.462403735425199 -0.480384757729337 -0.500458087219137 -0.522542895681501 -0.546550255387445 -0.572383497172682 -0.599938599690225 -0.629104608267637 -0.659764081682338 -0.691793565055956 -0.725064086963554 -0.759441678756032 -0.794787914004599 -0.830960465895142 -0.867813680328076 -0.90519916241599 -0.94296637401749 -0.980963239901159 -1.01903676009884 -1.05703362598251 -1.09480083758401 -1.13218631967192 -1.16903953410486 -1.2052120859954 -1.24055832124397 -1.27493591303645 -1.30820643494404 -1.34023591831766 -1.37089539173236 -1.40006140030977 -1.42761650282732 -1.45344974461255 -1.4774571043185 -1.49954191278086 -1.51961524227066 -1.5375962645748 -1.55341257646275 -1.5670004912288 -1.57830529513597 -1.58728146772887 -1.59389286512856 -1.59811286557117 -1.59992447660433 -1.5993204035098 -1.59630307867675 -1.59088465180732 -1.58308694099413 -1.57294134486644 -1.56048871615906 -1.54577919721271 -1.52887201806855 -1.50983525796971 -1.4887455712302 -1.46568787857505 -1.44075502519452 -1.41404740688927 -1.38567256581192 -1.35574475743278 -1.32438449047336 -1.29171804166028 -1.2578769472535 -1.2229974733962 -1.18722006741909 -1.15068879230865 -1.11355074661625 -1.07595547214425 -1.03805435179394 -1];

## end
#95, 3599:
x1=[1.6 1.59879200588313 1.59517288769848 1.58915721835762 1.58076922083781 1.57004267064457 1.55702075980964 1.54175592297197 1.52430962624187 1.50475211969871 1.48316215451864 1.45962666587139 1.43424042286304 1.40710564693428 1.37833160025071 1.34803414574272 1.3163352805663 1.28336264486361 1.24924900780113 1.21413173295512 1.17815222519696 1.14145536130566 1.10418890660016 1.06650291994061 1.02854914949425 0.990480421699115 0.952450025885927 0.914611097036029 0.877115999160886 0.840115711785979 0.803759222009547 0.768192924584123 0.733560032436536 0.7 0.667647961680334 0.6366341877174 0.607083559632829 0.579115067376207 0.552841330194547 0.528368143154328 0.5057940511421 0.485209952059014 0.466698730807046 0.450334925540758 0.436184427528455 0.424304215831302 0.414742127868756 0.407536666794163 0.402716846456149 0.400302074570089 0.400302074570089 0.402716846456149 0.407536666794163 0.414742127868756 0.424304215831302 0.436184427528455 0.450334925540758 0.466698730807046 0.485209952059014 0.5057940511421 0.528368143154328 0.552841330194547 0.579115067376207 0.607083559632829 0.6366341877174 0.667647961680334 0.7 0.733560032436535 0.768192924584123 0.803759222009547 0.840115711785979 0.877115999160886 0.914611097036029 0.952450025885927 0.990480421699115 1.02854914949425 1.06650291994061 1.10418890660016 1.14145536130566 1.17815222519696 1.21413173295512 1.24924900780113 1.28336264486361 1.3163352805663 1.34803414574272 1.37833160025071 1.40710564693428 1.43424042286304 1.45962666587139 1.48316215451864 1.50475211969871 1.52430962624187 1.54175592297197 1.55702075980964 1.57004267064457 1.58076922083781 1.58915721835762 1.59517288769848 1.59879200588313 1.6];

y1=[1 1.03805435179394 1.07595547214425 1.11355074661625 1.15068879230865 1.18722006741909 1.2229974733962 1.2578769472535 1.29171804166028 1.32438449047336 1.35574475743278 1.38567256581192 1.41404740688927 1.44075502519452 1.46568787857505 1.4887455712302 1.50983525796971 1.52887201806855 1.54577919721271 1.56048871615906 1.57294134486644 1.58308694099413 1.59088465180732 1.59630307867675 1.5993204035098 1.59992447660433 1.59811286557117 1.59389286512856 1.58728146772887 1.57830529513597 1.5670004912288 1.55341257646275 1.5375962645748 1.51961524227066 1.49954191278086 1.4774571043185 1.45344974461255 1.42761650282732 1.40006140030977 1.37089539173236 1.34023591831766 1.30820643494404 1.27493591303645 1.24055832124397 1.2052120859954 1.16903953410486 1.13218631967192 1.09480083758401 1.05703362598251 1.01903676009884 0.980963239901159 0.94296637401749 0.90519916241599 0.867813680328076 0.830960465895142 0.794787914004599 0.759441678756032 0.725064086963554 0.691793565055956 0.659764081682338 0.629104608267637 0.599938599690225 0.572383497172682 0.546550255387445 0.522542895681501 0.500458087219137 0.480384757729337 0.462403735425199 0.446587423537251 0.432999508771199 0.421694704864035 0.412718532271133 0.40610713487144 0.401887134428835 0.400075523395675 0.400679596490195 0.403696921323248 0.409115348192675 0.416913059005875 0.427058655133556 0.439511283840936 0.454220802787289 0.471127981931451 0.490164742030291 0.511254428769799 0.534312121424946 0.55924497480548 0.585952593110733 0.614327434188076 0.644255242567216 0.675615509526641 0.708281958339719 0.742123052746497 0.777002526603804 0.812779932580908 0.849311207691352 0.886449253383754 0.924044527855751 0.961945648206061 1];

x2=[0.984807753012208 -0.984807753012208 -1.15845593067914 0.811159575345278 0.984807753012208];
y2=[0.17364817766693 -0.17364817766693 0.811159575345278 1.15845593067914 0.17364817766693];



## end
#97, 3599:
x1=[1.6 1.59879200588313 1.59517288769848 1.58915721835762 1.58076922083781 1.57004267064457 1.55702075980964 1.54175592297197 1.52430962624187 1.50475211969871 1.48316215451864 1.45962666587139 1.43424042286304 1.40710564693428 1.37833160025071 1.34803414574272 1.3163352805663 1.28336264486361 1.24924900780113 1.21413173295512 1.17815222519696 1.14145536130566 1.10418890660016 1.06650291994061 1.02854914949425 0.990480421699115 0.952450025885927 0.914611097036029 0.877115999160886 0.840115711785979 0.803759222009547 0.768192924584123 0.733560032436536 0.7 0.667647961680334 0.6366341877174 0.607083559632829 0.579115067376207 0.552841330194547 0.528368143154328 0.5057940511421 0.485209952059014 0.466698730807046 0.450334925540758 0.436184427528455 0.424304215831302 0.414742127868756 0.407536666794163 0.402716846456149 0.400302074570089 0.400302074570089 0.402716846456149 0.407536666794163 0.414742127868756 0.424304215831302 0.436184427528455 0.450334925540758 0.466698730807046 0.485209952059014 0.5057940511421 0.528368143154328 0.552841330194547 0.579115067376207 0.607083559632829 0.6366341877174 0.667647961680334 0.7 0.733560032436535 0.768192924584123 0.803759222009547 0.840115711785979 0.877115999160886 0.914611097036029 0.952450025885927 0.990480421699115 1.02854914949425 1.06650291994061 1.10418890660016 1.14145536130566 1.17815222519696 1.21413173295512 1.24924900780113 1.28336264486361 1.3163352805663 1.34803414574272 1.37833160025071 1.40710564693428 1.43424042286304 1.45962666587139 1.48316215451864 1.50475211969871 1.52430962624187 1.54175592297197 1.55702075980964 1.57004267064457 1.58076922083781 1.58915721835762 1.59517288769848 1.59879200588313 1.6];

y1=[1 1.03805435179394 1.07595547214425 1.11355074661625 1.15068879230865 1.18722006741909 1.2229974733962 1.2578769472535 1.29171804166028 1.32438449047336 1.35574475743278 1.38567256581192 1.41404740688927 1.44075502519452 1.46568787857505 1.4887455712302 1.50983525796971 1.52887201806855 1.54577919721271 1.56048871615906 1.57294134486644 1.58308694099413 1.59088465180732 1.59630307867675 1.5993204035098 1.59992447660433 1.59811286557117 1.59389286512856 1.58728146772887 1.57830529513597 1.5670004912288 1.55341257646275 1.5375962645748 1.51961524227066 1.49954191278086 1.4774571043185 1.45344974461255 1.42761650282732 1.40006140030977 1.37089539173236 1.34023591831766 1.30820643494404 1.27493591303645 1.24055832124397 1.2052120859954 1.16903953410486 1.13218631967192 1.09480083758401 1.05703362598251 1.01903676009884 0.980963239901159 0.94296637401749 0.90519916241599 0.867813680328076 0.830960465895142 0.794787914004599 0.759441678756032 0.725064086963554 0.691793565055956 0.659764081682338 0.629104608267637 0.599938599690225 0.572383497172682 0.546550255387445 0.522542895681501 0.500458087219137 0.480384757729337 0.462403735425199 0.446587423537251 0.432999508771199 0.421694704864035 0.412718532271133 0.40610713487144 0.401887134428835 0.400075523395675 0.400679596490195 0.403696921323248 0.409115348192675 0.416913059005875 0.427058655133556 0.439511283840936 0.454220802787289 0.471127981931451 0.490164742030291 0.511254428769799 0.534312121424946 0.55924497480548 0.585952593110733 0.614327434188076 0.644255242567216 0.675615509526641 0.708281958339719 0.742123052746497 0.777002526603804 0.812779932580908 0.849311207691352 0.886449253383754 0.924044527855751 0.961945648206061 1];

x2=[0.984807753012208 -0.984807753012208 -1.15845593067914 0.811159575345278 0.984807753012208];
y2=[0.17364817766693 -0.17364817766693 0.811159575345278 1.15845593067914 0.17364817766693];



## end
#98, 3599:
x1=[1.6 1.59879200588313 1.59517288769848 1.58915721835762 1.58076922083781 1.57004267064457 1.55702075980964 1.54175592297197 1.52430962624187 1.50475211969871 1.48316215451864 1.45962666587139 1.43424042286304 1.40710564693428 1.37833160025071 1.34803414574272 1.3163352805663 1.28336264486361 1.24924900780113 1.21413173295512 1.17815222519696 1.14145536130566 1.10418890660016 1.06650291994061 1.02854914949425 0.990480421699115 0.952450025885927 0.914611097036029 0.877115999160886 0.840115711785979 0.803759222009547 0.768192924584123 0.733560032436536 0.7 0.667647961680334 0.6366341877174 0.607083559632829 0.579115067376207 0.552841330194547 0.528368143154328 0.5057940511421 0.485209952059014 0.466698730807046 0.450334925540758 0.436184427528455 0.424304215831302 0.414742127868756 0.407536666794163 0.402716846456149 0.400302074570089 0.400302074570089 0.402716846456149 0.407536666794163 0.414742127868756 0.424304215831302 0.436184427528455 0.450334925540758 0.466698730807046 0.485209952059014 0.5057940511421 0.528368143154328 0.552841330194547 0.579115067376207 0.607083559632829 0.6366341877174 0.667647961680334 0.7 0.733560032436535 0.768192924584123 0.803759222009547 0.840115711785979 0.877115999160886 0.914611097036029 0.952450025885927 0.990480421699115 1.02854914949425 1.06650291994061 1.10418890660016 1.14145536130566 1.17815222519696 1.21413173295512 1.24924900780113 1.28336264486361 1.3163352805663 1.34803414574272 1.37833160025071 1.40710564693428 1.43424042286304 1.45962666587139 1.48316215451864 1.50475211969871 1.52430962624187 1.54175592297197 1.55702075980964 1.57004267064457 1.58076922083781 1.58915721835762 1.59517288769848 1.59879200588313 1.6];

y1=[1 1.03805435179394 1.07595547214425 1.11355074661625 1.15068879230865 1.18722006741909 1.2229974733962 1.2578769472535 1.29171804166028 1.32438449047336 1.35574475743278 1.38567256581192 1.41404740688927 1.44075502519452 1.46568787857505 1.4887455712302 1.50983525796971 1.52887201806855 1.54577919721271 1.56048871615906 1.57294134486644 1.58308694099413 1.59088465180732 1.59630307867675 1.5993204035098 1.59992447660433 1.59811286557117 1.59389286512856 1.58728146772887 1.57830529513597 1.5670004912288 1.55341257646275 1.5375962645748 1.51961524227066 1.49954191278086 1.4774571043185 1.45344974461255 1.42761650282732 1.40006140030977 1.37089539173236 1.34023591831766 1.30820643494404 1.27493591303645 1.24055832124397 1.2052120859954 1.16903953410486 1.13218631967192 1.09480083758401 1.05703362598251 1.01903676009884 0.980963239901159 0.94296637401749 0.90519916241599 0.867813680328076 0.830960465895142 0.794787914004599 0.759441678756032 0.725064086963554 0.691793565055956 0.659764081682338 0.629104608267637 0.599938599690225 0.572383497172682 0.546550255387445 0.522542895681501 0.500458087219137 0.480384757729337 0.462403735425199 0.446587423537251 0.432999508771199 0.421694704864035 0.412718532271133 0.40610713487144 0.401887134428835 0.400075523395675 0.400679596490195 0.403696921323248 0.409115348192675 0.416913059005875 0.427058655133556 0.439511283840936 0.454220802787289 0.471127981931451 0.490164742030291 0.511254428769799 0.534312121424946 0.55924497480548 0.585952593110733 0.614327434188076 0.644255242567216 0.675615509526641 0.708281958339719 0.742123052746497 0.777002526603804 0.812779932580908 0.849311207691352 0.886449253383754 0.924044527855751 0.961945648206061 1];

x2=[0.984807753012208 -0.984807753012208 -1.15845593067914 0.811159575345278 0.984807753012208];
y2=[0.17364817766693 -0.17364817766693 0.811159575345278 1.15845593067914 0.17364817766693];



## end
#99, 3701:

x1=[0.766044443118978 -0.766044443118978 -0.123256833432439 1.40883205280552 0.766044443118978];
y1=[-0.642787609686539 0.642787609686539 1.40883205280552 0.123256833432439 -0.642787609686539];


x2=[1.6 1.59879200588313 1.59517288769848 1.58915721835762 1.58076922083781 1.57004267064457 1.55702075980964 1.54175592297197 1.52430962624187 1.50475211969871 1.48316215451864 1.45962666587139 1.43424042286304 1.40710564693428 1.37833160025071 1.34803414574272 1.3163352805663 1.28336264486361 1.24924900780113 1.21413173295512 1.17815222519696 1.14145536130566 1.10418890660016 1.06650291994061 1.02854914949425 0.990480421699115 0.952450025885927 0.914611097036029 0.877115999160886 0.840115711785979 0.803759222009547 0.768192924584123 0.733560032436536 0.7 0.667647961680334 0.6366341877174 0.607083559632829 0.579115067376207 0.552841330194547 0.528368143154328 0.5057940511421 0.485209952059014 0.466698730807046 0.450334925540758 0.436184427528455 0.424304215831302 0.414742127868756 0.407536666794163 0.402716846456149 0.400302074570089 0.400302074570089 0.402716846456149 0.407536666794163 0.414742127868756 0.424304215831302 0.436184427528455 0.450334925540758 0.466698730807046 0.485209952059014 0.5057940511421 0.528368143154328 0.552841330194547 0.579115067376207 0.607083559632829 0.6366341877174 0.667647961680334 0.7 0.733560032436535 0.768192924584123 0.803759222009547 0.840115711785979 0.877115999160886 0.914611097036029 0.952450025885927 0.990480421699115 1.02854914949425 1.06650291994061 1.10418890660016 1.14145536130566 1.17815222519696 1.21413173295512 1.24924900780113 1.28336264486361 1.3163352805663 1.34803414574272 1.37833160025071 1.40710564693428 1.43424042286304 1.45962666587139 1.48316215451864 1.50475211969871 1.52430962624187 1.54175592297197 1.55702075980964 1.57004267064457 1.58076922083781 1.58915721835762 1.59517288769848 1.59879200588313 1.6];
y2=[-1 -0.961945648206061 -0.92404452785575 -0.886449253383754 -0.849311207691352 -0.812779932580908 -0.777002526603804 -0.742123052746497 -0.708281958339719 -0.675615509526641 -0.644255242567216 -0.614327434188076 -0.585952593110733 -0.55924497480548 -0.534312121424946 -0.511254428769799 -0.490164742030291 -0.471127981931451 -0.454220802787289 -0.439511283840936 -0.427058655133556 -0.416913059005875 -0.409115348192675 -0.403696921323248 -0.400679596490195 -0.400075523395675 -0.401887134428835 -0.40610713487144 -0.412718532271133 -0.421694704864035 -0.432999508771199 -0.446587423537251 -0.462403735425199 -0.480384757729337 -0.500458087219137 -0.522542895681501 -0.546550255387445 -0.572383497172682 -0.599938599690225 -0.629104608267637 -0.659764081682338 -0.691793565055956 -0.725064086963554 -0.759441678756032 -0.794787914004599 -0.830960465895142 -0.867813680328076 -0.90519916241599 -0.94296637401749 -0.980963239901159 -1.01903676009884 -1.05703362598251 -1.09480083758401 -1.13218631967192 -1.16903953410486 -1.2052120859954 -1.24055832124397 -1.27493591303645 -1.30820643494404 -1.34023591831766 -1.37089539173236 -1.40006140030977 -1.42761650282732 -1.45344974461255 -1.4774571043185 -1.49954191278086 -1.51961524227066 -1.5375962645748 -1.55341257646275 -1.5670004912288 -1.57830529513597 -1.58728146772887 -1.59389286512856 -1.59811286557117 -1.59992447660433 -1.5993204035098 -1.59630307867675 -1.59088465180732 -1.58308694099413 -1.57294134486644 -1.56048871615906 -1.54577919721271 -1.52887201806855 -1.50983525796971 -1.4887455712302 -1.46568787857505 -1.44075502519452 -1.41404740688927 -1.38567256581192 -1.35574475743278 -1.32438449047336 -1.29171804166028 -1.2578769472535 -1.2229974733962 -1.18722006741909 -1.15068879230865 -1.11355074661625 -1.07595547214425 -1.03805435179394 -1];

## end
#100, 1172:

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);
## end
#101, 2517:
%{
+[M函数](,测试)

测试图形0:...
测试图形1:...
测试图形2:...
+[M函数](,测试图形0)

保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')


[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=8;
x3=x1(si);
y3=y1(si);
shape_i=1;
ds=-1;
on_intersection=0;

%{
+[M函数](,测试)
%}

%{
% init direction
dx=x1(si)-xs0(1);
dy=y1(si)-ys0(1);
L=sqrt(dx.^2+dy.^2);
dx=dx/L*1e-7;
dy=dy/L*1e-7;
n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);

if n_w==0
    ds=1;
else
    ds=-1;
end
%}

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,测试)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
size(x3)

+[M函数](,测试)
%}

for i=1:26
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

%{
ds
si
shape_i
on_intersection
+[M函数](,测试)
%}

j=find(si==L_i);


%{
+[M函数](,测试)
%}

if ~isempty(j)
    Dvx=-(xs(si)-x3(end))*ds;
    Dvy=-(ys(si)-y3(end))*ds;
    if on_intersection==1
        if length(j)==1
            j=[];
        else
            DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
            j=j(DL>0);
            DL=DL(DL>0);
            j=j(DL==min(DL));
        end
        if isempty(j) && ds>0
            si=si+ds;
        end
    else
        L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
        j=j(L==min(L));
        if ds>0
            if x3(end)~=xs(si) && y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        end
    end

end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    on_intersection=1;
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

    if n_w==0
        ds=1;
    else
        ds=-1;
    end
else
    if x3(end)~=xs(si) && y3(end)~=ys(si)
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
    on_intersection=0;

    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end


if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
    break;
end

end

%{
+[M函数](,测试)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,测试)
%}
## end
#106, 2846:
%{
+[M函数](,测试)

测试图形0:...
测试图形1:...
测试图形2:...
+[M函数](,测试图形0)

保存:...
算法内容:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')


[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=L1_i(1);
x3=xs0(1);
y3=ys0(1);
shape_i=1;
ds=1;
on_intersection=1;

%{
+[M函数](,测试)
%}

%{
% init direction
dx=x1(si)-xs0(1);
dy=y1(si)-ys0(1);
L=sqrt(dx.^2+dy.^2);
dx=dx/L*1e-7;
dy=dy/L*1e-7;
n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);

if n_w==0
    ds=-1;
else
    ds=1;
end
%}

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,测试)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
size(x3)
+[M函数](,测试)
%}

for i=1:40
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

%{
ds
si
shape_i
on_intersection
+[M函数](,测试)
%}

j=find(si==L_i);

%{
+[M函数](,测试)
%}

if ~isempty(j)
    Dvx=-(xs(si)-x3(end))*ds;
    Dvy=-(ys(si)-y3(end))*ds;
    if on_intersection==1
        if length(j)==1
            j=[];
        else
            DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
            j=j(DL>0);
            DL=DL(DL>0);
            j=j(DL==min(DL));
        end
        if isempty(j) && ds>0
            si=si+ds;
            on_intersection=0;
        
            if si==0
                si=length(xs);
            elseif si>length(xs)
                si=1;
            end
            continue;
        end

%{
+[M函数](,测试)
%}

    else
        if ds<0
            L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
            j=j(L==min(L));
        else
            L=sqrt((xs0(j)-xs(si)).^2+(ys0(j)-ys(si)).^2);
            j=j(L==min(L));
            if x3(end)~=xs(si) || y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        end
    end

end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    on_intersection=1;
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

    if n_w==0
        ds=-1;
    else
        ds=1;
    end
else
    if x3(end)~=xs(si) || y3(end)~=ys(si)
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
    on_intersection=0;

    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end


if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
    break;
end

end

%{
+[M函数](,测试)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,测试)
%}
## end
#107, 25:
Matlab\draw\shape_inter.m
## end
#111, 3422:
%{
+[保存M函数](,shape_inter)
地址::Matlab\draw\shape_inter.m

测试:...
+[新建阅读窗口](,测试)

保存:...
%}

function [x3,y3]=shape_inter(x1,y1,x2,y2)

if x1(end)~=x1(1) || y1(end)~=y1(1)
    x1(end+1)=x1(1);
    y1(end+1)=y1(1);
end

if x2(end)~=x2(1) || y2(end)~=y2(1)
    x2(end+1)=x2(1);
    y2(end+1)=y2(1);
end

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

%{
+[保存M函数](,shape_inter)
%}

if isempty(L1_i)
    x3=x1;
    y3=y1;
else
    si=L1_i(1);
    x3=xs0(1);
    y3=ys0(1);
    shape_i=1;
    on_intersection=1;

    % init direction
    dx=x1(si)-xs0(1);
    dy=y1(si)-ys0(1);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);
    
    if n_w==0
        ds=-1;
    else
        ds=1;
    end

    for i=1:200
        if shape_i==1
            xs=x1;
            ys=y1;
            xa=x2;
            ya=y2;
            L_i=L1_i;
            L_i_a=L2_i;
        else
            xs=x2;
            ys=y2;
            xa=x1;
            ya=y1;
            L_i=L2_i;
            L_i_a=L1_i;
        end

        j=find(si==L_i);

        if ~isempty(j)
            Dvx=-(xs(si)-x3(end))*ds;
            Dvy=-(ys(si)-y3(end))*ds;
            if on_intersection==1
                if length(j)==1
                    j=[];
                else
                    DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
                    j=j(DL>0);
                    DL=DL(DL>0);
                    j=j(DL==min(DL));
                end
                if isempty(j) && ds>0
                    si=si+ds;
                    on_intersection=0;
                
                    if si==0
                        si=length(xs);
                    elseif si>length(xs)
                        si=1;
                    end
                    continue;
                end
            else
                if ds<0
                    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
                    j=j(L==min(L));
                else
                    L=sqrt((xs0(j)-xs(si)).^2+(ys0(j)-ys(si)).^2);
                    j=j(L==min(L));
                    if x3(end)~=xs(si) || y3(end)~=ys(si)
                        x3(end+1)=xs(si);
                        y3(end+1)=ys(si);
                    end
                    on_intersection=0;
                end
            end
        
        end
        
        
        if ~isempty(j)
            shape_i=2-mod(shape_i+1,2);
            x3(end+1)=xs0(j);
            y3(end+1)=ys0(j);
            on_intersection=1;
            si=L_i_a(j);
        
            % direction
            dx=xa(si)-xs0(j);
            dy=ya(si)-ys0(j);
            L=sqrt(dx.^2+dy.^2);
            dx=dx/L*1e-7;
            dy=dy/L*1e-7;
            n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);
        
            if n_w==0
                ds=-1;
            else
                ds=1;
            end
        else
            if x3(end)~=xs(si) || y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        
            si=si+ds;
        
            if si==0
                si=length(xs);
            elseif si>length(xs)
                si=1;
            end
        
        end
        
        
        if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
            break;
        end
    
    end
end


%{
+[保存M函数](,shape_inter)
%}
## end
#117, 2527:
%{
+[M函数](,测试)

测试图形0:...
测试图形1:...
测试图形2:...
+[M函数](,测试图形0)

保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')


[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=L1_i(1);
x3=xs0(1);
y3=ys0(1);
shape_i=1;
ds=-1;
on_intersection=1;

%{
+[M函数](,测试)
%}

%{
% init direction
dx=x1(si)-xs0(1);
dy=y1(si)-ys0(1);
L=sqrt(dx.^2+dy.^2);
dx=dx/L*1e-7;
dy=dy/L*1e-7;
n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);

if n_w==0
    ds=1;
else
    ds=-1;
end
%}

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,测试)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
size(x3)

+[M函数](,测试)
%}

for i=1:26
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

%{
ds
si
shape_i
on_intersection
+[M函数](,测试)
%}

j=find(si==L_i);


%{
+[M函数](,测试)
%}

if ~isempty(j)
    Dvx=-(xs(si)-x3(end))*ds;
    Dvy=-(ys(si)-y3(end))*ds;
    if on_intersection==1
        if length(j)==1
            j=[];
        else
            DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
            j=j(DL>0);
            DL=DL(DL>0);
            j=j(DL==min(DL));
        end
        if isempty(j) && ds>0
            si=si+ds;
        end
    else
        L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
        j=j(L==min(L));
        if ds>0
            if x3(end)~=xs(si) && y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        end
    end

end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    on_intersection=1;
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

    if n_w==0
        ds=1;
    else
        ds=-1;
    end
else
    if x3(end)~=xs(si) && y3(end)~=ys(si)
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
    on_intersection=0;

    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end


if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
    break;
end

end

%{
+[M函数](,测试)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,测试)
%}
## end
#119, 2991:
%{
+[保存M函数](,shape_merge)
地址::Matlab\draw\shape_merge.m

测试:...
+[新建阅读窗口](,测试)
%}

function [x3,y3]=shape_merge(x1,y1,x2,y2)

if x1(end)~=x1(1) || y1(end)~=y1(1)
    x1(end+1)=x1(1);
    y1(end+1)=y1(1);
end

if x2(end)~=x2(1) || y2(end)~=y2(1)
    x2(end+1)=x2(1);
    y2(end+1)=y2(1);
end

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

%{
+[保存M函数](,shape_merge)
%}

if isempty(L1_i)
    x3=x1;
    y3=y1;
else
    si=L1_i(1);
    x3=xs0(1);
    y3=ys0(1);
    shape_i=1;
    on_intersection=1;

    % init direction
    dx=x1(si)-xs0(1);
    dy=y1(si)-ys0(1);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);
    
    if n_w==0
        ds=1;
    else
        ds=-1;
    end
    
    for i=1:200
        if shape_i==1
            xs=x1;
            ys=y1;
            xa=x2;
            ya=y2;
            L_i=L1_i;
            L_i_a=L2_i;
        else
            xs=x2;
            ys=y2;
            xa=x1;
            ya=y1;
            L_i=L2_i;
            L_i_a=L1_i;
        end

        j=find(si==L_i);
        
        if ~isempty(j)
            Dvx=-(xs(si)-x3(end))*ds;
            Dvy=-(ys(si)-y3(end))*ds;
            if on_intersection==1
                if length(j)==1
                    j=[];
                else
                    DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
                    j=j(DL>0);
                    DL=DL(DL>0);
                    j=j(DL==min(DL));
                end
                if isempty(j) && ds>0
                    si=si+ds;
                end
            else
                L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
                j=j(L==min(L));
                if ds>0
                    if x3(end)~=xs(si) && y3(end)~=ys(si)
                        x3(end+1)=xs(si);
                        y3(end+1)=ys(si);
                    end
                    on_intersection=0;
                end
            end
        end
%{
+[保存M函数](,shape_merge)
%}
        
        if ~isempty(j)
            shape_i=2-mod(shape_i+1,2);
            x3(end+1)=xs0(j);
            y3(end+1)=ys0(j);
            si=L_i_a(j);
        
            % direction
            dx=xa(si)-xs0(j);
            dy=ya(si)-ys0(j);
            L=sqrt(dx.^2+dy.^2);
            dx=dx/L*1e-7;
            dy=dy/L*1e-7;
            n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);
        
        
            if n_w==0
                ds=1;
            else
                ds=-1;
            end
        else
            if x3(end)~=xs(si) && y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
            si=si+ds;

            if si==0
                si=length(xs);
            elseif si>length(xs)
                si=1;
            end
        
        end

        if i>1 & x3(1)==x3(end) & y3(1)==y3(end)
            break;
        end
    end
end

end


%{
+[保存M函数](,shape_merge)
%}
## end
#121, 1172:

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);
## end
#123, 503:
%{
+[M函数](,验证算法)

单步测试:...
初值单步:...
检测单步:...
行走方向:...
行走方向2:...
行走方向3:...
行走方向4:...
行走方向5:...

shape_merge(M函数):...
shape_cut(M函数):...
将条目"shape_merge"复制为条目"shape_cut"
+[新建阅读窗口](,shape_cut)

测试图形0:...
测试图形1:...
测试图形2:...
+[M函数](,测试图形0)

测试merge:...
保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')

[x3,y3]=shape_cut(x1,y1,x2,y2);

clf
subplot(1,2,1)
plot(x1,y1,x2,y2,x3(1:end),y3(1:end),'o-',x3([1,end]),y3([1,end]),'r*--');

subplot(1,2,2)
plot3(x3,y3,1:length(x3),'o-')


%{
+[M函数](,验证算法)
%}
## end
#124, 2991:
%{
+[保存M函数](,shape_merge)
地址::Matlab\draw\shape_merge.m

测试:...
+[新建阅读窗口](,测试)
%}

function [x3,y3]=shape_merge(x1,y1,x2,y2)

if x1(end)~=x1(1) || y1(end)~=y1(1)
    x1(end+1)=x1(1);
    y1(end+1)=y1(1);
end

if x2(end)~=x2(1) || y2(end)~=y2(1)
    x2(end+1)=x2(1);
    y2(end+1)=y2(1);
end

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

%{
+[保存M函数](,shape_merge)
%}

if isempty(L1_i)
    x3=x1;
    y3=y1;
else
    si=L1_i(1);
    x3=xs0(1);
    y3=ys0(1);
    shape_i=1;
    on_intersection=1;

    % init direction
    dx=x1(si)-xs0(1);
    dy=y1(si)-ys0(1);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);
    
    if n_w==0
        ds=1;
    else
        ds=-1;
    end
    
    for i=1:200
        if shape_i==1
            xs=x1;
            ys=y1;
            xa=x2;
            ya=y2;
            L_i=L1_i;
            L_i_a=L2_i;
        else
            xs=x2;
            ys=y2;
            xa=x1;
            ya=y1;
            L_i=L2_i;
            L_i_a=L1_i;
        end

        j=find(si==L_i);
        
        if ~isempty(j)
            Dvx=-(xs(si)-x3(end))*ds;
            Dvy=-(ys(si)-y3(end))*ds;
            if on_intersection==1
                if length(j)==1
                    j=[];
                else
                    DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
                    j=j(DL>0);
                    DL=DL(DL>0);
                    j=j(DL==min(DL));
                end
                if isempty(j) && ds>0
                    si=si+ds;
                end
            else
                L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
                j=j(L==min(L));
                if ds>0
                    if x3(end)~=xs(si) && y3(end)~=ys(si)
                        x3(end+1)=xs(si);
                        y3(end+1)=ys(si);
                    end
                    on_intersection=0;
                end
            end
        end
%{
+[保存M函数](,shape_merge)
%}
        
        if ~isempty(j)
            shape_i=2-mod(shape_i+1,2);
            x3(end+1)=xs0(j);
            y3(end+1)=ys0(j);
            si=L_i_a(j);
        
            % direction
            dx=xa(si)-xs0(j);
            dy=ya(si)-ys0(j);
            L=sqrt(dx.^2+dy.^2);
            dx=dx/L*1e-7;
            dy=dy/L*1e-7;
            n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);
        
        
            if n_w==0
                ds=1;
            else
                ds=-1;
            end
        else
            if x3(end)~=xs(si) && y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
            si=si+ds;

            if si==0
                si=length(xs);
            elseif si>length(xs)
                si=1;
            end
        
        end

        if i>1 & x3(1)==x3(end) & y3(1)==y3(end)
            break;
        end
    end
end

end


%{
+[保存M函数](,shape_merge)
%}
## end
#125, 25:
Matlab\draw\shape_merge.m
## end
#126, 2527:
%{
+[M函数](,测试)

测试图形0:...
测试图形1:...
测试图形2:...
+[M函数](,测试图形0)

保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')


[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=L1_i(1);
x3=xs0(1);
y3=ys0(1);
shape_i=1;
ds=-1;
on_intersection=1;

%{
+[M函数](,测试)
%}

%{
% init direction
dx=x1(si)-xs0(1);
dy=y1(si)-ys0(1);
L=sqrt(dx.^2+dy.^2);
dx=dx/L*1e-7;
dy=dy/L*1e-7;
n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);

if n_w==0
    ds=1;
else
    ds=-1;
end
%}

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,测试)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
size(x3)

+[M函数](,测试)
%}

for i=1:26
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

%{
ds
si
shape_i
on_intersection
+[M函数](,测试)
%}

j=find(si==L_i);


%{
+[M函数](,测试)
%}

if ~isempty(j)
    Dvx=-(xs(si)-x3(end))*ds;
    Dvy=-(ys(si)-y3(end))*ds;
    if on_intersection==1
        if length(j)==1
            j=[];
        else
            DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
            j=j(DL>0);
            DL=DL(DL>0);
            j=j(DL==min(DL));
        end
        if isempty(j) && ds>0
            si=si+ds;
        end
    else
        L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
        j=j(L==min(L));
        if ds>0
            if x3(end)~=xs(si) && y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        end
    end

end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    on_intersection=1;
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

    if n_w==0
        ds=1;
    else
        ds=-1;
    end
else
    if x3(end)~=xs(si) && y3(end)~=ys(si)
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
    on_intersection=0;

    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end


if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
    break;
end

end

%{
+[M函数](,测试)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,测试)
%}
## end
#127, 2517:
%{
+[M函数](,测试)

测试图形0:...
测试图形1:...
测试图形2:...
+[M函数](,测试图形0)

保存:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')


[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=8;
x3=x1(si);
y3=y1(si);
shape_i=1;
ds=-1;
on_intersection=0;

%{
+[M函数](,测试)
%}

%{
% init direction
dx=x1(si)-xs0(1);
dy=y1(si)-ys0(1);
L=sqrt(dx.^2+dy.^2);
dx=dx/L*1e-7;
dy=dy/L*1e-7;
n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);

if n_w==0
    ds=1;
else
    ds=-1;
end
%}

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,测试)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
size(x3)

+[M函数](,测试)
%}

for i=1:26
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

%{
ds
si
shape_i
on_intersection
+[M函数](,测试)
%}

j=find(si==L_i);


%{
+[M函数](,测试)
%}

if ~isempty(j)
    Dvx=-(xs(si)-x3(end))*ds;
    Dvy=-(ys(si)-y3(end))*ds;
    if on_intersection==1
        if length(j)==1
            j=[];
        else
            DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
            j=j(DL>0);
            DL=DL(DL>0);
            j=j(DL==min(DL));
        end
        if isempty(j) && ds>0
            si=si+ds;
        end
    else
        L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
        j=j(L==min(L));
        if ds>0
            if x3(end)~=xs(si) && y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        end
    end

end


if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    on_intersection=1;
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

    if n_w==0
        ds=1;
    else
        ds=-1;
    end
else
    if x3(end)~=xs(si) && y3(end)~=ys(si)
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
    on_intersection=0;

    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end


if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
    break;
end

end

%{
+[M函数](,测试)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
axis equal
axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,测试)
%}
## end
#128, 1172:

x1=[-2.54925373134328 -2.13134328358209 -1.45074626865672 -0.543283582089553 0.471641791044775 0.997014925373134 0.555223880597014 0.0537313432835811 -0.0656716417910452 -0.794029850746269 -0.125373134328359 1.33134328358209 0.734328358208955 -0.411940298507464 -1.27164179104478 -1.53432835820896 -2.54925373134328 -2.74029850746269 -2.75223880597015];
y1=[0.644776119402985 0.0955223880597011 1.12238805970149 1.22985074626866 0.692537313432835 0.0597014925373132 -1.12238805970149 -0.44179104477612 0.298507462686567 0.752238805970149 -0.883582089552239 -0.8 -1.67164179104478 -1.71940298507463 -1.56417910447761 -1.48059701492537 -1.12238805970149 -0.26268656716418 0.346268656716417];

x1(end+1)=x1(1);
y1(end+1)=y1(1);

x2=[1.85671641791045 1.40298507462686 0.197014925373134 -0.997014925373135 -1.73731343283582 -2.46567164179105 -3.15820895522388 -1.91641791044776 -0.543283582089553 0.399999999999999 2.25074626865672];
y2=[1.30149253731343 0.859701492537313 0.501492537313432 -0.107462686567164 0.262686567164179 0.226865671641791 -0.680597014925374 -0.847761194029851 -0.668656716417911 -0.179104477611941 0.644776119402985];

x2(end+1)=x2(1);
y2(end+1)=y2(1);
## end
#129, 3701:

x1=[0.766044443118978 -0.766044443118978 -0.123256833432439 1.40883205280552 0.766044443118978];
y1=[-0.642787609686539 0.642787609686539 1.40883205280552 0.123256833432439 -0.642787609686539];


x2=[1.6 1.59879200588313 1.59517288769848 1.58915721835762 1.58076922083781 1.57004267064457 1.55702075980964 1.54175592297197 1.52430962624187 1.50475211969871 1.48316215451864 1.45962666587139 1.43424042286304 1.40710564693428 1.37833160025071 1.34803414574272 1.3163352805663 1.28336264486361 1.24924900780113 1.21413173295512 1.17815222519696 1.14145536130566 1.10418890660016 1.06650291994061 1.02854914949425 0.990480421699115 0.952450025885927 0.914611097036029 0.877115999160886 0.840115711785979 0.803759222009547 0.768192924584123 0.733560032436536 0.7 0.667647961680334 0.6366341877174 0.607083559632829 0.579115067376207 0.552841330194547 0.528368143154328 0.5057940511421 0.485209952059014 0.466698730807046 0.450334925540758 0.436184427528455 0.424304215831302 0.414742127868756 0.407536666794163 0.402716846456149 0.400302074570089 0.400302074570089 0.402716846456149 0.407536666794163 0.414742127868756 0.424304215831302 0.436184427528455 0.450334925540758 0.466698730807046 0.485209952059014 0.5057940511421 0.528368143154328 0.552841330194547 0.579115067376207 0.607083559632829 0.6366341877174 0.667647961680334 0.7 0.733560032436535 0.768192924584123 0.803759222009547 0.840115711785979 0.877115999160886 0.914611097036029 0.952450025885927 0.990480421699115 1.02854914949425 1.06650291994061 1.10418890660016 1.14145536130566 1.17815222519696 1.21413173295512 1.24924900780113 1.28336264486361 1.3163352805663 1.34803414574272 1.37833160025071 1.40710564693428 1.43424042286304 1.45962666587139 1.48316215451864 1.50475211969871 1.52430962624187 1.54175592297197 1.55702075980964 1.57004267064457 1.58076922083781 1.58915721835762 1.59517288769848 1.59879200588313 1.6];
y2=[-1 -0.961945648206061 -0.92404452785575 -0.886449253383754 -0.849311207691352 -0.812779932580908 -0.777002526603804 -0.742123052746497 -0.708281958339719 -0.675615509526641 -0.644255242567216 -0.614327434188076 -0.585952593110733 -0.55924497480548 -0.534312121424946 -0.511254428769799 -0.490164742030291 -0.471127981931451 -0.454220802787289 -0.439511283840936 -0.427058655133556 -0.416913059005875 -0.409115348192675 -0.403696921323248 -0.400679596490195 -0.400075523395675 -0.401887134428835 -0.40610713487144 -0.412718532271133 -0.421694704864035 -0.432999508771199 -0.446587423537251 -0.462403735425199 -0.480384757729337 -0.500458087219137 -0.522542895681501 -0.546550255387445 -0.572383497172682 -0.599938599690225 -0.629104608267637 -0.659764081682338 -0.691793565055956 -0.725064086963554 -0.759441678756032 -0.794787914004599 -0.830960465895142 -0.867813680328076 -0.90519916241599 -0.94296637401749 -0.980963239901159 -1.01903676009884 -1.05703362598251 -1.09480083758401 -1.13218631967192 -1.16903953410486 -1.2052120859954 -1.24055832124397 -1.27493591303645 -1.30820643494404 -1.34023591831766 -1.37089539173236 -1.40006140030977 -1.42761650282732 -1.45344974461255 -1.4774571043185 -1.49954191278086 -1.51961524227066 -1.5375962645748 -1.55341257646275 -1.5670004912288 -1.57830529513597 -1.58728146772887 -1.59389286512856 -1.59811286557117 -1.59992447660433 -1.5993204035098 -1.59630307867675 -1.59088465180732 -1.58308694099413 -1.57294134486644 -1.56048871615906 -1.54577919721271 -1.52887201806855 -1.50983525796971 -1.4887455712302 -1.46568787857505 -1.44075502519452 -1.41404740688927 -1.38567256581192 -1.35574475743278 -1.32438449047336 -1.29171804166028 -1.2578769472535 -1.2229974733962 -1.18722006741909 -1.15068879230865 -1.11355074661625 -1.07595547214425 -1.03805435179394 -1];

## end
#130, 3599:
x1=[1.6 1.59879200588313 1.59517288769848 1.58915721835762 1.58076922083781 1.57004267064457 1.55702075980964 1.54175592297197 1.52430962624187 1.50475211969871 1.48316215451864 1.45962666587139 1.43424042286304 1.40710564693428 1.37833160025071 1.34803414574272 1.3163352805663 1.28336264486361 1.24924900780113 1.21413173295512 1.17815222519696 1.14145536130566 1.10418890660016 1.06650291994061 1.02854914949425 0.990480421699115 0.952450025885927 0.914611097036029 0.877115999160886 0.840115711785979 0.803759222009547 0.768192924584123 0.733560032436536 0.7 0.667647961680334 0.6366341877174 0.607083559632829 0.579115067376207 0.552841330194547 0.528368143154328 0.5057940511421 0.485209952059014 0.466698730807046 0.450334925540758 0.436184427528455 0.424304215831302 0.414742127868756 0.407536666794163 0.402716846456149 0.400302074570089 0.400302074570089 0.402716846456149 0.407536666794163 0.414742127868756 0.424304215831302 0.436184427528455 0.450334925540758 0.466698730807046 0.485209952059014 0.5057940511421 0.528368143154328 0.552841330194547 0.579115067376207 0.607083559632829 0.6366341877174 0.667647961680334 0.7 0.733560032436535 0.768192924584123 0.803759222009547 0.840115711785979 0.877115999160886 0.914611097036029 0.952450025885927 0.990480421699115 1.02854914949425 1.06650291994061 1.10418890660016 1.14145536130566 1.17815222519696 1.21413173295512 1.24924900780113 1.28336264486361 1.3163352805663 1.34803414574272 1.37833160025071 1.40710564693428 1.43424042286304 1.45962666587139 1.48316215451864 1.50475211969871 1.52430962624187 1.54175592297197 1.55702075980964 1.57004267064457 1.58076922083781 1.58915721835762 1.59517288769848 1.59879200588313 1.6];

y1=[1 1.03805435179394 1.07595547214425 1.11355074661625 1.15068879230865 1.18722006741909 1.2229974733962 1.2578769472535 1.29171804166028 1.32438449047336 1.35574475743278 1.38567256581192 1.41404740688927 1.44075502519452 1.46568787857505 1.4887455712302 1.50983525796971 1.52887201806855 1.54577919721271 1.56048871615906 1.57294134486644 1.58308694099413 1.59088465180732 1.59630307867675 1.5993204035098 1.59992447660433 1.59811286557117 1.59389286512856 1.58728146772887 1.57830529513597 1.5670004912288 1.55341257646275 1.5375962645748 1.51961524227066 1.49954191278086 1.4774571043185 1.45344974461255 1.42761650282732 1.40006140030977 1.37089539173236 1.34023591831766 1.30820643494404 1.27493591303645 1.24055832124397 1.2052120859954 1.16903953410486 1.13218631967192 1.09480083758401 1.05703362598251 1.01903676009884 0.980963239901159 0.94296637401749 0.90519916241599 0.867813680328076 0.830960465895142 0.794787914004599 0.759441678756032 0.725064086963554 0.691793565055956 0.659764081682338 0.629104608267637 0.599938599690225 0.572383497172682 0.546550255387445 0.522542895681501 0.500458087219137 0.480384757729337 0.462403735425199 0.446587423537251 0.432999508771199 0.421694704864035 0.412718532271133 0.40610713487144 0.401887134428835 0.400075523395675 0.400679596490195 0.403696921323248 0.409115348192675 0.416913059005875 0.427058655133556 0.439511283840936 0.454220802787289 0.471127981931451 0.490164742030291 0.511254428769799 0.534312121424946 0.55924497480548 0.585952593110733 0.614327434188076 0.644255242567216 0.675615509526641 0.708281958339719 0.742123052746497 0.777002526603804 0.812779932580908 0.849311207691352 0.886449253383754 0.924044527855751 0.961945648206061 1];

x2=[0.984807753012208 -0.984807753012208 -1.15845593067914 0.811159575345278 0.984807753012208];
y2=[0.17364817766693 -0.17364817766693 0.811159575345278 1.15845593067914 0.17364817766693];



## end
#136, 2940:
%{
+[M函数](,测试)

测试图形0:...
测试图形1:...
测试图形2:...
测试图形3:...
测试图形4:...
+[M函数](,测试图形4)

保存:...
算法内容:...
%}

addpath('Matlab\draw')
addpath('Matlab\space')


[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

si=L1_i(1);
x3=xs0(1);
y3=ys0(1);
shape_i=1;
ds=1;
on_intersection=1;

%{
+[M函数](,测试)
%}

%{
% init direction
dx=x1(si)-xs0(1);
dy=y1(si)-ys0(1);
L=sqrt(dx.^2+dy.^2);
dx=dx/L*1e-7;
dy=dy/L*1e-7;
n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);

if n_w==0
    ds=1;
else
    ds=-1;
end
%}

%{
length(x1)
si
shape_i
L_i_a
L_i
+[M函数](,测试)
%}

subplot(1,2,1)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

for i=1:length(x1)
    text(x1(i),y1(i),num2str(i),'color',[0,0,1]);
end
for i=1:length(x2)
    text(x2(i),y2(i),num2str(i),'color',[1,0,0]);
end

%{
on_intersection
ds
si
on_intersection
shape_i
+[M函数](,测试)
%}

for i=1:104
if shape_i==1
    xs=x1;
    ys=y1;
    xa=x2;
    ya=y2;
    L_i=L1_i;
    L_i_a=L2_i;
else
    xs=x2;
    ys=y2;
    xa=x1;
    ya=y1;
    L_i=L2_i;
    L_i_a=L1_i;
end

%{
ds
si
shape_i
on_intersection
+[M函数](,测试)
%}

j=find(si==L_i);

%{
+[M函数](,测试)
%}

if ~isempty(j)
    Dvx=-(xs(si)-x3(end))*ds;
    Dvy=-(ys(si)-y3(end))*ds;
    if on_intersection==1
        if length(j)==1
            j=[];
        else
            DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
            j=j(DL>0);
            DL=DL(DL>0);
            j=j(DL==min(DL));
        end
        if isempty(j) && ds>0
            si=si+ds;
            on_intersection=0;
        
            if si==0
                si=length(xs);
            elseif si>length(xs)
                si=1;
            end
            continue;
        end
%{
+[M函数](,测试)
%}

    else
        if ds<0
            L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
            j=j(L==min(L));
        else
            L=sqrt((xs0(j)-xs(si)).^2+(ys0(j)-ys(si)).^2);
            j=j(L==min(L));
            if x3(end)~=xs(si) || y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        end
    end

end

%{
+[M函数](,测试)
%}

if ~isempty(j)
    shape_i=2-mod(shape_i+1,2);
    x3(end+1)=xs0(j);
    y3(end+1)=ys0(j);
    on_intersection=1;
    si=L_i_a(j);

    % direction
    dx=xa(si)-xs0(j);
    dy=ya(si)-ys0(j);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);

    if n_w==0
        ds=1;
    else
        ds=-1;
    end
else
    if x3(end)~=xs(si) || y3(end)~=ys(si)
        x3(end+1)=xs(si);
        y3(end+1)=ys(si);
    end
    on_intersection=0;

%{
+[M函数](,测试)
%}

    si=si+ds;

    if si==0
        si=length(xs);
    elseif si>length(xs)
        si=1;
    end

end


if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
    break;
end

end

%{
+[M函数](,测试)
%}

subplot(1,2,2)
plot(x1,y1,x2,y2,xs0,ys0,'r*',x3,y3,'o-')
%axis equal
%axis([-3,2,-2,2])

%{
L1_i
L2_i
+[M函数](,测试)
%}
## end
#141, 3422:
%{
+[保存M函数](,shape_merge)
地址::Matlab\draw\shape_merge.m

测试:...
+[新建阅读窗口](,测试)

保存:...
%}

function [x3,y3]=shape_merge(x1,y1,x2,y2)

if x1(end)~=x1(1) || y1(end)~=y1(1)
    x1(end+1)=x1(1);
    y1(end+1)=y1(1);
end

if x2(end)~=x2(1) || y2(end)~=y2(1)
    x2(end+1)=x2(1);
    y2(end+1)=y2(1);
end

[xs0,ys0,L1_i,L2_i]=intersection_curve_curve(x1,y1,x2,y2);

%{
+[保存M函数](,shape_merge)
%}

if isempty(L1_i)
    x3=x1;
    y3=y1;
else
    si=L1_i(1);
    x3=xs0(1);
    y3=ys0(1);
    shape_i=1;
    on_intersection=1;

    % init direction
    dx=x1(si)-xs0(1);
    dy=y1(si)-ys0(1);
    L=sqrt(dx.^2+dy.^2);
    dx=dx/L*1e-7;
    dy=dy/L*1e-7;
    n_w=PtsInPolygon(x2,y2,xs0(1)+dx,ys0(1)+dy);
    
    if n_w==0
        ds=1;
    else
        ds=-1;
    end

    for i=1:200
        if shape_i==1
            xs=x1;
            ys=y1;
            xa=x2;
            ya=y2;
            L_i=L1_i;
            L_i_a=L2_i;
        else
            xs=x2;
            ys=y2;
            xa=x1;
            ya=y1;
            L_i=L2_i;
            L_i_a=L1_i;
        end

        j=find(si==L_i);

        if ~isempty(j)
            Dvx=-(xs(si)-x3(end))*ds;
            Dvy=-(ys(si)-y3(end))*ds;
            if on_intersection==1
                if length(j)==1
                    j=[];
                else
                    DL=(xs0(j)-x3(end)).*Dvx+(ys0(j)-y3(end)).*Dvy;
                    j=j(DL>0);
                    DL=DL(DL>0);
                    j=j(DL==min(DL));
                end
                if isempty(j) && ds>0
                    si=si+ds;
                    on_intersection=0;
                
                    if si==0
                        si=length(xs);
                    elseif si>length(xs)
                        si=1;
                    end
                    continue;
                end
            else
                if ds<0
                    L=sqrt((xs0(j)-x3(end)).^2+(ys0(j)-y3(end)).^2);
                    j=j(L==min(L));
                else
                    L=sqrt((xs0(j)-xs(si)).^2+(ys0(j)-ys(si)).^2);
                    j=j(L==min(L));
                    if x3(end)~=xs(si) || y3(end)~=ys(si)
                        x3(end+1)=xs(si);
                        y3(end+1)=ys(si);
                    end
                    on_intersection=0;
                end
            end
        
        end
        
        
        if ~isempty(j)
            shape_i=2-mod(shape_i+1,2);
            x3(end+1)=xs0(j);
            y3(end+1)=ys0(j);
            on_intersection=1;
            si=L_i_a(j);
        
            % direction
            dx=xa(si)-xs0(j);
            dy=ya(si)-ys0(j);
            L=sqrt(dx.^2+dy.^2);
            dx=dx/L*1e-7;
            dy=dy/L*1e-7;
            n_w=PtsInPolygon(xs,ys,xs0(j)+dx,ys0(j)+dy);
        
            if n_w==0
                ds=1;
            else
                ds=-1;
            end
        else
            if x3(end)~=xs(si) || y3(end)~=ys(si)
                x3(end+1)=xs(si);
                y3(end+1)=ys(si);
            end
            on_intersection=0;
        
            si=si+ds;
        
            if si==0
                si=length(xs);
            elseif si>length(xs)
                si=1;
            end
        
        end
        
        
        if length(x3)>2 & x3(1)==x3(end) & y3(1)==y3(end)
            break;
        end
    
    end
end


%{
+[保存M函数](,shape_merge)
%}
## end
#147, 106:
x1=[0 0 2 2 0];
y1=[-0.5 0.5 0.5 -0.5 -0.5];
x2=[1.8 1.8 3.8 3.8 1.8];
y2=[-0.25 0.25 0.25 -0.25 -0.25];


## end
#149, 106:
x1=[0 0 2 2 0];
y1=[-0.5 0.5 0.5 -0.5 -0.5];
x2=[1.8 1.8 3.8 3.8 1.8];
y2=[-0.25 0.25 0.25 -0.25 -0.25];


## end
#151, 3364:
x1=[4.4 4.17950098374238 4.16794870139636 4.15007111774095 4.12836793301607 4.10292653828662 4.07384937706979 4.04125353283118 4.00527025753106 3.96604444311898 3.92373403810507 3.87850941155713 3.83055266708452 3.7800569095712 3.7272254676105 3.67227107477268 3.61541501300189 3.55688622159187 3.49692037532827 3.43575893550943 3.37364817766693 3.31083819990101 3.24758191582374 3.18413403616519 3.12075004314321 3.05768516172671 2.99519333193481 2.93352618630997 2.87293203668258 2.81365487430687 2.75593338739423 2.7 2.64607993613389 2.59439031286233 2.54513926605471 2.49852511229368 2.45473555032425 2.41394690525721 2.37632341857017 2.34201658676502 2.31116455134508 2.28389154256793 2.26030737921409 2.2405070263855 2.22457021311459 2.22065567877601 2 2 0 0 2 2 2.22065567877601 2.22457021311459 2.2405070263855 2.26030737921409 2.28389154256793 2.31116455134508 2.34201658676502 2.37632341857017 2.41394690525721 2.45473555032425 2.49852511229368 2.54513926605471 2.59439031286233 2.64607993613389 2.7 2.75593338739423 2.81365487430687 2.87293203668258 2.93352618630996 2.99519333193481 3.05768516172671 3.12075004314321 3.18413403616519 3.24758191582374 3.31083819990101 3.37364817766693 3.43575893550943 3.49692037532827 3.55688622159187 3.61541501300189 3.67227107477268 3.7272254676105 3.7800569095712 3.83055266708452 3.87850941155713 3.92373403810507 3.96604444311898 4.00527025753106 4.04125353283118 4.07384937706979 4.10292653828662 4.12836793301607 4.15007111774095 4.16794870139636 4.17950098374238 4.4 4.4 8.4 8.4 4.4 4.4];
y1=[0.2 0.2 0.251147987181079 0.312033445698487 0.371662455660328 0.429794912089172 0.486196736100469 0.540640817455598 0.592907929054641 0.642787609686539 0.690079011482112 0.734591708657533 0.776146464291757 0.814575952050336 0.849725429949514 0.881453363447582 0.909631995354518 0.934147860265107 0.954902241444074 0.971811568323542 0.984807753012208 0.993838464461254 0.998867339183008 0.999874127673875 0.996854775951942 0.989821441880933 0.978802446214779 0.963842158559942 0.945000818714668 0.922354294104581 0.895993774291336 0.866025403784439 0.832569854634771 0.795761840530832 0.755749574354258 0.712694171378863 0.666769000516292 0.618158986220605 0.567059863862771 0.513677391573406 0.458226521727411 0.400930535406613 0.342020143325669 0.28173255684143 0.220310532786541 0.2 0.2 0.5 0.5 -0.5 -0.5 -0.2 -0.2 -0.220310532786541 -0.28173255684143 -0.342020143325669 -0.400930535406613 -0.458226521727411 -0.513677391573406 -0.567059863862771 -0.618158986220605 -0.666769000516292 -0.712694171378863 -0.755749574354258 -0.795761840530832 -0.832569854634772 -0.866025403784439 -0.895993774291336 -0.922354294104581 -0.945000818714668 -0.963842158559942 -0.978802446214779 -0.989821441880933 -0.996854775951942 -0.999874127673875 -0.998867339183008 -0.993838464461254 -0.984807753012208 -0.971811568323542 -0.954902241444074 -0.934147860265107 -0.909631995354518 -0.881453363447582 -0.849725429949514 -0.814575952050336 -0.776146464291757 -0.734591708657533 -0.690079011482112 -0.642787609686539 -0.592907929054641 -0.540640817455598 -0.486196736100468 -0.429794912089171 -0.371662455660327 -0.312033445698487 -0.251147987181079 -0.2 -0.2 -0.5 -0.5 0.5 0.5 0.2];
x2=[7.15980762113533 6.64019237886467 7.39019237886467 7.90980762113533 7.15980762113533];
y2=[-0.15 0.15 1.44903810567666 1.14903810567666 -0.15];


## end
#153, 3364:
x1=[4.4 4.17950098374238 4.16794870139636 4.15007111774095 4.12836793301607 4.10292653828662 4.07384937706979 4.04125353283118 4.00527025753106 3.96604444311898 3.92373403810507 3.87850941155713 3.83055266708452 3.7800569095712 3.7272254676105 3.67227107477268 3.61541501300189 3.55688622159187 3.49692037532827 3.43575893550943 3.37364817766693 3.31083819990101 3.24758191582374 3.18413403616519 3.12075004314321 3.05768516172671 2.99519333193481 2.93352618630997 2.87293203668258 2.81365487430687 2.75593338739423 2.7 2.64607993613389 2.59439031286233 2.54513926605471 2.49852511229368 2.45473555032425 2.41394690525721 2.37632341857017 2.34201658676502 2.31116455134508 2.28389154256793 2.26030737921409 2.2405070263855 2.22457021311459 2.22065567877601 2 2 0 0 2 2 2.22065567877601 2.22457021311459 2.2405070263855 2.26030737921409 2.28389154256793 2.31116455134508 2.34201658676502 2.37632341857017 2.41394690525721 2.45473555032425 2.49852511229368 2.54513926605471 2.59439031286233 2.64607993613389 2.7 2.75593338739423 2.81365487430687 2.87293203668258 2.93352618630996 2.99519333193481 3.05768516172671 3.12075004314321 3.18413403616519 3.24758191582374 3.31083819990101 3.37364817766693 3.43575893550943 3.49692037532827 3.55688622159187 3.61541501300189 3.67227107477268 3.7272254676105 3.7800569095712 3.83055266708452 3.87850941155713 3.92373403810507 3.96604444311898 4.00527025753106 4.04125353283118 4.07384937706979 4.10292653828662 4.12836793301607 4.15007111774095 4.16794870139636 4.17950098374238 4.4 4.4 8.4 8.4 4.4 4.4];
y1=[0.2 0.2 0.251147987181079 0.312033445698487 0.371662455660328 0.429794912089172 0.486196736100469 0.540640817455598 0.592907929054641 0.642787609686539 0.690079011482112 0.734591708657533 0.776146464291757 0.814575952050336 0.849725429949514 0.881453363447582 0.909631995354518 0.934147860265107 0.954902241444074 0.971811568323542 0.984807753012208 0.993838464461254 0.998867339183008 0.999874127673875 0.996854775951942 0.989821441880933 0.978802446214779 0.963842158559942 0.945000818714668 0.922354294104581 0.895993774291336 0.866025403784439 0.832569854634771 0.795761840530832 0.755749574354258 0.712694171378863 0.666769000516292 0.618158986220605 0.567059863862771 0.513677391573406 0.458226521727411 0.400930535406613 0.342020143325669 0.28173255684143 0.220310532786541 0.2 0.2 0.5 0.5 -0.5 -0.5 -0.2 -0.2 -0.220310532786541 -0.28173255684143 -0.342020143325669 -0.400930535406613 -0.458226521727411 -0.513677391573406 -0.567059863862771 -0.618158986220605 -0.666769000516292 -0.712694171378863 -0.755749574354258 -0.795761840530832 -0.832569854634772 -0.866025403784439 -0.895993774291336 -0.922354294104581 -0.945000818714668 -0.963842158559942 -0.978802446214779 -0.989821441880933 -0.996854775951942 -0.999874127673875 -0.998867339183008 -0.993838464461254 -0.984807753012208 -0.971811568323542 -0.954902241444074 -0.934147860265107 -0.909631995354518 -0.881453363447582 -0.849725429949514 -0.814575952050336 -0.776146464291757 -0.734591708657533 -0.690079011482112 -0.642787609686539 -0.592907929054641 -0.540640817455598 -0.486196736100468 -0.429794912089171 -0.371662455660327 -0.312033445698487 -0.251147987181079 -0.2 -0.2 -0.5 -0.5 0.5 0.5 0.2];
x2=[7.15980762113533 6.64019237886467 7.39019237886467 7.90980762113533 7.15980762113533];
y2=[-0.15 0.15 1.44903810567666 1.14903810567666 -0.15];


## end
#155, 603:
%{
+[M函数](,含顶点)
数据来自有限元分析的生成网格的测试区域
Nini, 打开直线交点的intersection_line_curve(节点)
%}

x1=[x_n,pts_x(is),x_n];
y1=[y_n,pts_y(is),y_n];
xs=pts_x;
ys=pts_y;

xs(end+1,:)=max(x1)+3;
ys(end+1,:)=ys;
n_i=zeros(1,size(xs,2));
n_w=zeros(1,size(xs,2));

for k=1:size(xs,2)
% for k=60
[x0,y0,i]=intersection_line_curve(xs(:,k),ys(:,k),x1,y1);

if length(i)>1
    n_nodes=length(x0(abs(x0-x0([2:end,1]))<1e-10&abs(y0-y0([2:end,1]))<1e-10));
else
    n_nodes=0;
end

n_w(k)=sum(sign(ys(1,k)-y1(i)));
n_i(k)=1-mod(length(i)-n_nodes,2);
end


%{
n_nodes
find(n_i==0)
x0(x0==x0([2:end,1])&y0==y0([2:end,1]))
+[M函数](,含顶点)
%}
## end
### 结束