### 节点
地址, 的, 能谱仪误差, 目录, 的, 的, 蒙卡模拟, 的, 正向计算, M函数, 的, 场景, 的, 图形, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 样式, 类型, 的, 方向, 朝向, 空间点, 在, 矩形2, 样式, 类型, 的, 方向, 朝向, 空间点, 在, 矩形1, 样式, 类型, 的, 方向, 朝向, 空间点, 在, 矩形0, 的, y, 的, x, 的, 的, y, 的, x, 的, 的, y, 的, x, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 样式, y, 的, x, 的, 直线2, 样式, y, 的, x, 的, 直线1, 样式, y, 的, x, 的, 直线0, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 样式, 半径, 的, 类型, 的, 方向, 朝向, 空间点, 在, 圆0, 的, y, 的, x, 的, 的, 的, 长, 的, 的, 的, 宽, 的, 的, 的, 长, 的, 的, 的, 宽, 的, 的, 的, 长, 的, 的, 的, 宽, 的, 的, 第一部分, 的, 测量原理, html, 的, 的, 的, 的, 表达式, 的, [1]., 公式, 答案, 回答, 答案, 回答, 答案, 回答, 答案, 回答, 答案, 回答, 答案, 回答, 的, Python1, 的, 的, 的, 的, 表达式, 的, [2]., 公式, 的, 的, 的, 的, 表达式, 的, [3]., 公式, 的, 的, 的, 的, 表达式, 的, [4]., 公式, 的, 的, 的, 的, 表达式, 的, [5]., 公式, 的, 的, 的, 的, 表达式, 的, [6]., 公式, 的, 的, 的, 的, 表达式, 的, [7]., 公式, 的, 验证公式, 的, fiducial_method, M函数, 的, 地址, 的, radiation_method, M函数, 的, 地址, fiducial_method, 的, 记忆, radiation_method, 的, 的, 测量部分, M函数, 的, 的, fiducial_method, 中, 的, 的, radiation_method, 中, 
### 关联
#, 2#0, #, #, 3#2, 2#6, #, 6#8, #, 8#, 6#11, #, 11#13, #, 11#38, 11#39, 11#40, 11#41, 11#42, 11#43, 11#44, 11#45, 11#46, 11#47, 11#48, 11#49, 11#50, 11#51, 11#52, 11#53, 11#54, 11#55, 11#56, 11#57, 11#58, 11#59, 11#60, 11#61, 45#, #, 45#39, #, 45#41, #, 45#43, #, 53#, #, 53#47, #, 53#49, #, 53#51, #, 61#, #, 61#55, #, 61#57, #, 61#59, #, 13#61, #, 61#63, #, 61#65, 13#53, #, 53#68, #, 53#70, 13#45, #, 45#73, #, 45#75, 11#95, 11#96, 11#97, 11#98, 11#99, 11#100, 11#101, 11#102, 11#103, 11#104, 11#105, 11#106, 11#107, 11#108, 11#109, 11#110, 11#111, 11#112, 100#, #, 100#96, #, 100#98, #, 106#, #, 106#102, #, 106#104, #, 112#, #, 112#108, #, 112#110, #, 13#112, 13#106, 13#100, 11#126, 11#127, 11#128, 11#129, 11#130, 11#131, 11#132, 11#133, 11#134, 11#135, 135#, #, 135#127, #, 135#129, #, 135#131, #, 135#133, #, 13#135, #, 135#137, #, 135#139, 11#143, 11#144, #, 61#143, 11#147, 11#148, #, 61#147, 11#151, 11#152, #, 53#151, 11#155, 11#156, #, 53#155, 11#159, 11#160, #, 45#159, 11#163, 11#164, #, 45#163, 8#166, #, 8#168, #, 168#, 168#174, 168#175, 168#176, 168#177, #, 176#174, #, 176#, #, 168#, #, 168#, #, 168#, #, 168#, #, 168#, #, 168#, 168#191, #, 168#196, 168#197, 168#198, 168#199, #, 198#196, #, 198#, 168#204, 168#205, 168#206, 168#207, #, 206#204, #, 206#, 168#212, 168#213, 168#214, 168#215, #, 214#212, #, 214#, 168#220, 168#221, 168#222, 168#223, #, 222#220, #, 222#, 168#228, 168#229, 168#230, 168#231, #, 230#228, #, 230#, 168#236, 168#237, 168#238, 168#239, #, 238#236, #, 238#, 168#241, #, 8#243, #, 243#, 243#246, #, 8#248, #, 248#, 248#251, #, #243, 254#252, 3#, #248, 254#255, 8#258, #, 258#, del#263, del#262, #, del#262, del#267, del#266, #, del#266, 
### 内容
#0, 18:
文档\物理问题\能谱仪误差.ftxt
## end
#2, 97:
+[返回目录](,能谱仪误差)
地址::文档\物理问题\能谱仪误差.ftxt

Nini, 导入PPT的库. Nini, 导入平面测绘的库. Nini, 导入图形库的库

蒙卡模拟:...



## end
#3, 49:
能谱仪误差:...
创建于 20220305

节点数目统计::
+[设置结构](,节点数目统计)
## end
#6, 261:
<!--
是一个用来确认测量方法误差的模拟. 
就三步:
1.正向计算fiducial和shadow的位置; 
2.添加位置误差; 
3.用算法计算能量

场景:...
正向计算(M函数):...
+[新建阅读窗口](,正向计算)

-->

$$
\theta_0=5\ mrad, B=1.48\ T, D=50\ mm
\\
z_o=0,\ z_m=75\ mm, z_{IP}=2100\ mm
\\
dx_{o}=1\ mm, dx_{IP}=1\ mm
$$



<!--
+[H函数](,蒙卡模拟)
-->
## end
#8, 1302:
%{
+[M函数](,正向计算)
figure
第一部分(M函数):...
测量原理(html):...
+[H函数](,测量原理)
fiducial_method(M函数):...
radiation_method(M函数):...
+[新建阅读窗口](,fiducial_method)
记住radiation_method(节点)
测量部分(M函数):...

%}

addpath('Matlab\spectrometer');
physics_constant;
E=300e6;
theta_e=1e-3;
xe=0;
ye=0;

B=-1.48;
pos_m=[75,0]*1e-3;
siz_m=5e-2;

xf=1000e-3;

pos_p=[2100,0]*1e-3;
theta_p=0;

xX=pos_p(1);
E=E*e;
angle_e=theta_e*180/pi;
[x0,y0,r,beta,x_1m,y_1m,x_2m,y_2m] = trajectory_uniform(xe,ye,angle_e,E,pos_m(1:2),siz_m,-B,pos_p(1:2),theta_p);


yf=y0+(xf-x0)*(y_2m-y0)/(x_2m-x0);
yX=ye+(xX-xe)*(y_1m-ye)/(x_1m-xe);

% Trajectory
[X,Y]=trajectory_XY(xe,ye,angle_e,x0,y0,r,beta,x_1m,y_1m,x_2m,y_2m);
X=X*1e3;
Y=Y*1e3;


plot(X,Y,xf*1e3,yf*1e3,'r*',[xe,xX]*1e3,[ye,yX]*1e3,'r*-')

% error
N=1000;
dx=1e-3;
dx_o=normrnd(0,dx,[1,N]);
dx_f=normrnd(0,dx,[1,N]);
dx_i=normrnd(0,dx,[1,N]);

% fiducial method
q=e;
z_o=xe;
x_o=ye;
z_m=pos_m(1);
z_f=xf;
x_f=yf;
z_s=x0;
x_s=y0;
D=siz_m;

[E_f,R,theta_f,beta_f]=fiducial_method(z_o,x_o+dx_o,z_m,B,D,z_f,x_f+dx_f,z_s,x_s+dx_i);

% radiation method
q=e;
z_o=xe;
x_o=ye;
z_m=pos_m(1);
z_c=xX;
x_c=yX;
z_e=x0;
x_e=y0;
D=siz_m;

[E_r,R,theta_r,beta_r]=radiation_method(z_o,x_o+dx_o,z_m,B,D,z_c,x_c+dx_i,z_s,x_s+dx_i);

hist(E_r/e)
xlabel('E [eV]')



%{
plot(E_f/e,'.')
hold on
+[M函数](,正向计算)
%}
## end
#11, 251:
Nini, 打开图形库的句子库(节点)

图形::
图形中新建3个矩形(长方形). 图形中新建3条直线(直线). 图形中新建1个圆(圆形)

矩形0的长是"20". 矩形0的宽是"60"
矩形1的长是"50". 矩形1的宽是"50"
矩形2的长是"400". 矩形2的宽是"5"

更新矩形0(图形)
在图形中, 更新所有图形(图形)

矩形1距离矩形0(100,0). 矩形2距离矩形1(2000,0)

标记线段
将标记区域记录为直线1
标记点
将圆0移动到标记点

+[显示PPT场景](,图形)
## end
#38, 3:
多边形
## end
#39, 3:
长方形
## end
#41, 1:
0
## end
#43, 11:
2100.0, 0.0
## end
#46, 3:
多边形
## end
#47, 3:
长方形
## end
#49, 1:
0
## end
#51, 10:
100.0, 0.0
## end
#54, 3:
多边形
## end
#55, 3:
长方形
## end
#57, 1:
0
## end
#59, 3:
0,0
## end
#63, 24:
-10.0, 10.0, 10.0, -10.0
## end
#65, 22:
0.0, 0.0, -60.0, -60.0
## end
#68, 24:
-25.0, 25.0, 25.0, -25.0
## end
#70, 22:
0.0, 0.0, -50.0, -50.0
## end
#73, 28:
-200.0, 200.0, 200.0, -200.0
## end
#75, 20:
0.0, 0.0, -5.0, -5.0
## end
#95, 2:
曲线
## end
#96, 3:
0,1
## end
#98, 3:
0,1
## end
#101, 2:
曲线
## end
#102, 39:
-151.67286715872584, 1.1586370445243688
## end
#104, 37:
2094.9715939039056, 73.03071830578125
## end
#107, 2:
曲线
## end
#108, 22:
34.93313623403133, 0.0
## end
#110, 23:
2095.0261038674657, 0.0
## end
#126, 3:
多边形
## end
#127, 1:
1
## end
#129, 2:
圆形
## end
#131, 1:
0
## end
#133, 38:
1095.9268477213457, -76.15977280314998
## end
#137, 2018:
0.0, 0.0634239196565645, 0.12659245357374926, 0.1892512443604102, 0.2511479871810792, 0.3120334456984872, 0.3716624556603275, 0.4297949120891716, 0.4861967361004687, 0.5406408174555976, 0.5929079290546405, 0.6427876096865393, 0.6900790114821119, 0.7345917086575333, 0.7761464642917568, 0.8145759520503357, 0.8497254299495144, 0.8814533634475821, 0.9096319953545183, 0.9341478602651068, 0.9549022414440739, 0.9718115683235417, 0.984807753012208, 0.9938384644612541, 0.998867339183008, 0.9998741276738751, 0.9968547759519424, 0.9898214418809327, 0.9788024462147787, 0.963842158559942, 0.9450008187146685, 0.9223542941045814, 0.8959937742913359, 0.8660254037844386, 0.8325698546347713, 0.7957618405308322, 0.7557495743542584, 0.712694171378863, 0.6667690005162915, 0.6181589862206053, 0.5670598638627705, 0.5136773915734063, 0.4582265217274105, 0.4009305354066135, 0.3420201433256687, 0.28173255684142984, 0.2203105327865405, 0.15800139597334995, 0.0950560433041829, 0.031727933498067566, -0.031727933498067566, -0.0950560433041829, -0.15800139597334995, -0.2203105327865405, -0.28173255684142984, -0.3420201433256687, -0.4009305354066135, -0.4582265217274105, -0.5136773915734063, -0.5670598638627705, -0.6181589862206053, -0.6667690005162915, -0.712694171378863, -0.7557495743542584, -0.795761840530832, -0.8325698546347715, -0.8660254037844386, -0.8959937742913358, -0.9223542941045815, -0.9450008187146685, -0.963842158559942, -0.9788024462147787, -0.9898214418809327, -0.9968547759519423, -0.9998741276738751, -0.998867339183008, -0.9938384644612541, -0.984807753012208, -0.9718115683235418, -0.954902241444074, -0.9341478602651065, -0.9096319953545182, -0.881453363447582, -0.8497254299495144, -0.8145759520503358, -0.776146464291757, -0.734591708657533, -0.6900790114821119, -0.6427876096865393, -0.5929079290546406, -0.5406408174555979, -0.4861967361004683, -0.42979491208917137, -0.37166245566032746, -0.3120334456984872, -0.25114798718107945, -0.18925124436041066, -0.1265924535737489, -0.06342391965656433, 0.0
## end
#139, 2004:
1.0, 0.9979866764718844, 0.9919548128307953, 0.9819286972627067, 0.9679487013963562, 0.9500711177409453, 0.9283679330160726, 0.9029265382866213, 0.8738493770697849, 0.8412535328311812, 0.8052702575310585, 0.766044443118978, 0.7237340381050702, 0.6785094115571322, 0.6305526670845225, 0.5800569095711982, 0.5272254676105025, 0.47227107477268265, 0.41541501300188644, 0.3568862215918718, 0.29692037532827475, 0.23575893550942728, 0.17364817766693033, 0.11083819990101094, 0.04758191582374241, -0.015865963834807883, -0.07924995685678848, -0.14231483827328523, -0.2048066680651906, -0.266473813690035, -0.32706796331742166, -0.38634512569312873, -0.44406661260577407, -0.5, -0.5539200638661103, -0.6056096871376666, -0.654860733945285, -0.7014748877063212, -0.7452644496757548, -0.7860530947427874, -0.8236765814298329, -0.8579834132349771, -0.8888354486549234, -0.9161084574320697, -0.9396926207859084, -0.9594929736144974, -0.975429786885407, -0.9874388886763943, -0.9954719225730846, -0.9994965423831851, -0.9994965423831851, -0.9954719225730846, -0.9874388886763943, -0.975429786885407, -0.9594929736144974, -0.9396926207859084, -0.9161084574320697, -0.8888354486549234, -0.8579834132349771, -0.8236765814298329, -0.7860530947427874, -0.7452644496757548, -0.7014748877063212, -0.654860733945285, -0.6056096871376668, -0.5539200638661101, -0.5, -0.4440666126057743, -0.3863451256931285, -0.32706796331742166, -0.2664738136900352, -0.2048066680651906, -0.14231483827328523, -0.07924995685678873, -0.01586596383480838, 0.04758191582374265, 0.1108381999010112, 0.17364817766693033, 0.23575893550942706, 0.29692037532827453, 0.3568862215918722, 0.41541501300188666, 0.47227107477268276, 0.5272254676105024, 0.5800569095711979, 0.6305526670845222, 0.6785094115571324, 0.7237340381050703, 0.766044443118978, 0.8052702575310585, 0.841253532831181, 0.8738493770697852, 0.9029265382866213, 0.9283679330160727, 0.9500711177409453, 0.9679487013963562, 0.9819286972627066, 0.9919548128307953, 0.9979866764718844, 1.0
## end
#143, 2:
20
## end
#147, 2:
60
## end
#151, 2:
50
## end
#155, 2:
50
## end
#159, 3:
400
## end
#163, 1:
5
## end
#166, 638:
%{
+[M函数](,正向计算)
figure
第一部分:...
%}

addpath('Matlab\spectrometer');
physics_constant;
E=400e6;
theta_e=10e-3;
xe=0;
ye=0;

B=-1.48;
pos_m=[75,0]*1e-3;
siz_m=5e-2;

xf=1000e-3;

pos_p=[2100,0]*1e-3;
theta_p=0;

xX=pos_p(1);
E=E*e;
angle_e=theta_e*180/pi;
[x0,y0,r,beta,x_1m,y_1m,x_2m,y_2m] = trajectory_uniform(xe,ye,angle_e,E,pos_m(1:2),siz_m,-B,pos_p(1:2),theta_p);

x_2m

yf=y0+(xf-x0)*(y_2m-y0)/(x_2m-x0);
yX=y_1m+(xX-xe)*(y_1m-ye)/(x_1m-xe);

% Trajectory
[X,Y]=trajectory_XY(xe,ye,angle_e,x0,y0,r,beta,x_1m,y_1m,x_2m,y_2m);
X=X*1e3;
Y=Y*1e3;


plot(X,Y,xf*1e3,yf*1e3,'r*',[xe,xX]*1e3,[ye,yX]*1e3,'r*-')


%{
hold on
+[M函数](,正向计算)
%}
## end
#168, 1221:
<!--
Nini, 打开公式分析器(文件)
+[H函数](,测量原理)

[1].(公式):...
的([1].,表达式)->+[显示星图](,表达式)
将"x_m=x_o+\frac{z_m-z_o}{z-z_o}*(x_c-x_o)"记作(7)式

更新(7)式
-->
<h2>Fiducial method</h2>
The equations to calculate the energy in a fiducial spectrometer are following,
%[1].
%[2].
%[3].
%[4].
Here the location of the source, the fiducial and the shadow on the IP are at \((z_o,x_o)\), \((z_f,x_f)\) and \((z_s,x_s)\). The position of magnet is at \(z_m\), the width of the magnet is \(D\) and the intensity of the magnet is \(B\). The launch angle of the electron is \(\theta\) and the deflection angle leaving the magnet is \(\beta\). The radius of the trajectory in the magnet is \(R\). <br>


<h2>Radiation method</h2>
The equations are,
%[5].
%[6].
%[7].
Here the location of the source is at \((z_o,x_o)\). The radiation and electron are on the same IP, which are at \((z_e,x_e)\) and \((z_c,x_c)\). The position of magnet is at \(z_m\), the width of the magnet is \(D\) and the intensity of the magnet is \(B\). The launch angle of the electron is \(\theta\) and the deflection angle leaving the magnet is \(\beta\). The radius of the trajectory in the magnet is \(R\)

<!--
+[H函数](,测量原理)

验证公式:...
+[新建阅读窗口](,验证公式)
将(2)式写入验证公式(Matlab)
-->
## end
#174, 83:
tan(\theta)=\frac{x_s-x_o}{z_m-z_o}+\frac{(x_s-x_f)*(z_m-z_s)}{(z_s-z_f)*(z_m-z_o)}
## end
#176, 129:
tan(\theta)=\frac{x_s-x_o}{z_m-z_o}+\frac{\left(x_s-x_f\right)\ \left(z_m-z_s\right)}{\left(z_s-z_f\right)\ \left(z_m-z_o\right)}
## end
#179, 68:
将"tan(\theta)=\frac{(x_s-x_f)*(z_m-z_s)}{(z_s-z_f)*(z_m-z_o)}"记作(1)式
## end
#181, 56:
将"tan(\theta)=\frac{(x_s-x_f)*(z_m-z_s)}{z_s-z_f}"记作(1)式
## end
#183, 34:
将"tan(\theta)=\frac{1}{z_s}"记作(1)式
## end
#185, 26:
将"\frac{1+z_f}{z_f}"记作(1)式
## end
#187, 26:
将"\frac{1+z_f}{z_f}"记作(1)式
## end
#189, 26:
将"\frac{1+z_f}{z_f}"记作(1)式
## end
#196, 34:
E=\sqrt{B^2*q^2*R^2*c^2+m_e^2*c^4}
## end
#198, 50:
E=\sqrt{B^{2}\ c^{2}\ R^{2}\ q^{2}+m_e^{2}\ c^{4}}
## end
#204, 34:
R=\frac{D}{sin(\beta)-sin(\theta)}
## end
#206, 34:
R=\frac{D}{sin(\beta)-sin(\theta)}
## end
#212, 34:
tan(\beta)=\frac{x_s-x_f}{z_s-z_f}
## end
#214, 34:
tan(\beta)=\frac{x_s-x_f}{z_s-z_f}
## end
#220, 35:
tan(\theta)=\frac{x_c-x_o}{z_c-z_o}
## end
#222, 35:
tan(\theta)=\frac{x_c-x_o}{z_c-z_o}
## end
#228, 34:
tan(\beta)=\frac{x_e-x_m}{z_e-z_m}
## end
#230, 34:
tan(\beta)=\frac{x_e-x_m}{z_e-z_m}
## end
#236, 41:
x_m=x_o+\frac{z_m-z_o}{z_c-z_o}*(x_c-x_o)
## end
#238, 53:
x_m=x_o+\frac{z_m-z_o}{z_c-z_o}\ \left(x_c-x_o\right)
## end
#241, 309:

tan(theta)=(x_s-x_o)./(z_m-z_o)+((x_s-x_f).*(z_m-z_s))./((z_s-z_f).*(z_m-z_o));
tan(beta)=(x_s-x_f)./(z_s-z_f);
tan(theta)=(x_c-x_o)./(z_c-z_o);
tan(beta)=(x_e-x_m)./(z_e-z_m);
x_m=x_o+(z_m-z_o)./(z_c-z_o).*(x_c-x_o);
R=(D)./(sin(beta)-sin(theta));
E=sqrt(B.^(2).*c.^(2).*R.^(2).*q.^(2)+m_e.^(2).*c.^(4));



## end
#243, 410:
%{
地址::Matlab\spectrometer\fiducial_method.m
+[保存M函数](,fiducial_method)
%}


function [E_f,R,theta,beta]=fiducial_method(z_o,x_o,z_m,B,D,z_f,x_f,z_s,x_s)
    physics_constant;
    q=e;
    theta=atan((x_s-x_o)./(z_m-z_o)+((x_s-x_f).*(z_m-z_s))./((z_s-z_f).*(z_m-z_o)));
    beta=atan((x_s-x_f)./(z_s-z_f));
    R=(D)./(sin(beta)-sin(theta));
    E_f=sqrt(B.^(2).*c.^(2).*R.^(2).*q.^(2)+m_e.^(2).*c.^(4));
end


## end
#246, 37:
Matlab\spectrometer\fiducial_method.m
## end
#248, 416:
%{
地址::Matlab\spectrometer\radiation_method.m
+[保存M函数](,radiation_method)
%}


function [E_r,R,theta,beta]=radiation_method(z_o,x_o,z_m,B,D,z_c,x_c,z_e,x_e)
    physics_constant;
    q=e;
    x_m=x_o+(z_m-z_o)./(z_c-z_o).*(x_c-x_o);
    theta=atan((x_c-x_o)./(z_c-z_o));
    beta=atan((x_e-x_m)./(z_e-z_m));
    
    R=(D)./(sin(beta)-sin(theta));
    E_r=sqrt(B.^(2).*c.^(2).*R.^(2).*q.^(2)+m_e.^(2).*c.^(4));
end


## end
#251, 38:
Matlab\spectrometer\radiation_method.m
## end
#258, 1136:
%{
+[M函数](,正向计算)
figure
第一部分(M函数):...
测量原理(html):...
+[H函数](,测量原理)
fiducial_method(M函数):...
radiation_method(M函数):...
+[新建阅读窗口](,fiducial_method)
记住radiation_method(节点)
测量部分(M函数):

%}

addpath('Matlab\spectrometer');
physics_constant;
E=10000e6;
theta_e=5e-3;
xe=0;
ye=0;

B=-1.48;
pos_m=[75,0]*1e-3;
siz_m=5e-2;

xf=1000e-3;

pos_p=[2100,0]*1e-3;
theta_p=0;

xX=pos_p(1);
E=E*e;
angle_e=theta_e*180/pi;
[x0,y0,r,beta,x_1m,y_1m,x_2m,y_2m] = trajectory_uniform(xe,ye,angle_e,E,pos_m(1:2),siz_m,-B,pos_p(1:2),theta_p);


yf=y0+(xf-x0)*(y_2m-y0)/(x_2m-x0);
yX=ye+(xX-xe)*(y_1m-ye)/(x_1m-xe);

% Trajectory
[X,Y]=trajectory_XY(xe,ye,angle_e,x0,y0,r,beta,x_1m,y_1m,x_2m,y_2m);
X=X*1e3;
Y=Y*1e3;


plot(X,Y,xf*1e3,yf*1e3,'r*',[xe,xX]*1e3,[ye,yX]*1e3,'r*-')


% fiducial method
q=e;
z_o=xe;
x_o=ye;
z_m=pos_m(1);
z_f=xf;
x_f=yf;
z_s=x0;
x_s=y0;
D=siz_m;

[E_f,R,theta_f,beta_f]=fiducial_method(z_o,x_o,z_m,B,D,z_f,x_f,z_s,x_s);

% radiation method
q=e;
z_o=xe;
x_o=ye;
z_m=pos_m(1);
z_c=xX;
x_c=yX;
z_e=x0;
x_e=y0;
D=siz_m;

[E_r,R,theta_r,beta_r]=radiation_method(z_o,x_o,z_m,B,D,z_c,x_c,z_s,x_s);

E_f/e
E_r/e




%{
hold on
+[M函数](,正向计算)
%}
## end
### 结束