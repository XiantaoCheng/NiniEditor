### 节点
地址, 的, 句子设计, 目录, 的, 的, 定义动词, 的, 动词, 的, 描述, 的, 库, 的, 定义动词, 的, 转述, 的, P代码, 的, 匹配模板, 的, PPT, 的, 测试, 测试, 的, 测试, 的, 的, 节点数目统计, 的, 动词定义模板, 20211016, 的, 20211017, 的, 的, 测试场景, 的, 星图, 的, 的, 的, 的, 的, 的, 的, A3, 的, A2, 前面, A1, A, 后面, 的, 的, 的, 的, 的, 的, 的, B3, 的, B2, 前面, B1, B, 后面, 的, 的, 的, 的, 的, 的, 的, C3, 的, C2, 前面, C1, C, 后面, 的, 的, 的, 的, 的, 的, 的, D3, 的, D2, 前面, D1, D, 后面, M函数, 
### 关联
#, 2#0, #, #, 3#2, 2#6, #, 2#8, #, 8#10, #, 10#12, #, 12#14, #, 14#16, #, 16#18, #, 14#20, #, 2#22, #, 18#24, #, #, 6#25, #, 6#27, 3#30, #, 6#32, #, #, 30#33, #, 30#35, 6#38, #, 2#40, #, 38#48, 38#49, 38#50, 38#51, 38#52, 38#53, 38#54, #, 53#48, #, 53#50, #, #, 53#52, 38#62, 38#63, 38#64, 38#65, 38#66, 38#67, 38#68, #, 67#62, #, 67#64, #, #, 67#66, 38#76, 38#77, 38#78, 38#79, 38#80, 38#81, 38#82, #, 81#76, #, 81#78, #, #, 81#80, 38#90, 38#91, 38#92, 38#93, 38#94, 38#95, 38#96, #, 95#90, #, 95#92, #, #, 95#94, #, 
### 内容
#0, 16:
文档\S应用\句子设计.ftxt
## end
#2, 164:
+[返回目录](,句子设计)
地址::文档\S应用\句子设计.ftxt

PPT::文档\S应用\PPT.ftxt
+[打开文件](+新窗口,PPT)
星图::文档\S应用\星图.txt
+[打开文件](+新窗口,星图)


动词:...
+[设置动词](,动词)



定义动词:...
+[新建阅读窗口](,定义动词)



## end
#3, 48:
句子设计:...
创建于 20211014

节点数目统计::
+[设置结构](,节点数目统计)
## end
#6, 1513:
+[返回目录](,定义动词)

+[定义动词](+测试,定义动词)->+[del](,+测试)->+匹配模板(+[定义动词],动词定义模板)->+[del](,+匹配模板)

定义测试代码: %[主语]打开了%[宾语], 输入了%[文字], 最后得到了%[结果]
如果, 主语是A, 宾语是B, 文字是C, 结果是D
那么, A的A1, A2, A3, 分别是a1, a2, a3
B的B1, B2, B3, 分别是b1, b2, b3
C的C1, C2, C3, 分别是c1, c2, c3
D的D1, D2, D3, 分别是d1, d2, d3
然后运行Python
d1, d2, d3是输出变量

测试场景:...


上面这段描述会生成匹配模板, 输出模板和动词定义. 它们分别是, 
匹配模板::%[主语]打开了%[宾语], 输入了%[文字], 最后得到了%[结果]
输出模板::+[测试代码](%[主语],%[宾语])...
->+文字(+[测试代码],%[文字])->+[del](,+文字)...
->+结果(+[测试代码],%[结果])->+[del](,+结果)

动词定义模板::"""
P代码(P函数):...

"""
+测试代码(_A,_B)->+[del](,+测试代码)...
->的(测试代码,P代码)...
->文字(+测试代码,_C)->结果(+测试代码,_D)...

->%关联1(_A,A1)->%关联2(_A,A2)->%关联3(_A,A3)...
->%关联4(_B,B1)->%关联5(_B,B2)->%关联6(_B,B3)...
->%关联7(_C,C1)->%关联8(_C,C2)->%关联9(_C,C3)...
->%关联10(_D,D1)->%关联11(_D,D2)->%关联12(_D,D3)...

->+[python](Python,)->+[code](+[python],P代码)...
->+[.]"a1"(+[python],A1)->+[.]"a2"(+[python],A2)->+[.]"a3"(+[python],A3)...
->+[.]"b1"(+[python],B1)->+[.]"b2"(+[python],B2)->+[.]"b3"(+[python],B3)...
->+[.]"c1"(+[python],C1)->+[.]"c2"(+[python],C2)->+[.]"c3"(+[python],C3)...
->+[o]"d1"(+[python],D1)->+[o]"d2"(+[python],D2)->+[o]"d3"(+[python],D3)

生成动词定义::
_的(_A,A1)->+[标题]#1(_的,)...
...
+[模板文本](动词定义模板,+[临时文本])...
->+[.]"关联1"(+[模板文本],+[标题]#1)...
...
->+[显示](,+[临时文本])


是([动词库],动词)->+[打开文件](+新窗口,动词)
是([名词库],名词)->+[打开文件](+新窗口,名词)

先把P代码的输入做好. 行了, 接下来的之后继续做吧. 
下一步是在python中, 把各个变量之间的关系整理好. 


term=name.group(1)
pat_out=name.group(2)
vars_str=name.group(3)
vars_code=name.group(4)
code_type=name.group(5)
vars_out=name.group(6)


## end
#8, 51:
+[返回目录](,动词)
+[设置结构](,动词)

描述:...
+[新建阅读窗口](,描述)



## end
#10, 420:
"""
+[返回目录](,描述)
库:...
+[新建阅读窗口](,库)

"""
+描述(_句子,_结构)->+[del](,+描述)...
->的(描述,库)...
->的(库,_模板)->的(_模板,匹配模板)->[模式匹配](匹配模板,_句子)...
->+[临时文本]->[]{
    []:->的(_模板,转述)->+[做](_句子,+[临时文本])->+[code](+[做],转述)...
    ->+匹配模板(+[做],匹配模板)->+[del](,+匹配模板),
    ->的(_模板,输出模板)->+[转述](_句子,+[临时文本])...
    ->+[匹配模板](+[转述],匹配模板)->+[输出模板](+[转述],输出模板)
}:
    ->_结构->+[修改内容](+[临时文本],_结构),
    ->+[复制内容](,+[临时文本])->+[修改内容](+[临时文本],+[显示])





## end
#12, 252:
+[返回目录](,库)
+[设置结构](,库)

定义动词: 定义测试代码: %[主语]打开了%[宾语], 输入了%[文字], 最后得到了%[结果]
如果, 主语是A, 宾语是B, 文字是C, 结果是D
那么, A的A1, A2, A3, 分别是a1, a2, a3
B的B1, B2, B3, 分别是b1, b2, b3
C的C1, C2, C3, 分别是c1, c2, c3
D的D1, D2, D3, 分别是d1, d2, d3
然后运行Matlab
d1, d2, d3是输出变量...





## end
#14, 108:
+[返回目录](,定义动词)

匹配模板::定义%[动词]: %[句子]
如果, %[段落]
那么, %[段落2]
然后运行%[程序类型]
%[输出变量]是输出变量

转述:...
+[新建阅读窗口](,转述)



## end
#16, 347:
"""
+[返回目录](,转述)
P代码:...

...

->+[描述](+[临时文本]#2,+[临时文本]#2)...

->+[修改内容](+[临时文本]#1,_输出)->+[增加内容](+[临时文本]#2,_输出)->+[增加内容](+[临时文本]#3,_输出)

"""

+转述(_输入,_输出)->+[del](,+转述)...
->的(转述,P代码)->匹配模板(+转述,_匹配模板)...
->+[python](Python,)->+[code](+[python],P代码)...
->+[.]"pat"(+[python],_匹配模板)->+[.]"sent"(+[python],_输入)...
->+[o]"code_final"(+[python],_输出)


## end
#18, 3265:
"""
+[P函数](,P代码)

测试(P函数):...

"""

pat0=re.sub('%\[[^\[^\]]*\]',r"([\\s\\S]*)",pat)
name=re.search(pat0,sent)

term=name.group(1)
pat_out=name.group(2)
vars_str=name.group(3)
vars_code=name.group(4)
code_type=name.group(5)
vars_out=name.group(6)

### 输出模板
words=re.findall('%\[([^\[^\]]*)\]',pat_out)
str_out="+[{0}](%[{1}],%[{2}])"
str_con="...\n->+{0}(+[{1}],%[{2}])->+[del](,+{3})"
sbj=''
obj=''
for word in words:
    if word=='主语':
        sbj=word
    elif word=='宾语':
        obj=word
    else:
        str_out+=str_con.format(word,term,word,word)

str_out=str_out.format(term,sbj,obj)
# print(str_out)


### 词语关系
vars=vars_str.split(', ')
map_w2p={}
for var in vars:
    result=re.search(r'(\w*)是(\w*)',var)
    map_w2p.update({result.group(1):result.group(2)})
# print(map_w2p)

#
pts=vars_code.split('\n')
map_p2v={}
for pt in pts:
    result=re.search(r'(\w*)的(.*), 分别是(.*)',pt)
    name=result.group(1)
    list_p=result.group(2).split(', ')
    list_var=result.group(3).split(', ')
    map_v={}
    for i in range(len(list_p)):
        map_v.update({list_p[i]:list_var[i]})
    map_p2v.update({name:map_v})
# print(map_p2v)

#
list_out=vars_out.split(', ')
# print(list_out)


### 动词定义模板
format_head="""\"\"\"
{1}代码({1}函数):...

\"\"\"
+{0}({2},{3})->+[del](,+{0})...
->的({0},{1}代码)...

"""
format_wd="->{2}(+{0},_{1})"
format_in="->%关联{2}(_{0},{1})"
format_pm="...\n\n->+[{0}]({1},)->+[code](+[{0}],{2}代码)"
format_var="->+[{0}]\"{2}\"(+[{3}],{1})"

if code_type=='Python' or code_type=='python' or code_type=='P代码':
    code_0='python'
    code_1='Python'
else:
    code_0='matlab'
    code_1='Matlab'

if sbj!='':
    sbj='_'+sbj
if obj!='':
    obj='_'+obj
code=format_head.format(term,code_1[0],sbj,obj)

for word in map_w2p:
    if word!='主语' and word!='宾语':
        pt_var=map_w2p[word]
        code+=format_wd.format(term,pt_var,word)

# print(code)

n=0
code_in=""
code_var=""
for pt in map_p2v:
    map_p=map_p2v[pt]
    code_in+="...\n"
    code_var+="...\n"
    for p in map_p:
        var=map_p[p]
        code_in+=format_in.format(pt,p,n)
        var_type='.'
        if var in list_out:
            var_type='o'
        code_var+=format_var.format(var_type,p,var,code_0)
        n+=1

code_pm=format_pm.format(code_1,code_1,code_1[0])
code+=code_in+code_pm+code_var


### 修正动词
format_pt="_的({0},{1})->+[标题]#{2}(_的,)"
str_v="->+[模板文本](+[临时文本],+[临时文本])"
format_wd="->+[.]\"关联{0}\"(+[模板文本],+[标题]#{0})"

n=0
str_pt=''
str_wd=""
for pt in map_p2v:
    map_p=map_p2v[pt]
    str_wd+="...\n"
    for p in map_p:
        var=map_p[p]
        if str_pt=='':
            str_pt+=format_pt.format(pt,p,n)
        else:
            str_pt+='->'+format_pt.format(pt,p,n)
        str_wd+=format_wd.format(n)
        n+=1
    str_pt+="...\n"

str_code=str_pt+str_v+str_wd

# print(pat_out)
# print(str_out)
# print(code)
# print(str_code)


#### Final output
code=code.replace('"','\\"')
pat_out=pat_out.replace('"','\\"')
str_out=str_out.replace('"','\\"')
code_final="""+[临时文本]"{0}"...
->+[临时文本]#1"{1}"->+[临时文本]#2"{2}"...

->{3}...

->+[定义动词](+{4},+[临时文本])->+[del](,+{4})...
->+匹配模板(+[定义动词],+[临时文本]#1)->+[del](,+匹配模板)...
->+输出模板(+[定义动词],+[临时文本]#2)->+[del](,+输出模板)""".format(code,pat_out,str_out,str_code,term)
print(code_final)


"""
+[P函数](,P代码)

"""
## end
#20, 60:
定义%[动词]: %[句子]
如果, %[段落]
那么, %[段落2]
然后运行%[程序类型]
%[输出变量]是输出变量
## end
#22, 15:
文档\S应用\PPT.ftxt
## end
#24, 66:
"""
+[P函数](,测试)

"""

a="12345"

a=a.replace('1','1123')
print(a)

## end
#25, 1464:
+[返回目录](,定义动词)

+[定义动词](+测试,定义动词)->+[del](,+测试)

定义测试代码: %[主语]打开了%[宾语], 输入了%[文字], 最后得到了%[结果]
如果, 主语是A, 宾语是B, 文字是C, 结果是D
那么, A的A1, A2, A3, 分别是a1, a2, a3
B的B1, B2, B3, 分别是b1, b2, b3
C的C1, C2, C3, 分别是c1, c2, c3
D的D1, D2, D3, 分别是d1, d2, d3
然后运行Python
d1, d2, d3是输出变量


上面这段描述会生成匹配模板, 输出模板和动词定义. 它们分别是, 
匹配模板::%[主语]打开了%[宾语], 输入了%[文字], 最后得到了%[结果]
输出模板::+[测试代码](%[主语],%[宾语])...
->+文字(+[测试代码],%[文字])->+[del](,+文字)...
->+结果(+[测试代码],%[结果])->+[del](,+结果)

动词定义模板::"""
P代码(P函数):...

"""
+测试代码(_A,_B)->+[del](,+测试代码)...
->的(测试代码,P代码)...
->文字(+测试代码,_C)->结果(+测试代码,_D)...

->%关联1(_A,A1)->%关联2(_A,A2)->%关联3(_A,A3)...
->%关联4(_B,B1)->%关联5(_B,B2)->%关联6(_B,B3)...
->%关联7(_C,C1)->%关联8(_C,C2)->%关联9(_C,C3)...
->%关联10(_D,D1)->%关联11(_D,D2)->%关联12(_D,D3)...

->+[python](Python,)->+[code](+[python],P代码)...
->+[.]"a1"(+[python],A1)->+[.]"a2"(+[python],A2)->+[.]"a3"(+[python],A3)...
->+[.]"b1"(+[python],B1)->+[.]"b2"(+[python],B2)->+[.]"b3"(+[python],B3)...
->+[.]"c1"(+[python],C1)->+[.]"c2"(+[python],C2)->+[.]"c3"(+[python],C3)...
->+[o]"d1"(+[python],D1)->+[o]"d2"(+[python],D2)->+[o]"d3"(+[python],D3)

生成动词定义::
_的(_A,A1)->+[标题]#1(_的,)...
...
+[模板文本](动词定义模板,+[临时文本])...
->+[.]"关联1"(+[模板文本],+[标题]#1)...
...
->+[显示](,+[临时文本])


是([动词库],动词)->+[打开文件](+新窗口,动词)
是([名词库],名词)->+[打开文件](+新窗口,名词)

先把P代码的输入做好. 行了, 接下来的之后继续做吧. 
下一步是在python中, 把各个变量之间的关系整理好. 


term=name.group(1)
pat_out=name.group(2)
vars_str=name.group(3)
vars_code=name.group(4)
code_type=name.group(5)
vars_out=name.group(6)


## end
#27, 1464:
+[返回目录](,定义动词)

+[定义动词](+测试,定义动词)->+[del](,+测试)

定义测试代码: %[主语]打开了%[宾语], 输入了%[文字], 最后得到了%[结果]
如果, 主语是A, 宾语是B, 文字是C, 结果是D
那么, A的A1, A2, A3, 分别是a1, a2, a3
B的B1, B2, B3, 分别是b1, b2, b3
C的C1, C2, C3, 分别是c1, c2, c3
D的D1, D2, D3, 分别是d1, d2, d3
然后运行Python
d1, d2, d3是输出变量


上面这段描述会生成匹配模板, 输出模板和动词定义. 它们分别是, 
匹配模板::%[主语]打开了%[宾语], 输入了%[文字], 最后得到了%[结果]
输出模板::+[测试代码](%[主语],%[宾语])...
->+文字(+[测试代码],%[文字])->+[del](,+文字)...
->+结果(+[测试代码],%[结果])->+[del](,+结果)

动词定义模板::"""
P代码(P函数):...

"""
+测试代码(_A,_B)->+[del](,+测试代码)...
->的(测试代码,P代码)...
->文字(+测试代码,_C)->结果(+测试代码,_D)...

->%关联1(_A,A1)->%关联2(_A,A2)->%关联3(_A,A3)...
->%关联4(_B,B1)->%关联5(_B,B2)->%关联6(_B,B3)...
->%关联7(_C,C1)->%关联8(_C,C2)->%关联9(_C,C3)...
->%关联10(_D,D1)->%关联11(_D,D2)->%关联12(_D,D3)...

->+[python](Python,)->+[code](+[python],P代码)...
->+[.]"a1"(+[python],A1)->+[.]"a2"(+[python],A2)->+[.]"a3"(+[python],A3)...
->+[.]"b1"(+[python],B1)->+[.]"b2"(+[python],B2)->+[.]"b3"(+[python],B3)...
->+[.]"c1"(+[python],C1)->+[.]"c2"(+[python],C2)->+[.]"c3"(+[python],C3)...
->+[o]"d1"(+[python],D1)->+[o]"d2"(+[python],D2)->+[o]"d3"(+[python],D3)

生成动词定义::
_的(_A,A1)->+[标题]#1(_的,)...
...
+[模板文本](动词定义模板,+[临时文本])...
->+[.]"关联1"(+[模板文本],+[标题]#1)...
...
->+[显示](,+[临时文本])


是([动词库],动词)->+[打开文件](+新窗口,动词)
是([名词库],名词)->+[打开文件](+新窗口,名词)

先把P代码的输入做好. 行了, 接下来的之后继续做吧. 
下一步是在python中, 把各个变量之间的关系整理好. 


term=name.group(1)
pat_out=name.group(2)
vars_str=name.group(3)
vars_code=name.group(4)
code_type=name.group(5)
vars_out=name.group(6)


## end
#32, 21:
"""
P代码(P函数):...

"""
## end
#33, 2:
37
## end
#35, 3:
111
## end
#38, 415:
+[返回目录](,测试场景)
+[删除结构](,测试场景)
+[显示星图](,测试场景)


+后面(+A,+A1)->+前面(+A,+A2)->+的(+A,+A3)
+后面(+B,+B1)->+前面(+B,+B2)->+的(+B,+B3)
+后面(+C,+C1)->+前面(+C,+C2)->+的(+C,+C3)
+后面(+D,+D1)->+前面(+D,+D2)->+的(+D,+D3)


定义测试代码: %[主语]打开了%[宾语], 输入了%[文字], 最后得到了%[结果]
如果, 主语是A, 宾语是B, 文字是C, 结果是D
那么, A的A1, A2, A3, 分别是a1, a2, a3
B的B1, B2, B3, 分别是b1, b2, b3
C的C1, C2, C3, 分别是c1, c2, c3
D的D1, D2, D3, 分别是d1, d2, d3
然后运行Matlab
d1, d2, d3是输出变量





## end
#40, 13:
文档\S应用\星图.txt
## end
### 结束