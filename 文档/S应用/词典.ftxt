### 节点
地址, 的, 的, 助词, 或, 并且, 或者, 和, 的, 的, 的, 的, 连词, 代词, 介词, 副词, 数量词, 单纯, 天真, 美丽, 的, 的, 的, 形容词, 吃, 跑, 玩耍, 放映, 结束, 的, 的, 的, 的, 的, 动词, 名词, [标题], 的, 词典, 目录, 的, 的, 词典内容, 的, 的, 的, 的, 的, 的, 的, 的, 的, 的, 动词, 的, 更新词典, 的, 计算, 的, 反射, 的, 是, 的, 句子相关, 的, 描述, 的, 库, 条目, 的, 记忆, 的, 导入条目, 的, 匹配模板, 的, 输出模板, 的, 定义词条2, 的, 匹配模板, 的, 输出模板, 子狐, 的, 显示词条, 的, 匹配模板, 的, 输出模板, 的, 保存, 的, 词典模板, 撤退, 的, 导入句子分析函数, 的, P代码, 踢, 结构, m_width, m_height, m_y, m_x, m_cursor, m_readPtr, m_width, m_height, m_y, m_x, m_cursor, m_readPtr, 保存, 测试, 的, P代码, 结构转换代码, 的, 的, 的, 的, 生成句子结构, 的, P代码, 的, 生成句子代码, 的, 句子库, 的, 句子库, 的, 测试, 的, 保存, 的, 动词存档, 的, fun_动词存档, 的, fun_动词存档2, 的, fun_名词存档1, 的, 标点, 的, 句号, 的, 问号, 的, 感叹号, 的, 逗号, 的, test, 的, 清空词典, 的, 逗号2, 的, 感叹号2, 的, 问号2, 的, 句号2, 的, 换行, 的, 测试un_短语, P代码, 的, 测试fun_短语, P函数, 攻击, 电击, 使用, 的, 的, 的, 的, 测试述宾短语, 击败, 聪明, 击败, 的, 击败, 的, 聪明, 的, 挑衅, 的, 的, 的, 勇敢, 的, 的, 的, 正义, 的, 的, 的, 善良, 的, 的, 的, 什么, 的, 的, 的, 什么样, 的, 的, 的, 从, 的, 的, 的, 捕捉, 的, 的, 的, 在, 的, 的, 的, 删除词条, 的, 匹配模板, 的, 输出模板, 的, 准备, 的, 的, 的, 全部, 的, 的, 输出模板, 匹配模板, 的, 的, 定义词条, 的, 的, 所有, 的, 的, 的, 句子描述, 的, 库, 的, 测试想法, 的, 准备, 的, 解释1, 的, 匹配条件, 的, 句子转述, 的, 输出模板, 的, 在_del, 输出模板, 匹配条件, 的, 的, 解释1, 的, 的, 句子转换, 的, S代码, 的, 有, 的, 中, parser函数, 的, parser函数, 词语库, 的, 词语库, 匹配条件, 输出模板, 的, 的, 解释2, 的, 通用条目, 的, 的, 句子回答, 的, 在, 输出模板, 匹配条件, 的, 的, 解释2, 的, 有_del, 的, 匹配条件, 输出模板, 的, 的, 解释1, 的, 输出模板, 匹配条件, 的, 的, 解释1, 的, 的, 查询词条, 的, 输出模板, 的, 匹配模板, 的, 主语结构, 的, 宾语结构, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 保存, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 都, 的, 被, 的, 个, 的, 只, 的, 辆, 的, 相距, 的, 名词, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 保存, 的, 动词, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 设置词条, 的, 匹配模板, 的, 输出模板, 的, 调用词典动词, 的, 状语结构, 的, 解释1, 的, 谓语结构, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 介宾结构, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 副词模板, 的, 解释3, 的, 匹配条件, 的, 输出模板, 的, N函数, 的, 奔跑, 的, 为, 的, 距离, 的, 补语结构, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 段落转换, 的, P代码, 的, 判断条件, 的, 想法, 的, 词典名词, 的, 线段, 的, 定义, 的, 圆形, 的, 定义, 的, 默认动词, 的, 圆柱体, 的, 定义, 的, 更新, 的, 方向, 的, 定义, 的, 赋值, 的, 背向, 的, 绕, 的, 介宾短语_存档, 的, 测试模板, 的, 副词模板, 的, 保存, 的, fun_名词存档2, 的, 标记区域, 的, 定义, 的, 转换, 的, 显示, 的, 移动, 的, 到, 的, 添加, 的, 把, 的, 将, 的, 坐标, 的, 定义, 的, X坐标, 的, 定义, 的, Y坐标, 的, 定义, 的, 解析, 的, 按, 的, 查看, 的, Javascript, 的, 类, 的, 匹配, 的, P代码, 的, 函数, 的, 匹配, 的, P代码, 的, 引用, 的, 库, 的, 添加内容, 的, 添加标记点, 的, M代码, 的, addRefPt, M函数, 的, 地址, addRefPt, 的, addRefPt, 的, 屏幕, 定义, 的, 修改, 的, 库, 的, 修改标记区域, 的, M代码, M函数, 的, modRefPts, M函数, 的, 地址, modRefPts, 的, modRefPts, 的, 号, 的, 修改标记点, 的, M代码_曲线, M函数, 的, modRefPt_curve, M函数, 的, 地址, modRefPt, 的, modRefPt, 的, 库, 的, 获取坐标, 的, M代码, M函数, 的, 标记点, 的, 的, M代码, 的, M代码, 的, 保存, 的, 程序流程图, 的, 库, 的, 画流程图, 的, 替换, 的, 库, 的, re替换2, 的, P代码, P函数, 的, 透镜组, 的, 定义, 的, P代码, P函数, 的, 生成透镜, 端口, 的, 光束传播图, 的, 成像示意图, 的, 光谱, 的, 红外线, 的, 可见光, 的, 定义, 的, 库, 的, 可见光, 的, 红外线, 的, M代码, 的, 画标记点, 的, M代码, 的, M代码, 的, 光强, 的, 波长, 的, 相位, 的, 定义, 的, 库, 的, 设置相位, 的, 采样点, 的, 定义, 的, M模板, 的, 保存, 的, 赋值_del, 设置场强, 的, 设置光强, 的, 的, 波包, 的, 定义, 的, 场强, 的, 画波包, 的, M代码, 的, 光标, 的, 库, 的, 移动光标, 的, P代码, 的, 一般动词, 的, 保存, 的, 进入, 的, 离开, 答案, 回答, 的, 状语复句, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 匹配模式, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 根据, 的, 裁剪, 的, 库, 的, 裁剪分布, 的, M代码, 的, 函数, 的, M代码, 的, 截面分布, 的, 库, 的, 长度, 的, 计算长度, 的, M代码, 的, 节点数目统计, 20220526, 的, 20220527, 的, 的, 库, 的, 词典名词操作, 的, 调用词典名词, 的, 生成圆形, 的, M代码, 的, 画衍射环, 的, M代码, M代码, 的, 画圆形, 的, 的, 衍射环, 的, 获取, 的, 库, 的, 获取光谱, 的, M代码, 的, 保存, 的, 变量, 的, 设置变量, 的, M代码, 的, M模板, 20220528, 的, 的, M代码, 的, 到达, 的, 整理词典, 的, 保存word_in_dict, 的, 一般名词, 的, 定义, 的, 波前, 的, 设置性质, 的, 二维函数, 的, 定义, 的, M模板, 的, 保存, 的, 画二维函数, 的, M代码, 的, 计算波包, 的, M代码, 20220529, 的, 的, 分析, 的, 库, 的, 分析波前, 的, M代码, M代码, IP图像, 的, 的, FROG, 的, 画FROG, 的, M代码, 的, 测试, 20220530, 的, 的, 测试, 的, A, 的, 临时文本, 的, 反演, 的, 反演, 的, M代码, 的, 测试FROG, 20220531, 的, 的, M代码_屏幕, 画FROG, 的, 画FROG, 20220601, 的, 计算波包, 的, 计算波包, 20220603, 的, 的, 光栅压缩器, 的, 定义, 的, 然后复句, 的, 解释1, 的, 匹配条件, 的, 输出模板, 的, 库, 的, 计算光束波包, 的, M代码, 的, 计算光栅对输出, 的, M代码, 20220604, 的, 20220605, 的, 的, 复制, 20220607, 的, 的, 能谱, 区域, 的, 的, 测试颜色, 的, 参考, 20220608, 的, 的, IP图像, 的, 画IP图像, 的, M代码, 的, 倍率, 的, 优化, 的, 位置, 的, 范围, 的, 库, 的, 函数极小值, 的, M代码, M代码, 的, 定义, 的, 长方形, 的, 20220609, 的, M代码, 的, 定义, 的, 球体, 的, M代码, 的, 定义, 的, 相机, 的, M代码, 的, 定义, 的, 三维箭头, 的, M代码, 的, 定义, 的, 立方体, 的, 的, 显示图片, 的, M代码, 端口, 的, 保存, 端口, 的, 参考面, M代码, 计算波前, 的, 的, 参数, 的, 拍摄, 的, M代码, 的, 多边形, M代码, 的, 画光谱, 的, 的, 库, 的, 多边形, 的, 标记点, 的, 截取, M代码_屏幕, 保存, 的, M代码, 的, 的, 截面分布, 的, 20220610, 的, 计算能谱, 的, 计算能谱, 的, 物, 的, 像, 20220616, 的, 的, 像距, M代码, 的, 计算相机参数, 的, 出发代码, 传播代码, 成像代码, 的, 的, 的, 计算像距, 的, 的, 库, 的, 更新透镜组, 的, M代码, 的, 成像示意图, 光束传播图, 的, 的, 顺序, 的, 调换, 20220620, 的, 的, 来源, 的, 发射角分布, 的, 库, 的, 计算IP图像2, 的, 的, 保存, 保存, 保存, 测试shY, 的, 的, M代码, 的, 计算全局能谱1, 互逆测试, 测试shY, 保存, 的, 的, 的, M代码, 的, 计算能谱2, 的, 的, 库, 的, 的, 计算能谱, 的, 的, 库, 20220621, 的, 的, 三维背向, 的, 保存, 二维背向, 的, 的, 操作, 的, M代码, 的, X方向, 的, 沿, 的, Z方向, 的, Y方向, 保存, m_width, m_height, m_y, m_x, m_cursor, m_readPtr, 二维旋转, M代码, 的, 操作, 的, 三维旋转, 的, 的, 库, 的, 的, 旋转, 的, 保存, m_width, m_height, m_y, m_x, m_cursor, m_readPtr, 二维朝向, m_width, m_height, m_y, m_x, m_cursor, m_readPtr, M代码, 的, 操作, 的, 三维朝向, 的, 的, 库, 的, 的, 朝向, 的, M代码, 的, 定义, 的, 网格, 的, M代码, 的, 定义, 的, 平面, 的, 的, 网格, 的, M代码, 的, 区域, 成像代码, 传播代码, 出发代码, 的, 的, 的, 计算像距, M代码, 的, 的, 像距, 的, 的, 库, 的, 立方体, 的, 圆柱体, 的, 清空, 的, 库, 的, 网格, 的, M代码, 保存, 的, 保存, 的, M代码2, 保存, 保存, 测试shY, 的, 的, M代码, 的, 计算全局能谱1, 保存, 的, M代码2, 测试shY, 保存, 的, 的, M代码, 的, 的, 计算发射角分布2, 的, 的, 库, 的, 的, 发射角分布, 的, 20220623, 的, 的, 保存, 的, fiducial参数, M代码, 的, 画函数分布, 的, 的, 互逆测试, 的, M代码2, 20220625, 的, 20220626, 的, 20220702, 的, 20220703, 的, 20220707, 的, 20220710, 的, 的, 执行词典动词, 20220711, 的, 20220712, 的, 的, 保存, 的, 库, 的, 曲线数据, 的, M代码, M函数, 的, 测试cell2str, 的, 测试读取, 20220713, 的, 的, 按照, 的, 变量, 的, M模板, 的, M代码, 的, 代入, 的, 记作, 20220714, 的, 的, 库, 的, 操作0, 的, 库, 的, 操作0, 的, 显示公式, 的, 网页模板, 的, 接触, 20220721, 的, 20220723, 的, 20220725, 的, 的, 操作, 的, M代码, 的, 固定, 20220728, 的, 20220729, 的, 的, 等高线图, 的, M代码, 20220730, 的, 20220804, 的, 的, 库, 的, 高斯波前, 的, M代码, 的, 波前传播2, 的, 的, M代码1, 的, 收集参数, M代码, 的, 波前传播, 的, 的, 保存fun_并列短语, 20220805, 的, 20220806, 的, 的, 保存fun_状语, 的, 经过, 的, 分别, 的, 依次, 20220811, 的, 画光束传播图, 的, 20220814, 的, 的, 保存, 20220816, 的, 的, 代码结构变换, 20220818, 的, 的, 保存, 20220819, 的, 20220823, 的, 的, 更新表达式, 20220826, 的, 的, 图片, 的, M代码, 的, Y投影图, 的, M代码, 的, 存档_fun_宾语, 的, 保存, 的, 保存, M代码, 的, 优化位置, 的, 的, M代码2, 的, 2D_fig_data, M函数, 的, fig_data_2D, M函数, 的, 地址, fig_data_2D, 的, fig_data_2D, 的, 标记, 20220828, 的, 的, 提取, 的, 减去, 的, 库, 的, 提取括号, 的, 操作, 的, 和式, 操作, 的, 提取公式, 的, 的, 库, 的, 减去公式, 的, 操作, 操作, 的, 乘以公式, 的, 库, 的, 乘以, 的, 操作, 的, 整理公式, 的, 库, 的, 整理, 的, 操作, 的, 加上公式, 的, 库, 的, 加上, 的, 的, 加上括号, 的, 操作, 的, 库, 的, 函数曲线, 的, M代码, 的, setRefPts, M函数, 的, 地址, setRefPt, 的, setRefPt, setRefPts, 的, setRefPts, M代码, 的, X投影图, 的, 的, M代码2, 的, 设置, 的, 库, 的, 亮度, 的, M代码, 的, 矩形区域, 的, M代码, 的, 标记屏幕, 的, M代码, 的, LWFA11, 20220904, 的, 的, 整理, 的, 一下, 操作, 的, 除以公式, 的, 库, 的, 除以, 的, 20220907, 的, 20220914, 的, 20220922, 的, 公式结构变换, 的, 20220923, 的, 20220924, 的, 20220925, 的, 的, 收集内容, 的, 收集内容2, 的, 召唤, 的, 封印, 的, 以, 20221008, 的, 的, 保存fun_普通句, 20221011, 的, 的, 着, 的, 连接, 的, 操作, 的, M代码, 20221012, 的, 20221020, 的, 的, 保存, 的, 保存, 20221024, 的, 的, 上面, 的, 下面, 20221102, 的, 的, 平移, 的, 看, 的, 追逐, 20221117, 的, 的, 运行, 的, 输入, 20221120, 的, 的, 标记点, 的, M代码, 的, M代码_折线, 的, 类型, 的, addRefPt_path, M函数, 的, 地址, addRefPt_curve, 的, addRefPt_curve, 地址, 的, M函数, addRefPt_curve, 的, M代码_曲线, 的, addRefPt_path, 的, addRefPt_path, 地址, 的, M函数, modRefPt_path, 的, M函数, M代码_折线, 的, 地址, M函数, 的, modRefPt, M函数, 的, M代码, 的, modRefPt_curve, 的, modRefPt_curve, modRefPt_path, 的, modRefPt_path, 的, 操作2, 的, M代码, 的, 平行, 的, P代码, 的, 求解, P函数, P代码, 的, re替换, 的, 的, 保存, 的, 描述结构, 的, 库, 的, 二维位移, 的, 一维位移, 的, 垂直, 的, 合并, 的, 保存, 的, 生成词典, 的, 生成表格, 的, 测试输出表格, 的, 保存词典, 的, P代码, 的, 测试读取, 在, 在, 在, 在, 在, 在, 在, 在, 在, 在, 测试读取, 的, P代码, 的, 读取词典, 的, 的, 参考, 的, 对齐, 的, 保存fun_主语, 的, 颜色, 的, M代码, 的, 置顶, 的, 对, 的, 积分, 的, 微分, 的, 偏微分, 的, 交换, 的, 保存, 的, 里, 的, 相同, 的, 描述, 的, 描述结构, 的, 英文词典, 的, 词性表, 打开网页, 的, 测试代码, 的, 输出词典, 的, 阅读英文, 的, 测试, 的, P代码, 的, P代码1, 的, P代码2, 的, 测试parser, 的, 英文parser, 的, 代码, 的, 结构, 的, 回忆, 的, 化简, 的, 整理表格, 的, 版本1, 的, v1, 的, v2, 的, 保存, 的, 不, 的, 可以, 的, 思考, 的, 重新, 的, 于, 的, 相切, 的, 相交, 的, 介宾短语_存档2, 的, 前缀存档, 的, 哪些, 的, 了, 的, 定义, 的, 添加曲线, 的, M代码, 的, addLine, M函数, 的, 地址, 的, addLine2, 的, 地址, addLine2, 的, addLine2, 的, addLine3, 的, 地址, addLine3, 的, addLine3, addLine, 的, addLine, 的, rmLine2, 的, rmLine3, 的, 地址, 的, 地址, rmLine3, 的, rmLine3, rmLine2, 的, rmLine2, 的, 执行, 的, 记住, 
### 关联
#, #, 3#1, #, #, #, #, #, 12#4, 12#5, 12#6, 12#7, #, #, #, #, #, #, #, #, 23#17, 23#18, 23#19, #, #, #, #, #, #, 34#24, 34#25, 34#26, 34#27, 34#28, #, #, #, 38#0, #, #, 39#38, 38#42, #, 42#35, 42#34, 42#23, 42#16, 42#15, 42#14, 42#13, 42#12, 42#3, 38#53, #, 53#55, #, 34#57, #, 34#59, #, 34#61, #, 38#63, #, 53#65, #, 65#67, #, #42, 70#68, 39#, 67#72, #, 72#74, #, 72#76, #, 67#78, #, 78#80, #, 78#82, #, #, 67#85, #, 85#87, #, 85#89, #, 55#91, #, 55#93, #, #, 53#96, #, 96#98, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 116#114, #, #, 122#100, 122#113, 122#116, 122#117, #, 53#122, #, 126#124, #, 53#126, #67, 70#128, #, 98#132, #, 98#134, #, 98#136, #, 98#138, #, 98#140, #, 98#142, #, 42#144, #, 144#146, #, 144#148, #, 144#150, #, 144#152, #, 132#154, #, 55#156, #, 144#158, #, 144#160, #, 144#162, #, 144#164, #, 144#166, #, 98#168, #, 168#, 98#171, #, 171#, #, #, #, 171#175, 171#178, 34#175, 171#180, #, #, #, #, 34#185, #, 23#187, #, 34#189, #, 98#189, 98#188, 23#193, #, 98#193, 98#192, 23#197, #, 98#197, 98#196, 23#201, #, 98#201, 98#200, 23#205, #, 98#205, 98#204, 23#209, #, 98#209, 98#208, 14#213, #, 98#213, 98#212, 34#217, #, 98#217, 98#216, 14#221, #, 98#221, 98#220, 67#225, #, 225#227, #, 225#229, #, 34#231, #, 98#231, 98#230, 23#235, #, 98#235, 98#234, #, #, 242#238, 242#239, #, 67#242, 23#245, #, 98#245, 98#244, 53#249, #, 249#251, #, 249#253, #, 251#255, #, 255#257, #, 257#259, #, 53#261, #, 257#263, #, 251#265, #, #, #, 270#266, 270#267, #, 265#270, 53#273, #, 273#275, #, 34#277, #, 15#279, #, #98, 70#280, #, #251, 70#283, #, #, #, 290#286, 290#287, #, 292#290, #, 251#292, 53#295, #, 34#297, #, #, #, 302#298, 302#299, #, 304#302, #, 251#304, #, #, 310#306, 310#307, #, 304#310, #, #, 316#312, 316#313, #, 292#316, 67#319, #, 319#321, #, 319#323, #, 251#325, #, 251#327, #, 325#329, #, 329#331, #, 329#333, #, 313#335, #, 327#337, #, 337#339, #, 337#341, #, 15#343, #, 3#345, #, 16#347, #, 16#349, #, 16#351, #, 34#353, #, 251#355, #, 355#357, #, 357#359, #, 357#361, #, 331#363, #, 251#365, #, 365#367, #, 367#369, #, 367#371, #, 67#373, #, 373#375, #, 373#377, #, 53#379, #, 251#381, #, 381#383, #, 251#385, #, 385#387, #, 387#389, #, 387#391, #, 251#393, #, 393#395, #, 395#397, #, 395#399, #, 389#401, #, 292#403, #, 403#405, #, 403#407, #, 53#409, #, 34#411, #, 34#413, #, 34#415, #, 251#417, #, 417#419, #, 419#421, #, 419#423, #, 53#425, #, 425#427, #, 425#429, #, 38#431, #, 431#433, #, 35#435, #, 435#437, #, 35#439, #, 439#441, #, 379#443, #, 35#445, #, 445#447, #, 34#449, #, 35#451, #, 451#453, #, 451#455, #, 34#457, #, 14#459, #, 98#461, #, 313#463, #, 397#465, #, 397#467, #, 98#469, #, 35#471, #, 471#473, #, 34#475, #, 34#477, #, 34#479, #, 34#481, #, 34#483, #, 3#485, #, 3#487, #, 35#489, #, 489#491, #, 35#493, #, 493#495, #, 35#497, #, 497#499, #, 34#501, #, 14#503, #, 34#505, #, 35#507, #, 35#509, #, 509#511, #, 511#513, #, 35#515, #, 515#517, #, 517#519, #, 34#521, #, 483#523, #, 523#525, #, 523#527, #, 527#529, #, 529#531, #, 531#, 531#534, #, #531, 70#535, #, 35#539, #, #, 34#542, #, 542#544, #, 544#546, #, 546#548, #, 548#, 548#551, #, 551#, 551#554, #, #551, 70#555, #, 16#559, #, 544#561, #, 561#563, #, 563#, 563#566, #, 566#, 566#569, #, #1614, 70#570, #, 540#574, #, 574#576, #, 576#578, #, 578#, 35#581, #, 581#540, 495#584, #, 499#586, #, 479#588, #, 35#590, #, 477#592, #, 592#594, #, 34#596, #, 596#598, #, 598#600, #, 600#602, #, 602#, 35#605, #, 605#607, #, 607#609, #, 609#, 607#612, #, #, 35#615, #, 592#617, #, 35#619, #, 35#621, #, 35#623, #, 619#625, #, 625#627, #, 627#629, #, 627#631, #, 629#633, #, 592#635, #, 635#637, #, 631#639, #, 35#641, #, 35#643, #, 35#645, #, 515#647, #, 647#649, #, 649#651, #, 35#653, #, 653#655, #, 655#657, #, 655#659, #, 643#661, #, #, 649#662, #, 649#664, 35#667, #, 667#669, #, 35#671, #, 592#673, #, 673#675, #, 35#677, #, 479#679, #, 679#681, #, 681#683, #, 379#685, #, 379#687, #, 34#689, #, 34#691, #, #, 98#, 251#695, #, 695#697, #, 697#699, #, 697#701, #, 251#703, #, 703#705, #, 705#707, #, 705#709, #, 14#711, #, 34#713, #, 713#715, #, 715#717, #, 717#719, #, 592#721, #, 721#723, #, 35#725, #, 57#727, #, 35#729, #, 727#731, #, 731#733, #, 39#735, #, #, 735#736, #, 735#738, 475#741, #, 431#743, #, 53#745, #, 741#747, #, 747#749, #, 741#751, #, 751#753, #, #, 756#754, #, 741#756, 35#759, #, 34#761, #, 761#763, #, 763#765, #, 765#767, #, 767#769, #, 35#771, #, 741#773, #, 773#775, #, 773#777, #, #, 735#778, 447#781, #, 34#783, #, 55#785, #, 98#787, #, 745#789, #, 789#791, #, 35#793, #, 791#795, #, 35#797, #, 797#799, #, 799#801, #, 799#803, #, 592#805, #, 805#807, #, 727#809, #, 809#811, #, #, 735#812, 34#815, #, 815#817, #, 817#819, #, 819#821, #, #, #, 727#823, 35#826, #, 592#828, #, 828#830, #, 830#832, #, #, 735#833, 477#836, #, 836#838, #, 836#840, #838, 35#842, #, 627#844, #, 844#846, #, 846#848, #, #, 735#849, 765#852, #, #828, 70#853, #, #, 735#856, #809, 70#858, #, #, 735#861, 35#864, #, 864#866, #, 251#868, #, 868#870, #, 870#872, #, 870#874, #, 809#876, #, 876#878, #, 878#880, #, 876#882, #, 882#884, #, #, 735#885, #, 735#887, 34#890, #, #, 735#891, 35#894, #, #, 727#895, 529#898, #, 898#900, #, #, 735#901, 35#904, #, 592#906, #, 906#908, #, 35#910, #, 34#912, #, 35#914, #, 35#916, #, 912#918, #, 918#920, #, 920#922, #, #, 925#923, #, 927#925, #, 35#927, #, 735#929, #, 933#931, #, 935#933, #, 35#935, #, 939#937, #, 941#939, #, 35#941, #, 945#943, #, 947#945, #, 35#947, #, 951#949, #, 953#951, #, 35#953, 592#956, #, 956#958, #, #, 958#961, #, #, 35#964, #, #, #, 727#966, 35#969, #, 34#971, #, 971#973, #, 35#975, #, #, 978#976, #, 592#978, 635#981, #, 981#983, #, 981#985, #, 34#987, #, #, #, 991#989, #, 994#988, 994#991, #, 763#994, #, 735#996, #823, 70#998, #, 35#1002, #, 35#1004, #, #, 735#1005, 35#1008, #, #, 1011#1009, #, 727#1011, #, #, #, 1019#1013, 1019#1014, 1019#1015, #, 895#1019, 449#1022, #, 1022#1024, #, 1024#1026, #, 35#1028, #, #, 592#1029, 35#1032, #, 34#1034, #, #, 735#1035, 35#1038, #, 35#1040, #, 823#1042, #, 1042#1044, #, 1044#822, 823#1047, #, #, #, #, 1053#1049, 1053#1050, #, 1055#1053, #, #, #, #, 1062#1056, 1062#1057, 1062#1058, #, 1064#1062, #, 1067#1055, 1067#1064, #, 1070#1048, 1070#1067, #, 727#1070, 457#1073, #, #, 735#1074, 1073#1077, #, 457#1079, #, #, 1073#1080, 1077#1083, #, 1083#1085, #, 35#1087, #, 14#1089, #, 35#1091, #, 35#1093, #, #, #, #, #, #, #, #, #, #, 1104#1102, #, 1106#1104, #, 1109#1101, 1109#1106, #, 1112#1094, 1112#1109, #, 34#1112, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, 1130#1128, #, 1132#1130, #, 1135#1121, 1135#1132, #, 1138#1114, 1138#1135, #, 34#1138, #, 1142#1140, #, 1144#1142, #, 35#1144, #, 1148#1146, #, 1150#1148, #, 35#1150, 592#1153, #, 1153#1155, #, 35#1157, #, #, #, #, 1164#1158, 1164#1159, 1164#1160, #, #, 1168#1164, 1168#1165, #, 727#1168, 895#1171, #, 1171#1173, #, 1171#1175, #, 34#1177, #, 1177#1179, #, 1179#1181, #, 1181#1183, #, #, 1064#1186, #, 1064#1188, #, #, #, #, 1194#1190, 1194#1191, #, 1196#1194, #, #, 1199#1197, #, #, #, 1204#1200, 1204#1201, #, 1207#1199, 1207#1204, #, 1210#1196, 1210#1207, #, 1213#1189, 1213#1210, #, 727#1213, #, 735#1215, 822#1218, #, 822#1220, #, #, 1223#1221, #, 592#1223, 822#1226, #, 1044#1228, #, #, 735#1229, #, 735#1231, #, 735#1233, #, 735#1235, #, 735#1237, #, 735#1239, 53#1242, #, #, 735#1243, #, 735#1245, 34#1248, #, 1248#1250, #, 1250#1252, #, 1252#1254, #, 1254#, 1254#1257, #, 1254#1259, #, #, 735#1260, 14#1263, #, 1250#1265, #, 1265#1267, #, 1265#1269, #, 34#1271, #, 34#1273, #, #, 735#1274, 1273#1277, #, 1277#1279, #, 1271#1281, #, 1281#1283, #, 592#1285, #, 1285#1287, #, 34#1289, #, #, 735#1290, #, 735#1292, #, 735#1294, 1121#1297, #, 1297#1299, #, 34#1301, #, #, 735#1302, #, 735#1304, 592#1307, #, 1307#1309, #, #, 735#1310, #, 735#1312, 966#1315, #, 1315#1317, #, 1317#965, #, 1321#1319, #, 1315#1321, 1307#1324, #, 1307#1326, #, #, 1329#1327, #, 1315#1329, 98#1332, #, #, 735#1333, #, 735#1335, 98#1338, #, 34#1340, #, 15#1342, #, 15#1344, #, #, 735#1345, #, 592#1347, #, 735#1349, 1271#1352, #, #, 735#1353, 741#1356, #, #, 735#1357, 475#1360, #, #, 735#1361, #, 735#1363, 1022#1366, #, #, 735#1367, 592#1370, #, 1370#1372, #, 592#1374, #, 1374#1376, #, 98#1378, #, 477#1380, #, 890#1382, #, #, 1385#1383, #, 918#1385, 920#1388, #, 1388#1390, #, 1390#, 1388#1393, #, 1393#, 1393#1396, #, #1393, 70#1397, #, 34#1401, #, #, 735#1402, 34#1405, #, 34#1407, #, 1405#1409, #, 1409#1411, #, 1411#1413, #, 35#1415, #, #, 1418#1416, #, 1409#1418, 1407#1421, #, 1421#1423, #, 1423#1425, #, #, 1428#1426, #, 1430#1428, #, 1432#1430, #, 34#1432, #, 1436#1434, #, 1438#1436, #, 1440#1438, #, 34#1440, #, 1444#1442, #, 1446#1444, #, 1448#1446, #, 34#1448, 1446#1451, #, 1451#1453, #, 1401#1455, #, 1455#1457, #, 1457#1459, #, 1459#1461, #, 1461#, 1461#1464, #, #1461, 70#1465, #, #1461, 70#1468, #, #, 1473#1471, #, 592#1473, 1457#1476, #, 34#1478, #, 1478#1480, #, 1480#1482, #, 1482#1484, #, 715#1486, #, 1486#1488, #, 1455#1490, #, 1490#1492, #, 1053#1494, #, #, 735#1495, 34#1498, #, 15#1500, #, #, 1503#1501, #, 1505#1503, #, 1507#1505, #, 34#1507, #, 735#1509, #, 735#1511, #, 735#1513, #, 741#1515, #, 735#1517, #, 735#1519, #, 735#1521, 1285#1524, #, 1285#1526, #, 34#1528, #, 34#1530, #, 14#1532, #, #, 735#1533, 98#1536, #, #, 735#1537, 3#1540, #, 34#1542, #, 1080#1544, #, 1544#1546, #, #, 735#1547, #, 735#1549, 1442#1552, #, 1426#1554, #, #, 735#1555, 15#1558, #, 15#1560, #, #, 735#1561, 34#1564, #, 34#1566, #, 34#1568, #, #, 735#1569, 34#1572, #, 34#1574, #, #, 735#1575, 1179#1578, #, 1578#1580, #, 527#1582, #, 527#1584, #, 1582#1586, #, 1586#, 1586#1589, #, #1596, 70#1590, #, #, 1596#1593, 1596#, #, 1598#1596, #, 527#1598, #1586, 70#1600, #, #, 1606#1603, 1606#, #, 1609#1606, 1609#, #, 561#1609, #, 1614#, 1614#1611, #, 1617#, 1617#1614, #, 561#1617, #566, 70#1619, #, #1606, 70#1622, #, 1121#1626, #, 1626#1628, #, 34#1630, #, 1112#1632, #, 34#1634, #, 1636#, #, 1638#1636, #, 598#1638, 596#1641, #, 415#1643, #, 415#1645, #, 1645#1647, #, 1645#1649, #, 34#1651, #, 34#1653, #, 126#1655, #, 38#1657, #, 1657#1659, #, 1659#1661, #, 53#1663, #, 1663#1665, #, 1665#1667, #, #, #, #, #, #, #, #, #, #, #, #, 1680#1678, #, 1682#1680, #, 53#1682, 38#1685, #, 34#1687, #, 98#1689, #, 592#1691, #, 1691#1693, #, 34#1695, #, 14#1697, #, 34#1699, #, 34#1701, #, 34#1703, #, 34#1705, #, 531#1707, #, 15#1709, #, 34#1711, #, 34#1713, #, 1138#1715, #, 38#1717, #, 1717#1719, #, #1719, 1717#1722, #, 1722#1724, #, 53#1726, #, 1726#1728, #, 1726#1730, #, 1726#1732, #, 1726#1734, #, 1717#1736, #, 1736#1738, #, 1736#1740, #, 1736#1742, #, 34#1744, #, 34#1746, #, 1730#1748, #, 1736#1750, #, 1750#1752, #, 1750#1754, #, 1750#1756, #, 15#1758, #, 15#1760, #, 34#1762, #, 15#1764, #, 14#1766, #, 34#1768, #, 34#1770, #, 98#1772, #, 98#1774, #, 23#1776, #, 3#1778, #, 34#1780, #, 523#1782, #, 1782#1784, #, 1784#1786, #, 1786#, 1786#1789, #, 1786#1791, #, 1791#1793, #, #1791, 70#1794, #, 1786#1798, #, 1798#1800, #, #1798, 70#1801, #, #1786, 70#1804, #, 1786#1808, #, 1786#1810, #, 1808#1812, #, 1810#1814, #, #1810, 70#1815, #, #1808, 70#1818, #, 34#1822, #, 34#1824, #, 
### 内容
#0, 14:
文档\S应用\词典.ftxt
## end
#3, 25:
+[返回目录](,助词)

的::
地::
得::
## end
#12, 31:
+[返回目录](,连词)

和::
或者::
并且::
或::
## end
#23, 29:
+[返回目录](,形容词)

美丽::
天真::
单纯::
## end
#34, 565:
+[设置结构](,动词)
+[修改天使]

记作
替换

结束::
放映::
玩耍::
跑::
吃::

反射::

在:...
是:...
有:...
有的"_场景"替换为"_主体"
+[新建阅读窗口](,是)

距离:...
旋转:...
转换:...
调换:...
朝向:...
背向:...
将条目"朝向"复制为条目"背向"
+[新建阅读窗口](,朝向)

更新:...
显示:...
移动:...
到:...
添加:...
裁剪:...
获取:...
清空:...
保存:...
标记:...
设置:...
标记的"添加"替换为"标记"
+[新建阅读窗口](,清空)

封印:...
召唤:...

解析:...
查看:...
引用:...
修改:...
替换:...
查看的"转换"替换为"查看"

计算:...
分析:...
记作:...
代入:...
提取:...
+[新建阅读窗口](,计算)

加上:...
减去:...
乘以:...
除以:...
整理:...
将条目"除以"复制为条目"整理"
加上的"提取"替换为"加上"
+[新建阅读窗口](,记作)
分析的"计算"替换为"分析"

复制:...
优化:...
+[新建阅读窗口](,复制)

拍摄:...


Nini, 打开句子结构的结构场景(节点)
## end
#35, 446:
+[设置结构](,名词)
+[删除结构](,名词)
Nini, 打开动词(库)

线段:...
圆形:...
长方形:...
+[复制结构](,线段)

立方体:...
圆柱体:...
球体:...
相机:...
三维箭头:...
平面:...
将条目"平面"复制为条目"网格"

网格:...
+[删除结构](,网格)->+[del](,网格)

方向:...

+标记点->+[修改标题]"定义"(,标记点)->+[有](+标记点,标记点)->+[没有](名词,标记点)
标记区域:...
标记点:...
坐标:...
X坐标:...
Y坐标:...
+[新建阅读窗口](,标记区域)

类:...
函数:...
二维函数:...
屏幕:...
标记点:...
采样点:...
程序流程图:...

透镜组:...
光谱:...
可见光:...
红外线:...
波长:...
+[新建阅读窗口](,透镜组)
+[复制结构](,透镜组)

波包:...
场强:...
光栅压缩器:...


## end
#36, 2:
词典
## end
#38, 358:
+[返回目录](,词典)
地址::文档\S应用\词典.ftxt
+[导出结构](,词典)

句子相关::文档\S应用\句子相关.txt
+[打开文件](+新窗口,句子相关)
Nini, 打开句子结构(文件)
Nini, 打开NLP(文件)
Nini, 打开动作(库)
Nini, 打开动词(库)

动词:...
+[设置动词](,动词)
想法:...
+[设置名词](,想法)
+[新建阅读窗口](,动词)

生成词典:...
词典内容:...
英文词典:...
+[更新词典](,词典内容)
+[新建阅读窗口](,词典内容)
+[新建阅读窗口](,英文词典)
将词典内容(节点)记作条目
Nini, 词典的条目是什么?


参考::https://github.com/pwxcoo/chinese-xinhua

## end
#39, 182:
词典:...
创建于 20210207

[]=>词典内容->的(词典内容,动词)=>+[del](,词典内容)
[]=>词典内容->的(词典,词典内容)=>+[显示](,词典内容)
[]=>_re"词$"=>+[有](词典内容,_re)

的(文本,词典)->+[显示星图](,文本)
+[修改标题]"目录"(,文本)->的(文本,词典)

节点数目统计::


## end
#42, 184:
+[返回目录](,词典内容)
+[复制结构](,词典内容)

+[设置结构](,动词)
名词:...
动词:...
形容词:...
数量词:...
副词:...
介词:...
代词:...
连词:...
助词:...
标点:...

词典内容=>的(词典内容,_)=>+[显示](,_)
记住"Python"
print(sp.dict_名词)
print(sp)


## end
#53, 367:
+[返回目录](,词典动词)

Nini, 打开动词(库)
Nini, 打开名词(库)

导入句子分析函数:...
更新词典:...
读取词典:...
保存词典:...
+[新建阅读窗口](,保存词典)
将条目"读取词典"复制为条目"保存词典"

阅读英文:...


生成句子代码:...
生成句子结构:...
+[粘贴](,词典动词)

描述:...
+[新建阅读窗口](,描述)


句子转换:...
段落转换:...
句子描述:...
+[新建阅读窗口](,句子转换)
句子描述的"句子转换"替换为"句子描述"
句子转述:...
句子回答:...
句子回答的"回答"替换为"句子回答"
N函数:...


调用词典动词:...
调用词典名词:...
执行词典动词:...
执行词典动词的"调用词典动词"替换为"执行词典动词"

## end
#55, 636:
"""
+[返回目录](,更新词典)

词典模板:...
保存:...
清空词典:...
整理词典:...

导入词典

"""

+更新词典(,_词典)->+[del](,+更新词典)...
->的(更新词典,词典模板)->的(更新词典,整理词典)->的(更新词典,清空词典)...

->+[P函数](,清空词典)...
->+[临时文本]->[]{
    []=>的(_词典,_词性)=>+[标题]#0(_词性,)...
        =>的(_词性,_词语)=>+[标题]#1(_词语,)...
        ->+[模板文本](词典模板,+[临时文本])...
        ->+[python](Python,)->+[code](+[python],+[临时文本])...
            ->+[.]"[词性]"(+[模板文本],+[标题]#0)...
        ->[]{
            []:->[==](,_词语)...
                ->+[.]"[内容]"(+[模板文本],+[标题]#1),
            ->[is](_词性,标点)...
                ->+[.]"[内容]"(+[模板文本],_词语),
            ->+[.]"[内容]"(+[模板文本],+[标题]#1)
        }
}...
->+[P函数](,整理词典)





## end
#57, 849:
"""
库:...

"""

+计算(,_变量)...
->的(计算,库)...

->[]{
[]:
->[]{
    按照(+计算,_条目)->_条目->+[做](+计算,_变量)->+[code](+[做],_条目)
},

->[]{
    [is](_变量,长度)->长度->的(库,计算长度)->计算长度(,)...
        ->+[做](,长度)->+[code](+[做],计算长度)
},

->[]{
    [is](_变量,波前)->波前->的(库,计算波前)->计算波前(,)...
        ->+[做](,波前)->+[code](+[做],计算波前)
},

->[]{
    [is](_变量,波包)->波包->的(库,计算波包)->计算波包(,)...
        ->+[做](,波包)->+[code](+[做],计算波包)
},

->[]{
    [is](_变量,能谱)->能谱->的(库,计算能谱)->计算能谱(,)...
        ->+[做](+计算,能谱)->+[code](+[做],计算能谱)
},

->[]{
    [is](_变量,像距)->像距->的(库,像距#o)->像距#o(,)...
        ->+[做](+计算,像距)->+[code](+[做],像距#o)
},

->[]{
    [is](_变量,参数)->参数->.(_相机,参数)->的(_相机,类型)->类型"相机"...
        ->的(库,计算相机参数)->计算相机参数(,)...
        ->+[做](+计算,参数)->+[code](+[做],计算相机参数)
},

->[]{
    的(库,_性质)->_性质->[eq](_性质,_变量)...
        ->+[做](+计算,_变量)->+[code](+[做],_性质)
}

}...

->+[del](,+计算)


## end
#61, 550:
"""
+[调用词典动词](+[做],+是)->+[做]

"""


+是(_主体,_对象)...

->[]{
    []:->[词典名词](_对象,)->是(_对象,_名词)->_名词->的(_名词,定义)...
        ->[]{
            []:->.(,_对象)->+[做](_主体,_对象)->+[code](+[做],定义),
                ->+[做](_主体,_对象)->+[code](+[做],定义)
        },
    ->[is](_对象,临时文本)->临时文本->+[修改内容](临时文本,_主体),
    ->[词典名词](_对象,)->+[调用词典名词](_对象,+[定义]),
    ->+[右连](_主体,_对象)
}...

->[]{
    []:->[词典名词](_主体,)->是(_主体,_名词0)->_名词0->的(_名词0,赋值)...
        ->+[做](,_主体)->+[code](+[做],赋值)->+[消息窗口](,赋值),
    ->[词典名词](_主体,)->+[调用词典名词](_主体,+[定义]),
    ->[]
}...

->+[del](,+是)



## end
#63, 15:
文档\S应用\句子相关.txt
## end
#65, 481:
"""
+[返回目录](,描述)
库:...
+[新建阅读窗口](,库)

"""
+描述(_句子,_结构)->+[del](,+描述)...
->的(描述,库)...
->的(库,_模板)->的(_模板,匹配模板)->[模式匹配](匹配模板,_句子)...
->+[临时文本]->[]{
    []:->的(_模板,转述)->+[做](_句子,+[临时文本])->+[code](+[做],转述)...
    ->+匹配模板(+[做],匹配模板)->+[del](,+匹配模板),
    ->的(_模板,输出模板)->+[显示]"开始转述..."->+[转述](_句子,+[临时文本])...
    ->+匹配模板(+[转述],匹配模板)->+[del](,+匹配模板)...
    ->+输出模板(+[转述],输出模板)->+[del](,+输出模板)
}...

->+[复制内容](,+[临时文本])->+[修改内容](+[临时文本],+[显示]):
    ->_结构->+[修改内容](+[临时文本],_结构),
    ->[]





## end
#67, 241:
将库(节点)记作句子库

导入条目:导入词典...
定义词条:定义%[词语][是为]%[词性]...
定义词条2:定义"%[词语]"[是为]%[词性]...
+[复制结构](,定义词条)->+[粘贴](,库)->+[修改标题]"定义词条2"(,定义词条)


显示词条:Nini, 词典中有哪些%[词性]?...
查询词条:Nini, "%[词语]"是什么词性?...
设置词条:Nini, "%[词语]"的解释是什么?...
删除词条:从%[词性]中, 删除"%[词语]"...

## end
#72, 281:


匹配模板::^导入词典$
输出模板::的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_节点)...
    ->+[读取词典]->+[导入句子分析函数](,)...
    ->+[设置动词](,_节点)


输出模板::的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_节点)...
    ->+[更新词典](,_节点)->+[导入句子分析函数](,)...
    ->+[设置动词](,_节点)



## end
#74, 6:
^导入词典$
## end
#76, 121:
的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_节点)...
    ->+[读取词典]->+[导入句子分析函数](,)...
    ->+[设置动词](,_节点)
## end
#78, 363:
Nini, 打开名词(库)

匹配模板::^定义"%[句子]"[是为]%[词性]$
输出模板::的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->的(_词典,%[词性]):
    ->的(%[词性],%[句子]),
    ->+的#0(%[词性],+%[句子])...
        ->+的(词典,+的#0)->+的(词典,+%[句子])...
        ->+[python]"dict_%[词性].update({'%[句子]'})"(Python,)...
    ->+[导出节点](,词典)->+[覆盖](+[导出节点],)->+[list](+[导出节点],词典)...
    ->+[保存词典]





## end
#80, 20:
^定义"%[句子]"[是为]%[词性]$
## end
#82, 310:
的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->的(_词典,%[词性]):
    ->的(%[词性],%[句子]),
    ->+的#0(%[词性],+%[句子])...
        ->+的(词典,+的#0)->+的(词典,+%[句子])...
        ->+[python]"dict_%[词性].update({'%[句子]'})"(Python,)...
    ->+[导出节点](,词典)->+[覆盖](+[导出节点],)->+[list](+[导出节点],词典)...
    ->+[保存词典]
## end
#85, 140:


匹配模板::^Nini, 词典中有哪些%[词性]\?$
输出模板::的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->的(_词典,%[词性])->+[设置结构](,%[词性])




## end
#87, 21:
^Nini, 词典中有哪些%[词性]\?$
## end
#89, 100:
的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->的(_词典,%[词性])->+[设置结构](,%[词性])
## end
#91, 312:
+更新词典(,_词典)->+[del](,+更新词典)...
->的(更新词典,词典模板)...

->+[临时文本]->[]{
	[]=>的(_词典,_词性)=>+[标题](_词性,)...
	->+[增加内容]"
dict_%s={"(+[标题],+[临时文本])...
	->[]{
		[]=>的(_词性,_词语)=>+[标题](_词语,)->+[增加内容]"'%s',"(+[标题],+[临时文本])
	}->+[增加内容]"}"(,+[临时文本])
}->+[修改内容](+[临时文本],+[显示])->+[显示]->+[python](Python,)->+[code](+[python],+[临时文本])

## end
#93, 74:
try:
    dict_%[词性].update({'%[内容]'})
except:
    dict_%[词性]={'%[内容]'}




## end
#96, 143:
"""
P代码:...
将P代码(节点)记作parser函数
+[新建阅读窗口](,P代码)
+[P函数](,P代码)
+[修改天使]

"""

+导入句子分析函数->+[del](,+导入句子分析函数)...
->的(导入句子分析函数,P代码)...

->+[P函数](,P代码)
## end
#98, 29098:
"""
def fun_前缀
+[P函数](,P代码)
+[P函数](,tools_parser_sentence)
地址::tools\tools_parser_sentence.py
+[保存文本](,tools_parser_sentence)
print(sent2Struct('有什么'))
print(fun_句子('A有什么'))
print(dict_动词)

定义挑衅为动词
定义正义为形容词

测试:...
+[新建阅读窗口](,测试)
print(dict_动词)

dict_名词={'兔子','蛇'}
dict_动词={'吃'}
def fun_主语

保存:

"""


import sys,re
if __name__=='__main__':
    sys.path.append(sys.path[0]+'\\..')

try:
    del str
except:
    pass


from body.bone import NetP
from body.soul import Karma
from tools import tools_basic

word_order=0

def fun_助词(code):
    n=word_in_dict(code,dict_助词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("助词").con(0,pt)
        return code[n:],pt0
    return code,None




def fun_连词(code):
    n=word_in_dict(code,dict_连词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("连词").con(0,pt)
        return code[n:],pt0
    return code,None


def fun_介词(code):
    n=word_in_dict(code,dict_介词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("介词").con(0,pt)
        return code[n:],pt0
    return code,None

"""
result=re.match('\d+','1234')
print(result.group(),result.span()[1])
+[P函数](,P代码)

"""
import re

def fun_数量词(code):
    n_type=0
    if len(code)>0 and code[0]=='第':
        n_type=1
        code=code[1:]

    result=re.match('\d+|几',code)
    if result==None:
        return code,None

    数目=NetP(result.group())
    code=code[result.span()[1]:]

    n=word_in_dict(code,dict_数量词)
    if n!=0:
        pt=NetP(code[0:n]).con(数目,0)
        pt0=NetP("数量词").con(0,数目)
        NetP("的").con(pt0,pt)
        if n_type==1:
            pt1=NetP('第').con(数目,0)
            NetP("的").con(pt0,pt1)

        return code[n:],pt0
    return code,None



def fun_副词(code):
    n=word_in_dict(code,dict_副词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("副词").con(0,pt)
        return code[n:],pt0
    return code,None



def fun_代词(code):
    n=word_in_dict(code,dict_代词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("代词").con(0,pt)
        return code[n:],pt0
    return code,None



def fun_形容词(code):
    n=word_in_dict(code,dict_形容词)
    if n!=0:
        print(code[0:n])
        pt=NetP(code[0:n])
        pt0=NetP("形容词").con(0,pt)
        return code[n:],pt0
    return code,None


"""
fun_名词存档1:...
fun_名词存档2:...
+[P函数](,P代码)

def word_in_dict
print(word_in_dict(',',dict_标点))
print(',' in dict_标点)
记住"Python"
print('标记点' in dict_名词)

"""

def fun_名词(code):
    if len(code)==0:
        return '',None
    global word_order

    # name
    name=''
    type_char=''
    for i in range(len(code)):
        n=word_in_dict(code[i:],dict_动词)+word_in_dict(code[i:],dict_助词)+word_in_dict(code[i:],dict_连词)+word_in_dict(code[i:],dict_介词)+word_in_dict(code[i:],dict_副词)+word_in_dict(code[i:],dict_标点)
        if n!=0:
            if i!=0:
                name=code[0:i]
                break
            else:
                n=word_in_dict(code,dict_名词)
                if n!=0:
                    i=n
                    name=code[0:i]
                    break
                else:
                    return code,None
        if code[i]=='"' or code[i]=='\'' or code[i]=='(' or code[i]=='（' or code[i]=='“':
            if i==0:
                name="临时文本"
            else:
                name=code[0:i]
            type_char=code[i]
            break
    if name=='':
        name=code
    code=code[i:]

    # text
    text=''
    if type_char=='(':
        pat1=r'\([^)]+\)'
    elif type_char=='（':
        pat1=r'（[^）]+）'
    elif type_char=='“':
        pat1=r'“[^”]+”'
    elif type_char=='\'':
        pat1=r"'[^']+'"
    else:
        pat1=r'"[^"]+"'

    result=re.match(pat1,code)
    if result!=None:
        if type_char=='\'' and name=='临时文本':
            name=result.group()[1:-1]
        else:
            text=result.group()[1:-1]
        n=result.span()[1]
        code=code[n:]

    pt=NetP(name,text)
    pt0=NetP("名词").con(0,pt)
    NetP("的").con(pt0,NetP("序号",str(word_order)))
    word_order+=1
    return code,pt0


"""
+[P函数](,P代码)
fun_动词存档2:...
fun_介宾短语
fun_并列短语

"""

def fun_dict(code,dict_words,type_word):
    n=word_in_dict(code,dict_words)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP(type_word).con(0,pt)
        return code[n:],pt0
    return code,None

"""
+[P函数](,P代码)
保存word_in_dict:...
[print(i) for i in range(1,10)]
print(min(1,2,4))
fun_复句

"""

def word_in_dict(code,words):
    n=min(20,len(code))
    for i in range(n):
        if code[0:n-i] in words:
            return n-i
    return 0

def fun_动词(code):
    n=word_in_dict(code,dict_动词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("动词").con(0,pt)
        return code[n:],pt0
    return code,None


"""
def fun_状语
def fun_副词
+[P函数](,P代码)

"""

def fun_谓语(code):
    if code=="":
        return code,None
    code_save=code

    sent_type=0

    code,状语=fun_状语(code)
    if len(code)>0 and code[0]=='被':
        code,动词=fun_动词(code[1:])
        sent_type=1
    else:
        code,动词=fun_动词(code)

    if 动词==None:
        状语=None
        code,动词=fun_动词(code_save)
    if 动词==None:
        return code,None

    code,副词=fun_副词(code)
    code,助词=fun_助词(code)

    谓语=NetP("谓语")
    谓语.m_db[1]=动词.m_db[1]
    NetP('的').con(谓语,动词)
    if sent_type==1:
        被=NetP('被').con(None,动词)
        NetP('的').con(谓语,被)

    if 状语!=None:
        NetP('的').con(谓语,状语)
        状语.m_db[1].con(动词.m_db[1],0)

    if 副词!=None:
        NetP('的').con(谓语,副词)
        副词.m_db[1].con(动词.m_db[1],0)
    if 助词!=None:
        NetP('的').con(谓语,助词)
        助词.m_db[1].con(动词.m_db[1],0)
    
    return code,谓语

"""
+[P函数](,P代码)
fun_述宾短语

定义什么为名词
定义什么样为形容词
Nini, 词典中有哪些介词?
Nini, 词典中有哪些副词?
定义右为副词
定义从为介词
定义捕捉为动词
def fun_宾语

保存fun_主语:...

"""

def fun_主语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,定语=fun_定语(code)
    if 定语!=None:
        code,名词=fun_名词(code)
        code_del,动词=fun_谓语(code)
        if 名词!=None and 动词!=None:
            主语=NetP("主语")
            主语.m_db[1]=名词.m_db[1]
            
            # Karma(主语.m_db[1])
            if 定语.m_db[1].m_name in dict_动词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            elif 定语.m_db[1].m_name in dict_副词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            else:
                定语.m_db[1].con(名词.m_db[1],0)
            
            NetP('的').con(主语,定语)
            NetP('的').con(主语,名词)
            return code,主语
    code=code_save
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        主语=NetP("主语")
        主语.m_db[1]=并列短语.m_db[1]
        
        # Karma(主语.m_db[1])
        NetP('的').con(主语,并列短语)
        return code,主语
    code=code_save

    code,名词=fun_名词(code)
    if 名词!=None:
        主语=NetP("主语")
        主语.m_db[1]=名词.m_db[1]
        
        # Karma(主语.m_db[1])
        NetP('的').con(主语,名词)
        return code,主语
    code=code_save

    return code,None

"""
+[P函数](,P代码)
fun_谓语
Nini, 打开词典的条目(节点)
记住"Python"
print(sent_pat('因为, ..., 所以...','因为, %[句子], 所以, %[句子]'))

"""

def sent_pat(code,pat0):
    pat=re.sub('%\[句子[^\[^\]]*\]',r'(.+)',pat0)
    result=re.match(pat,code)
    if result==None:
        return False
    else:
        return True

def fun_复句(code):
    if code=="":
        return code,None
    code_save=code

    if sent_pat(code,"因为%[句子], 所以%[句子]"):
        code,复句=fun_因果复句(code)
        return code,复句
    elif sent_pat(code,"当%[句子], %[句子]"):
        code,复句=fun_状语复句(code)
        return code,复句
    elif sent_pat(code,"%[句子], 然后, %[句子]"):
        code,复句=fun_然后复句(code)
        return code,复句
    return code,None

"""
+[P函数](,P代码)
def fun_名词

"""

def fun_因果复句(code):
    if code=="":
        return code,None
    code_save=code

    if code[0:2]=='因为':
        code,句子1=fun_句子(code[2:])
    else:
        return code_save,None

    if code[0:4]==', 所以':
        code,句子2=fun_句子(code[4:])
    else:
        return code_save,None

    if 句子1==None or 句子2==None:
        return code_save,None

    因果句=NetP('因果复句')
    因为=NetP('因为').con(因果句,句子1)
    所以=NetP('所以').con(因果句,句子2)
    NetP('的').con(因果句,句子1)
    NetP('的').con(因果句,句子2)

    return code,因果句


def fun_状语复句(code):
    if code=="":
        return code,None
    code_save=code

    if code[0]=='当':
        code,句子1=fun_句子(code[1:])
    else:
        return code_save,None

    if code[0:2]==', ':
        code,句子2=fun_句子(code[2:])
    else:
        return code_save,None

    if 句子1==None or 句子2==None:
        return code_save,None

    复句=NetP('状语复句')
    条件=NetP('条件').con(复句,句子1)
    结果=NetP('结果').con(复句,句子2)
    NetP('的').con(复句,句子1)
    NetP('的').con(复句,句子2)

    return code,复句

"""
def fun_单句
+[P函数](,P代码)

"""


def fun_然后复句(code):
    if code=="":
        return code,None
    code_save=code

    code,句子1=fun_单句(code)

    if code[0:6]==', 然后, ':
        code,句子2=fun_单句(code[6:])
    else:
        return code_save,None

    if 句子1==None or 句子2==None:
        return code_save,None

    复句=NetP('然后复句')
    之前=NetP('之前').con(复句,句子1)
    之后=NetP('之后').con(复句,句子2)
    NetP('的').con(复句,句子1)
    NetP('的').con(复句,句子2)

    return code,复句

"""
+[P函数](,P代码)
def fun_普通句
sent_pat

"""

def fun_句子(code):
    if code=="":
        return code,None
    code_save=code
    global word_order
    word_order=0

    code,句子=fun_复句(code)
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_被动句(code)
    except:
        code=code_save
        句子=None
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_把字句(code)
    except:
        code=code_save
        句子=None
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_普通句(code)
    except:
        code=code_save
        句子=None
    return code,句子


def fun_单句(code):
    if code=="":
        return code,None
    code_save=code
    global word_order
    word_order=0

    try:
        code,句子=fun_被动句(code)
    except:
        code=code_save
        句子=None
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_把字句(code)
    except:
        code=code_save
        句子=None
    if 句子!=None:
        return code,句子

    try:
        code,句子=fun_普通句(code)
    except:
        code=code_save
        句子=None
    return code,句子

"""
del str
def fun_介宾短语
保存fun_普通句:...
+[P函数](,P代码)
print(fun_普通句('A有什么'))
str

"""

def fun_普通句(code):
    if code=="":
        return code,None
    code_save=code

    code,前缀=fun_前缀(code)

    code1,主语=fun_主语(code)
    code1,谓语=fun_谓语(code1)
    if 谓语!=None:
        code=code1
    else:
        主语=None
        code,谓语=fun_谓语(code)

    code,宾语=fun_宾语(code)

    if 谓语==None:
        return code,None

    
    句子=NetP("句子")
    句子.m_db[1]=谓语.m_db[1]
    NetP('的').con(句子,谓语)
    

    if 前缀!=None:
        for pt in 前缀.m_list:
            pt.con(谓语.m_db[1],0)
        NetP('的').con(句子,前缀)
        NetP('的').con(谓语,前缀)

    if 主语!=None:
        谓语.m_db[1].con(主语.m_db[1],0)
        NetP('的').con(句子,主语)
        
    if 宾语!=None:
        谓语.m_db[1].con(0,宾语.m_db[1])
        NetP('的').con(句子,宾语)
        

    code1,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,副词)
        NetP('的').con(谓语,副词)
        return code1,句子

    code1,补语=fun_补语(code)
    if 补语!=None:
        补语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,补语)
        NetP('的').con(谓语,补语)
        return code1,句子


    return code,句子


"""
+[P函数](,P代码)
def fun_补语

"""

def fun_被动句(code):
    if code=="":
        return code,None
    code_save=code

    code1,状语=fun_介宾短语(code)
    if 状语!=None:
        if code1[0:2]==', ':
            code=code1[2:]
        else:
            状语=None

    code,宾语=fun_宾语(code)
    code,状语2=fun_状语(code)
    if code[0]!='被':
        return code_save,None
    else:
        code=code[1:]
    code,主语=fun_主语(code)
    code,谓语=fun_谓语(code)

    if 谓语==None:
        return code,None
    
    句子=NetP("句子")
    句子.m_db[1]=谓语.m_db[1]
    NetP('的').con(句子,谓语)
    NetP('被').con(谓语,谓语.m_db[1])

    if 状语!=None:
        状语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,状语)
        NetP('的').con(谓语,状语)
        # 状语.m_name='状语'

    if 状语2!=None:
        状语2.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,状语2)
        NetP('的').con(谓语,状语2)
        状语2.m_name='状语'

    if 主语!=None:
        谓语.m_db[1].con(主语.m_db[1],0)
        NetP('的').con(句子,主语)
        
    if 宾语!=None:
        谓语.m_db[1].con(0,宾语.m_db[1])
        NetP('的').con(句子,宾语)


    code1,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,副词)
        NetP('的').con(谓语,副词)
        return code1,句子

    code1,补语=fun_补语(code)
    if 补语!=None:
        补语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,补语)
        NetP('的').con(谓语,补语)
        return code1,句子
        

    return code,句子

"""
被

"""

def fun_把字句(code):
    if code=="":
        return code,None
    code_save=code

    code1,状语=fun_介宾短语(code)
    if 状语!=None:
        if code1[0:2]==', ':
            code=code1[2:]
        else:
            状语=None

    code,主语=fun_主语(code)
    code,状语2=fun_状语(code)
    if code[0]!='把' and code[0]!='将':
        return code_save,None
    else:
        code=code[1:]
    code,宾语=fun_宾语(code)
    code,谓语=fun_谓语(code)

    if 谓语==None:
        return code,None
    
    句子=NetP("句子")
    句子.m_db[1]=谓语.m_db[1]
    NetP('的').con(句子,谓语)
    NetP('把').con(谓语,谓语.m_db[1])

    if 状语!=None:
        状语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,状语)
        NetP('的').con(谓语,状语)
        # 状语.m_name='状语'

    if 状语2!=None:
        状语2.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,状语2)
        NetP('的').con(谓语,状语2)
        状语2.m_name='状语'

    if 主语!=None:
        谓语.m_db[1].con(主语.m_db[1],0)
        NetP('的').con(句子,主语)
        
    if 宾语!=None:
        谓语.m_db[1].con(0,宾语.m_db[1])
        NetP('的').con(句子,宾语)


    code1,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,副词)
        NetP('的').con(谓语,副词)
        return code1,句子

    code1,补语=fun_补语(code)
    if 补语!=None:
        补语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,补语)
        NetP('的').con(谓语,补语)
        return code1,句子
        

    return code,句子

"""
存档_fun_宾语:...
(这里的代码有问题, 没办法分析"显示A的B"这样的句子)
+[P函数](,P代码)

"""

def fun_宾语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,定语=fun_定语(code)
    if 定语!=None:
        code,名词=fun_名词(code)
        if 名词!=None:
            宾语=NetP("宾语")
            宾语.m_db[1]=名词.m_db[1]
            
            # Karma(宾语.m_db[1])
            if 定语.m_db[1].m_name in dict_动词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            elif 定语.m_db[1].m_name in dict_副词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            else:
                定语.m_db[1].con(名词.m_db[1],0)
                #宾语.m_db[1].m_master.addKarma(定语.m_db[1].m_master,"从句")
            NetP('的').con(宾语,定语)
            NetP('的').con(宾语,名词)
            return code,宾语
    code=code_save
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        宾语=NetP("宾语")
        宾语.m_db[1]=并列短语.m_db[1]
        
        NetP('的').con(宾语,并列短语)
        return code,宾语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        宾语=NetP("宾语")
        宾语.m_db[1]=名词.m_db[1]
        
        # Karma(宾语.m_db[1])
        NetP('的').con(宾语,名词)
        return code,宾语
    code=code_save
    
    return code,None

"""
+[P函数](,P代码)
def fun_主语

"""


def fun_定语(code):
    if code=="":
        return code,None
    code_save=code
    code,短语=fun_短语(code)
    if 短语!=None:
        # code,助词=fun_助词(code)
        print(短语,code)
        code,助词=fun_dict(code,{'的'},'助词')
        if 助词!=None:
            定语=NetP("定语")
            定语.m_db[1]=短语.m_db[1]
            
            NetP('的').con(定语,短语)
            NetP('的').con(定语,助词)
            return code,定语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        定语=NetP("定语")
        定语.m_db[1]=形容词.m_db[1]
        NetP('的').con(定语,形容词)

        code,助词=fun_dict(code,{'的'},'助词')
        if 助词!=None:
            NetP('的').con(定语,助词)

        return code,定语
    code=code_save
    
    code,数量词=fun_数量词(code)
    if 数量词!=None:
        定语=NetP("定语")
        定语.m_db[1]=数量词.m_db[1]
        Karma(定语.m_db[1])
        NetP('的').con(定语,数量词)
        return code,定语

    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        code,助词=fun_dict(code,{'的'},'助词')
        if 助词!=None:
            定语=NetP("定语")
            定语.m_db[1]=名词.m_db[1]
            
            Karma(定语.m_db[1])
            
            NetP('的').con(定语,名词)
            NetP('的').con(定语,助词)
            return code,定语
    code=code_save
    
    return code,None


"""
保存fun_状语:...
(状语:(副词| 形容词| 代词| [介宾短语]) [副词组]?)
+[P函数](,P代码)
print("")

"""


def fun_状语(code):
    if code=="":
        return code,None
    code_save=code
    
    状语=NetP("状语")

    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        状语.m_db[1]=介宾短语.m_db[1]
        NetP('的').con(状语,介宾短语)
    else:
        code=code_save
        code,副词=fun_副词(code)
        if 副词!=None:
            状语.m_db[1]=副词.m_db[1]
            NetP('的').con(状语,副词)
        else:
            return code_save,None

    code_save=code
    code,副词组=fun_副词组(code)
    if 副词组!=None:
        状语.m_db[1].con(0,副词组.m_db[1])
        NetP('的').con(状语,副词组)
    else:
        code=code_save
    
    return code,状语


def fun_副词组(code):
    if code=="":
        return code,None
    code_save=code
    
    状语=NetP("状语")

    code,副词=fun_副词(code)
    if 副词!=None:
        状语.m_db[1]=副词.m_db[1]
        NetP('的').con(状语,副词)
    else:
        return code_save,None

    code_save=code
    code,副词组=fun_副词组(code)
    if 副词组!=None:
        状语.m_db[1].con(0,副词组.m_db[1])
        NetP('的').con(状语,副词组)
    else:
        code=code_save
    
    return code,状语



"""
+[P函数](,P代码)

"""


def fun_补语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        补语=NetP("补语")
        补语.m_db[1]=并列短语.m_db[1]
        NetP('的').con(补语,并列短语)
        return code,补语
    code=code_save
    
    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        补语=NetP("补语")
        补语.m_db[1]=介宾短语.m_db[1]
        NetP('的').con(补语,介宾短语)
        return code,补语
    code=code_save
    
    code,述宾短语=fun_述宾短语(code)
    if 述宾短语!=None:
        补语=NetP("补语")
        补语.m_db[1]=述宾短语.m_db[1]
        NetP('的').con(补语,述宾短语)
        return code,补语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        补语=NetP("补语")
        补语.m_db[1]=形容词.m_db[1]
        NetP('的').con(补语,形容词)
        return code,补语
    code=code_save
    
    code,数量词=fun_数量词(code)
    if 数量词!=None:
        补语=NetP("补语")
        补语.m_db[1]=数量词.m_db[1]
        NetP('的').con(补语,数量词)
        return code,补语
    code=code_save
    
    code,代词=fun_代词(code)
    if 代词!=None:
        补语=NetP("补语")
        补语.m_db[1]=代词.m_db[1]
        NetP('的').con(补语,代词)
        return code,补语
    code=code_save
    
    return code,None


"""
fun_定语
测试fun_短语(P函数):...
+[新建阅读窗口](,测试fun_短语)
+[P函数](,P代码)

"""

def fun_短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        print('并列短语',code)
        return code,并列短语
    code=code_save
    
    code,偏正短语=fun_偏正短语(code)
    if 偏正短语!=None:
        print('偏正短语',code)
        return code,偏正短语
    code=code_save
    
    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        print('介宾短语',code)
        return code,介宾短语
    code=code_save
    
    #code,述宾短语=fun_述宾短语(code)
    #if 述宾短语!=None:
    #    return code,述宾短语
    #code=code_save
    
    code,述补短语=fun_述补短语(code)
    if 述补短语!=None:
        print('述补短语',code)
        return code,述补短语
    code=code_save
    
    code,主谓短语=fun_主谓短语(code)
    if 主谓短语!=None:
        print('主谓短语',code)
        return code,主谓短语
    code=code_save
    
    return code,None

"""
保存fun_并列短语:...
+[P函数](,P代码)
fun_主语
dict

"""

def fun_并列短语(code,并列短语_0=None):
    if code=="":
        return code,None
    code_save=code
    
    code,名词=fun_名词(code)

    if 并列短语_0==None:
        并列短语_0=NetP("并列短语")

    if 名词!=None:
        # code,连词=fun_连词(code)
        code,连词=fun_dict(code,{', ','和'},'连词')
        if 连词!=None:
            if 连词.m_db[1].m_name==', ':
                连词.m_db[1].m_name='和'
            code,并列短语=fun_并列短语(code,并列短语_0)
            if 并列短语!=None:
                连词.m_db[1].con(名词.m_db[1],并列短语_0.m_db[1])
                并列短语_0.m_db[1]=名词.m_db[1]
                
                NetP('的').con(并列短语_0,名词)
                NetP('的').con(并列短语_0,连词)
                return code,并列短语_0

            code,名词_1=fun_名词(code)
            if 名词_1!=None:
                连词.m_db[1].con(名词.m_db[1],名词_1.m_db[1])
                并列短语_0.m_db[1]=名词.m_db[1]
                
                NetP('的').con(并列短语_0,名词_1)
                NetP('的').con(并列短语_0,名词)
                NetP('的').con(并列短语_0,连词)
                return code,并列短语_0
    code=code_save
    
    return code,None



def fun_偏正短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,名词_0=fun_名词(code)
    if 名词_0!=None:
        
        code,名词_1=fun_名词(code)
        if 名词_1!=None:
                
            
            偏正短语=NetP("偏正短语")
            偏正短语.m_db[1]=名词_1.m_db[1]
            print(名词_0,名词_1)
            pt_de=NetP('的').con(名词_0.m_db[1],名词_1.m_db[1])
            Karma(名词_0.m_db[1])
            Karma(名词_1.m_db[1])
            Karma(pt_de)
            #名词_0.m_db[1].m_master.addKarma(pt_de.m_master)
            #pt_de.m_master.addKarma(名词_1.m_db[1].m_master)
            
            NetP('的').con(偏正短语,名词_0)
            NetP('的').con(偏正短语,pt_de)
            NetP('的').con(偏正短语,名词_1)
            return code,偏正短语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,动词=fun_动词(code)
        if 动词!=None:
                
            
            偏正短语=NetP("偏正短语")
            偏正短语.m_db[1]=动词.m_db[1]
            形容词.m_db[1].con(动词.m_db[1],0)
            
            Karma(动词.m_db[1])
            Karma(形容词.m_db[1])
            #动词.m_db[1].m_master.addKarma(形容词.m_db[1].m_master)
            
            NetP('的').con(偏正短语,形容词)
            NetP('的').con(偏正短语,动词)
            return code,偏正短语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,名词=fun_名词(code)
        if 名词!=None:
                
            
            偏正短语=NetP("偏正短语")
            偏正短语.m_db[1]=名词.m_db[1]
            形容词.m_db[1].con(名词.m_db[1],0)
            
            Karma(形容词.m_db[1])
            Karma(名词.m_db[1])
            #名词.m_db[1].m_master.addKarma(形容词.m_db[1].m_master)
            
            NetP('的').con(偏正短语,形容词)
            NetP('的').con(偏正短语,名词)
            return code,偏正短语
    code=code_save
    
    return code,None

"""
宾语
+[P函数](,P代码)

"""

def fun_述宾短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,动词=fun_动词(code)
    if 动词!=None:
        code,名词=fun_名词(code)
        if 名词!=None:
            述宾短语=NetP("述宾短语")
            述宾短语.m_db[1]=动词.m_db[1]
            动词.m_db[1].con(0,名词.m_db[1])
            
            Karma(动词.m_db[1])
            Karma(名词.m_db[1])
            #动词.m_db[1].m_master.addKarma(名词.m_db[1].m_master)
            
            NetP('的').con(述宾短语,动词)
            NetP('的').con(述宾短语,名词)
            return code,述宾短语
    code=code_save
    
    return code,None



def fun_述补短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,动词=fun_动词(code)
    if 动词!=None:
        
        code,形容词=fun_形容词(code)
        if 形容词!=None:
                
            
            述补短语=NetP("述补短语")
            述补短语.m_db[1]=动词.m_db[1]
            形容词.m_db[1].con(动词.m_db[1],0)
            
            Karma(动词.m_db[1])
            Karma(形容词.m_db[1])
            #动词.m_db[1].m_master.addKarma(形容词.m_db[1].m_master)
            
            NetP('的').con(述补短语,动词)
            NetP('的').con(述补短语,形容词)
            return code,述补短语
    code=code_save
    
    return code,None

"""
+[P函数](,P代码)
fun_定语

"""

def fun_主谓短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,名词=fun_名词(code)
    if 名词==None:
        return code_save, None

    主谓短语=NetP("主谓短语")
    NetP('的').con(主谓短语,名词)
    Karma(名词.m_db[1])

    code,动词=fun_动词(code)
    if 动词!=None:
        动词.m_db[1].con(名词.m_db[1],0)
        主谓短语.m_db[1]=动词.m_db[1]
        Karma(动词.m_db[1])
        NetP('的').con(主谓短语,动词)
    else:
        code,副词=fun_副词(code)
        if 副词!=None:
            副词.m_db[1].con(名词.m_db[1],0)
            主谓短语.m_db[1]=副词.m_db[1]
            Karma(副词.m_db[1])
            NetP('的').con(主谓短语,副词)
        else:
            return code_save,None


    return code,主谓短语

"""
def fun_前缀
介宾短语_存档:...
(介宾短语:[介词] [名词] [副词]?)
介宾短语_存档2:...
(介宾短语:[介词] [宾语] [副词]?. 问题在于可能会把 在标记点 识别成 在 + 述补短语 )

"""


def fun_介宾短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,介词=fun_介词(code)
    code,宾语=fun_并列短语(code)
    介宾短语=NetP("介宾短语")
    if 宾语!=None and 介词!=None:
        介宾短语.m_db[1]=介词.m_db[1]
        介词.m_db[1].con(0,宾语.m_db[1])
        
        NetP('的').con(介宾短语,宾语)
        NetP('的').con(介宾短语,介词)
    else:
        code=code_save

        code,介词=fun_介词(code)
        code,宾语=fun_名词(code)
        介宾短语=NetP("介宾短语")
        if 宾语!=None and 介词!=None:
            介宾短语.m_db[1]=介词.m_db[1]
            介词.m_db[1].con(0,宾语.m_db[1])
            
            NetP('的').con(介宾短语,宾语)
            NetP('的').con(介宾短语,介词)
        else:
            code=code_save
            return code,None

    code,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(介词.m_db[1],0)
        NetP('的').con(介宾短语,副词)

    return code,介宾短语


"""
+[P函数](,P代码)
def fun_述宾短语
前缀存档:...
(   前缀: [介词] ([名词] ([副词]| [述宾短语])| [并列短语])   )


"""

def fun_前缀(code,pt_前缀=None):
    if code=="":
        return code,None
    code_save=code
    
    if pt_前缀==None:
        pt_前缀=NetP("前缀")
        pt_前缀.m_list=[]

    code,介词=fun_介词(code)
    code,宾语=fun_主语(code)
    介宾短语=NetP("介宾短语")
    if 宾语!=None and 介词!=None:
        宾语.m_name="短语"
        介宾短语.m_db[1]=介词.m_db[1]
        介词.m_db[1].con(0,宾语.m_db[1])
        pt_前缀.m_list.append(介词.m_db[1])
        
        NetP('的').con(介宾短语,宾语)
        NetP('的').con(介宾短语,介词)
        NetP('的').con(pt_前缀,介宾短语)
    else:
        code=code_save
        return code,None

    code,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(介词.m_db[1],0)
        NetP('的').con(介宾短语,副词)
    else:
        code,述宾短语=fun_述宾短语(code)
        if 述宾短语!=None:
            述宾短语.m_db[1].con(宾语.m_db[1],0)
            NetP('的').con(介宾短语,述宾短语)

    if len(code)>1 and code[0:2]==', ':
        code=code[2:]
    else:
        code=code_save
        return fun_前缀2(code,pt_前缀)

    code,前缀=fun_前缀(code,pt_前缀)

    return code,pt_前缀



def fun_前缀2(code,pt_前缀=None):
    if code=="":
        return code,None
    code_save=code
    
    if pt_前缀==None:
        pt_前缀=NetP("前缀")
        pt_前缀.m_list=[]

    code,介词=fun_介词(code)
    code,宾语=fun_并列短语(code)
    介宾短语=NetP("介宾短语")
    if 宾语!=None and 介词!=None:
        介宾短语.m_db[1]=介词.m_db[1]
        介词.m_db[1].con(0,宾语.m_db[1])
        pt_前缀.m_list.append(介词.m_db[1])
        
        NetP('的').con(介宾短语,宾语)
        NetP('的').con(介宾短语,介词)
        NetP('的').con(pt_前缀,介宾短语)
    else:
        code=code_save
        return code,None

    code,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(介词.m_db[1],0)
        NetP('的').con(介宾短语,副词)
    else:
        code,述宾短语=fun_述宾短语(code)
        if 述宾短语!=None:
            述宾短语.m_db[1].con(宾语.m_db[1],0)
            NetP('的').con(介宾短语,述宾短语)

    if len(code)>1 and code[0:2]==', ':
        code=code[2:]
    else:
        return code_save,None

    code,前缀=fun_前缀(code,pt_前缀)

    return code,pt_前缀




"""
+[P函数](,P代码)
从助词中, 删除得
Nini, 词典中有哪些助词?
定义准备为动词
定义"所有"为形容词

"""


def collectPts(pt,list_pt=None):
    if list_pt==None:
        list_pt=[]
    if pt not in list_pt:
        list_pt.append(pt)
    for con in pt.m_con:
        if con.m_db[0]==pt:
            if con not in list_pt:
                list_pt.append(con)
            if con.m_name=="的" and con.m_db[1]!=None:
                collectPts(con.m_db[1],list_pt)
    if pt.m_db[0]!=None:
        if pt.m_db[0] not in list_pt:
            list_pt.append(pt.m_db[0])
    if pt.m_db[1]!=None:
        if pt.m_db[1] not in list_pt:
            list_pt.append(pt.m_db[1])
    return list_pt

def sentStruct(pt):
    pt0=NetP('^起点').con(0,pt)
    list_pt=[pt0]
    list_pt+=collectPts(pt)
    return tools_basic.writeStdCode([],list_pt)

def sent2Struct(sent):
    code,pt=fun_句子(sent)
    if pt==None:
        return '', ''
    else:
        return sentStruct(pt),code


"""
print(fun_句子("有什么"))

"""
## end
#101, 3:
955
## end
#102, 3:
476
## end
#103, 2:
38
## end
#104, 1:
1
## end
#105, 7:
207,207
## end
#107, 3:
955
## end
#108, 3:
476
## end
#109, 2:
38
## end
#110, 1:
1
## end
#111, 3:
0,0
## end
#113, 409:
"""
+[返回目录](,生成句子结构)
结构转换代码:...
+[新建阅读窗口](,结构转换代码)
+[修改标题]"生成句子结构"(,显示句子结构)

Nini, 打开公式分析器(文件)

P代码:...
保存:...

结构:...

"""

+生成句子结构(_句子,_结构)->+[修改内容](+生成句子结构,+[临时文本])...
->+[del](,+生成句子结构)...
->的(生成句子结构,P代码)...

->+[导入句子分析函数](,)...
->+[python](Python,+[导入节点])...
->+[导入节点](,_结构)->+[code](+[python],P代码):
    ->_句子->+[.]"sent"(+[python],_句子)->+[o]"code"(+[python],_句子),
    ->+[.]"sent"(+[python],+[临时文本])




## end
#114, 170:
"""
+[P函数](,测试)

"""

import imp
from tools import tools_parser_sentence as sp
from tools import tools_basic

imp.reload(sp)
sent='蛇吃兔子'
ans=sent2Struct(sent)
print(ans)

## end
#116, 96:
"""
测试:...
+[P函数](,测试)
print(sent)
print(sent2Struct('有什么'))

"""

ans,code=sent2Struct(sent)



## end
#117, 975:
"""
+[返回目录](,测试结构)
+[P函数](,结构转换代码)

记住"Python"
print(sp)

"""
import imp
from tools import tools_parser_sentence as sp
from tools import tools_basic

def collectPts(pt,list_pt=None):
    if list_pt==None:
        list_pt=[]
    if pt not in list_pt:
        list_pt.append(pt)
    for con in pt.m_con:
        if con.m_db[0]==pt:
            if con not in list_pt:
                list_pt.append(con)
            if con.m_name=="的" and con.m_db[1]!=None:
                collectPts(con.m_db[1],list_pt)
    if pt.m_db[0]!=None:
        if pt.m_db[0] not in list_pt:
            list_pt.append(pt.m_db[0])
    if pt.m_db[1]!=None:
        if pt.m_db[1] not in list_pt:
            list_pt.append(pt.m_db[1])
    return list_pt

def sentStruct(pt):
    list_pt=collectPts(pt)
    return tools_basic.writeStdCode([],list_pt)

def sent2Struct(sent):
    code,pt=sp.fun_句子(sent)
    if pt==None:
        return ''
    else:
        return sentStruct(pt)


"""
+[P函数](,结构转换代码)

"""
## end
#122, 414:
"""
+[返回目录](,生成句子结构)
结构转换代码:...
+[新建阅读窗口](,结构转换代码)
+[修改标题]"生成句子结构"(,显示句子结构)

Nini, 打开公式分析器(文件)

P代码:...
保存:...

结构:...

有什么

"""

+生成句子结构(_句子,_结构)->+[修改内容](+生成句子结构,+[临时文本])...
->+[del](,+生成句子结构)...
->的(生成句子结构,P代码)...

->+[导入句子分析函数](,)...
->+[python](Python,+[导入节点])...
->+[导入节点](,_结构)->+[code](+[python],P代码):
    ->_句子->+[.]"sent"(+[python],_句子)->+[o]"code"(+[python],_句子),
    ->+[.]"sent"(+[python],+[临时文本])




## end
#124, 53:
"""
测试:...
+[P函数](,测试)

"""

ans=sent2Struct(sent)



## end
#126, 264:
"""
P代码:...

保存:...

"""

+生成句子代码(_句子,_结构)->+[修改内容](+生成句子代码,+[临时文本])...
->+[del](,+生成句子代码)...
->的(生成句子代码,P代码)...

->+[导入句子分析函数](,)...
->+[python](Python,_结构)...
->+[code](+[python],P代码):
    ->_句子->+[.]"sent"(+[python],_句子),
    ->+[.]"sent"(+[python],+[临时文本])




## end
#132, 169:
"""
+[P函数](,测试)

Nini, 词典+[P函数](,P代码)中有哪些动词?
记住"Python"
Nini, 打开词典的条目(节点)
test::

[==](,test)

导入词典
print(dict_标点)

"""

code='吃鸡蛋'
[code,pt]=fun_名词(code)
print(code,pt)
## end
#134, 20505:
"""
+[P函数](,tools_parser_sentence)
地址::tools\tools_parser_sentence.py
+[保存文本](,tools_parser_sentence)

测试:...
+[新建阅读窗口](,测试)
print(dict_名词)

dict_名词={'兔子','蛇'}
dict_动词={'吃'}

保存:

"""


import sys,re
if __name__=='__main__':
    sys.path.append(sys.path[0]+'\\..')



from body.bone import NetP
from body.soul import Karma
from tools import tools_basic



def fun_助词(code):
    if code=="":
        return code,None
    code_save=code
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_助词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("助词").con(0,pt)
            return code[i:],pt0
    return code,None



def fun_连词(code):
    if code=="":
        return code,None
    code_save=code
    
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_连词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("连词").con(0,pt)
            return code[i:],pt0
    return code,None



def fun_介词(code):
    if code=="":
        return code,None
    code_save=code
    
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_介词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("介词").con(0,pt)
            return code[i:],pt0
    return code,None



def fun_数量词(code):
    if code=="":
        return code,None
    code_save=code
    
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_数量词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("数量词").con(0,pt)
            return code[i:],pt0
    return code,None



def fun_副词(code):
    if code=="":
        return code,None
    code_save=code
    
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_副词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("副词").con(0,pt)
            return code[i:],pt0
    return code,None



def fun_代词(code):
    if code=="":
        return code,None
    code_save=code
    
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_代词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("代词").con(0,pt)
            return code[i:],pt0
    return code,None



def fun_形容词(code):
    if code=="":
        return code,None
    code_save=code
    
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_形容词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("形容词").con(0,pt)
            return code[i:],pt0
    return code,None



def fun_名词(code):
    if code=="":
        return code,None
    code_save=code
    
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_名词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("名词").con(0,pt)
            return code[i:],pt0
    return code,None



def fun_动词(code):
    if code=="":
        return code,None
    code_save=code
    
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_动词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("动词").con(0,pt)
            return code[i:],pt0
    return code,None



def fun_谓语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,状语=fun_状语(code)
    if 状语!=None:
        
        code,动词=fun_动词(code)
        if 动词!=None:
                
            
            谓语=NetP("谓语")
            谓语.m_db[1]=动词.m_db[1]
            
            Karma(谓语.m_db[1])
            
            NetP('的').con(谓语,状语)
            NetP('的').con(谓语,动词)
            return code,谓语
    code=code_save
    
    code,动词=fun_动词(code)
    if 动词!=None:
        
        
        谓语=NetP("谓语")
        谓语.m_db[1]=动词.m_db[1]
        
        Karma(谓语.m_db[1])
        
        NetP('的').con(谓语,动词)
        return code,谓语
    code=code_save
    
    return code,None



def fun_主语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,定语=fun_定语(code)
    if 定语!=None:
        
        code,名词=fun_名词(code)
        if 名词!=None:
                
            
            主语=NetP("主语")
            主语.m_db[1]=名词.m_db[1]
            
            Karma(主语.m_db[1])
            if 定语.m_db[1].m_name in dict_名词:
                pt_de=NetP('的').con(定语.m_db[1],主语.m_db[1])
                Karma(pt_de)
                定语.m_db[1].m_master.addKarma(pt_de.m_master)
                pt_de.m_master.addKarma(主语.m_db[1].m_master)
            elif 定语.m_db[1].m_name in dict_动词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            else:
                定语.m_db[1].con(名词.m_db[1],0)
                主语.m_db[1].m_master.addKarma(定语.m_db[1].m_master,"从句")
            
            NetP('的').con(主语,定语)
            NetP('的').con(主语,名词)
            return code,主语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        
        
        主语=NetP("主语")
        主语.m_db[1]=名词.m_db[1]
        
        Karma(主语.m_db[1])
        
        NetP('的').con(主语,名词)
        return code,主语
    code=code_save
    
    return code,None



def fun_句子(code):
    if code=="":
        return code,None
    code_save=code
    
    code,主语=fun_主语(code)
    if 主语!=None:
        
        code,谓语=fun_谓语(code)
        if 谓语!=None:
                
            code,宾语=fun_宾语(code)
            if 宾语!=None:
                        
                
                句子=NetP("句子")
                句子.m_db[1]=谓语.m_db[1]
                谓语.m_db[1].con(主语.m_db[1],宾语.m_db[1])
                
                主语.m_db[1].m_master.addKarma(宾语.m_db[1].m_master)
                宾语.m_db[1].m_master.addKarma(谓语.m_db[1].m_master)
                谓语.m_db[1].m_master.m_buildMode=True
                
                NetP('的').con(句子,主语)
                NetP('的').con(句子,谓语)
                NetP('的').con(句子,宾语)
                return code,句子
    return code,None



def fun_宾语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,定语=fun_定语(code)
    if 定语!=None:
        
        code,名词=fun_名词(code)
        if 名词!=None:
                
            
            宾语=NetP("宾语")
            宾语.m_db[1]=名词.m_db[1]
            
            Karma(宾语.m_db[1])
            if 定语.m_db[1].m_name in dict_名词:
                pt_de=NetP('的').con(定语.m_db[1],宾语.m_db[1])
                Karma(pt_de)
                定语.m_db[1].m_master.addKarma(pt_de.m_master)
                pt_de.m_master.addKarma(宾语.m_db[1].m_master)
            elif 定语.m_db[1].m_name in dict_动词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            else:
                定语.m_db[1].con(名词.m_db[1],0)
                宾语.m_db[1].m_master.addKarma(定语.m_db[1].m_master,"从句")
            
            
            NetP('的').con(宾语,定语)
            NetP('的').con(宾语,名词)
            return code,宾语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        
        
        宾语=NetP("宾语")
        宾语.m_db[1]=名词.m_db[1]
        
        Karma(宾语.m_db[1])
        
        NetP('的').con(宾语,名词)
        return code,宾语
    code=code_save
    
    return code,None



def fun_定语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,短语=fun_短语(code)
    if 短语!=None:
        
        code,助词=fun_助词(code)
        if 助词!=None:
                
            
            定语=NetP("定语")
            定语.m_db[1]=短语.m_db[1]
            
            NetP('的').con(定语,短语)
            NetP('的').con(定语,助词)
            return code,定语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,助词=fun_助词(code)
        if 助词!=None:
                
            
            定语=NetP("定语")
            定语.m_db[1]=形容词.m_db[1]
            
            Karma(定语.m_db[1])
            
            NetP('的').con(定语,形容词)
            NetP('的').con(定语,助词)
            return code,定语
    code=code_save
    
    code,数量词=fun_数量词(code)
    if 数量词!=None:
        
        code,助词=fun_助词(code)
        if 助词!=None:
                
            
            定语=NetP("定语")
            定语.m_db[1]=数量词.m_db[1]
            
            Karma(定语.m_db[1])
            
            NetP('的').con(定语,数量词)
            NetP('的').con(定语,助词)
            return code,定语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        
        code,助词=fun_助词(code)
        if 助词!=None:
                
            
            定语=NetP("定语")
            定语.m_db[1]=名词.m_db[1]
            
            Karma(定语.m_db[1])
            
            NetP('的').con(定语,名词)
            NetP('的').con(定语,助词)
            return code,定语
    code=code_save
    
    return code,None



def fun_状语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        
        
        状语=NetP("状语")
        状语.m_db[1]=并列短语.m_db[1]
        NetP('的').con(状语,并列短语)
        return code,状语
    code=code_save
    
    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        
        
        状语=NetP("状语")
        状语.m_db[1]=介宾短语.m_db[1]
        NetP('的').con(状语,介宾短语)
        return code,状语
    code=code_save
    
    code,副词=fun_副词(code)
    if 副词!=None:
        
        
        状语=NetP("状语")
        状语.m_db[1]=副词.m_db[1]
        NetP('的').con(状语,副词)
        return code,状语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        
        状语=NetP("状语")
        状语.m_db[1]=形容词.m_db[1]
        NetP('的').con(状语,形容词)
        return code,状语
    code=code_save
    
    code,代词=fun_代词(code)
    if 代词!=None:
        
        
        状语=NetP("状语")
        状语.m_db[1]=代词.m_db[1]
        NetP('的').con(状语,代词)
        return code,状语
    code=code_save
    
    return code,None



def fun_补语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        
        
        补语=NetP("补语")
        补语.m_db[1]=并列短语.m_db[1]
        NetP('的').con(补语,并列短语)
        return code,补语
    code=code_save
    
    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        
        
        补语=NetP("补语")
        补语.m_db[1]=介宾短语.m_db[1]
        NetP('的').con(补语,介宾短语)
        return code,补语
    code=code_save
    
    code,动词=fun_动词(code)
    if 动词!=None:
        
        
        补语=NetP("补语")
        补语.m_db[1]=动词.m_db[1]
        NetP('的').con(补语,动词)
        return code,补语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        
        补语=NetP("补语")
        补语.m_db[1]=形容词.m_db[1]
        NetP('的').con(补语,形容词)
        return code,补语
    code=code_save
    
    code,数量词=fun_数量词(code)
    if 数量词!=None:
        
        
        补语=NetP("补语")
        补语.m_db[1]=数量词.m_db[1]
        NetP('的').con(补语,数量词)
        return code,补语
    code=code_save
    
    code,代词=fun_代词(code)
    if 代词!=None:
        
        
        补语=NetP("补语")
        补语.m_db[1]=代词.m_db[1]
        NetP('的').con(补语,代词)
        return code,补语
    code=code_save
    
    return code,None



def fun_短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        
        
        return code,并列短语
    code=code_save
    
    code,偏正短语=fun_偏正短语(code)
    if 偏正短语!=None:
        
        
        return code,偏正短语
    code=code_save
    
    code,述宾短语=fun_述宾短语(code)
    if 述宾短语!=None:
        
        
        return code,述宾短语
    code=code_save
    
    code,述补短语=fun_述补短语(code)
    if 述补短语!=None:
        
        
        return code,述补短语
    code=code_save
    
    code,主谓短语=fun_主谓短语(code)
    if 主谓短语!=None:
        
        
        return code,主谓短语
    code=code_save
    
    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        
        
        return code,介宾短语
    code=code_save
    
    return code,None



def fun_并列短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,并列短语=fun_并列短语(code)
            if 并列短语!=None:
                        
                
                并列短语_0=NetP("并列短语")
                连词.m_db[1].con(形容词.m_db[1],并列短语.m_db[1])
                并列短语_0.m_db[1]=形容词.m_db[1]
                
                NetP('的').con(并列短语_0,形容词)
                NetP('的').con(并列短语_0,连词)
                NetP('的').con(并列短语_0,并列短语)
                return code,并列短语_0
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,并列短语=fun_并列短语(code)
            if 并列短语!=None:
                        
                
                并列短语_0=NetP("并列短语")
                连词.m_db[1].con(名词.m_db[1],并列短语.m_db[1])
                并列短语_0.m_db[1]=名词.m_db[1]
                
                NetP('的').con(并列短语_0,名词)
                NetP('的').con(并列短语_0,连词)
                NetP('的').con(并列短语_0,并列短语)
                return code,并列短语_0
    code=code_save
    
    code,名词_0=fun_名词(code)
    if 名词_0!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,名词_1=fun_名词(code)
            if 名词_1!=None:
                        
                
                并列短语=NetP("并列短语")
                连词.m_db[1].con(名词_0.m_db[1],名词_1.m_db[1])
                并列短语.m_db[1]=名词_0.m_db[1]
                
                NetP('的').con(并列短语,名词_0)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,名词_1)
                return code,并列短语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,名词=fun_名词(code)
            if 名词!=None:
                        
                
                并列短语=NetP("并列短语")
                连词.m_db[1].con(形容词.m_db[1],名词.m_db[1])
                并列短语.m_db[1]=形容词.m_db[1]
                
                NetP('的').con(并列短语,形容词)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,名词)
                return code,并列短语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,形容词=fun_形容词(code)
            if 形容词!=None:
                        
                
                并列短语=NetP("并列短语")
                连词.m_db[1].con(名词.m_db[1],形容词.m_db[1])
                并列短语.m_db[1]=名词.m_db[1]
                
                NetP('的').con(并列短语,名词)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,形容词)
                return code,并列短语
    code=code_save
    
    code,形容词_0=fun_形容词(code)
    if 形容词_0!=None:
        
        code,连词=fun_连词(code)
        if 连词!=None:
                
            code,形容词_1=fun_形容词(code)
            if 形容词_1!=None:
                        
                
                并列短语=NetP("并列短语")
                连词.m_db[1].con(形容词_0.m_db[1],形容词_1.m_db[1])
                并列短语.m_db[1]=形容词_0.m_db[1]
                
                NetP('的').con(并列短语,形容词)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,形容词)
                return code,并列短语
    code=code_save
    
    return code,None



def fun_偏正短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,名词_0=fun_名词(code)
    if 名词_0!=None:
        
        code,名词_1=fun_名词(code)
        if 名词_1!=None:
                
            
            偏正短语=NetP("偏正短语")
            偏正短语.m_db[1]=名词_1.m_db[1]
            
            pt_de=NetP('的').con(名词_0.m_db[1],名词_1.m_db[1])
            Karma(名词_0.m_db[1])
            Karma(名词_1.m_db[1])
            Karma(pt_de)
            名词_0.m_db[1].m_master.addKarma(pt_de.m_master)
            pt_de.m_master.addKarma(名词_1.m_db[1].m_master)
            
            NetP('的').con(偏正短语,名词_0)
            NetP('的').con(偏正短语,pt_de)
            NetP('的').con(偏正短语,名词_1)
            return code,偏正短语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,动词=fun_动词(code)
        if 动词!=None:
                
            
            偏正短语=NetP("偏正短语")
            偏正短语.m_db[1]=动词.m_db[1]
            形容词.m_db[1].con(动词.m_db[1],0)
            
            Karma(动词.m_db[1])
            Karma(形容词.m_db[1])
            动词.m_db[1].m_master.addKarma(形容词.m_db[1].m_master)
            
            NetP('的').con(偏正短语,形容词)
            NetP('的').con(偏正短语,动词)
            return code,偏正短语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        
        code,名词=fun_名词(code)
        if 名词!=None:
                
            
            偏正短语=NetP("偏正短语")
            偏正短语.m_db[1]=名词.m_db[1]
            形容词.m_db[1].con(名词.m_db[1],0)
            
            Karma(形容词.m_db[1])
            Karma(名词.m_db[1])
            名词.m_db[1].m_master.addKarma(形容词.m_db[1].m_master)
            
            NetP('的').con(偏正短语,形容词)
            NetP('的').con(偏正短语,名词)
            return code,偏正短语
    code=code_save
    
    return code,None



def fun_述宾短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,动词=fun_动词(code)
    if 动词!=None:
        
        code,宾语=fun_宾语(code)
        if 宾语!=None:
                
            
            述宾短语=NetP("述宾短语")
            述宾短语.m_db[1]=动词.m_db[1]
            动词.m_db[1].con(0,宾语.m_db[1])
            
            Karma(动词.m_db[1])
            动词.m_db[1].m_master.addKarma(宾语.m_db[1].m_master)
            
            NetP('的').con(述宾短语,动词)
            NetP('的').con(述宾短语,宾语)
            return code,述宾短语
    code=code_save
    
    return code,None



def fun_述补短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,动词=fun_动词(code)
    if 动词!=None:
        
        code,形容词=fun_形容词(code)
        if 形容词!=None:
                
            
            述补短语=NetP("述补短语")
            述补短语.m_db[1]=动词.m_db[1]
            形容词.m_db[1].con(动词.m_db[1],0)
            
            Karma(动词.m_db[1])
            Karma(形容词.m_db[1])
            动词.m_db[1].m_master.addKarma(形容词.m_db[1].m_master)
            
            NetP('的').con(述补短语,动词)
            NetP('的').con(述补短语,形容词)
            return code,述补短语
    code=code_save
    
    return code,None



def fun_主谓短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,名词=fun_名词(code)
    if 名词!=None:
        
        code,动词=fun_动词(code)
        if 动词!=None:
                
            
            主谓短语=NetP("主谓短语")
            主谓短语.m_db[1]=动词.m_db[1]
            动词.m_db[1].con(名词.m_db[1],0)
            
            Karma(名词.m_db[1])
            Karma(动词.m_db[1])
            动词.m_db[1].m_master.addKarma(名词.m_db[1].m_master)
            
            NetP('的').con(主谓短语,名词)
            NetP('的').con(主谓短语,动词)
            return code,主谓短语
    code=code_save
    
    return code,None



def fun_介宾短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,介词=fun_介词(code)
    if 介词!=None:
        
        code,宾语=fun_宾语(code)
        if 宾语!=None:
                
            
            介宾短语=NetP("介宾短语")
            介宾短语.m_db[1]=介词.m_db[1]
            介词.m_db[1].con(0,宾语.m_db[1])
            
            Karma(介词.m_db[1])
            介词.m_db[1].m_master.addKarma(宾语.m_db[1].m_master)
            
            NetP('的').con(介宾短语,介词)
            NetP('的').con(介宾短语,宾语)
            return code,介宾短语
    code=code_save
    
    return code,None



def collectPts(pt,list_pt=None):
    if list_pt==None:
        list_pt=[]
    if pt not in list_pt:
        list_pt.append(pt)
    for con in pt.m_con:
        if con.m_db[0]==pt:
            if con not in list_pt:
                list_pt.append(con)
            if con.m_name=="的" and con.m_db[1]!=None:
                collectPts(con.m_db[1],list_pt)
    if pt.m_db[0]!=None:
        if pt.m_db[0] not in list_pt:
            list_pt.append(pt.m_db[0])
    if pt.m_db[1]!=None:
        if pt.m_db[1] not in list_pt:
            list_pt.append(pt.m_db[1])
    return list_pt

def sentStruct(pt):
    list_pt=collectPts(pt)
    return tools_basic.writeStdCode([],list_pt)

def sent2Struct(sent):
    code,pt=fun_句子(sent)
    if pt==None:
        return ''
    else:
        return sentStruct(pt)




## end
#138, 316:
def fun_动词(code):
    if code=="":
        return code,None
    code_save=code
    
    n=5
    for i in range(n):
        if i<=len(code) and code[0:i] in dict_动词:
            print(code[0:i],i)
            pt=NetP(code[0:i])
            pt0=NetP("动词").con(0,pt)
            return code[i:],pt0
    return code,None
## end
#140, 308:
def fun_动词(code):
    if code=="":
        return code,None
    code_save=code
    
    for word in dict_动词:
        n=len(word)
        if word==code[0:n]:
            print(code[0:n],n)
            pt=NetP(code[0:n])
            pt0=NetP("动词").con(0,pt)
            return code[i:],pt0
    return code,None
## end
#142, 949:

def fun_名词(code):
    if len(code)==0:
        return '',None

    pat1=r'"[^"]+"'
    n=word_in_dict(code,dict_名词)
    if n!=0:
        pt=NetP(code[0:n])
        pt0=NetP("名词").con(0,pt)
        return code[n:],pt0

    # quote
    result=re.match(pat1,code)
    if result!=None:
        text=result.group()
        n=result.span()[1]
        pt=NetP('临时文本',text[1:-1])
        pt0=NetP("名词").con(0,pt)
        return code[n:],pt0

    # No other words
    for i in range(len(code)):
        n=word_in_dict(code[i:],dict_动词)+word_in_dict(code[i:],dict_助词)+word_in_dict(code[i:],dict_连词)+word_in_dict(code[i:],dict_介词)+word_in_dict(code[i:],dict_副词)+word_in_dict(code[i:],dict_标点)
        if n!=0:
            if i!=0:
                pt=NetP(code[0:i])
                pt0=NetP("名词").con(0,pt)
                return code[i:],pt0
            else:
                return code,None

    pt=NetP(code)
    pt0=NetP("名词").con(0,pt)
    return '',pt0
## end
#144, 66:

句号::.
问号::?
感叹号::!
逗号::,

句号2::。
问号2::？
感叹号2::！
逗号2::，

换行::\n



## end
#146, 1:
.
## end
#148, 1:
?
## end
#150, 1:
!
## end
#152, 1:
,
## end
#156, 154:
"""


"""

dict_名词=set()
dict_动词=set()
dict_形容词=set()
dict_数量词=set()
dict_副词=set()
dict_介词=set()
dict_代词=set()
dict_连词=set()
dict_助词=set()
dict_标点=set()


## end
#158, 1:
，
## end
#160, 1:
！
## end
#162, 1:
？
## end
#164, 1:
。
## end
#166, 2:
\n
## end
#171, 304:
"""
+[P函数](,测试fun_短语)
导入词典
Nini, 打开句子相关(文件)
记住"Python"
测试述宾短语:...

"""
code='真新镇的小智的皮卡丘使用电光一闪'
[code,pt]=fun_句子(code)
print(code,pt)
#[code,pt]=fun_动词(code)
#print(code,pt)
#[code,pt]=fun_名词(code)
#print(code,pt)
[code,pt]=fun_助词(code)
print(code,pt)



"""
定义使用为动词
Nini, 词典中有哪些动词?
+[P函数](,测试fun_短语)

"""
## end
#180, 303:
"""
+[P函数](,测试fun_短语)
导入词典
Nini, 打开句子相关(文件)
记住"Python"
测试述宾短语:...

"""
code='攻击卡比兽的皮卡丘使用火箭头槌'
[code,pt]=fun_句子(code)
print(code,pt)
#[code,pt]=fun_动词(code)
#print(code,pt)
#[code,pt]=fun_名词(code)
#print(code,pt)
[code,pt]=fun_助词(code)
print(code,pt)



"""
定义使用为动词
Nini, 词典中有哪些动词?
+[P函数](,测试fun_短语)

"""
## end
#225, 260:


匹配模板::^从%[词性]中, 删除"%[词语]"$
输出模板::的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->的(_词典,%[词性]):
    ->的(%[词性],%[词语])->+[del](,%[词语])->+[更新词典](,_词典)...
        ->+[保存词典](,)...
    ->+[导出节点](,词典)->+[覆盖](+[导出节点],)->+[list](+[导出节点],词典)





## end
#227, 20:
^从%[词性]中, 删除"%[词语]"$
## end
#229, 220:
的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->的(_词典,%[词性]):
    ->的(%[词性],%[词语])->+[del](,%[词语])->+[更新词典](,_词典)...
        ->+[保存词典](,)...
    ->+[导出节点](,词典)->+[覆盖](+[导出节点],)->+[list](+[导出节点],词典)
## end
#238, 310:
的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->的(_词典,%[词性]):
    ->的(%[词性],%[词语]),
    ->+的#0(%[词性],+%[词语])...
        ->+的(词典,+的#0)->+的(词典,+%[词语])...
        ->+[python]"dict_%[词性].update({'%[词语]'})"(Python,)...
    ->+[导出节点](,词典)->+[覆盖](+[导出节点],)->+[list](+[导出节点],词典)...
    ->+[保存词典]
## end
#239, 24:
^Nini, 定义%[词语][是为]%[词性]$
## end
#242, 354:


匹配模板::^Nini, 定义%[词语][是为]%[词性]$
输出模板::的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->的(_词典,%[词性]):
    ->的(%[词性],%[词语]),
    ->+的#0(%[词性],+%[词语])...
        ->+的(词典,+的#0)->+的(词典,+%[词语])...
        ->+[python]"dict_%[词性].update({'%[词语]'})"(Python,)...
    ->+[导出节点](,词典)->+[覆盖](+[导出节点],)->+[list](+[导出节点],词典)...
    ->+[保存词典]





## end
#249, 610:
"""
库:...
+[新建阅读窗口](,库)

Nini, 打开编程语言parser(文件)
测试想法:...
+[新建阅读窗口](,测试想法)


"""

+句子描述(_入口,_输出)->[m_text](+句子描述,+[临时文本]#0)->+[del](,+句子描述)...
->的(句子描述,库)->的(句子描述,测试想法)->[说](,+[临时文本]#0)...

->[]:
    ->的(库,_条目)->[标题](_条目,)->[==]([标题],+[临时文本]#0)...
    ->的(_条目,_解释)->的(_解释,匹配条件)...
        ->+[code]([想],匹配条件)->[想](_入口,_输出)...
        ->+[做](_入口,_输出)->+[code](+[做],匹配条件)...
        ->+[句子转述](_解释,_输出)->+[删除结构](,_输出),

    ->的(库,通用条目)->的(通用条目,_解释0)->的(_解释0,匹配条件#0)...
        ->+[code]([想]#0,匹配条件#0)->[想]#0(_入口,_输出)...
        ->+[做](_入口,_输出)->+[code](+[做],匹配条件#0)...
        ->+[句子转述](_解释0,_输出)->+[删除结构](,_输出)



## end
#251, 328:
将库(节点)记作词语库
Nini, 词典的词语库是什么?
Nini, 打开词典的条目(节点)

通用条目:...
状语复句:...
然后复句:...
+[新建阅读窗口](,状语复句)

匹配模式:...

名词:...
动词:...
+[新建阅读窗口](,名词)

主语结构:...
宾语结构:...
谓语结构:...
状语结构:...
介宾结构:...
补语结构:...
+[新建阅读窗口](,补语结构)

+[复制结构](,有)->+[粘贴](,库)->+[修改标题]"在"(,有)
+[新建阅读窗口](,主语结构)


有_del:...
在_del:...
+[修改标题]"有_del"(,有)
+[修改标题]"在_del"(,在)

准备:...
## end
#253, 51:
"""


"""

+测试想法(_入口,_输出)->[说](,_入口)->[说](,_输出)




## end
#255, 26:
+[复制结构](,解释1)

解释1:...




## end
#257, 30:


匹配条件:...
输出模板::%主语%谓语%宾语




## end
#259, 284:
"""


"""

+匹配条件(句子,_输出)->+[del](,+匹配条件)...
->的(句子,谓语)->谓语(,_动词)...
    ->+的(_输出,+谓语)->+[标题](_动词,)->+[修改内容](+[标题],+谓语)...

->的(句子,主语)->主语(,_名词1)...
    ->+的(_输出,+主语)->+[标题](_名词1,)->+[修改内容](+[标题],+主语)...

->的(句子,宾语)->宾语(,_名词2)...
    ->+的(_输出,+宾语)->+[标题](_名词2,)->+[修改内容](+[标题],+宾语)




## end
#261, 205:
"""
Nini, 打开动词(库)

"""

+句子转述(_条目,_输出)->+[del](,+句子转述)...
->[]:
    ->的(_条目,输出模板)->+[模板文本](输出模板,_输出)...
        =>的(_输出,_输入)=>+[.](+[模板文本],_输入),
    ->的(_条目,句子转述#0)->+[做](_条目,_输出)->+[code](+[做],句子转述#0)




## end
#263, 9:
%宾语%谓语%主语
## end
#265, 28:
+[粘贴](,在)

解释1:花朵在草地上...




## end
#266, 48:
%主语结构->%宾语结构:->%副词(%宾语,%主语),
    ->+%副词(%宾语,%主语)
## end
#267, 393:
"""


"""

+匹配条件(句子,_输出)->+[del](,+匹配条件)...
    ->的(句子,谓语)->谓语(,在)...
    ->在(_主语,_宾语)->_主语->_宾语->_副词(在,)...

->+的(_输出,+副词)->+[标题](_副词,)->+[修改内容](+[标题],+副词)...
    ->+的(_输出,+主语)->+[标题](_主语,)->+[修改内容](+[标题],+主语)...
    ->+的(_输出,+宾语)->+[标题](_宾语,)->+[修改内容](+[标题],+宾语)...

->的(句子,主语)...
    ->+的(_输出,+主语结构)->+[句子描述]"主语结构"(主语,+主语结构)...
->的(句子,宾语)...
    ->+的(_输出,+宾语结构)->+[句子描述]"宾语结构"(宾语,+宾语结构)




## end
#270, 69:


匹配条件:...
输出模板::%主语结构->%宾语结构:->%副词(%宾语,%主语),
    ->+%副词(%宾语,%主语)




## end
#273, 358:
"""
Nini, 打开公式结构的句子库(节点)
S代码:...
+[新建阅读窗口](,S代码)

"""

+句子转换(_句子,_输出)->+[del](,+句子转换)...
->的(句子转换,S代码)...

->+场景->[]{
    []:->_句子->+[生成句子结构](_句子,+场景)->[m_text](_句子,+[生成句子结构]),
        ->+[生成句子结构](,+场景)->[m_text](+句子转换,+[生成句子结构])
}...

->+[structure](compiler,+场景)->+[code](+[structure],S代码)...
->+[删除结构](,+场景)->+[del](,+场景)...
->+[.]"输出"(+[structure],_输出)


## end
#275, 162:
"""
的(句子,谓语)->谓语(,_动词)->+[标题](_动词,)...
->+[修改内容](+[标题],+[句子描述])...
->+[句子描述](句子,输出);

"""

^起点(,_句子)->+[标题](_句子,)...
->+[修改内容](+[标题],+[句子描述])->+[句子描述](_句子,输出);



## end
#277, 593:
"""
Nini, 打开名词(库)

"""

+有(_主体,_物体)->+[del](,+有):

->_主体->[当前编辑器](_主体,)...
    ->是([当前编辑器],_编辑器)->的(_编辑器,m_readPtr)->m_readPtr(,_节点)...
    ->[]{
        []:->[is](_物体,临时文本)->临时文本(,)...
            ->+[修改内容](临时文本,+[修改标题])->+[修改标题](,+新物体)...
            ->+的(_节点,+新物体)->+的#0(_主体,+新物体)->+的(_节点,+的#0),
    
        ->+的#1(_主体,_物体)->+的(_节点,+的#1)
    },

->[当前编辑器](,)...
    ->是([当前编辑器],_编辑器2)->的(_编辑器2,m_readPtr#2)->m_readPtr#2(,_节点2)...
    ->[]{
        []:->[is](_物体,临时文本)->临时文本(,)...
            ->+新物体->+[修改内容](临时文本,+[修改标题])->+[修改标题](,+新物体)...
            ->+的(_节点2,+新物体),
        ->[]
    }

## end
#286, 291:
"""
Nini, "是"的解释是什么?

"""

+匹配条件(定语,_输出)->+[del](,+匹配条件)...
->定语(,_动词)->的(定语,主谓短语)->主谓短语(,)...
    ->_动词(_主语,_宾语)->_主语->_宾语(,)...

->+的(_输出,+主语)->+[标题](_主语,)->+[修改内容](+[标题],+主语)...
    ->+的(_输出,+动词)->+[标题](_动词,)->+[修改内容](+[标题],+动词)...
    ->+的(_输出,+宾语)->+[标题](_宾语,)->+[修改内容](+[标题],+宾语)






## end
#287, 14:
->%动词(%主语,%宾语)
## end
#290, 35:


匹配条件:...
输出模板::->%动词(%主语,%宾语)




## end
#292, 112:
+[粘贴](,通用条目)

解释1:句子...
解释2:定语...
解释3:名词定语...
+[新建阅读窗口](,解释2)

+[复制结构](,解释1)->+[粘贴](,通用条目)->+[修改标题]"解释2"(,解释1)


## end
#295, 385:
"""
+[返回目录](,句子回答)

"""

+句子回答(_范围,_问题)->compiler->+答案:
    ->_问题->+[段落转换](_问题,+答案)->+[复制内容](,+答案)...
    ->+[structure](compiler,_范围)->+[code](+[structure],+答案)...
    ->+[del](,+答案)->+[del](,+句子回答),

    ->+[段落转换](+句子回答,+答案)->+[复制内容](,+答案)...
    ->+[显示]"即将执行S函数..."->+[显示](,+答案)...
    ->+[structure](compiler,_范围)->+[code](+[structure],+答案)...
    ->+[del](,+答案)->+[del](,+句子回答)



## end
#297, 554:
"""


"""

+在(_主体,_位置)->+[del](,+在)...
->[]{
    []:->在(_主体,空间点)->空间点,
        ->+在(_主体,+空间点)
}...
->在(_主体,空间点):

->[is](_位置,临时文本)->临时文本(,)...
    ->+[修改内容](临时文本,空间点)->+[显示PPT图形](,_主体),

->[is](_位置,位置)->位置->.(_目标,位置)->在(_目标,空间点#2)...
    ->+[修改内容](空间点#2,空间点)->+[显示PPT图形](,_主体),

->[]{
    [is](_位置,标记点)->标记点->+[调用词典名词](标记点,+[定义])->+[定义](,)...
    ->[]{
        []:->的(_主体,X)->X->+[修改内容](标记点,空间点)->+[增加内容]";0"(,空间点),
            ->+[修改内容](标记点,空间点)->+[显示PPT图形](,_主体)
    }
},

->在(_位置,空间点#0)->在(_主体,空间点#1)...
    ->+[修改内容](空间点#0,空间点#1)->+[显示PPT图形](,_主体)



## end
#298, 42:
%主语结构:->%副词(%主语,%宾语),
    ->+%副词(%主语,+%宾语)
## end
#299, 332:
"""


"""

+匹配条件(句子,_输出)->+[del](,+匹配条件)...
    ->的(句子,谓语)->谓语(,有)...
    ->有(_主语,_宾语)->_主语->_宾语->_副词(有,)...

->+的(_输出,+副词)->+[标题](_副词,)->+[修改内容](+[标题],+副词)...
    ->+的(_输出,+主语)->+[标题](_主语,)->+[修改内容](+[标题],+主语)...
    ->+的(_输出,+宾语)->+[标题](_宾语,)->+[修改内容](+[标题],+宾语)...

->的(句子,主语)...
    ->+的(_输出,+主语结构)->+[句子描述]"主语结构"(主语,+主语结构)





## end
#302, 63:


匹配条件:...
输出模板::%主语结构:->%副词(%主语,%宾语),
    ->+%副词(%主语,+%宾语)




## end
#304, 90:
+[粘贴](,有)

解释1:在草地上, 有花朵...
解释2:草地上有花朵...

+[复制结构](,解释1)->+[粘贴](,有)->+[修改标题]"解释2"(,解释1)



## end
#306, 266:
"""


"""

+匹配条件(句子,_输出)->+[del](,+匹配条件)...
    ->的(句子,谓语)->谓语(,有)...
    ->有(,_宾语)->在(有,_主语)->_副词(在,)...

->+的(_输出,+副词)->+[标题](_副词,)->+[修改内容](+[标题],+副词)...
    ->+的(_输出,+主语)->+[标题](_主语,)->+[修改内容](+[标题],+主语)...
    ->+的(_输出,+宾语)->+[标题](_宾语,)->+[修改内容](+[标题],+宾语)





## end
#307, 40:
%主语:->%副词(%主语,%宾语),
    ->+%副词(%主语,+%宾语)
## end
#310, 61:


匹配条件:...
输出模板::%主语:->%副词(%主语,%宾语),
    ->+%副词(%主语,+%宾语)




## end
#312, 54:
+[调用词典动词](+[做],+%谓语)->+[做](%主语,%宾语)%谓语结构->%主语结构->%宾语结构
## end
#313, 645:
"""
保存:...
测试模板::

"""

+匹配条件(句子,_输出)->+[del](,+匹配条件)...

->的(句子,谓语)->谓语(,_动词)...
    ->+的(_输出,+谓语)->+[句子描述]"动词"(_动词,+谓语)...
->+的(_输出,+谓语结构)->+[句子描述]"谓语结构"(谓语,+谓语结构)...

->+的(_输出,+主语)->+的(_输出,+主语结构)->+的(_输出,+主语后缀)...
->[]{
    +[句子描述]"主语结构"(主语,+主语后缀):
        ->的(句子,主语)->主语(,_名词1)->_名词1(,)...
        ->+[句子描述]"名词"(_名词1,+主语)->+名字(+主语,)...
        ->+[句子描述]"主语结构"(主语,+主语结构),
    ->+[修改内容]"[]"(,+主语结构)
}...

->+的(_输出,+宾语)->+的(_输出,+宾语结构)->+的(_输出,+宾语后缀)...
->[]{
    +[句子描述]"宾语结构"(宾语,+宾语后缀):
        ->的(句子,宾语)->宾语(,_名词2)->_名词2(,)...
        ->+[句子描述]"名词"(_名词2,+宾语)->+名字(+宾语,)...
        ->+[句子描述]"宾语结构"(宾语,+宾语结构),
    ->+[修改内容]"[]"(,+宾语结构)

}





## end
#316, 152:


匹配条件:...
输出模板::+[调用词典动词](+[做],+%谓语)->+[做](%主语,%宾语)%谓语结构->%主语结构->%宾语结构



输出模板::%主语结构->%宾语结构->+%谓语(%主语,%宾语)
输出模板::%主语%主语定语->%宾语%宾语定语->+%谓语(%主语,%宾语)




## end
#319, 254:


匹配模板::^Nini, "%[词语]"是什么词性\?$
输出模板::的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->+[临时文本]"\"%[词语]\"的词性是:"->[]{
    []=>的(_词典,_词性)->_词性{的(_词性,%[词语])->%[词语]}...
    =>+[标题](_词性,)->+[增加内容]" "(+[标题],+[临时文本])
}->+[消息窗口](,+[临时文本])




## end
#321, 213:
的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->+[临时文本]"\"%[词语]\"的词性是:"->[]{
    []=>的(_词典,_词性)->_词性{的(_词性,%[词语])->%[词语]}...
    =>+[标题](_词性,)->+[增加内容]" "(+[标题],+[临时文本])
}->+[消息窗口](,+[临时文本])
## end
#323, 22:
^Nini, "%[词语]"是什么词性\?$
## end
#325, 12:


解释1:...



## end
#327, 12:


解释1:...



## end
#329, 30:


匹配条件:...
输出模板::[]%定语->%主语



## end
#331, 174:
"""
保存:...

"""

+匹配条件(主语,_输出)->+[del](,+匹配条件)...
->主语(,_名词1)...
    ->+的(_输出,+主语)->+[句子描述]"名词"(_名词1,+主语)...
->+的(_输出,+定语):
    ->的(主语,定语)->+[句子描述]"定语"(定语,+定语),
    ->[]





## end
#333, 10:
[]%定语->%主语
## end
#335, 395:
"""
保存:...

"""

+匹配条件(句子,_输出)->+[del](,+匹配条件)...
->的(句子,谓语)->谓语(,_动词)...
    ->+的(_输出,+谓语)->+[标题](_动词,)->+[修改内容](+[标题],+谓语)...

->的(句子,主语)->主语(,_名词1)...
    ->+的(_输出,+主语)->+[句子描述]"名词"(_名词1,+主语)...
    ->+名字(+主语,)...
->的(句子,宾语)->宾语(,_名词2)...
    ->+的(_输出,+宾语)->+[句子描述]"名词"(_名词2,+宾语)...
    ->+名字(+宾语,)...

->+的(_输出,+主语结构)->+[句子描述]"主语结构"(主语,+主语结构)...
->+的(_输出,+宾语结构)->+[句子描述]"宾语结构"(宾语,+宾语结构)





## end
#337, 46:


匹配条件:...
匹配条件的"主语"替换为"宾语"
输出模板::[]%定语->%宾语


## end
#339, 168:
"""


"""

+匹配条件(宾语,_输出)->+[del](,+匹配条件)...
->宾语(,_名词1)...
    ->+的(_输出,+宾语)->+[句子描述]"名词"(_名词1,+宾语)...
->+的(_输出,+定语):
    ->的(宾语,定语)->+[句子描述]"定语"(定语,+定语),
    ->[]





## end
#341, 10:
[]%定语->%宾语
## end
#355, 13:


解释1:...




## end
#357, 32:


匹配条件:...
输出模板::%名词#%序号%内容





## end
#359, 409:
"""


"""

+匹配条件(_名词,_输出)->+[del](,+匹配条件)...
->+的(_输出,+序号)->[]{
    []:->名词(,_名词)->的(名词,序号)->+[修改内容](序号,+序号),
        ->[]
}...
->+的(_输出,+内容)->[]{
    []:->名字(_输出,)->+[del](,名字),
        ->[==](,_名词),
        ->+[修改内容]"\"%s\""(_名词,+内容)
}...
->+的(_输出,+名词)->+名词:
    ->[is](_名词,临时文本)->+[修改内容]"+[临时文本]"(,+名词),
    ->[词典名词](_名词,)->+[标题](_名词,)->+[修改内容]"+[%s]"(+[标题],+名词),
    ->+[标题](_名词,)->+[修改内容](+[标题],+名词)





## end
#361, 10:
%名词#%序号%内容
## end
#363, 185:
"""
保存:...

"""

+匹配条件(主语,_输出)->+[del](,+匹配条件)...
->主语(,_名词1)...
    ->+的(_输出,+主语)->+[标题](_名词1,)->+[修改内容](+[标题],+主语)...
->+的(_输出,+定语):
    ->的(主语,定语)->+[句子描述]"定语"(定语,+定语),
    ->[]





## end
#365, 13:


解释1:...




## end
#367, 40:


匹配条件:...
匹配条件的"名词"替换为"动词"
输出模板::%动词



## end
#369, 168:
"""


"""

+匹配条件(_动词,_输出)->+[del](,+匹配条件)...
->+的(_输出,+动词)->+动词:
    ->[is](_动词,谓语)->谓语->+[标题](_动词,)->+[修改内容]"%s"(+[标题],+动词),
    ->+[标题](_动词,)->+[修改内容](+[标题],+动词)





## end
#371, 3:
%动词
## end
#373, 304:


匹配模板::^Nini, "%[词语]"的解释是什么\?$
输出模板::的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
    ->的(_词典,动词)->的(动词,%[词语])->+[新建阅读窗口](,%[词语])

->+[临时文本]"\"%[词语]\"的词性是:"->[]{
    []=>的(_词典,_词性)->_词性{的(_词性,%[词语])->%[词语]}...
    =>+[标题](_词性,)->+[增加内容]" "(+[标题],+[临时文本])
}->+[消息窗口](,+[临时文本])




## end
#375, 23:
^Nini, "%[词语]"的解释是什么\?$
## end
#377, 116:
的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
    ->的(_词典,动词)->的(动词,%[词语])->+[新建阅读窗口](,%[词语])
## end
#379, 480:
"""
默认动词::+%动词
一般动词:...

保存:...
+[设置结构](,保存)

"""

+调用词典动词(_做,_词语0)->+[del](,+调用词典动词)->+[del](,_词语0)...
->的(调用词典动词,一般动词)->的(调用词典动词,保存)...
->[]{
    []=>的(保存,_词语)->_词语=>+[del](,_词语)
}...

->的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)->的(_词典,动词)...
->的(动词,_词语)->[eq](_词语0,_词语)->_词语:

->[==](,_词语)->+[标题](_词语,)...
    ->+[模板文本](一般动词,保存)->+[.](+[模板文本],+[标题])...
    ->+的(保存,+动词)->[m_name](_词语,+动词)...
        ->+code(_做,+动词)->+[修改内容](保存,+动词),

->+code(_做,_词语)



## end
#381, 13:


解释1:...




## end
#383, 5:






## end
#385, 12:


解释1:...



## end
#387, 38:


匹配条件:...
输出模板::%副词%状语结构%介宾结构%补语结构



## end
#389, 560:
"""
保存:...
副词模板::->+%副词(+[做],)->+[del](,%副词)

"""

+匹配条件(谓语,_输出)->+[del](,+匹配条件)...

->谓语(,_动词)...
->+的(_输出,+副词)->[]{
    []:->的(谓语,副词)->副词(,_副词)->+[标题](_副词,)...
        ->+[模板文本]"...
    ->+%副词(+[做],)->+[del](,+%副词)"(,+副词)...
        ->+[.]"副词"(+[模板文本],+[标题]),
    ->[]
}...

->+的(_输出,+介宾结构)->[]{
    []:->的(谓语,介宾短语)->介宾短语->+[句子描述]"介宾结构"(介宾短语,+介宾结构),
    ->[]
}...

->+的(_输出,+补语结构)->[]{
    []:->的(谓语,补语)->补语->+[句子描述]"补语结构"(补语,+补语结构),
    ->[]
}...

->+的(_输出,+状语结构)->[]{
    []:->的(谓语,状语)->状语->的(状语,介宾短语)...
        ->+[句子描述]"介宾结构"(介宾短语,+状语结构),
    ->[]
}




## end
#391, 18:
%副词%状语结构%介宾结构%补语结构
## end
#393, 13:


解释1:...




## end
#395, 66:


匹配条件:...
输出模板::...
->+%介词(+[做],%宾语)->%宾语内容->+[del](,+%介词)%副词




## end
#397, 583:
"""
Nini, "是"的解释是什么?
副词模板::...
    ->+%副词(+%介词,)->+[del](,+%副词)

保存:...

"""

+匹配条件(介宾短语,_输出)->+[del](,+匹配条件)...
->的(匹配条件,副词模板)...

->介宾短语(,_介词)...
    ->_介词(_动词,_宾语)->_动词->_宾语->谓语(,_动词)...

->+的(_输出,+介词)->+[标题]#0(_介词,)->+[修改内容](+[标题]#0,+介词)...

->+的(_输出,+宾语)->+的(_输出,+宾语内容)...
->[]{
    +[句子描述]"名词"(_宾语,+宾语)->+名字(+宾语,)->[]:
        ->[==](,_宾语)->+[修改内容]"[]"(,+宾语内容),
        ->+[句子描述]"名词"(_宾语,+宾语内容)
}...

->+的(_输出,+副词)...
->[]{
    []:->的(介宾短语,副词)->副词(,_副词)->+[标题](_副词,)...
        ->+[模板文本](副词模板,+副词)...
        ->+[.]"介词"(+[模板文本],+[标题]#0)->+[.]"副词"(+[模板文本],+[标题]),
    ->[]
}




## end
#399, 45:
...
->+%介词(+[做],%宾语)->%宾语内容->+[del](,+%介词)%副词
## end
#401, 27:
->+%副词(+[做],)->+[del](,%副词)
## end
#403, 40:


匹配条件:...
输出模板::->%主语整体%连接(%主语,%宾语)




## end
#405, 678:
"""
Nini, "是"的解释是什么?

->+[标题](_名词1,)->+[修改内容](+[标题],+主语)...
    ->+的(_输出,+宾语)->+[标题](_名词2,)->+[修改内容](+[标题],+宾语)

"""

+匹配条件(定语,_输出)->+[del](,+匹配条件)...
->定语->的(定语,名词)->名词(,_名词1)...
    ->_名词1(_名词2,)->_名词2(,)...

->+的(_输出,+主语)->+[句子描述]"名词"(_名词1,+主语)->+名字(+主语,)...
->+的(_输出,+宾语)->+[句子描述]"名词"(_名词2,+宾语)->+名字(+宾语,)...

->+的(_输出,+连接)->[]{
    []:->[词典名词](_名词1,)->+[修改内容]"+[.]"(,+连接),
        ->[词典名词](_名词2,)->+[修改内容]"+[.]"(,+连接),
        ->[is](_名词1,临时文本#1)->临时文本#1->+[修改内容]"+[.]"(,+连接),
        ->[is](_名词2,临时文本#2)->临时文本#2->+[修改内容]"+[.]"(,+连接),
        ->+[修改内容]"的"(,+连接)
}...

->+的(_输出,+主语整体)->[]{
    []:->[==](,_名词1),
        ->+[句子描述]"名词"(_名词1,+主语整体)->+[增加内容]"->"(,+主语整体)
}






## end
#407, 19:
->%主语整体%连接(%主语,%宾语)
## end
#409, 94:
"""


"""

+N函数(_范围,_代码)->+[del](,+N函数):

    ->_范围->+[句子回答](_范围,_代码),
    ->+[句子回答](_代码,_代码)

## end
#415, 374:
"""
Nini, 打开PPT(文件)
描述结构:...
库:...
+[新建阅读窗口](,库)

"""

+距离(_目标,_起点)->+[del](,+距离)...
->的(距离,描述结构)->的(距离,库)...

->_re"[是为]"(+距离,_位移)->[]{
    []:->在(_目标,空间点)->空间点,->+的(_目标,+空间点)
}...

->+[code]([想],描述结构)->[想](,_位移)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作(,)...
    =>[说](,_操作)->的(库,_条目)->_条目->[eq](_操作,_条目)->+[做](_目标,_起点)...
        ->+[code](+[做],_条目)->+[.](+[做],_位移)
}



## end
#417, 12:

解释1:...




## end
#419, 71:


匹配条件:...
输出模板::...
->%名词->+%动词(+[做],%名词名字)...
    ->+[del](,+%动词)




## end
#421, 283:
"""
Nini, "是"的解释是什么?

"""

+匹配条件(补语,_输出)->+[del](,+匹配条件)...
->的(补语,述宾短语)...
    ->的(述宾短语,动词)->动词(,_动词)->的(述宾短语,名词)->名词(,_名词)...

->+的(_输出,+动词)->+[标题](_动词,)->+[修改内容](+[标题],+动词)...
    ->+的(_输出,+名词)->+[句子描述]"名词"(_名词,+名词)...
    ->+的(_输出,+名词名字)->+[句子描述]"名词"(_名词,+名词名字)->+名字(+名词名字,)





## end
#423, 50:
...
->%名词->+%动词(+[做],%名词名字)...
    ->+[del](,+%动词)
## end
#425, 389:
"""
P代码:...
判断条件:...


"""

+段落转换(_段落,_输出)->+[del](,+段落转换)...
->的(段落转换,P代码)->的(段落转换,判断条件):

->+[.]"sent"([python],_段落)->+[code]([python],判断条件)->[python](Python,)...
->+[句子转换](_段落,+[临时文本])...

->[]{
    []:->[==](,_输出)->+[修改内容](+[临时文本],_输出),
        ->+[增加内容]";
"(+[临时文本],_输出)
}...

->+[python](Python,_段落)->+[code](+[python],P代码)->+[s]"code"(+[python],_段落)...
->+[段落转换](_段落,_输出),

->[]




## end
#427, 101:
"""
+[P函数](,P代码)

print(ans)
code12324=code

"""
import re
ans=re.sub(r'^\s*[\.,\?\!]*\s*','',code)


## end
#429, 142:
"""


"""

try:
    ans,sent1=sent2Struct(sent)
    if sent1!=sent:
        state=True
    else:
        state=False
except:
    state=False


## end
#431, 26:


词典名词:...
词典名词操作:...





## end
#433, 158:
"""


"""

+词典名词(_条目,)->的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)...
->的(_词典,名词)->的(名词,_条目0)...
    ->[eq](_条目,_条目0)->+是(_条目,_条目0)




## end
#435, 10:

定义:...



## end
#437, 383:
"""
[eq](+[定义],定义)

"""

+定义(_线段,线段)->+[del](,+定义)...
->[]{
    []:->的(_线段,类型)->类型->+[修改内容]"线段"(,类型),
        ->+的(_线段,+类型)->+类型"线段"
}...
->[]{
    []:->的(_线段,起点)->起点,
        ->+的(_线段,+起点)->+起点"0,0"
}...
->[]{
    []:->的(_线段,终点)->终点,
        ->+的(_线段,+终点)->+终点"1,1"
}...
->[]{
    []:->的(_线段,x)->x,->+的(_线段,+x)->+x"0,1"
}...
->[]{
    []:->的(_线段,y)->y,->+的(_线段,+y)->+y"0,1"
}







## end
#439, 24:

定义:...
定义的"线段"替换为"圆形"


## end
#441, 396:
"""
[eq](+[定义],定义)

"""

+定义(_圆形,圆形)->+[del](,+定义)...
->[]{
    []:->的(_圆形,类型)->类型->+[修改内容]"圆形"(,类型),
        ->+的(_圆形,+类型)->+类型"圆形"
}...
->[]{
    []:->在(_圆形,空间点)->空间点,
        ->+在(_圆形,+空间点)->+空间点"0,0"
}...
->[]{
    []:->的(_圆形,半径)->半径,
        ->+的(_圆形,+半径)->+半径"1"
}...
->[]{
    []:->的(_圆形,x)->x,->+的(_圆形,+x)->+x"0,1"
}...
->[]{
    []:->的(_圆形,y)->y,->+的(_圆形,+y)->+y"0,1"
}->+[更新图形](,_圆形)



## end
#443, 4:
+%动词
## end
#445, 29:


定义:...
定义的"立方体"替换为"圆柱体"




## end
#447, 769:
"""
[eq](+[定义],定义)
M代码:...
Nini, 打开图形库的三维图形库(节点)
Nini, 打开三维场景(文件)

"""

+定义(_圆柱体,圆柱体)->+[del](,+定义)...
->的(定义,M代码)...

->[]{
    []:->的(_圆柱体,类型)->类型->+[修改内容]"圆柱体"(,类型),
        ->+的(_圆柱体,+类型)->+类型"圆柱体"
}...
->[]{
    []:->在(_圆柱体,空间点)->空间点,
        ->+在(_圆柱体,+空间点)->+空间点"0,0,0"
}...
->[]{
    []:->朝向(_圆柱体,方向)->方向,
        ->+朝向(_圆柱体,+方向)->+方向"0,0,0"
}...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"siz"(+[matlab],+[临时文本])->[m_text](圆柱体,+[临时文本])...

->[]{
    []:->的(_圆柱体,X)->X->+[o](+[matlab],X),
        ->+的(_圆柱体,+X)->+[o](+[matlab],+X)
}...
->[]{
    []:->的(_圆柱体,Y)->Y->+[o](+[matlab],Y),
        ->+的(_圆柱体,+Y)->+[o](+[matlab],+Y)
}...
->[]{
    []:->的(_圆柱体,Z)->Z->+[o](+[matlab],Z),
        ->+的(_圆柱体,+Z)->+[o](+[matlab],+Z)
}...

->+[显示三维图形](,_圆柱体)



## end
#449, 341:
"""
库:...
+[新建阅读窗口](,库)

"""

+更新(,_节点)->+[del](,+更新)...
->的(更新,库):

->的(_节点,表达式)->+[structure](compiler,+场景)->+[del](,+场景)...
    ->+[.]"式子"(+[structure],_节点)...
    ->的(库,更新表达式)->+[code](+[structure],更新表达式),

->的(_节点,光路)->+[做](,_节点)...
    ->的(库,更新透镜组)->+[code](+[做],更新透镜组),

->+[matlab]"hold on"(Matlab,)->+[更新图形](,_节点)->+[显示PPT图形](,_节点)

## end
#451, 34:

定义:...
赋值:...
赋值的"定义"替换为"赋值"





## end
#453, 164:
"""


"""

+定义(,方向#0)->+[del](,+定义)...
->.(_物体,方向#0)->_物体:
    ->朝向(_物体,方向#1)->+[修改内容](方向#1,方向#0),
    ->的(_物体,方向#2)->+[修改内容](方向#2,方向#0),
    ->+[修改内容]"0"(,方向#0)



## end
#455, 177:
"""


"""

+赋值(,方向#0)->+[del](,+赋值)...
->.(_物体,方向#0)->_物体:
    ->朝向(_物体,方向#1)->+[修改内容](方向#0,方向#1),
    ->的(_物体,方向#2)->+[修改内容](方向#0,方向#2),
    ->+朝向(_物体,+方向)->+[修改内容](方向#0,+方向)


## end
#457, 268:
"""
库:...
Nini, 打开三维场景(文件)

保存:...

"""

+背向(_物体,_方向)...
->的(背向,库)...

->[]{
    []:->的(_物体,X)->X(,)...
        ->的(库,三维背向)->三维背向->+[做](,+背向)->+[code](+[做],三维背向),
    ->的(_物体,x)->x(,)...
        ->的(库,二维背向)->二维背向->+[做](,+背向)->+[code](+[做],二维背向)
}...

->+[del](,+背向)



## end
#461, 541:

def fun_介宾短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,介词=fun_介词(code)
    code,宾语=fun_名词(code)
    print("!!!",code)
    介宾短语=NetP("介宾短语")
    if 宾语!=None and 介词!=None:
        介宾短语.m_db[1]=介词.m_db[1]
        介词.m_db[1].con(0,宾语.m_db[1])
        
        NetP('的').con(介宾短语,宾语)
        NetP('的').con(介宾短语,介词)
    else:
        code=code_save
        return code,None

    code,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(介词.m_db[1],0)
        NetP('的').con(介宾短语,副词)

    return code,介宾短语
## end
#465, 36:
...
    ->+%副词(+%介词,)->+[del](,+%副词)
## end
#467, 472:
"""
Nini, "是"的解释是什么?
副词模板::...
    ->+%副词(+%介词,)->+[del](,+%副词)

保存:

"""

+匹配条件(介宾短语,_输出)->+[del](,+匹配条件)...
->的(匹配条件,副词模板)...

->介宾短语(,_介词)...
    ->_介词(_动词,_宾语)->_动词->_宾语->谓语(,_动词)...
->+的(_输出,+介词)->+[标题]#0(_介词,)->+[修改内容](+[标题]#0,+介词)...
    ->+的(_输出,+宾语)->+[标题](_宾语,)->+[修改内容](+[标题],+宾语)...

->+的(_输出,+副词)...
->[]{
    []:->的(介宾短语,副词)->副词(,_副词)->+[标题](_副词,)...
        ->+[模板文本](副词模板,+副词)...
        ->+[.]"介词"(+[模板文本],+[标题]#0)->+[.]"副词"(+[模板文本],+[标题]),
    ->[]
}




## end
#469, 1072:
def fun_名词(code):
    if len(code)==0:
        return '',None
    global word_order

    pat1=r'"[^"]+"'

    # quote
    result=re.match(pat1,code)
    if result!=None:
        text=result.group()
        n=result.span()[1]
        pt=NetP('临时文本',text[1:-1])
        pt0=NetP("名词").con(0,pt)
        NetP("的").con(pt0,NetP("序号",str(word_order)))
        word_order+=1
        return code[n:],pt0

    # No other words
    for i in range(len(code)):
        n=word_in_dict(code[i:],dict_动词)+word_in_dict(code[i:],dict_助词)+word_in_dict(code[i:],dict_连词)+word_in_dict(code[i:],dict_介词)+word_in_dict(code[i:],dict_副词)+word_in_dict(code[i:],dict_标点)
        if n!=0:
            if i!=0:
                pt=NetP(code[0:i])
                pt0=NetP("名词").con(0,pt)
                NetP("的").con(pt0,NetP("序号",str(word_order)))
                word_order+=1
                return code[i:],pt0
            else:
                return code,None

    pt=NetP(code)
    pt0=NetP("名词").con(0,pt)
    NetP("的").con(pt0,NetP("序号",str(word_order)))
    word_order+=1
    return '',pt0
## end
#471, 13:

定义:...






## end
#473, 269:
"""
Nini, 打开平面测绘的句子库(节点)
将A移动到标记点
A:->在(A,空间点)->+[获取标记区域](,空间点)->+[显示PPT图形](,A),
    ->+在(A,+空间点)->+[获取标记区域](,+空间点)->+[显示PPT图形](,A)

"""

+定义(,_区域)->+[del](,+定义):
->_区域(,):
    ->点(+定义,)->+[获取标记区域](,_区域),

    ->+[获取标记区域](,+[设置n边形])->+[设置n边形](,_区域)->+[显示PPT图形](,_区域)



## end
#475, 1765:
"""
Nini, 打开图形库的原型库(节点)
Nini, 打开公式分析器的句子库(节点)
库:...
+[新建阅读窗口](,库)

保存:...

"""

+转换(_物体,_结构)->+[del](,+转换)...
->的(转换,库)...

->Matlab->_物体:

->从(+转换,线段)->为(+转换,圆形)->+[原型更新](+线段转圆形,_物体)...
    ->+[matlab]"hold on"(Matlab,)->+[更新图形](,_物体)->+[显示PPT图形](,_物体),

->[]{
    从(+转换,标记点)->标记点->为(+转换,圆形)->圆形(,)...
        ->+[调用词典名词](标记点,+[定义])->+[定义](,)...
        ->的(库,生成圆形)->生成圆形->+[做](标记点,_物体)->+[code](+[做],生成圆形)...
    ->+[matlab]"hold on"(Matlab,)->+[更新图形](,_物体)->+[显示PPT图形](,_物体)
},

->[]{
    [is](_物体,标记点)->标记点->为(+转换,圆形)->圆形(,)...
        ->+[调用词典名词](标记点,+[定义])->+[定义](,)...
        ->的(库,画圆形)->画圆形->+[做](圆形,标记点)->+[code](+[做],画圆形)
},

->[]{
    [is](_物体,标记点)->标记点->为(+转换,衍射环)->衍射环(,)...
        ->+[调用词典名词](标记点,+[定义])->+[定义](,)...
        ->的(库,画衍射环)->画衍射环->+[做](衍射环,标记点)->+[code](+[做],画衍射环)
},

->[]{
    [is](_物体,标记点)->标记点->为(+转换,变量)->变量(,)...
        ->+[调用词典名词](标记点,+[定义])->+[定义](,)...
        ->的(库,设置变量)->设置变量->+[做](标记点,变量)->+[code](+[做],设置变量)
},

->[]{
    按照(+转换,临时文本)->临时文本->为(+转换,_输出)->_输出->的(_结构,eof)...
        ->+[做](_结构,_输出)->+[.](+[做],临时文本)...
        ->的(库,代码结构变换)->+[code](+[做],代码结构变换)
},

->为(+转换,临时文本)->的(_物体,表达式)->[]{
    []:->[==]"LaTeX"(,临时文本)->+[复制内容](,_物体),
    ->+[做](_物体,+[临时文本])->+[.](+[做],临时文本)...
        ->的(库,公式结构变换)->+[code](+[做],公式结构变换)
},

->为(+转换,Javascript)->[]{
    +[临时文本]:
        ->[词典名词](_物体,)->是(_物体,_名词)->_名词->的(_名词,匹配)...
            ->+[code]([想],匹配)->[想](,_物体)->是([想],块#0)...
        ->然后(块#0,块#01)->+[右连](然后,)...
            ->+[结构转JS代码]"程序"(,+[做]#0)->+[做]#0(块#0,+[临时文本])...
            ->+[移除注释](+[临时文本],+[临时文本])->+[复制内容](,+[临时文本])...
        ->+[右连](然后,块#01),
    
        ->的(_物体,起点)->起点(,块)...
            ->+[结构转JS代码]"程序"(,+[做])->+[做](块,+[临时文本])...
            ->+[移除注释](+[临时文本],+[临时文本])->+[复制内容](,+[临时文本])
}



## end
#477, 1699:
"""
库:...
+[新建阅读窗口](,库)
+[设置结构](,库)

测试:...
保存:...
(删掉了调用词典专有名词的部分, 专有名词移植到Nini的名词库中了)

"""

+显示(,_文件)->+[del](,+显示)...
->+[临时文本]->的(显示,库):

->[is](_文件,标记点)->为(+显示,_图形)->+[做](+显示,标记点)...
    ->+[code](+[做],画标记点)->的(库,画标记点)->画标记点(,)...
    ->[m_name](+[临时文本],+[del])->+[del]#2(,+显示),

->[is](_文件,光谱)->.(_光谱,光谱)->+[做](,_光谱)...
    ->+[code](+[做],画光谱)->的(库,画光谱)->画光谱,

->[is](_文件,波包)->.(_波包,波包)->+[做](,_波包)...
    ->+[code](+[做],画波包)->的(库,画波包)->画波包,

->[is](_文件,FROG)->.(_FROG,FROG)->+[做](+显示,_FROG)...
    ->+[code](+[做],画FROG)->的(库,画FROG)->画FROG(,)...
    ->[m_name](+[临时文本],+[del])->+[del]#1(,+显示),

->[is](_文件,二维函数)->.(_二维函数,二维函数)->+[做](,_二维函数)...
    ->+[code](+[做],画二维函数)->的(库,画二维函数)->画二维函数,

->[is](_文件,截面分布)->.(_函数分布,截面分布)->+[做](,_函数分布)...
    ->+[code](+[做],画函数分布)->的(库,画函数分布)->画函数分布,

->[is](_文件,光束传播图)->.(_透镜组,光束传播图)->+[做](,_透镜组)...
    ->+[code](+[做],画光束传播图)->的(库,画光束传播图)->画光束传播图,

->[is](_文件,IP图像)->.(_IP,IP图像)->+[做](+显示,_IP)...
    ->+[code](+[做],画IP图像)->的(库,画IP图像)->画IP图像(,)...
    ->[m_name](+[临时文本],+[del])->+[del]#2(,+显示),

->在(+显示,_图形#js)->为(+显示,程序流程图)->+[做](_文件,_图形#js)...
    ->+[code](+[做],画流程图)->的(库,画流程图)->画流程图,

->为(+显示,公式)->+[做](,_文件)...
    ->+[code](+[做],显示公式)->的(库,显示公式)->显示公式,

->为(+显示,_类型0)->的(库,_类型)->[eq](_类型0,_类型)...
    ->+[做](+显示,_文件)->+[code](+[做],_类型),

->+[做](,_文件)->的(库,_类型2)->[eq](_文件,_类型2)...
    ->+[code](+[做],_类型2),

->的(_文件,x)->+[matlab]"hold on"(Matlab,)->+[显示PPT图形](,_文件),

->的(_文件,地址)->+[做](,地址)...
    ->+[code](+[做],显示图片)->的(库,显示图片)->显示图片,

->[is](_文件,地址#1)->[]{
    +[显示文件图像](,_文件):
        ->在(+显示,_区域)->_区域->+在(+[显示文件图像],_区域)->+[del](,+在),
    ->[]
},

->的(_文件,表达式)->+[做](,_文件)...
    ->+[code](+[做],显示公式#1)->的(库,显示公式#1)->显示公式#1,

->+[消息窗口](,_文件)


## end
#479, 524:
"""
保存:...

库:...


"""


+移动(_物体,_物体2)->+[del](,+移动)...
->的(移动,库):
    ->_物体2->[]{
        [is](_物体2,光标)->光标->到(+移动,_位置)->_位置->在(+移动,_范围)->_范围(,)...
            ->的(库,移动光标)->移动光标(,)...
        ->+[做](_范围,_位置)->+[code](+[做],移动光标)},

->_物体->[]{
    []->在(_物体,空间点)->空间点->到(+移动,_位置)->_位置(,)...
        ->[词典名词](+坐标,)->是(+坐标,_名词)...
            ->的(_名词,定义)...
            ->+[做](,+坐标)->+点(+[做],)->+[del](,+点)->+[code](+[做],定义)...
            ->+[.](_位置,+坐标)...
        ->+[修改内容](+坐标,空间点)->+[del](,+坐标)->+[显示PPT图形](,_物体)
};






## end
#483, 332:
"""
库:...

"""

+添加(,_词语)->+[del](,+添加)...
->的(添加,库)...
->的(库,添加标记点)->的(库,添加曲线)...

->[]:
->[]{
    到(+添加,_内容)->_内容(,)...
        ->的(库,添加内容)->添加内容->+[做](_词语,_内容)->+[code](+[做],添加内容)
},

->在(+添加,屏幕)->屏幕->[]{
    []:->[is](_词语,曲线)->曲线->+[做](屏幕,曲线)->+[code](+[做],添加曲线),
    ->[is](_词语,标记点)->标记点->+[做](屏幕,标记点)->+[code](+[做],添加标记点)
}



## end
#489, 28:


定义:...
定义的"坐标#0"替换为"_坐标"


## end
#491, 461:
"""


"""

+定义(,_坐标)->+[del](,+定义)...
->.(_物体,_坐标)->_物体:
    ->在(_物体,空间点#1)->+[修改内容](空间点#1,_坐标),
    ->的(_物体,坐标#2)->+[修改内容](坐标#2,_坐标),

->[]{
    [is](_物体,标记点)->标记点(,)...
        ->[词典名词](_物体,)->是(_物体,_名词)...
        ->_名词->的(_名词,定义)...
        ->+[修改内容](标记点,_坐标)...
        ->+[做](,_坐标)->+[code](+[做],定义)
},

    ->[is](_物体,标记区域)...
        ->[词典名词](_物体,)->是(_物体,_名词)...
        ->的(_名词,定义)...
        ->+[做](,_坐标)->+点(+[做],)->+[del](,+点)->+[code](+[做],定义)




## end
#493, 12:

定义:...





## end
#495, 276:
"""
M代码:...

"""

+定义(,X坐标)->+[del](,+定义)...
->的(定义#0,M代码)...

->[词典名词](+坐标,)->是(+坐标,_名词)...
    ->的(_名词,定义)...
    ->+[做](,X坐标)->+点(+[做],)->+[del](,+点)->+[code](+[做],定义)...
->+[del](,+坐标)...

->+[matlab](Matlab,X坐标)->+[code](+[matlab],M代码)...
->+[.]"pt"(+[matlab],X坐标)







## end
#497, 42:

定义:...
定义的"X坐标"替换为"Y坐标"
+[新建阅读窗口](,定义)



## end
#499, 276:
"""
M代码:...

"""

+定义(,Y坐标)->+[del](,+定义)...
->的(定义#0,M代码)...

->[词典名词](+坐标,)->是(+坐标,_名词)...
    ->的(_名词,定义)...
    ->+[做](,Y坐标)->+点(+[做],)->+[del](,+点)->+[code](+[做],定义)...
->+[del](,+坐标)...

->+[matlab](Matlab,Y坐标)->+[code](+[matlab],M代码)...
->+[.]"pt"(+[matlab],Y坐标)







## end
#501, 248:
"""


"""

+解析(,_代码)->+[del](,+解析)...

->_re"到|为"(+解析,_目标结构)...

->[python程序_代码](_代码,)...
    ->+[修改内容](,_目标结构)->[m_text]([python程序_代码],+[修改内容])...

->[]{
    []=>的(_目标结构,_节点)->_节点=>+[del](,_节点)
}...
    ->+[修改内容](_目标结构,+[导入节点])->+[导入节点](,_目标结构)



## end
#505, 285:
"""
Nini, 打开图形库的原型库(节点)

"""

+查看(,_物体)->+[del](,+查看):

->[]:
    ->[词典名词](_物体,)->是(_物体,_名词)->的(_名词,匹配)...
        ->+[code]([想],匹配)->[想](,_物体)->是([想],块#0)...
    ->_re"func|class"(块#0,块#1)...
        ->+[列举函数](块#1,+[消息窗口]#0),

    ->的(_物体,起点)->起点(,块)...
        ->+[列举函数](块,+[消息窗口])


## end
#509, 11:

匹配:...




## end
#511, 207:
"""
P代码:...

"""

+匹配(,类)->.(_范围,类)...
->的(匹配,P代码)...

->的(_范围,class)->class(块,)->+是(+匹配,块)...
    ->+[code]([python],P代码)->+[.]"name1"([python],class)->+[.]"name2"([python],类)...
    ->[python](Python,)




## end
#513, 101:
"""


"""

state=False
try:
    if name2==name1[0:len(name2)]:
        state=True
except:
    pass



## end
#515, 19:


匹配:...
定义:...




## end
#517, 207:
"""
P代码:...

"""

+匹配(,函数)->.(_范围,函数)...
->的(匹配,P代码)...

->的(_范围,func)->func(块,)->+是(+匹配,块)...
    ->+[code]([python],P代码)->+[.]"name1"([python],func)->+[.]"name2"([python],函数)...
    ->[python](Python,)




## end
#519, 101:
"""


"""

state=False
try:
    if name2==name1[0:len(name2)]:
        state=True
except:
    pass



## end
#521, 108:
"""


"""

+引用(_函数1,_函数2)->+[del](,+引用):
    ->引用(_函数1,_函数2)->[]{[]=>[is](+引用,引用)},
    ->+引用#2(_函数1,_函数2)


## end
#523, 62:

添加内容:...
添加标记点:...
添加曲线:...
+[新建阅读窗口](,添加标记点)
+[复制结构](,添加标记点)
## end
#525, 248:
"""


"""

+添加内容(_词语,_内容)->+[del](,+添加内容)...

->[]{
    []:->[词典名词](_词语,)->是(_词语,_名词)...
        ->的(_名词,定义)...
        ->+[做](,_词语)->+点(+[做],)->+[del](,+点)->+[code](+[做],定义),
    ->[]
}:

->[==](,_内容)->+[增加内容](_词语,_内容),
->+[增加内容]", "(_词语,_内容)





## end
#527, 350:
"""
M代码:...
M代码_曲线:...
M代码_折线:...
+[新建阅读窗口](,M代码)
将条目"M代码_曲线"复制为条目"M代码_折线"

"""

+添加标记点(屏幕,标记点)->+[del](,+添加标记点)...
->的(添加标记点,M代码)...
->的(添加标记点,M代码_曲线)->的(添加标记点,M代码_折线)...

->+[matlab](Matlab,)->+[.]"f_n"(+[matlab],屏幕)...
->[]{
    []:->折线(标记点,)->+[code](+[matlab],M代码_折线),
    ->曲线(标记点,)->+[code](+[matlab],M代码_曲线),
    ->+[code](+[matlab],M代码)
}



## end
#529, 667:
%{
+[M函数](,M代码)

addRefPt(M函数):...
记住"Matlab"

ts=text([1,2,3],[0,0,0],{'1','2','3'})
ts(end+1)=text(0,10,'23')
delete(refPts)
delete(refTexts)
refTexts=[];

测试颜色:...
get(refTexts(1))
refPts
%}


addpath('Matlab/photo');
figure(f_n);

global refPts;
global refTexts;

if isempty(refPts) || ~isvalid(refPts)
    hold on
    refPts=plot(nan,nan,'o');
    set(refPts,'MarkerEdgeColor','k');
    set(refPts,'MarkerFaceColor','w');
end
if isempty(refTexts) || ~sum(isvalid(refTexts))
    hold on
    refTexts=text(nan,nan,'nan');
end


% set(gcf,'WindowButtonDownFcn',@(h,e)0);
set(gcf,'WindowButtonDownFcn',@addRefPt);
% set(gcf,'WindowButtonMotionFcn',@getRefPlane);




## end
#531, 944:
%{
地址::Matlab\photo\addRefPt.m
+[保存M函数](,addRefPt)
参考::https://undocumentedmatlab.com/blog_old/figure-keypress-modifiers
+[打开网页](,参考)

保存:...
%}

function addRefPt(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');

    if strcmp(cType,'alt')
        global refPts;
        global refTexts;
        x=get(refPts,'XData');
        y=get(refPts,'YData');

        if isnan(x(1))
            x(1)=pt(1,1);
            refTexts(1).Position=[pt(1,1),pt(1,2),0];
            refTexts(1).String='1';
        else
            x(end+1)=pt(1,1);
            refTexts(end+1)=text(pt(1,1),pt(1,2),sprintf('%d',length(x)));
            set(refTexts(end),'Color','k');
            %set(refTexts(end),'BackgroundColor','w');
        end
        
        if isnan(y(1))
            y(1)=pt(1,2);
        else
            y(end+1)=pt(1,2);
        end

        set(refPts,'XData',x);
        set(refPts,'YData',y);
    end

end


## end
#534, 23:
Matlab\photo\addRefPt.m
## end
#540, 136:
"""
库:...

"""

+定义(,_坐标)->+[del](,+定义)...
->的(定义,库):

->[]{
    的(库,获取坐标)->获取坐标(,)...
        ->+[做](,_坐标)->+[code](+[做],获取坐标)
}







## end
#542, 252:
"""
库:...

"""

+修改(,_物体)->+[del](,+修改)...
->的(修改,库):

->[]{
    [is](_物体,标记区域)->标记区域(,)...
        ->的(库,修改标记区域)->修改标记区域->+[做]->+[code](+[做],修改标记区域)
},

->[]{
    [is](_物体,标记点)->标记点(,)...
        ->的(库,修改标记点)->修改标记点->+[做](,标记点)->+[code](+[做],修改标记点)
}

## end
#544, 57:
+[修改天使]

修改标记区域:...
修改标记点:...
修改标记点的"修改标记区域"替换为"修改标记点"



## end
#546, 133:
"""
M代码(M函数):...
+[新建阅读窗口](,M代码)

"""

+修改标记区域->+[del](,+修改标记区域)...
->的(修改标记区域,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)

## end
#548, 196:
%{
+[M函数](,M代码)

modRefPts(M函数):...
%}


addpath('Matlab\photo');

global refPts;
global refTexts;

if isempty(refPts) || ~isvalid(refPts)
else
set(gcf,'WindowButtonDownFcn',@modRefPts);
end






## end
#551, 670:
%{
地址::Matlab\photo\modRefPts.m
+[保存M函数](,modRefPts)
参考::https://undocumentedmatlab.com/blog_old/figure-keypress-modifiers
+[打开网页](,参考)
%}

function modRefPts(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');
    if strcmp(cType,'alt')
        global refPts;
        global refTexts;
        x=get(refPts,'XData');
        y=get(refPts,'YData');

        r=sqrt((x-pt(1,1)).^2+(y-pt(1,2)).^2);
        ri=find(r==min(r));
        x(ri(1))=pt(1,1);
        y(ri(1))=pt(1,2);
        refTexts(ri(1)).Position=[pt(1,1),pt(1,2),0];

        set(refPts,'XData',x);
        set(refPts,'YData',y);
    end

    clipboard('copy', [x';y']);
end


## end
#554, 24:
Matlab\photo\modRefPts.m
## end
#561, 359:
"""
M代码(M函数):...
M代码_曲线:...
M代码_折线:...
将条目"M代码"复制为条目"M代码_折线"

+[新建阅读窗口](,M代码)
+[修改天使]

"""

+修改标记点(,标记点)->+[del](,+修改标记点)...
->的(修改标记点,M代码_曲线)->的(修改标记点,M代码_折线)...
->的(修改标记点,M代码)...

->+[matlab](Matlab,)->+[.]"n"(+[matlab],标记点)...
->[]{
    []:->折线(标记点,)->+[code](+[matlab],M代码_折线),
    ->曲线(标记点,)->+[code](+[matlab],M代码_曲线),
    ->+[code](+[matlab],M代码)
}




## end
#563, 337:
%{
+[M函数](,M代码_曲线)

modRefPt_curve(M函数):...
+[新建阅读窗口](,modRefPt)
将modRefPt的"modRefPt"替换为"modRefPt_curve"
+[修改标题]"modRefPt_curve"(,modRefPt)

%}


addpath('Matlab\photo');

global refPts;
global refTexts;

if isempty(refPts) || ~isvalid(refPts)
else
f=@(h,e)modRefPt_curve(h,e,n);
set(gcf,'WindowButtonDownFcn',f);
end

%modRefPt(1,1)




## end
#566, 916:
%{
地址::Matlab\photo\modRefPt_curve.m
+[保存M函数](,modRefPt_curve)
参考::https://undocumentedmatlab.com/blog_old/figure-keypress-modifiers
+[打开网页](,参考)
%}

function modRefPt_curve(hObject,e,n)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');
    if strcmp(cType,'alt')
        global refPts;
        global refTexts;
        global refCurve;
        x=get(refPts,'XData');
        y=get(refPts,'YData');

        ri=n;
        x(ri(1))=pt(1,1);
        y(ri(1))=pt(1,2);
        refTexts(ri(1)).Position=[pt(1,1),pt(1,2),0];

        set(refPts,'XData',x);
        set(refPts,'YData',y);

        if length(x)>2
            t=1:length(x);
            ts=linspace(1,length(x),100);
            xs=interp1(t,x,ts,'spline');
            ys=interp1(t,y,ts,'spline');
            set(refCurve,'XData',xs);
            set(refCurve,'YData',ys);
        end
    end

%     clipboard('copy', [x';y']);
end


## end
#569, 29:
Matlab\photo\modRefPt_curve.m
## end
#574, 35:


获取坐标:...
获取坐标的"修改标记点"替换为"获取坐标"



## end
#576, 165:
"""
M代码(M函数):...
+[新建阅读窗口](,M代码)

"""

+获取坐标(,_位置)->+[del](,+获取坐标)...
->的(获取坐标,M代码)...

->+[matlab](Matlab,_位置)->+[code](+[matlab],M代码)...
->+[.]"n0"(+[matlab],_位置)

## end
#578, 191:
%{
记住"Matlab"
+[M函数](,M代码)
%}

global refPts;

x=get(refPts,'XData');
y=get(refPts,'YData');

if isempty(n0)
ans=[x;y];
elseif length(n0)==1
ans=[x(n0),y(n0)];
else
ans=[x(n0);y(n0)];
end




## end
#581, 23:
记住标记点(节点)

定义:...






## end
#584, 67:
%{

%}

pt
if size(pt,1)>1
    ans=pt(1,:)
else
    ans=pt(1);
end

## end
#586, 67:
%{

%}

pt
if size(pt,1)>1
    ans=pt(2,:)
else
    ans=pt(2);
end

## end
#588, 248:
"""

保存:...

"""

+移动(_物体,_位移)->+[del](,+移动)...
->在(_物体,空间点)->空间点:
    ->_位移,

    ->到(+移动,_位置)->_位置->[词典名词](_位置,)->是(_位置,_名词)...
        ->的(_名词,定义)...
        ->+[做](,_位置)->+点(+[做],)->+[del](,+点)->+[code](+[做],定义)...
        ->+[修改内容](_位置,空间点)



## end
#592, 316:
X坐标

画光谱:...
画波包:...
画函数分布:...
画二维函数:...
画FROG:...
画IP图像:...
函数:...
将条目"画函数分布"复制为条目"函数"
画FROG的"波包"替换为"FROG"

显示公式:...

画标记点:...
将条目"画光谱"复制为条目"画标记点"

画流程图:...
画光束传播图:...
成像示意图:...
光束传播图:...
将条目"画光束传播图"复制为条目"光束传播图"
画函数分布的"波包"替换为"函数分布"

显示图片:...
图片:...
X投影图:...
Y投影图:...
将条目"X投影图"复制为条目"Y投影图"

网格:...

等高线图:...

颜色:...


## end
#594, 306:
"""


"""

+画流程图(_程序结构,_图形)->+[del](,+画流程图)...
->+[删除场景结构](,_图形):

->[词典名词](_程序结构,)->是(_程序结构,_名词)->的(_名词,匹配)...
    ->+[code]([想],匹配)->[想](,_程序结构)->是([想],块#0)...
        ->_re"func|class"(块#0,块#1)...
    ->+[生成程序结构](块#1,_图形)->+[显示PPT场景](,_图形),

->的(_程序结构,起点)->起点(,块)->+[生成程序结构](块,_图形)->+[显示PPT场景](,_图形)




## end
#596, 328:
"""
库:...
+[新建阅读窗口](,库)

保存:...

"""

+替换(,_原文)->+[del](,+替换)...
->的(替换,库)...
->的(库,re替换)->的(库,re替换2)...

->[]{
    [is](_原文,临时文本)->为(+替换,_更新)->_更新(,)...
        ->+[做](_更新,_原文)->.(_文本,临时文本)->_文本->+[del](,.)...
        ->+[.](+[做],_文本):
            ->在(+替换,选择区域)->选择区域->+[code](+[做],re替换2),
            ->+[code](+[做],re替换)
}



## end
#598, 66:
Nini, 打开句子结构的结构场景(节点)

re替换:...
re替换2:...
将条目"re替换"复制为条目"re替换2"



## end
#600, 513:
"""
Nini, 打开动作(库)

P代码(P函数):...

re替换2->m_readPtr(,re替换2)->的(_编辑器,m_readPtr)...
->的(_编辑器,m_cursor)->+[显示](,m_cursor)

"""

+re替换2(_更新,_原文)->+[del](,+re替换2)...
->的(re替换2,P代码)...

->.(+re替换2,_节点)...
->m_readPtr(,_节点)->的(_编辑器,m_readPtr)->的(_编辑器,m_cursor)...

->+[python](Python,_节点)->+[code](+[python],P代码)...
->+[s]"sent0"(+[python],_节点)->+[o]"c_i"(+[python],m_cursor)...
->+[s]"code"(+[python],_更新)->+[s]"pat0"(+[python],_原文)...

->+[设置光标](_编辑器,m_cursor)...
=>m_readPtr(,_节点)->的(_b,m_readPtr)...
=>+[更新文本](_b,)




## end
#602, 794:
"""
+[P函数](,P代码)
记住"Python"
+[python]"print(str0)"(Python,)
+[python]"print(str1)"(Python,)
print(str0)
print(pat0)
print(sent0)
print(sent)
print(code)

"""
import re

s_i=int(c_i[0])
e_i=int(c_i[1])
sent=sent0[s_i:e_i]
try:
    words=re.findall('%(\[[^\[^\]]*\])',pat0)
    pat1=re.sub('%\[段落[^\[^\]]*\]',r'([\\w\\W]+)',pat0)
    pat2=re.sub('%\[句子[^\[^\]]*\]',r'(.+)',pat1)
    pat=re.sub('%\[[^\[^\]]*\]',r'([\\w\\d_.\-/+]+)',pat2)
    
    name=re.search(pat,sent)
    str0=pat0
    str1=code
    for i in range(len(words)):
        str0=str0.replace('%'+words[i],name.group(i+1))
        str1=str1.replace('%'+words[i],name.group(i+1))
    
    sent=re.sub(str0,str1,sent)

except:
    print('Error in replace!')
    sent=sent

c_i=[s_i,s_i+len(sent)]
ans=sent0[0:s_i]+sent+sent0[e_i:]



## end
#605, 10:

定义:...



## end
#607, 419:
"""
P代码(P函数):...
生成透镜:...

"""

+定义(_透镜组,透镜组)->+[del](,+定义)...
->的(定义,P代码)->的(定义,生成透镜):

->的(_透镜组,光路)->的(_透镜组,光线)...
->的(光线,路径)->路径(,光路),

->+的(_透镜组,+光路)->+的(_透镜组,+光线)...
->+的(+光线,+路径)->+路径(,+光路)...
->+的(+光线,+初始焦点)->+初始焦点"inf"->+的(+光线,+初始直径)->+初始直径"10"...

->+[python](Python,生成透镜)->+[code](+[python],P代码)...
->+[.]"n0"(+[python],透镜组)...
->+[做](_透镜组,+光路)->+[code](+[做],生成透镜)...

->+[光束传播](+光线,)->+[显示PPT场景](,_透镜组)






## end
#609, 824:
"""
+[P函数](,P代码)
->+的(光路,+L1)->+的(_透镜组,+L1)->+的(L1,+焦距)

Nini, 打开图形库的句子库(节点)
Nini, 导入透镜设计的库

"""
n=int(n0[0])

code="""
+生成透镜(_透镜组,光路)->+[del](,+生成透镜)...
->+的(光路,+入口)->+的(_透镜组,+入口)->+样式(+入口,)...
->+在(+入口,+空间点)->+空间点"0,0"->+的(+入口,+x#in)->+的(+入口,+y#in)...
->+[更新图形]"20"(+平面,+入口)...
{0}
->+的(光路,+出口)->+的(_透镜组,+出口)->+样式(+出口,)...
->+在(+出口,+空间点#out)->+空间点#out"{1}*150+100,0"->+的(+出口,+x#out)->+的(+出口,+y#out)...
->+[更新图形]"20"(+平面,+出口)->+[del](,+平面)...

->的(_透镜组,光线)->+出发(光线,+入口)
"""

pat_len="""
->+的(光路,+L{0})->+的(_透镜组,+L{0})->+样式(+L{0},)...
->+的(+L{0},+焦距#{0})->+焦距#{0}\"100\"...
->+在(+L{0},+空间点#{0})->+空间点#{0}"{0}*150+100,0"...
->+的(+L{0},+x#{0})->+的(+L{0},+y#{0})...
->+[更新图形]"5,20"(+透镜#{0},+L{0})->+[del](,+透镜#{0})...
"""

code_len=""
for i in range(n):
    code_len+=pat_len.format(i)
ans=code.format(code_len,n)
print(ans)



## end
#612, 731:

+生成透镜(_透镜组,光路)->+[del](,+生成透镜)...
->+的(光路,+入口)->+的(_透镜组,+入口)->+样式(+入口,)...
->+在(+入口,+空间点)->+空间点"0,0"->+的(+入口,+x#in)->+的(+入口,+y#in)...
->+[更新图形]"20"(+平面,+入口)...

->+的(光路,+L0)->+的(_透镜组,+L0)->+样式(+L0,)...
->+的(+L0,+焦距#0)->+焦距#0"100"...
->+在(+L0,+空间点#0)->+空间点#0"0*150+100,0"...
->+的(+L0,+x#0)->+的(+L0,+y#0)...
->+[更新图形]"5,20"(+透镜#0,+L0)->+[del](,+透镜#0)...

->+的(光路,+L1)->+的(_透镜组,+L1)->+样式(+L1,)...
->+的(+L1,+焦距#1)->+焦距#1"100"...
->+在(+L1,+空间点#1)->+空间点#1"1*150+100,0"...
->+的(+L1,+x#1)->+的(+L1,+y#1)...
->+[更新图形]"5,20"(+透镜#1,+L1)->+[del](,+透镜#1)...

->+的(光路,+出口)->+的(_透镜组,+出口)->+样式(+出口,)...
->+在(+出口,+空间点#out)->+空间点#out"2*150+100,0"->+的(+出口,+x#out)->+的(+出口,+y#out)...
->+[更新图形]"20"(+平面,+出口)->+[del](,+平面)...

->的(_透镜组,光线)->+出发(光线,+入口)

## end
#617, 428:
"""
Nini, 导入透镜设计的库

"""

+成像示意图(,成像示意图)->+[del](,+成像示意图)...

->.(_透镜组,成像示意图)...
->[]{
    []:->的(_透镜组,示意图)->示意图,
        ->+的(_透镜组,+示意图)
}...
->的(_透镜组,光路)->的(_透镜组,示意图)...
    ->的(_透镜组,像)->像(,_像)->的(_透镜组,物)->物(,_物)...

->[]{
    []:->的(示意图,路径)->路径,->+的(示意图,+路径)->+路径(,光路)
}...
->[]{
    []:->的(示意图,物#1)->物#1,->+的(示意图,+物)->+物(,_物)
}...
->[]{
    []:->的(示意图,像#1)->像#1,->+的(示意图,+像)->+像(,_像)
}...

->+[光束传播](示意图,)->+[显示PPT图形](,示意图)


## end
#619, 14:


定义:...






## end
#625, 298:
"""
库:...

"""

+定义(_光谱,光谱)->+[del](,+定义)...
->的(定义,库)...

->[]{[]:->的(_光谱,波长)->波长,->+的(_光谱,+波长)}...
->[]{[]:->的(_光谱,相位)->相位,->+的(_光谱,+相位)}...
->[]{[]:->的(_光谱,光强)->光强,->+的(_光谱,+光强)}...

->[]:->[==](,_光谱),
    ->.(_类型,光谱)->的(库,_光谱类型)->[eq](_光谱类型,_类型)...
        ->+[做](,_光谱)->+[code](+[做],_光谱类型)




## end
#627, 43:

可见光:...
红外线:...
反演:...
反演的"红外线"替换为"反演"




## end
#629, 297:
"""
M代码:...
Nini, 打开iFAST日志2的read_vis(节点)

"""

+可见光(,_光谱)->+[del](,+可见光)...
->的(可见光,M代码)...

->的(_光谱,波长)->的(_光谱,光强)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],+[临时文本])->[m_text](_光谱,+[临时文本])...
->+[o]"wavelength"(+[matlab],波长)->+[o]"intensity"(+[matlab],光强)



## end
#631, 297:
"""
M代码:...
Nini, 打开iFAST日志2的read_MIR(节点)

"""

+红外线(,_光谱)->+[del](,+红外线)...
->的(红外线,M代码)...

->的(_光谱,波长)->的(_光谱,光强)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],+[临时文本])->[m_text](_光谱,+[临时文本])...
->+[o]"wavelength"(+[matlab],波长)->+[o]"intensity"(+[matlab],光强)



## end
#633, 268:
%{

%}

data=fileread(file_name);
expr='Model Number:(.*)Firmware Version:(.*)Serial Number:(.*)Exposure Time:(.*)Data Taken on:([0-9 /:.]*)(.*)';
tokens=regexp(data,expr,'tokens');
spectrum=str2num(tokens{1}{6});

wavelength=spectrum(:,1);
intensity=spectrum(:,2);



## end
#635, 239:
"""
M代码:...
库:...

"""

+画标记点(显示,标记点)->+[del](,+画标记点)...
->的(画标记点,库)...

->+[matlab](Matlab,)->+[.]"i"(+[matlab],标记点):
    ->为(显示,_图形)->的(库,_M代码)->[eq](_M代码,_图形)...
        ->+[code](+[matlab],_M代码),
    ->的(库,多边形)->+[code](+[matlab],多边形)

## end
#637, 174:
%{
记住"Matlab"
记住"自然语言"
+[M函数](,M代码)
Nini, 打开平面测绘(文件)
修改标记点"7"
%}

x=get(refPts,'XData');
y=get(refPts,'YData');

delete(refPts);

refPts=patch(x,y,[1,1,0],'FaceAlpha',0.5);


## end
#639, 100:
%{

%}

data=readmatrix(file_name,'FileType','text');

wavelength=data(:,1);
intensity=data(:,2);



## end
#643, 33:

赋值_del:...
+[修改标题]"赋值_del"(,赋值)

## end
#647, 381:
"""
库:...

"""

+定义(_性质,函数)->+[del](,+定义)...
->的(定义,库):

->[]{
    [is](_性质,光强)->光强->.(_光谱,光强)->的(库,设置光强)->设置光强(,)...
        ->+[做](_光谱,函数)->+[code](+[做],设置光强)
},

->[]{
    [is](_性质,相位)->相位->.(_光谱,相位)->的(库,设置相位)->设置相位(,)...
        ->+[做](_光谱,函数)->+[code](+[做],设置相位)
},

->[]{
    [is](_性质,场强)->场强->.(_波包,场强)->的(库,设置场强)->设置场强(,)...
        ->+[做](_波包,函数)->+[code](+[做],设置场强)
}



## end
#649, 96:


设置光强:...
设置相位:...
设置场强:...
设置场强的"光强"替换为"场强"
+[复制结构](,设置光强)->+[粘贴](,库)->+[修改标题]"设置场强"(,设置光强)



## end
#651, 170:
"""


"""

+设置相位(_光谱,函数)->+[del](,+设置相位)...

->的(_光谱,相位)->的(_光谱,波长)...
->+[matlab](Matlab,)->+[code](+[matlab],函数)...
->+[.]"lm"(+[matlab],波长)->+[o]"phi"(+[matlab],相位)



## end
#653, 14:


定义:...






## end
#655, 174:
"""
M模板:...
保存:...

"""
+定义(_性质,采样点)->+[del](,+定义)...
->的(定义,M模板)->的(定义,保存)...

->+[模板文本](M模板,保存)->+[.]"采样点"(+[模板文本],采样点)...
->+[matlab](Matlab,_性质)->+[code](+[matlab],保存)



## end
#657, 19:
ans=linspace(%采样点);
## end
#659, 30:
ans=linspace(-1e-2,1e-2,1000);
## end
#661, 80:
"""


"""

+赋值(,_性质)->+[del](,+赋值)...

->.(_主体,_性质)->的(_主体,波长)->+[修改内容](_性质,波长)

## end
#662, 167:
"""


"""

+设置场强(_波包,函数)->+[del](,+设置场强)...

->的(_波包,场强)->的(_波包,延时)...
->+[matlab](Matlab,)->+[code](+[matlab],函数)...
->+[.]"t"(+[matlab],延时)->+[o]"E"(+[matlab],场强)



## end
#664, 168:
"""


"""

+设置光强(_光谱,函数)->+[del](,+设置光强)...

->的(_光谱,光强)->的(_光谱,波长)...
->+[matlab](Matlab,)->+[code](+[matlab],函数)...
->+[.]"lm"(+[matlab],波长)->+[o]"I"(+[matlab],光强)



## end
#667, 25:

定义:...
定义的"相位"替换为"场强"



## end
#669, 192:
"""
库:...

"""

+定义(_波包,波包)->+[del](,+定义)...

->[]{[]:->的(_波包,延时)->延时,->+的(_波包,+延时)}...
->[]{[]:->的(_波包,场强)->场强,->+的(_波包,+场强)}...
->[]{[]:->的(_波包,中心波长)->中心波长,->+的(_波包,+中心波长)->+中心波长"800"}






## end
#673, 331:
"""
M代码:...
+[matlab]"clf"(Matlab,)

"""

+画波包(,_波包)->+[del](,+画波包)...
->的(画波包,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码):

->的(_波包,延时)->的(_波包,场强)...
    ->+[.]"t"(+[matlab],延时)->+[.]"E"(+[matlab],场强),

->的(_波包,波包)->波包(,_波包0)...
    ->的(_波包0,延时#0)->的(_波包0,场强#0)...
    ->+[.]"t"(+[matlab],延时#0)->+[.]"E"(+[matlab],场强#0)

## end
#675, 204:
%{

%}

clf
subplot(1,2,1)
plot(t/1e-15,real(E),t/1e-15,abs(E),t/1e-15,-abs(E));
xlabel('Delay [fs]')
ylabel('E [a.u.]')

subplot(1,2,2)
plot(t/1e-15,abs(E).^2);
xlabel('Delay [fs]')
ylabel('E [a.u.]')



## end
#679, 14:


移动光标:...




## end
#681, 325:
"""
P代码:...

"""

+移动光标(_范围节点,_位置)->+[del](,+移动光标)...
->的(移动光标,P代码)...

=>m_readPtr(,_范围节点)->的(_编辑器,m_readPtr)->的(_编辑器,m_cursor)...
    =>+[python](Python,m_cursor)->+[code](+[python],P代码)...
    ->+[.]"text"(+[python],_范围节点)->+[.]"target_txt"(+[python],_位置)...
    ->+[.]"n"(+[python],m_cursor)...
->+[设置光标](_编辑器,m_cursor)


## end
#683, 161:
"""


"""

n_s=int(n[0])
n_e=int(n[1])

str0=target_txt

n_s1=text.find(str0,n_s+1)
if n_s1==-1:
    n_s1=text.find(str0)

ans=[n_s1,n_s1+len(str0)]
print(ans)


## end
#685, 260:
"""
Nini, 打开动作(库)


"""

+%[标题](_主语,_宾语)->+[del](,+%[标题])...
->记忆->正在读取(记忆,_节点)...

->+%[标题]#0(_主语,_宾语)->+的(_节点,+%[标题]#0):
    ->然后(+%[标题],)->+然后(+%[标题]#0,)->+的(_节点,+然后)->+[右连](然后,+然后),
    ->之后(然后#1,+%[标题])->然后#1(,然后#2)->然后#2->+[右连](然后#2,+%[标题]#0),
    ->[]


## end
#687, 228:
"""
Nini, 打开动作(库)


"""

+到(_主语,_宾语)->+[del](,+到)...
->记忆->正在读取(记忆,_节点)...

->+到#0(_主语,_宾语)->+的(_节点,+到#0):
    ->然后(+到,)->+然后(+到#0,)->+的(_节点,+然后)->+[右连](然后,+然后),
    ->之后(然后#1,+到)->然后#1(,然后#2)->然后#2->+[右连](然后#2,+到#0),
    ->[]


## end
#693, 17:
Nini, 打开词典的条目(节点)
## end
#695, 12:


解释1:...



## end
#697, 73:


匹配条件:...
输出模板::%条件->+当#000(%条件动词,+[做])...
->%结果->+[del](,+当#000)







## end
#699, 277:
"""


"""

+匹配条件(状语复句,_输出)->+[del](,+匹配条件)...

->条件(状语复句,_句子1)->结果(状语复句,_句子2)...

->+的(_输出,+条件)->+的(_输出,+条件动词)...
->[]{
    +[句子描述]"匹配模式"(_句子1,+条件)...
        ->的(_句子1,谓语)->谓语(,_动词1)->+[标题](_动词1,)->+[修改内容](+[标题],+条件动词)
}...

->+的(_输出,+结果)...
->[]{
    +[句子描述]"句子"(_句子2,+结果)
}


## end
#701, 49:
%条件->+当#000(%条件动词,+[做])...
->%结果->+[del](,+当#000)
## end
#703, 15:


解释1:句子...




## end
#705, 33:


匹配条件:...
输出模板::%谓语(%主语,%宾语)




## end
#707, 309:
"""


"""

+匹配条件(句子,_输出)->+[del](,+匹配条件)...

->的(句子,谓语)->谓语(,_谓语)...
->的(句子,宾语)->宾语(,_宾语)...
->的(句子,主语)->主语(,_主语)...

->+的(_输出,+谓语)...
->[]{
    +[标题](_谓语,)->+[修改内容](+[标题],+谓语)
}...

->+的(_输出,+宾语)...
->[]{
    +[标题](_宾语,)->+[修改内容](+[标题],+宾语)
}...

->+的(_输出,+主语)...
->[]{
    +[标题](_主语,)->+[修改内容](+[标题],+主语)
}

## end
#709, 12:
%谓语(%主语,%宾语)
## end
#713, 323:
"""
库:...

"""

+裁剪(,_内容)...
->的(裁剪,库)...

->[]{
    []:->[is](_内容,截面分布)->截面分布(,)...
        ->从(+裁剪,_图像)->_图像(,)...
        ->到(+裁剪,_分布)->_分布(,)...
    ->的(库,裁剪分布)->裁剪分布(,)...
        ->+[做](_图像,_分布)->+[code](+[做],裁剪分布),

    ->的(库,_条目)->_条目->[eq](_条目,_内容)...
        ->+[做](,+裁剪)->+[code](+[做],_条目)
}...

->+[del](,+裁剪)


## end
#715, 20:

裁剪分布:...
矩形区域:...


## end
#717, 351:
"""
M代码:...
Nini, 打开星辰(文件)

"""
+裁剪分布(_图像,_分布)->+[del](,+裁剪分布)...
->的(裁剪分布,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],_图像)...
->[]{
    []:->的(_分布,x)->x->+[o](+[matlab],x),
        ->+的(_分布,+x)->+[o](+[matlab],+x)
}...
->[]{
    []:->的(_分布,f)->f->+[o](+[matlab],f),
        ->+的(_分布,+f)->+[o](+[matlab],+f)
}

## end
#719, 492:
%{
+[M函数](,M代码)
%}

i=findstr(file_name,'.');
file_type=file_name(i:end);

if strcmp(file_type,'.raw')
    I0=readmatrix(file_name,'FileType','text');
    data0=I0;
else
    data0=imread(file_name);
    data0=double(data0);
end

X=0:size(data0,2)-1;
Y=0:size(data0,1)-1;

global refPts;
pt_x=refPts.XData;
pt_y=refPts.YData;
xs=linspace(pt_x(1),pt_x(2),1000);
ys=linspace(pt_y(1),pt_y(2),1000);

f=interp2(X,Y,data0,xs,ys);
x=sqrt(xs.^2+ys.^2);


%{
+[matlab]"figure"(Matlab,)
+[M函数](,M代码)
%}
## end
#721, 229:
"""
M代码:...
+[matlab]"clf"(Matlab,)

"""

+函数(,函数)->+[del](,+函数)...
->的(函数#0,M代码)...

->.(_函数分布,函数)...
    ->的(_函数分布,x)->的(_函数分布,f)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"t"(+[matlab],x)->+[.]"E"(+[matlab],f)

## end
#723, 44:
%{
+[M函数](,M代码)
%}
figure
plot(t,real(E));


## end
#727, 229:


计算长度:...
计算波前:...
计算波包:...

计算能谱:...
发射角分布:...
IP图像:...
计算能谱的"波前"替换为"能谱"
将条目"发射角分布"复制为条目"IP图像"
+[复制结构](,计算波前)->+[粘贴](,库)->+[修改标题]"计算能谱"(,计算波前)

计算相机参数:...
计算相机参数的"波前"替换为"相机"

像距:...
+[修改标题]"像距"(,计算像距)
将条目"像距"复制为条目"区域"

区域:...


## end
#731, 189:
"""
M代码:...

"""


+计算长度(,长度)->+[del](,+计算长度)...
->的(计算长度,M代码):

->[]{
    .(标记点,长度)->标记点(,)...
        ->+[matlab](Matlab,+[临时文本])->+[code](+[matlab],M代码)...
        ->+[复制内容](,+[临时文本])
}

## end
#733, 86:
%{
+[M函数](,M代码)
%}
x=refPts.XData;
y=refPts.YData;
ans=sqrt(diff(x).^2+diff(y).^2);



## end
#736, 3:
754
## end
#738, 3:
799
## end
#741, 193:


生成圆形:...

画圆形:...
画衍射环:...
设置变量:...
+[新建阅读窗口](,画圆形)
画衍射环的"画圆形"替换为"画衍射环"
+[复制结构](,画圆形)->+[粘贴](,库)->+[修改标题]"画衍射环"(,画圆形)

公式结构变换:...
在公式结构变换中, 将"_结构"替换为"_式"
代码结构变换:...
将条目"公式结构变换"复制为条目"代码结构变换"


## end
#743, 118:
"""
+词典名词操作(_名词,_操作)...
    ->[词典名词](_名词,)->是(_名词,_名词1)->的(_名词1,_操作1)->[eq](_操作,_操作1)...
->[m_text](_操作1,_操作)

"""




## end
#745, 324:
"""
一般名词:...

"""

+调用词典名词(_标记点,_定义)->+[del](,+调用词典名词)...
->的(调用词典名词,一般名词)...

->[词典名词](_标记点,):
    ->是(_标记点,_标记点1)->_标记点1->的(_标记点1,_定义1)...
        ->[eq](_定义,_定义1)->+[code]([想],_定义1)->[想](,_标记点)...
        ->+[做](,_标记点)->+[code](+[做],_定义1),

    ->的(一般名词,_定义2)...
        ->[eq](_定义,_定义2)->+[做](,_标记点)->+[code](+[做],_定义2)

## end
#747, 444:
"""
M代码:...

"""

+生成圆形(标记点,_图形)->+[del](,_图形)...
->的(生成圆形,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"pts"(+[matlab],标记点)...
->[]{
    []:->的(_图形,半径)->半径->+[o]"R"(+[matlab],半径),
        ->+的(_图形,+半径)->+[o]"R"(+[matlab],+半径)
}...
->[]{
    []:->在(_图形,空间点)->空间点->+[o]"pt"(+[matlab],空间点),
        ->+在(_图形,+空间点)->+[o]"pt"(+[matlab],+空间点)
}...
->[]{
    []:->的(_图形,类型)->类型->+[修改内容]"圆形"(,类型),
        ->+的(_图形,+类型)->+类型"圆形"
}



## end
#749, 88:
%{

%}

x=pts(1,:);
y=pts(2,:);

pt=[x(1),y(1)];
R=sqrt((x(1)-x(2))^2+(y(1)-y(2))^2);



## end
#751, 279:
"""
M代码:...
记住"Matlab"
color

"""

+画衍射环(衍射环,标记点)->+[del](,+画衍射环)...
->的(画衍射环,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"pts"(+[matlab],标记点)...
->衍射环->[]{
    []:->[==](,衍射环)->+[s]"color"(+[matlab],+[临时文本])->+[临时文本]"r",
        ->+[s]"color"(+[matlab],衍射环)
}
## end
#753, 376:
%{
Nini, 打开衍射的圆孔衍射(节点)
%}

x=pts(1,:);
y=pts(2,:);

J1_zeros=[3.83170597020751 7.01558666981562 10.1734681350627 13.3236919363142 16.4706300508776];

pt=[x(1),y(1)];
R0=sqrt((x(1)-x(2))^2+(y(1)-y(2))^2);
R=J1_zeros*R0/J1_zeros(1);

theta=linspace(0,2*pi,100);

for i=1:length(R)
x=R(i)*cos(theta)+pt(1);
y=R(i)*sin(theta)+pt(2);
hold on
plot(x,y,color)
end

%{
+[M函数](,M代码)
%}
## end
#754, 185:
%{

%}

x=pts(1,:);
y=pts(2,:);

pt=[x(1),y(1)];
R=sqrt((x(1)-x(2))^2+(y(1)-y(2))^2);

theta=linspace(0,2*pi,100);
x=R*cos(theta)+pt(1);
y=R*sin(theta)+pt(2);

hold on
plot(x,y,color)


## end
#756, 256:
"""
M代码:...

"""

+画圆形(圆形,标记点)->+[del](,+画圆形)...
->的(画圆形,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"pts"(+[matlab],标记点)...
->圆形->[]{
    []:->[==](,圆形)->+[s]"color"(+[matlab],+[临时文本])->+[临时文本]"r",
        ->+[s]"color"(+[matlab],圆形)
}

## end
#761, 519:
"""
库:...
+[新建阅读窗口](,库)

"""

+获取(,_内容)->+[del](,+获取)...
->的(获取,库)->+[临时文本]:

->[]{
    [is](_内容,截面分布)->截面分布(,)...
        ->从(+获取,_图像)->_图像->根据(+获取,标记点)->标记点(,)...
        ->+[调用词典名词](标记点,+[定义])->+[定义](,)...

    ->的(库,截面分布#1)->截面分布#1(,):
        ->到(+获取,_分布)->_分布(,)...
            ->+[做](_图像,标记点)->+[code](+[做],截面分布#1)->+[到](+[做],_分布),
        ->+[做](_图像,标记点)->+[code](+[做],截面分布#1)
},

->[is](_内容,光谱)->+[做](+获取,_内容)...
    ->+[code](+[做],获取光谱)->的(库,获取光谱)->获取光谱(,)...
    ->[m_name](+[临时文本],+[del])->+[del]#1(,+获取)



## end
#763, 67:


截面分布:...
获取光谱:...
将条目"截面分布"复制为条目"获取光谱"
截面分布的"裁剪分布"替换为"截面分布"






## end
#765, 465:
"""
M代码:...
Nini, 打开星辰(文件)

"""
+获取光谱(获取,光谱)->+[del](,+获取光谱)...
->的(获取光谱,M代码)...

->从(获取,_光谱0)...
    ->的(_光谱0,波长#0)->的(_光谱0,光强#0)->的(_光谱0,相位#0)...
->到(获取,_光谱1)...
    ->的(_光谱1,波长#1)->的(_光谱1,光强#1)->的(_光谱1,相位#1)...
->.(标记点,光谱)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"lm0"(+[matlab],波长#0)...
    ->+[.]"In0"(+[matlab],光强#0)->+[.]"ph0"(+[matlab],相位#0)...
->+[o]"lm1"(+[matlab],波长#1)...
    ->+[o]"In1"(+[matlab],光强#1)->+[o]"ph1"(+[matlab],相位#1)





## end
#767, 209:
%{
记住"Matlab"
+[M函数](,M代码)
保存:...
%}

lms=get(refPts,'XData');
lm1=lm0;

ph1=ph0;
In1=In0;

In1(lm1<min(lms)|lm1>max(lms))=0;
% ph1(lm1<min(lms)|lm1>max(lms))=0;


%{
+[matlab]"figure"(Matlab,)
+[M函数](,M代码)
%}
## end
#769, 499:
%{
+[M函数](,M代码)
保存:...
%}

i=findstr(file_name,'.');
file_type=file_name(i:end);

if strcmp(file_type,'.raw')
    I0=readmatrix(file_name,'FileType','text');
    data0=I0;
else
    data0=imread(file_name);
    data0=double(data0);
end

X=0:size(data0,2)-1;
Y=0:size(data0,1)-1;

global refPts;
pt_x=refPts.XData;
pt_y=refPts.YData;
xs=linspace(pt_x(1),pt_x(2),1000);
ys=linspace(pt_y(1),pt_y(2),1000);

f=interp2(X,Y,data0,xs,ys);
x=sqrt(xs.^2+ys.^2);


%{
+[matlab]"figure"(Matlab,)
+[M函数](,M代码)
%}
## end
#773, 176:
"""
M代码:...
M模板:...

"""

+设置变量(标记点,变量)->+[del](,+设置变量)...
->的(设置变量,M模板)->的(设置变量,M代码)...

->+[模板文本](M模板,M代码)...
->+[.]"变量"(+[模板文本],变量)->+[.]"标记点"(+[模板文本],标记点)...
->+[M函数](,M代码)
## end
#775, 292:
%{

%}

pt_test=[279.2902484505735, 335.92216380678076, 373.04753054029436, 405.768192746103, 429.67944589650165, 451.7029685350267, 475.6142216854253;
1047.1443985997316, 1045.256668087858, 1043.3689375759845, 1040.8519635601533, 1038.3349895443216, 1033.9302850166168, 1030.7840674968274];

## end
#777, 20:
%{

%}

%变量=[%标记点];

## end
#778, 3:
828
## end
#781, 242:
%{
+[M函数](,M代码)
记住"Matlab"
%}

if length(siz)<2
    siz=[1,1];
end

R=siz(1);
H=siz(2);


N=100;

theta=linspace(0,360,N);
X=[R*cosd(theta),R;R*cosd(theta+180),-R]';
Y=[R*sind(theta),0;R*sind(theta+180),0]';
Z=[zeros(1,N),H;zeros(1,N)+H,0]';

## end
#785, 59:
"""
记住"Python"

for word in dict_动词:
    print(word)

"""


## end
#787, 152:

def word_in_dict(code,words):
    for word in words:
        n=len(word)
        if len(code)>=n and word==code[0:n]:
            return n
    return 0
## end
#789, 12:


定义:...




## end
#791, 1087:
"""
设置性质:...

"""

+定义(,_性质)->+[del](,+定义)...
->的(定义,设置性质)...

->正在读取(记忆,_节点):
->.(_主体,_性质)->_主体->是(_性质,_目标)->_目标:
    ->[]{
        当(_动作,是)->_动作:
            ->当(_动作,_性质0)->的(_主体,_性质0)->[eq](_性质,_性质0)...
                ->+[做](_性质0,_目标)->+[code](+[做],设置性质),
            ->+当(_动作,+性质)->+的(_主体,+性质)->+性质(,)...
                ->+[修改标题](_性质,+性质)...
                ->+[做](+性质,_目标)->+[code](+[做],设置性质)...
            ->+的#0(_节点,+当)->+的#0(_节点,+的)->+的#0(_节点,+性质)
    },

    ->[]{
        在(是,_位置)->_位置:
            ->在(_性质0,_位置)->的(_主体,_性质0)->[eq](_性质,_性质0)...
                ->+[做](_性质0,_目标)->+[code](+[做],设置性质),
            ->+在(+性质,_位置)->+的(_主体,+性质)->+性质(,)...
                ->+[修改标题](_性质,+性质)...
                ->+[做](+性质,_目标)->+[code](+[做],设置性质)...
            ->+的#0(_节点,+在)->+的#0(_节点,+的)->+的#0(_节点,+性质)
    },

    ->[]{
        []:->的(_主体,_性质0)->[eq](_性质,_性质0)...
                ->+[做](_性质0,_目标)->+[code](+[做],设置性质),
            ->+的(_主体,+性质)->+性质(,)->+[修改标题](_性质,+性质)...
                ->+[做](+性质,_目标)->+[code](+[做],设置性质)...
            ->+的#0(_节点,+的)->+的#0(_节点,+性质)
    }



## end
#795, 114:
"""


"""

+设置性质(_性质0,_目标)->+[del](,+设置性质):

    ->[is](_目标,临时文本)->临时文本->+[修改内容](临时文本,_性质0),
    ->+[右连](_性质0,_目标)
## end
#797, 13:


定义:...





## end
#799, 507:
"""
M模板:...
保存:...
Nini, 打开动词(库)

"""

+定义(_f,二维函数)->+[del](,+定义)...
->的(定义,M模板)->的(定义,保存)...

->[]{[]:->的(_f,x)->x,->+的(_f,+x)}...
->[]{[]:->的(_f,y)->y,->+的(_f,+y)}...
->[]{[]:->的(_f,f)->f,->+的(_f,+f)}...
->[]{
    []:->的(_f,M代码)...
        ->+[模板文本](M模板,M代码)->+[.](+[模板文本],二维函数),
    
    ->+的(_f,+M代码)...
        ->+[模板文本](M模板,+M代码)->+[.](+[模板文本],二维函数)...
    ->的(_f,f)->f->+的(+M代码,+输出)->+输出(,f)...
    ->的(_f,x)->x->的(_f,y)->y(,)...
        ->+的(+M代码,x)->+的(+M代码,y)
}...

->的(_f,M代码)->+[执行M函数](,M代码)




## end
#801, 53:
x=[%x];
y=[%y];
[y,x]=meshgrid(y,x);
%[二维函数]
out=f;


## end
#805, 242:
"""
M代码:...
+[matlab]"clf"(Matlab,)

"""

+画二维函数(,_二维函数)->+[del](,+画二维函数)...
->的(画二维函数,M代码)...

->的(_二维函数,x)->的(_二维函数,y)->的(_二维函数,f)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.](+[matlab],x)->+[.](+[matlab],y)->+[.](+[matlab],f)

## end
#807, 87:
%{
+[M函数](,M代码)
%}

figure
surf(x,y,real(f));
shading interp
view([0,90])
%axis equal


## end
#809, 823:
"""
M代码:...
库:...
记住计算波包(节点)
+[新建阅读窗口](,库)

"""

+计算波包(,波包#0)->+[del](,+计算波包)...
->的(计算波包,M代码)->的(计算波包,库)...

->正在读取(记忆,_当前节点)->_当前节点:

->[]{
    .(_波包,波包#0)->波包(,_波包)->的(_光束,波包)->_光束(,)...
        ->当(离开,波包)->离开(_光束,_光栅对)->的(_光栅对,光栅常数)...
        ->然后(进入,离开)->进入(_光束,_光栅对)...
        ->当(进入,光谱)->的(_光束,光谱)->光谱(,_光谱)...
    ->+[做](_光谱,_波包)->+[.](+[做],_光栅对)->+[code](+[做],计算光栅对输出)...
        ->的(库,计算光栅对输出)->计算光栅对输出
},

->[]{
    .(_光束,波包#0)->_光束(,)...
        ->的(_光束,波包)->波包(,_波包)->的(_光束,光谱)->光谱(,_光谱)...
        ->+[做](_光谱,_波包)->+[code](+[做],计算光束波包)...
            ->的(库,计算光束波包)->计算光束波包
},

->[]{
    .(_波包1,波包#0)->波包(,_波包1)->的(_光束1,波包)->_光束1(,)...
        ->的(_光束1,光谱#1)->光谱#1(,_光谱1)...
            ->当(_动作,波包)->当(_动作,光谱#1)...
        ->+[做](_光谱1,_波包1)->+[code](+[做],计算光束波包#1)...
            ->的(库,计算光束波包#1)->计算光束波包#1
}

## end
#811, 324:
%{
记住"Matlab"
+[M函数](,M代码)
Nini, 打开透镜波前的示意图场景(节点)
%}

physics_constant;
lm_x=lm*1e-9;
w_x=2*pi*c./lm_x;

w=linspace(max(w_x)/length(w_x),max(w_x),length(w_x));
In_w=interp1(w_x,In,w);
phi_w=interp1(w_x,phi,w);

S=sqrt(In_w).*exp(-1i*phi_w);
S(isnan(S))=0;

[t,f]=ifft_k(w,S);
t=t-mean(t);
E=fftshift(f);


%{
+[M函数](,M代码)
%}
## end
#812, 3:
850
## end
#815, 149:
"""
库:...

"""

+分析(,_变量)->+[del](,+分析)...
->的(分析,库):

->[]{
    [is](_变量,波前)->波前->的(库,分析波前)->分析波前(,)...
        ->+[做](,波前)->+[code](+[做],分析波前)
}



## end
#817, 32:


分析波前:...
分析波前的"计算"替换为"分析"





## end
#819, 653:
"""
M代码:...

"""

+分析波前(,波前)->+[del](,+分析波前)...
->的(分析波前,M代码)...

->正在读取(记忆,_当前节点)...

->.(_波前1,波前)...
->波前#1(,_波前1)->当(到达,波前#1)->到达(_光束,_平面1)->_光束->_平面1(,)...
->离开(_光束,_平面0)->当(离开,波前#0)->波前#0(,_波前0)->_平面0(,)...

->的(_波前0,x#0)->的(_波前0,y#0)->的(_波前0,f#0)...
->在(_平面0,空间点#0)...
->的(_光束,波长)...
->的(_波前1,x#1)->的(_波前1,y#1)->的(_波前1,f#1)...
->在(_平面1,空间点#1)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"x0"(+[matlab],x#0)->+[.]"y0"(+[matlab],y#0)->+[.]"f0"(+[matlab],f#0)...
->+[.]"pt0"(+[matlab],空间点#0)->+[.]"lm0"(+[matlab],波长)...
->+[.]"x1"(+[matlab],x#1)->+[.]"y1"(+[matlab],y#1)...
->+[.]"pt1"(+[matlab],空间点#1)...

->+[o]"f1"(+[matlab],f#1)




## end
#821, 265:
%{
记住"Matlab"
figure
surf(f)
+[M函数](,M代码)
%}


physics_constant;
z=pt1(1)-pt0(1);
i=1i;

k=2*pi/lm0;
x=x0+pt1(2)-pt0(2);
r=sqrt(z^2+x.^2);

f=(cos(k.*r))./(r).*(1+(i)./(k.*r));
f0=1./(r).*(1+(i)./(k.*r));

figure
hold on
plot(x,f)
plot(x,f0,x,-f0,'lineWidth',2)




## end
#822, 1393:
%{
记住"Matlab"
+[M函数](,M代码)
Nini, 打开能谱仪模拟的计算电子能谱(节点)
Nini, 打开阴影形状的IP_ATM(节点)

保存:...

fiducial参数::https://utexas.app.box.com/file/855108479337
+[打开网页](,fiducial参数)

互逆测试:...
+[新建阅读窗口](,互逆测试)
%}

physics_constant;
addpath('Matlab\paper_spectrometer');
file_name='output\spectrometer\LWFA11\IP\013965 SR 1 20 PMT500 - PSL Data.tiff';

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

Cell=Cell0(1:2)*1e-2;

B=B0;
D=size_m(1)*1e-2;
z_m=pos_m(1)*1e-2;

R=0.005*2.54e-2/2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;
z_i=IPx;
x_i=linspace(0.2,-0.2,8000)+IPy+0.0001;

t_0=launch_angle;
Dt=1.8e-3;

%{
+[M函数](,M代码)
%}

S_E=@(E)interp1(E_1,I_1,E);
t=linspace(-4*Dt,4*Dt,100)+t_0;
f_t0=exp(-(t-t_0).^2/Dt^2);
%t=th_2;
%f_t0=I_2;

I_S=zeros(size(x_i));
for i=1:numel(Fy)
[~,I_s,I_0,I0]=IP_ATM_arb(S_E,t,f_t0,Cell(2),Cell(1),-B,D,z_m,R,Fy(i),Fx(i),x_i,z_i);
I_S=I_S+abs(I_0)-abs(I0)+abs(I_s);
end
I=abs(I0)+I_S;

% data
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);
I_d=sum(data_im);

clf
plot(x_i,-I_d/trapz(x_i,I_d),x_i,-I/trapz(x_i,I)*0.75)
% plot(x_i,-I_d/trapz(x_i,I_d),x_i,-I/trapz(x_i,I)*0.025)
% plot(th_2,I_2)


%{
figure
plot(x_i,I_S)
plot(x_i,I_0,x_i,I0,x_i,I_s)
plot(x_i,I_s)
记住"Matlab"
+[M函数](,M代码)
%}
## end
#823, 1081:
"""
记住IP图像(节点)

库:...
+[新建阅读窗口](,库)
保存:...

"""

+IP图像(计算,IP图像)->+[del](,+IP图像)...
->的(IP图像#0,库)...

->正在读取(记忆,_当前节点)...
    ->的(库,计算IP图像2)->+[做](计算,IP图像)->+[code](+[做],计算IP图像2)...
->.(_性质,IP图像)->_性质->IP图像#1(,_性质)...
    ->的(_数据,IP图像#1)->的(_当前节点,_数据)...
    ->+数据(+[做],_数据)->+[del](,+数据)...
->的(_数据,来源)->来源(,_能谱仪)...
    ->+能谱仪(+[做],_能谱仪)->+[del](,+能谱仪):

->在(IP图像#1,_位置1)->[]{
    的(_数据,发射角分布)->发射角分布(,_A1)->在(发射角分布,_位置1)...
        ->+发射角分布(+[做],_A1)->+[del](,+发射角分布)...
    ->的(_数据,能谱)->能谱(,_B1)->在(能谱,_位置1)...
        ->+能谱(+[做],_B1)->+[del](,+能谱)...
    ->[]{
        []:->的(_数据,发射角)->发射角->在(发射角,_位置1)...
            ->+发射角(+[做],发射角)->+[del](,+发射角),
        ->+[临时文本]"0"->+发射角(+[做],+[临时文本])->+[del](,+发射角)
    }
},

->[]{
    的(_数据,发射角分布)->发射角分布(,_A0)->[]{[]=>在(发射角分布,)}...
        ->+发射角分布(+[做],_A0)->+[del](,+发射角分布)...
    ->的(_数据,能谱)->能谱(,_B0)->[]{[]=>在(能谱,)}...
        ->+能谱(+[做],_B0)->+[del](,+能谱)...
    ->[]{
        []:->的(_数据,发射角)->发射角->[]{[]=>在(发射角,)}...
            ->+发射角(+[做],发射角)->+[del](,+发射角),
        ->+[临时文本]"0"->+发射角(+[做],+[临时文本])->+[del](,+发射角)
    }
}


## end
#828, 613:
"""
M代码:...
+[matlab]"clf"(Matlab,)
Nini, 打开FROG(文件)
记住画FROG(节点)

"""

+画FROG(显示,_FROG)->+[del](,+画FROG)...
->的(画FROG,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...

->[]{
    []:->从(显示,_lm1)->+[.]"lm1"(+[matlab],_lm1),
        ->+[.]"lm1"(+[matlab],+[临时文本])->+[临时文本]"300"
}...
->[]{
    []:->到(显示,_lm2)->+[.]"lm2"(+[matlab],_lm2),
        ->+[.]"lm2"(+[matlab],+[临时文本])->+[临时文本]"500"
}...

->[]:
->的(_FROG,延时)->的(_FROG,场强)...
    ->+[.]"t0"(+[matlab],延时)->+[.]"E0"(+[matlab],场强),

->的(_FROG,波包)->波包(,_波包0)...
    ->的(_波包0,延时#0)->的(_波包0,场强#0)...
    ->+[.]"t0"(+[matlab],延时#0)->+[.]"E0"(+[matlab],场强#0)

## end
#830, 391:
%{
+[M函数](,M代码)

测试:...
%}
addpath('Matlab\FROG')
physics_constant;
Dt=15e-15;

t=t0;

lm=linspace(lm1*1e-9,lm2*1e-9,1000);
tau=linspace(-20*Dt,20*Dt,100);

FROG_tr=FROG_trace(t0,E0,lm,tau);


figure
surf(tau/1e-15,lm/1e-9,FROG_tr)
shading interp
view([0,90])
xlabel('Delay [fs]')
ylabel('Wavelength [nm]')
axis([min(tau)/1e-15,max(tau)/1e-15,min(lm)/1e-9,max(lm)/1e-9])


%{
+[M函数](,M代码)
%}
## end
#832, 117:
%{
+[M函数](,测试)
%}


[w,In]=fft_x(t0,E0);
lm=2*pi*c./w;

figure
plot(lm/1e-9,abs(In))
%axis([200,1000,0,max(abs(In))])
## end
#833, 3:
866
## end
#836, 83:
+[设置结构](,测试)

A::
+[临时文本]->+[测试](,A)->[m_name](+[临时文本],+[测试])
A=>_(,A)=>+[显示](,_)


## end
#844, 336:
"""
M代码:...
Nini, 打开iFAST日志2的read_MIR(节点)

"""

+反演(,_光谱)->+[del](,+反演)...
->的(反演,M代码)...

->的(_光谱,波长)->的(_光谱,光强)->的(_光谱,相位)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],+[临时文本])->[m_text](_光谱,+[临时文本])...
->+[o]"wavelength"(+[matlab],波长)->+[o]"intensity"(+[matlab],光强)...
->+[o]"phase"(+[matlab],相位)



## end
#846, 280:
%{

测试FROG:...

%}

data=readmatrix(file_name);

lms=[720,900];

wavelength=data(:,1)';
intensity=data(:,2)';
phase=data(:,3)';

intensity(wavelength<lms(1)|wavelength>lms(2))=[];
phase(wavelength<lms(1)|wavelength>lms(2))=[];
wavelength(wavelength<lms(1)|wavelength>lms(2))=[];


## end
#848, 303:
%{
记住"Matlab"
+[M函数](,测试FROG)
%}

file_name='C:\Users\cheng\Dropbox\iFAST_log\resources\20220505\FROG\44\a.dat';
data0=readmatrix(file_name);

i=8;
fs=factor(size(data0,1));
fc1=prod(fs(1:i))
fc2=size(data0,1)/fc1

data=reshape(data0,fc1,fc2);
data=data(:,50:200);
surf(data)
view([0,90])
shading interp
## end
#849, 3:
870
## end
#852, 450:
%{
+[M函数](,M代码_屏幕)
保存:...
记住"Matlab"


h=get(gca,'Children');
get(h(end))
get(gcf,'Children')
data0=getimage(gca);
%}


h=get(gca,'Children');
data0=get(h(end),'ZData');
X=get(h(end),'XData');
Y=get(h(end),'YData');

global refPts;
pt_x=pts(1,:);
pt_y=pts(2,:);
xs=linspace(pt_x(1),pt_x(2),1000);
ys=linspace(pt_y(1),pt_y(2),1000);

f=interp2(X,Y,data0,xs,ys);
x=sqrt(xs.^2+ys.^2);

figure
plot(x,f)


%{
+[matlab]"figure"(Matlab,)
+[M函数](,M代码_屏幕)
%}
## end
#856, 3:
881
## end
#861, 3:
905
## end
#864, 12:

定义:...





## end
#866, 374:
"""


"""

+定义(_光栅压缩器,光栅压缩器)->+[del](,+定义)...

->[]{[]:->的(_光栅压缩器,光栅常数)->光栅常数,->+的(_光栅压缩器,+光栅常数)->+光栅常数"1450"}...
->[]{[]:->的(_光栅压缩器,初始间距)->初始间距,->+的(_光栅压缩器,+初始间距)->+初始间距"0.67"}...
->[]{[]:->的(_光栅压缩器,初始角度)->初始角度,
        ->+的(_光栅压缩器,+初始角度)->+初始角度"47.28"}...
->[]{[]:->的(_光栅压缩器,间距)->间距,->+的(_光栅压缩器,+间距)->+间距"0.67"}...
->[]{[]:->的(_光栅压缩器,角度)->角度,->+的(_光栅压缩器,+角度)->+角度"47.28"}

## end
#868, 11:

解释1:...



## end
#870, 123:

匹配条件:...
输出模板::%之前->+然后(+[做],)->+当前动作(记忆,+然后);
%之后->当前动作(记忆,然后)->+之后(然后,+[做])->+[del](,然后)->+[del](,当前动作)->+[del](,+之后)



## end
#872, 357:
"""


"""

+匹配条件(然后复句,_输出)->+[del](,+匹配条件)...

->之前(然后复句,_句子1)->之后(然后复句,_句子2)...

->+的(_输出,+之前)->+的(_输出,+动词1)...
->[]{
    +[句子描述]"句子"(_句子1,+之前)...
        ->的(_句子1,谓语)->谓语(,_动词1)->+[标题](_动词1,)->+[修改内容](+[标题],+动词1)
}...

->+的(_输出,+之后)->+的(_输出,+动词2)...
->[]{
    +[句子描述]"句子"(_句子2,+之后)...
        ->的(_句子2,谓语)->谓语(,_动词2)->+[标题](_动词2,)->+[修改内容](+[标题],+动词2)
}


## end
#874, 104:
%之前->+然后(+[做],)->+当前动作(记忆,+然后);
%之后->当前动作(记忆,然后)->+之后(然后,+[做])->+[del](,然后)->+[del](,当前动作)->+[del](,+之后)
## end
#876, 75:


计算光束波包:...
计算光栅对输出:...
+[新建阅读窗口](,计算光栅对输出)
计算光栅对输出的"计算光束波包"替换为"计算光栅对输出"


## end
#878, 322:
"""
M代码:...

"""

+计算光束波包(_光谱,_波包)->+[del](,+计算光束波包)...
->的(计算光束波包,M代码)...

->的(_波包,延时)->的(_波包,场强)...
->的(_光谱,相位)->的(_光谱,波长)->的(_光谱,光强)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"phi"(+[matlab],相位)->+[.]"In"(+[matlab],光强)...
    ->+[.]"lm"(+[matlab],波长)...
->+[o]"E"(+[matlab],场强)->+[o]"t"(+[matlab],延时)



## end
#880, 442:
%{
记住"Matlab"
+[M函数](,M代码)
Nini, 打开透镜波前的示意图场景(节点)
Nini, 打开Dazzler优化的spectrum_2_pulse(节点)
size(In)
size(phi)
%}

physics_constant;
lm_x=lm*1e-9;
w_x=2*pi*c./lm_x;

if length(w_x)~=length(phi)
    phi=zeros(size(w_x));
end


w=linspace(max(w_x)/length(w_x),max(w_x),length(w_x));
In_w=interp1(w_x,In,w);
phi_w=interp1(w_x,phi,w);

S=sqrt(In_w).*exp(-1i*phi_w);
S(isnan(S))=0;

[t,f]=ifft_k(w,S);
t=t-mean(t);
E=fftshift(f);


%{
+[M函数](,M代码)
%}
## end
#882, 582:
"""
M代码:...

"""

+计算光栅对输出(_光谱,_波包)->+[del](,+计算光栅对输出)...
->的(计算光栅对输出,M代码)...

->的(_波包,延时)->的(_波包,场强)...
->的(_光谱,相位)->的(_光谱,波长)->的(_光谱,光强)...
->.(+计算光栅对输出,_光栅对)...
    ->的(_光栅对,光栅常数)->的(_光栅对,初始间距)->的(_光栅对,初始角度)...
    ->的(_光栅对,间距)->的(_光栅对,角度)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"phi"(+[matlab],相位)->+[.]"In"(+[matlab],光强)...
    ->+[.]"lm"(+[matlab],波长)...
->+[.]"G"(+[matlab],光栅常数)...
    ->+[.]"D_0"(+[matlab],初始间距)->+[.]"angle_0"(+[matlab],初始角度)...
    ->+[.]"D"(+[matlab],间距)->+[.]"angle"(+[matlab],角度)...
->+[o]"E"(+[matlab],场强)->+[o]"t"(+[matlab],延时)



## end
#884, 604:
%{
记住"Matlab"
+[M函数](,M代码)
Nini, 打开光栅压缩器(文件)

size(In)
size(w_x)
size(phi)
plot(w,In_w)
plot(w,phi_w)
plot(lm_x,phase_G)
%}

physics_constant;
addpath('Matlab\optics');

lm_x=lm*1e-9;
w_x=2*pi*c./lm_x;

if length(w_x)~=length(phi)
    phi=zeros(size(w_x));
end

phase_G=grating_compressor_phase(w_x,D,angle,D_0,angle_0,G);

w=linspace(max(w_x)/length(w_x),max(w_x),length(w_x));
In_w=interp1(w_x,In,w);
phi_w=interp1(w_x,phi+phase_G,w);

S=sqrt(In_w).*exp(-1i*phi_w);
S(isnan(S))=0;

[t,f]=ifft_k(w,S);
t=t-mean(t);
E=fftshift(f);


%{
+[M函数](,M代码)
size(w)
plot(2*pi*c./w/1e-9,'.')
plot(lm_x/1e-9,'.')
%}
## end
#885, 3:
904
## end
#887, 3:
906
## end
#890, 139:
"""
保存:...
(删除了[词典名词], 因为以后只有Nini中的[专有名词]了)

"""

+复制(,_内容)->+[del](,+复制):

->到(+复制,_目标)->+[修改内容](_内容,_目标)->+[复制内容](,_内容),
->+[复制内容](,_内容)

## end
#891, 3:
928
## end
#895, 730:
"""
库:...
+[新建阅读窗口](,库)

"""

+区域(计算,区域)->+[del](,+区域)...
->的(区域#0,库)...

->正在读取(记忆,_当前节点)...

->.(_平面,区域)...
    ->在(_平面,空间点#0)->朝向(_平面,方向#0)...
    ->的(_平面,尺寸)->的(_平面,值)...

->在(计算,_体积)...
    ->在(_体积,空间点#1)->朝向(_体积,方向#1)...
    ->的(_体积,X)->的(_体积,Y)->的(_体积,Z)...

->+[matlab](Matlab,)...
->+[.]"pt0"(+[matlab],空间点#0)->+[.]"Eulers0"(+[matlab],方向#0)...
    ->+[.]"siz0"(+[matlab],尺寸)->+[o]"value0"(+[matlab],值)...
->+[.]"pt1"(+[matlab],空间点#1)->+[.]"Eulers1"(+[matlab],方向#1)...
    ->+[.]"X1"(+[matlab],X)->+[.]"Y1"(+[matlab],Y)->+[.]"Z1"(+[matlab],Z)...

->的(_体积,类型)->[]{
    []:->[==]"立方体"(,类型)->的(库,立方体)->立方体(,)...
        ->+[code](+[matlab],立方体),
    ->[==]"圆柱体"(,类型)->的(库,圆柱体)->圆柱体(,)...
        ->+[code](+[matlab],圆柱体)
}



## end
#898, 353:
%{
+[M函数](,测试颜色)
参考::https://stackoverflow.com/questions/2372949/plot-inverse-colors-in-matlab
记住"Matlab"
get(a)
%}

file_name="output\spectrometer\LWFA11\IP\013965 SR 1 20 PMT500 - PSL Data.tiff";
data=imread(file_name);
figure
imshow(data)
hold on
a=plot(4000,2000,'ro')
set(a,'MarkerEdgeColor','r')
set(a,'MarkerFaceColor','b')
set(a,'MarkerSize',2)

## end
#900, 73:
https://stackoverflow.com/questions/2372949/plot-inverse-colors-in-matlab
## end
#901, 3:
956
## end
#906, 359:
"""
M代码:...

"""

+画IP图像(显示,_IP)->+[del](,+画IP图像)...
->的(画IP图像,M代码)...

->的(_IP,地址)->的(_IP,X_shadows)->的(_IP,e_shadows)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],地址)...
->+[.](+[matlab],X_shadows)->+[.](+[matlab],e_shadows):

    ->按(显示,倍率)->+[.]"ratio"(+[matlab],倍率),
    ->+[.]"ratio"(+[matlab],+[临时文本])->+[临时文本]"1"




## end
#908, 527:
%{
记住"Matlab"
+[M函数](,M代码)
Nini, 打开数据中心(文件)
%}

data0=imread(file_name);
data=double(data0);

in=sum(data);
data=data/max(max(data))*ratio;

I_e=interp1(1:length(in),in,e_shadows);
I_X=interp1(1:length(in),in,X_shadows);


clf

subplot(2,1,1)
imshow(data)
colormap('hot')
hold on
plot([X_shadows;X_shadows],[zeros(size(X_shadows));2000*ones(size(X_shadows))],'g-');
plot([e_shadows;e_shadows],[zeros(size(e_shadows));2000*ones(size(e_shadows))],'r-');

subplot(2,1,2)
plot(1:length(in),in,X_shadows,I_X,'*',e_shadows,I_e,'*')


## end
#912, 299:
"""
库:...

"""

+优化(,_变量)->的(优化,库)...

->[]{
    []:->[is](_变量,位置)->位置->的(库,优化位置)->优化位置(,)...
        ->+[做](+优化,位置)->+[code](+[做],优化位置),

    ->到(+优化,_优化内容)->_优化内容(,)...
        ->的(库,_条目)->_条目->[eq](_条目,_优化内容)...
        ->+[做](+优化,_变量)->+[code](+[做],_条目)->[m_text](_优化内容,+优化)
}...

->+[del](,+优化)
## end
#918, 62:

优化位置:...
函数极小值:...
将条目"优化位置"复制为条目"函数极小值"
+[新建阅读窗口](,优化位置)




## end
#920, 348:
"""
M代码:...
M代码2:...
+[新建阅读窗口](,M代码)

"""

+函数极小值(优化,_位置)->+[del](,+函数极小值)...
->的(函数极小值,M代码)->的(函数极小值,M代码2)...

->根据(优化,屏幕)->+[matlab](Matlab,)->+[.]"n"(+[matlab],屏幕):
    ->[is](_位置,标记点)->+[code](+[matlab],M代码),
    ->+[code](+[matlab],M代码2)...
        ->+[.]"DXs"(+[matlab],优化)...
        ->+[.]"pos_x"(+[matlab],_位置)->+[o]"sh_x"(+[matlab],_位置)


## end
#922, 431:
%{
记住"Matlab"
+[M函数](,M代码)
%}

figure
data0=imread(file_name);
data0=double(data0);
in=sum(data0);
in_x=1:size(in,2);

sh_x=shX;

plot(in_x,in)
hold on
Dxi=linspace(Dxi_range(1),Dxi_range(2),500);

shX
for i=1:size(sh_x,2)
sh_xi=sh_x(i)+Dxi;
sh_yi=interp1(in_x,in,sh_xi);
sh_x(i)=sh_xi(sh_yi==min(sh_yi));

plot(sh_xi,sh_yi,'r*')
end


sh_y=interp1(in_x,in,sh_x);

plot(in_x,in,sh_x,sh_y,'bo')
ans=sort(sh_x);



%{
+[M函数](,M代码)
%}
## end
#923, 19:
W=siz(1);
L=siz(2);
## end
#925, 722:
"""
[eq](+[定义],定义)
M代码:...

"""

+定义(_长方形,长方形)->+[del](,+定义)...
->的(定义,M代码)...

->[]{
    []:->的(_长方形,类型)->类型->+[修改内容]"长方形"(,类型),
        ->+的(_长方形,+类型)->+类型"长方形"
}...
->[]{
    []:->在(_长方形,空间点)->空间点,
        ->+在(_长方形,+空间点)->+空间点"0,0"
}...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"siz"(+[matlab],+[临时文本])->[m_text](长方形,+[临时文本])...
->[]{
    []:->的(_长方形,长度)->长度->+[o]"L"(+[matlab],长度),
        ->+的(_长方形,+长度)->+长度"1"->+[o]"L"(+[matlab],+长度)
}...
->[]{
    []:->的(_长方形,宽度)->宽度->+[o]"W"(+[matlab],宽度),
        ->+的(_长方形,+宽度)->+宽度"1"->+[o]"W"(+[matlab],+宽度)
}...

->[]{
    []:->的(_长方形,x)->x,->+的(_长方形,+x)->+x"0,1"
}...
->[]{
    []:->的(_长方形,y)->y,->+的(_长方形,+y)->+y"0,1"
}->+[更新图形](,_长方形)->+[显示PPT图形](,_长方形)



## end
#927, 28:


定义:...
定义的"圆形"替换为"长方形"




## end
#929, 4:
1037
## end
#931, 446:
%{
+[M函数](,M代码)
%}

if length(siz)<1
    siz=[1];
end

r0=siz(1);

N1=10;
N2=10;

theta=linspace(0,180,N1);
phi=linspace(0,360,100);
[Theta,Phi]=meshgrid(theta,phi);
X1=r0*sind(Theta).*cosd(Phi);
Y1=r0*sind(Theta).*sind(Phi);
Z1=r0*cosd(Theta);

theta=linspace(0,180,100);
phi=linspace(0,360,N2);
[Theta,Phi]=meshgrid(theta,phi);
X2=r0*sind(Theta).*cosd(Phi);
Y2=r0*sind(Theta).*sind(Phi);
Z2=r0*cosd(Theta);

X=[X1,X2'];
Y=[Y1,Y2'];
Z=[Z1,Z2'];

## end
#933, 734:
"""
[eq](+[定义],定义)
M代码:...
Nini, 打开图形库的三维图形库(节点)

"""

+定义(_球体,球体)->+[del](,+定义)...
->的(定义,M代码)...

->[]{
    []:->的(_球体,类型)->类型->+[修改内容]"球体"(,类型),
        ->+的(_球体,+类型)->+类型"球体"
}...
->[]{
    []:->在(_球体,空间点)->空间点,
        ->+在(_球体,+空间点)->+空间点"0,0,0"
}...
->[]{
    []:->朝向(_球体,方向)->方向,
        ->+朝向(_球体,+方向)->+方向"0,0,0"
}...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"siz"(+[matlab],+[临时文本])->[m_text](球体,+[临时文本])...

->[]{
    []:->的(_球体,X)->X->+[o](+[matlab],X),
        ->+的(_球体,+X)->+[o](+[matlab],+X)
}...
->[]{
    []:->的(_球体,Y)->Y->+[o](+[matlab],Y),
        ->+的(_球体,+Y)->+[o](+[matlab],+Y)
}...
->[]{
    []:->的(_球体,Z)->Z->+[o](+[matlab],Z),
        ->+的(_球体,+Z)->+[o](+[matlab],+Z)
}...

->+[显示三维图形](,_球体)



## end
#935, 28:


定义:...
定义的"立方体"替换为"球体"




## end
#937, 310:
%{
+[M函数](,M代码)
%}

if length(siz)<3
    siz=[1,1,1];
end

W=siz(1);
L=siz(2);
H=siz(3);
X=-[0,-W/2,-W/2,0,0;
0,W/2,W/2,0,0;
W/2,W/2,-W/2,-W/2,W/2
0,-W/2,0,W/2,0
]';

Y=-[0,L/2,-L/2,0,0;
0,L/2,-L/2,0,0
L/2,-L/2,-L/2,L/2,L/2
0.6*L,0.6*L,1.1*L,0.6*L,0.6*L
]';

Z=-[0,H,H,0,0;
0,H,H,0,0;
H,H,H,H,H;
H,H,H,H,H]';


## end
#939, 795:
"""
[eq](+[定义],定义)
M代码:...
Nini, 打开图形库的三维图形库(节点)

"""

+定义(_相机,相机)->+[del](,+定义)...
->的(定义,M代码)...

->[]{
    []:->的(_相机,类型)->类型->+[修改内容]"相机"(,类型),
        ->+的(_相机,+类型)->+类型"相机"
}...
->[]{
    []:->在(_相机,空间点)->空间点,
        ->+在(_相机,+空间点)->+空间点"0,0,0"
}...
->[]{
    []:->朝向(_相机,方向)->方向,
        ->+朝向(_相机,+方向)->+方向"0,0,0"
}...
->[]{
    []:->的(_相机,D)->D,
        ->+的(_相机,+D)->+D"1"
}...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"siz"(+[matlab],+[临时文本])->[m_text](相机,+[临时文本])...

->[]{
    []:->的(_相机,X)->X->+[o](+[matlab],X),
        ->+的(_相机,+X)->+[o](+[matlab],+X)
}...
->[]{
    []:->的(_相机,Y)->Y->+[o](+[matlab],Y),
        ->+的(_相机,+Y)->+[o](+[matlab],+Y)
}...
->[]{
    []:->的(_相机,Z)->Z->+[o](+[matlab],Z),
        ->+的(_相机,+Z)->+[o](+[matlab],+Z)
}...

->+[显示三维图形](,_相机)



## end
#941, 28:


定义:...
定义的"立方体"替换为"相机"




## end
#943, 276:
%{
记住"Matlab"
+[M函数](,M代码)
%}

if length(siz)<5
    siz=[0.5,0.1,0.01,0.2,0.2];
end

H=siz(1);
D=siz(2);
w=siz(3);
h=siz(4);
d=siz(5);

X=[D/2,D/2,d/2,0,-d/2,-D/2,-D/2,D/2, D/2]';
Z=[0,H-h,H-h,H,H-h,H-h,0,0, 0]';
Y=[ones(size(Z))];
Y(end)=-1;


X=[X,X];
Y=[-Y,Y]*w/2;
Z=[Z,Z];
## end
#945, 695:
"""
[eq](+[定义],定义)
M代码:...
Nini, 打开图形库的三维图形库(节点)

"""

+定义(_三维箭头,三维箭头)->+[del](,+定义)...
->的(定义,M代码)...

->[]{
    []:->的(_三维箭头,类型)->类型->+[修改内容]"三维箭头"(,类型),
        ->+的(_三维箭头,+类型)->+类型"三维箭头"
}...
->[]{
    []:->在(_三维箭头,空间点)->空间点,
        ->+在(_三维箭头,+空间点)->+空间点"0,0,0"
}...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"siz"(+[matlab],+[临时文本])->[m_text](三维箭头,+[临时文本])...

->[]{
    []:->的(_三维箭头,X)->X->+[o](+[matlab],X),
        ->+的(_三维箭头,+X)->+[o](+[matlab],+X)
}...
->[]{
    []:->的(_三维箭头,Y)->Y->+[o](+[matlab],Y),
        ->+的(_三维箭头,+Y)->+[o](+[matlab],+Y)
}...
->[]{
    []:->的(_三维箭头,Z)->Z->+[o](+[matlab],Z),
        ->+的(_三维箭头,+Z)->+[o](+[matlab],+Z)
}...

->+[显示三维图形](,_三维箭头)



## end
#947, 30:


定义:...
定义的"立方体"替换为"三维箭头"




## end
#949, 304:
%{
+[M函数](,M代码)
%}

if length(siz)<3
    siz=[1,1,1];
end

X1=[0,siz(1),siz(1),0,0]'-siz(1)/2;
Y1=[0,0,siz(2),siz(2),0]'-siz(2)/2;
Z1=[0,0,0,0,0]';

X2=[0,0,0,0,0]'-siz(1)/2;
Y2=[0,0,siz(2),siz(2),0]'-siz(2)/2;
Z2=[0,siz(3),siz(3),0,0]';

X=[X1,X1,X2,X2+siz(1)];
Y=[Y1,Y1,Y2,Y2];
Z=[Z1,Z1+siz(3),Z2,Z2];

## end
#951, 752:
"""
[eq](+[定义],定义)
M代码:...
Nini, 打开图形库的三维图形库(节点)

"""

+定义(_立方体,立方体)->+[del](,+定义)...
->的(定义,M代码)...

->[]{
    []:->的(_立方体,类型)->类型->+[修改内容]"立方体"(,类型),
        ->+的(_立方体,+类型)->+类型"立方体"
}...
->[]{
    []:->在(_立方体,空间点)->空间点,
        ->+在(_立方体,+空间点)->+空间点"0,0,0"
}...
->[]{
    []:->朝向(_立方体,方向)->方向,
        ->+朝向(_立方体,+方向)->+方向"0,0,0"
}...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"siz"(+[matlab],+[临时文本])->[m_text](立方体,+[临时文本])...

->[]{
    []:->的(_立方体,X)->X->+[o](+[matlab],X),
        ->+的(_立方体,+X)->+[o](+[matlab],+X)
}...
->[]{
    []:->的(_立方体,Y)->Y->+[o](+[matlab],Y),
        ->+的(_立方体,+Y)->+[o](+[matlab],+Y)
}...
->[]{
    []:->的(_立方体,Z)->Z->+[o](+[matlab],Z),
        ->+的(_立方体,+Z)->+[o](+[matlab],+Z)
}...

->+[显示三维图形](,_立方体)



## end
#953, 29:


定义:...
定义的"长方形"替换为"立方体"




## end
#956, 147:
"""
M代码:...

"""

+显示图片(,_文件)->+[del](,+显示图片)...
->的(显示图片,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],_文件)
## end
#958, 147:
%{
Nini, 打开平面测绘(文件)
Nini, 打开PPT的句子库(节点)
记住"Matlab"
保存:...
%}

img = imread(file_name);
image(img);
axis equal
axis image
set(gca,'YDir','normal')


## end
#961, 172:


img = imread(file_name);
img=img(end:-1:1,:,:);
shape(2)=shape(1)/size(img,2)*size(img,1);
x=[pt(1),pt(1)+shape(1)];
y=[pt(2),pt(2)+shape(2)];
image(x,y,img);
siz=shape;

## end
#965, 508:
%{
+[M函数](,M代码)
Nini, 打开高斯光束(文件)
Nini, 打开三维场景(文件)
%}

physics_constant;
addpath('Matlab\optics');
addpath('Matlab\space');

lm=lm0;
w0=2*R;
E0=1;
n=1;

DX=max(max(X))-min(min(X));
DY=max(max(Y))-min(min(Y));
x0=linspace(-DX/2,DX/2,N);
y0=linspace(-DY/2,DY/2,N);
[X0,Y0]=meshgrid(x0,y0);
Z0=zeros(size(X0));
[X1,Y1,Z1]=transform_3D(pt2,eulers2(1),eulers2(2),eulers2(3),X0,Y0,Z0);
[~,~,k_0]=Euler_frame(eulers1(1),eulers1(2),eulers1(3));

ans=GaussianBeam_3D(X1,Y1,Z1,pt1,k_0,lm,w0,E0,n);



%{
+[M函数](,M代码)
%}
## end
#966, 341:
"""
库:...
的(库,波前传播)->+[有](波前传播,M代码)->+[没有](计算波前,M代码)
+[新建阅读窗口](,库)

"""

+计算波前(,波前)->+[del](,+计算波前)...
->的(计算波前,库)...

->.(_波前,波前)->+[做](,波前)->[]:
    ->的(_波前,源)->源(,_波前2)...
        ->的(库,波前传播2)->+[code](+[做],波前传播2),
    ->波前#0(,_波前)->的(_光束,波前#0)->_光束"高斯光束"...
        ->的(库,高斯波前)->+[code](+[做],高斯波前),
    ->的(库,波前传播)->+[code](+[做],波前传播)



## end
#971, 705:
"""
M代码:...

"""

+拍摄(_相机,_物体)->+[del](,+拍摄)...
->的(拍摄,M代码)...

->在(_相机,空间点)->朝向(_相机,方向)...
    ->的(_相机,地址)...
->的(_物体,X)->的(_物体,Y)->的(_物体,Z)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"r0"(+[matlab],空间点)->+[.]"Eulers"(+[matlab],方向)...
    ->+[.]"file_name"(+[matlab],地址)...
->+[.](+[matlab],X)->+[.](+[matlab],Y)->+[.](+[matlab],Z)...

->[]{
    []:->的(_相机,D)->+[.](+[matlab],D),
    ->+D"1"->+[.](+[matlab],+D)->+[del](,+D)
}...

->[]{
    []:->在(_物体,空间点#2)->空间点#2->+[.]"r2"(+[matlab],空间点#2),
    ->+r2"0,0,0"->+[.](+[matlab],+r2)->+[del](,+r2)
}...

->[]{
    []:->朝向(_物体,方向#2)->方向#2->+[.]"Eulers2"(+[matlab],方向#2),
    ->+Eulers2"0,0,0"->+[.](+[matlab],+Eulers2)->+[del](,+Eulers2)
}



## end
#973, 250:
%{
记住"Matlab"
+[M函数](,M代码)
%}

data=imread(file_name);
siz=[size(data,2),size(data,1)];

[X,Y,Z]=transform_3D(r2,Eulers2(1),Eulers2(2),Eulers2(3),X,Y,Z);
[tx,ty]=camera_click(r0,Eulers,D,X,Y,Z);
x=tx+siz(1)/2;
y=ty+siz(2)/2;

hold on
plot(x,y,'r-')


## end
#976, 175:
%{

%}

yyaxis left
plot(lm,I0);
xlabel('Wavelength [nm]')
ylabel('Intensity [a.u.]')

yyaxis right
if isempty(phi)
plot(lm,0);
else
plot(lm,phi);
end
ylabel('Phase [rad]')



## end
#978, 227:
"""
M代码:...

"""

+画光谱(,_光谱)->+[del](,+画光谱)...
->的(画光谱,M代码)...

->的(_光谱,波长)->的(_光谱,光强)->的(_光谱,相位)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"lm"(+[matlab],波长)->+[.]"I0"(+[matlab],光强)...
->+[.]"phi"(+[matlab],相位)

## end
#981, 20:

多边形:...
标记点:...




## end
#983, 210:
%{
记住"Matlab"
记住"自然语言"
+[M函数](,M代码)
Nini, 打开平面测绘(文件)
修改标记点"7"
%}

x=get(refPts,'XData');
y=get(refPts,'YData');

if ~isempty(i)
x=x(i);
y=y(i);
end

delete(refPts);

refPts=patch(x,y,[1,1,0],'FaceAlpha',0.5);


## end
#985, 269:
%{
记住"Matlab"
记住"自然语言"
+[M函数](,标记点)
Nini, 打开平面测绘(文件)
Nini, 打开词典的标记点(节点)
%}

x=get(refPts,'XData');
y=get(refPts,'YData');

if ~isempty(i)
x=x(i);
y=y(i);
end

delete(refPts);

refPts=plot(x,y,'o');
set(refPts,'MarkerEdgeColor','k');
set(refPts,'MarkerFaceColor','w');


## end
#988, 450:
%{
+[M函数](,M代码_屏幕)
保存:...
记住"Matlab"


h=get(gca,'Children');
get(h(end))
get(gcf,'Children')
data0=getimage(gca);
%}


h=get(gca,'Children');
data0=get(h(end),'ZData');
X=get(h(end),'XData');
Y=get(h(end),'YData');

global refPts;
pt_x=pts(1,:);
pt_y=pts(2,:);
xs=linspace(pt_x(1),pt_x(2),1000);
ys=linspace(pt_y(1),pt_y(2),1000);

f=interp2(X,Y,data0,xs,ys);
x=sqrt(xs.^2+ys.^2);

figure
plot(x,f)


%{
+[matlab]"figure"(Matlab,)
+[M函数](,M代码_屏幕)
%}
## end
#989, 499:
%{
+[M函数](,M代码)
保存:...
%}

i=findstr(file_name,'.');
file_type=file_name(i:end);

if strcmp(file_type,'.raw')
    I0=readmatrix(file_name,'FileType','text');
    data0=I0;
else
    data0=imread(file_name);
    data0=double(data0);
end

X=0:size(data0,2)-1;
Y=0:size(data0,1)-1;

global refPts;
pt_x=refPts.XData;
pt_y=refPts.YData;
xs=linspace(pt_x(1),pt_x(2),1000);
ys=linspace(pt_y(1),pt_y(2),1000);

f=interp2(X,Y,data0,xs,ys);
x=sqrt(xs.^2+ys.^2);


%{
+[matlab]"figure"(Matlab,)
+[M函数](,M代码)
%}
## end
#991, 509:
%{
+[M函数](,M代码)
保存:...
%}

i=findstr(file_name,'.');
file_type=file_name(i:end);

if strcmp(file_type,'.raw')
    I0=readmatrix(file_name,'FileType','text');
    data0=I0;
else
    data0=imread(file_name);
    data0=double(data0);
end

X=0:size(data0,2)-1;
Y=0:size(data0,1)-1;

global refPts;
pt_x=pts(1,:);
pt_y=pts(2,:);
xs=linspace(pt_x(1),pt_x(2),1000);
ys=linspace(pt_y(1),pt_y(2),1000);

f=interp2(X,Y,data0,xs,ys);
x=sqrt(xs.^2+ys.^2);

figure
plot(x,f)


%{
+[matlab]"figure"(Matlab,)
+[M函数](,M代码)
%}
## end
#994, 535:
"""
M代码:...
M代码_屏幕:...
Nini, 打开星辰(文件)

"""
+截面分布(_图像,标记点)->+[del](,+截面分布)...
->的(截面分布,M代码)->的(截面分布,M代码_屏幕)...

->+[matlab](Matlab,)...

->[]{
    []:->[is](_图像,屏幕)->屏幕->+[code](+[matlab],M代码_屏幕),
        ->+[code](+[matlab],M代码)->+[.]"file_name"(+[matlab],_图像)
}...

->+[.]"pts"(+[matlab],标记点):

->到(+截面分布,_分布)...
    ->[]{
        []:->的(_分布,x)->x->+[o](+[matlab],x),
            ->+的(_分布,+x)->+[o](+[matlab],+x)
    }...
    ->[]{
        []:->的(_分布,f)->f->+[o](+[matlab],f),
            ->+的(_分布,+f)->+[o](+[matlab],+f)
    },
->[]

## end
#996, 4:
1034
## end
#1005, 4:
1067
## end
#1009, 546:
%{
记住"Matlab"
+[M函数](,M代码)
Nini, 打开照片测量的设置相机参数(节点)
Nini, 打开照片测量的camera_from_photo(节点)
Nini, 打开BeamTech测量(文件)
Nini, 打开词典的条目(节点)
%}

physics_constant;
addpath('Matlab\space');

x0=get(refPts,'XData');
y0=get(refPts,'YData');
x0=reshape(x0,1,numel(x0));
y0=reshape(y0,1,numel(y0));

data=imread(file_name);
center=[size(data,2),size(data,1)]/2;
x=x0-center(1);
y=y0-center(2);
[Eulers,r0,D]=camera_from_photo(x,y,1);

abc=[0,0,1];
pt0=[0,0,0];
[X,Y,Z]=GetPointOnPlane(x,y,pt0,abc,Eulers,r0,D);
X(end+1)=X(1);
Y(end+1)=Y(1);
Z(end+1)=Z(1);

mean(Z)


## end
#1011, 537:
"""
M代码:...
+[新建阅读窗口](,M代码)

"""

+计算相机参数(,参数)->+[del](,+计算相机参数)...
->的(计算相机参数,M代码)...

->正在读取(记忆,_当前节点)...

->.(_相机1,参数)...
    ->的(_相机1,地址)->的(_相机1,参考面)...
    ->在(_相机1,空间点#0)->朝向(_相机1,方向)->的(_相机1,D)...
->参考面(,_平面)...
    ->在(_平面,空间点)...
    ->的(_平面,X)->的(_平面,Y)->的(_平面,Z)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],地址)->+[.]"pt0"(+[matlab],空间点)...

->+[o]"Eulers"(+[matlab],方向)->+[o]"r0"(+[matlab],空间点#0)...
    ->+[o](+[matlab],D)...
->+[o](+[matlab],X)->+[o](+[matlab],Y)->+[o](+[matlab],Z)





## end
#1013, 71:
%{
+[M函数](,保存代码)
%}

% %[标题]
p=[%空间点];
x=p(1);
v=0;

V=[];
X=[];
M=1;


## end
#1014, 114:

% %[标题]
p=[%空间点];
u=p(1)-(v+x);
rv=1/%焦距-1/u;
v=1/rv;
x=p(1);
if ~isnan(v/u)
    M=-M*v/u;
end
V=[V,v];
X=[X,x];

## end
#1015, 75:

pt=[x+v,0];

disp(sprintf('Magnification: %.4e',M));


%{
+[M函数](,保存代码)
%}
## end
#1019, 28:

出发代码:...
传播代码:...
成像代码:...

## end
#1022, 22:

更新透镜组:...
更新表达式:...


## end
#1024, 482:
"""
M代码:...

"""

+更新透镜组(,_图形)->+[del](,+更新透镜组)...
->的(更新透镜组,M代码)...

->[]{
    []:->的(_图形,x)->x->+[修改内容](+[临时文本],x),->+的(_图形,+x)
}...
->[]{
    []:->的(_图形,y)->y->+[修改内容](+[临时文本],y),->+的(_图形,+y)
}...

->的(_图形,光路)->的(_图形,x#0)->的(_图形,y#0)...
=>的(光路,_元件)->的(_元件,x#1)->的(_元件,y#1)->在(_元件,空间点#1)...
    =>+[matlab](Matlab,)->+[code](+[matlab],M代码)...
    ->+[.]"pt1"(+[matlab],空间点#1)->+[.](+[matlab],x#1)->+[.](+[matlab],y#1)...
    ->+[o]"x0"(+[matlab],x#0)->+[o]"y0"(+[matlab],y#0)





## end
#1026, 66:
%{
+[M函数](,M代码)
%}

x0=[x0,nan,x+pt1(1)];
y0=[y0,nan,y+pt1(2)];



## end
#1029, 93:
"""


"""

+光束传播图(,_透镜组)->+[del](,+光束传播图)...

->的(_透镜组,光线)->+[光束传播](光线,)->+[显示PPT场景](,_透镜组)


## end
#1034, 119:
"""
Nini, 打开动词(库)

"""

+调换(,_宾语)->+[del](,+调换)...

->[]:
    ->[is](_宾语,顺序)->.(_组,顺序)->+[倒序](,_组),
    ->+[倒序](,_宾语)


## end
#1035, 4:
1113
## end
#1042, 69:

计算IP图像2:...
+[修改标题]"计算IP图像2"(,计算发射角分布2)
计算IP图像2的"发射角分布"替换为"IP图像"




## end
#1044, 1803:
"""
M代码:(全局)...
M代码2:...
+[新建阅读窗口](,M代码)

"""

+计算IP图像2(计算,IP图像)->+[del](,+计算IP图像2)...
->的(计算IP图像2,M代码)->的(计算IP图像2,M代码2)...

->正在读取(记忆,_当前节点)...

->.(_性质,IP图像)->_性质(,)...

->能谱仪(+计算IP图像2,_能谱仪)...
->的(_能谱仪,GasCell)...
    ->在(GasCell,空间点#o)...
->的(_能谱仪,磁铁)...
    ->在(磁铁,空间点#m)->的(磁铁,磁感应强度)->的(磁铁,磁场尺寸)...
->的(_能谱仪,fiducial1)...
    ->在(fiducial1,空间点#1)->的(fiducial1,线位置#1)...
->的(_能谱仪,fiducial2)...
    ->在(fiducial2,空间点#2)->的(fiducial2,线位置#2)...
->的(_能谱仪,IP1)...
    ->在(IP1,空间点#p)...

->能谱(+计算IP图像2,_能谱)...
    ->的(_能谱,x#1)->的(_能谱,f#1)...

->发射角分布(+计算IP图像2,_发射角分布)...
    ->的(_发射角分布,x#2)->的(_发射角分布,f#2)...

->发射角(+计算IP图像2,_发射角)...

->数据(+计算IP图像2,_数据)...
    ->的(_数据,地址)->的(_数据,e_shadows)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],地址)->+[.](+[matlab],e_shadows)...

->+[.]"Cell00"(+[matlab],空间点#o)...
->+[.]"pos_m"(+[matlab],空间点#m)...
    ->+[.]"B0"(+[matlab],磁感应强度)->+[.]"size_m"(+[matlab],磁场尺寸)...
->+[.]"pos_f1"(+[matlab],空间点#1)->+[.]"f_1"(+[matlab],线位置#1)...
->+[.]"pos_f2"(+[matlab],空间点#2)->+[.]"f_2"(+[matlab],线位置#2)...
->+[.]"IP0"(+[matlab],空间点#p)...

->+[.]"E_1"(+[matlab],x#1)->+[.]"I_1"(+[matlab],f#1)...
->+[.]"th_2"(+[matlab],x#2)->+[.]"I_2"(+[matlab],f#2)...

->+[.]"launch_angle"(+[matlab],_发射角)...


->[]{
    []:->的(_数据,Cell校正)->Cell校正->+[.]"dCell_0"(+[matlab],Cell校正),
        ->+[临时文本]"0,0"->+[o]"dCell_0"(+[matlab],+[临时文本])
}...
->[]{
    []:->的(_数据,IP校正)->IP校正->+[.]"dIP_0"(+[matlab],IP校正),
        ->+[临时文本]"0,0"->+[o]"dIP_0"(+[matlab],+[临时文本])
}...

->[]{
    []:->能谱#0(,_能谱)->在(能谱#0,_位置)...
        ->+[code](+[matlab],M代码2)->+[.]"e_shadow_i"(+[matlab],_位置)...
        ->[]{
            []:->+[.]"Dt"(+[matlab],发散度)->的(_性质,发散度)->发散度,
            ->+[.]"Dt"(+[matlab],+[临时文本])->+[临时文本]"0.7e-3"
        },
    
    ->+[code](+[matlab],M代码)
}


## end
#1047, 529:
"""
记住IP图像(节点)

库:...
+[新建阅读窗口](,库)
保存:...

"""

+IP图像(计算,IP图像)->+[del](,+IP图像)...
->的(IP图像#0,库)...

->正在读取(记忆,_当前节点)...
    ->的(库,计算IP图像2)->+[做](计算,IP图像)->+[code](+[做],计算IP图像2)...
->.(_性质,IP图像)->_性质->IP图像#1(,_性质)...
    ->的(_数据,IP图像#1)->的(_当前节点,_数据)...
    ->的(_数据,来源)->来源(,_能谱仪)...
    ->+能谱仪(+[做],_能谱仪)->+[del](,+能谱仪):

->在(IP图像#1,),

->[]{
    的(_数据,发射角分布)->发射角分布(,_A0)->[]{[]=>在(发射角分布,)}...
        ->+发射角分布(+[做],_A0)->+[del](,+发射角分布)...
    ->的(_数据,能谱)->能谱(,_B0)->[]{[]=>在(能谱,)}...
        ->+能谱(+[做],_B0)->+[del](,+能谱)
}


## end
#1048, 1235:
"""
记住计算能谱(节点)

库:...
保存:...

"""

+计算能谱(计算,能谱)->+[del](,+计算能谱)...
->的(计算能谱,库)->的(计算能谱,M代码)...

->正在读取(记忆,_当前节点)...

->.(_文件,能谱)...
    ->的(_文件,地址)->的(_文件,X_shadows)->的(_文件,e_shadows)...
->的(_文件,序号)...

->根据(计算,_能谱仪)...
->的(_能谱仪,GasCell)...
    ->在(GasCell,空间点#o)...
->的(_能谱仪,磁铁)...
    ->在(磁铁,空间点#m)->的(磁铁,磁感应强度)->的(磁铁,磁场尺寸)...
->的(_能谱仪,fiducial1)...
    ->在(fiducial1,空间点#1)->的(fiducial1,线位置#1)...
->的(_能谱仪,fiducial2)...
    ->在(fiducial2,空间点#2)->的(fiducial2,线位置#2)...
->的(_能谱仪,IP1)...
    ->在(IP1,空间点#p)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],地址)...
    ->+[.](+[matlab],X_shadows)->+[.](+[matlab],e_shadows)...
->+[.]"no_"(+[matlab],序号)...

->+[.]"Cell00"(+[matlab],空间点#o)...
->+[.]"pos_m"(+[matlab],空间点#m)...
    ->+[.]"B0"(+[matlab],磁感应强度)->+[.]"size_m"(+[matlab],磁场尺寸)...
->+[.]"pos_f1"(+[matlab],空间点#1)->+[.]"f_1"(+[matlab],线位置#1)...
->+[.]"pos_f2"(+[matlab],空间点#2)->+[.]"f_2"(+[matlab],线位置#2)...
->+[.]"IP0"(+[matlab],空间点#p)...

->[]{
    []:->的(_文件,Cell校正)->Cell校正->+[.]"dCell_0"(+[matlab],Cell校正),
        ->+[.]"dCell_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->的(_文件,IP校正)->IP校正->+[.]"dIP_0"(+[matlab],IP校正),
        ->+[.]"dIP_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}



## end
#1049, 1608:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)

保存:...
+[新建阅读窗口](,保存)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows)*50e-6;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,10);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);

% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
bd_0=[IP(1),0.20];
bd_1=[IP(1),-0.20];
a0=mean(a);

z_i=pos_p(1);
x_i=linspace(-0.2,0.2,8000)+pos_p(2);
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);

S=spectrum(I0,E,-a0,Cell(2),Cell(1),-B0,siz_m0,pos_m0(1),x_i,z_i);


figure
subplot(2,2,1)
x=xo-0.05*ones(1,length(I));
y=ys3(J)+(x-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
plot(xo,yo,'o',xo3,yo3,'o',xf,yf,'o',xs,ys3,'o'...
    ,[xs(J(f1));x(f1)],[ys3(J(f1));y(f1)],'r'...
    ,[xs(J(f2));x(f2)],[ys3(J(f2));y(f2)],'b')

subplot(2,2,2)
plot(es,a,'o')

subplot(2,2,3)
plot(E/e0/1e9,S);

subplot(2,2,4)
plot(x_i,I0);
title(sprintf('No.%d',No))



%{
+[M函数](,M代码)
%}
## end
#1050, 1344:
%{
记住"Matlab"
+[M函数](,测试shY)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,10);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);

%{
记住"Matlab"
Cell1,Cell
mean(Ma1)
mean(Ma)
Ma1,Ma
B1,B0
Fx_1,Fx
Fy_1,Fy
shX1,shX
shY1,shY
size(shY1)
+[M函数](,M代码)
%}

% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
bd_0=[IP(1),0.20];
bd_1=[IP(1),-0.20];
a0=mean(a);

z_i=IPx;
x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);

S=spectrum(I0,E,-a0,Cell(2),Cell(1),-B0,siz_m0,pos_m0(1),x_i,z_i);

x_p=1:8000;
I_s=interp1(x_p,I0,shadow0);
plot(x_p,I0,shadow0,I_s,'o')


%{
+[M函数](,测试shY)
%}
## end
#1053, 3420:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)
Nini, 打开能谱仪原理的spectrum(节点)

e0
保存:...
测试shY:...
+[新建阅读窗口](,保存)

LWFA11:...
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

%shadow0=8001-e_shadows;
%X_shadows0=8001-X_shadows;
shadow0=e_shadows;
X_shadows0=X_shadows;

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);


% image
data=imread(file_name);
%data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=data;
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
a0=mean(a);
%{
clipboard('copy',a)
clipboard('copy',dIPy)
clipboard('copy',Cell)

%}


z_i=IPx;
% x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
% x_i=interp1(shadow0,shY,1:8000);
A=polyfit(shadow0,shY,1);
x_i=A(1)*(1:8000)+A(2);
x_i=x_i;
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);
% I0=I0(end:-1:1);

S=spectrum(I0,E,a0,Cell(2),Cell(1),B0,siz_m0,pos_m0(1),x_i,z_i);
E_range=E(S<max(S)*1e-3);
% E_range0=min(E_range);
E_range0=5e9*e;
S_c=S/4.1e-3*e*e*1e9;

%{
figure;plot(x_i)
记住"Matlab"
+[M函数](,M代码)
%}

figure
subplot(2,2,1)
x=xo-0.05*ones(1,length(I));
y=ys3(J)+(x-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
plot(xo,yo,'o',xo3,yo3,'o',xf,yf,'o',xs,ys3,'o'...
    ,[xs(J(f1));x(f1)],[ys3(J(f1));y(f1)],'r'...
    ,[xs(J(f2));x(f2)],[ys3(J(f2));y(f2)],'b')

xlabel('x [m]')
ylabel('y [m]')
title('X-rays calibration')

subplot(2,2,2)
plot(es,a/1e-3,'o-')
xlabel('E [GeV]')
ylabel('\theta [mrad]')
title('Fiducial launch angles');

subplot(2,1,2)
plot(E/e/1e9,S_c/1e-12);
xlabel('E [GeV]')
ylabel('Density [pC/GeV]')
axis([0,1*E_range0/e/1e9,0,1.2*max(S_c/1e-12)])
title(sprintf('No.%d',no_))

%{
+[M函数](,M代码)
Nini, 打开能谱仪校正(文件)
%}


% collect data
xos=xo3;
yos=ys3(J)+(xos-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
yos=yos-mean(yos);
Yos=[Yos,yos];
figure(100);
hist(Yos/1e-6);
xlabel('e^{-1} source [um]')
title(sprintf('Total number: %d',numel(Yos)))

% collect angle distribution
a_y=zeros(1,length(shadow0));
I_y=data_im(:,int32(shadow0));
for i=1:length(shadow0)
a_y(i)=find(I_y(:,i)==max(I_y(:,i)));
end
a_y=(a_y-2000)*50e-6/(IPx-xo3);

a_x=a-mean(a);
a_y=a_y-mean(a_y);

figure
plot(es/e/1e9,a_x/1e-3,'-o',es/e/1e9,a_y/1e-3,'-o');
xlabel('E [GeV]');
ylabel('\Delta \theta [mrad]')
legend('\theta_x','\theta_y')
title(sprintf('No.%d',no_))

%{
+[M函数](,M代码)
subplot(2,2,4)
xs1=-shY;
yI1=interp1(x_i,I0,xs1);

plot(x_i,I0,xs1,yI1,'o');
%}

%{
if ~exist("data_no")
    data_no=[];
    data_energy=[];
    data_spectrum=[];
end

if sum(data_no==no_)
    data_energy(data_no==no_)=E(E<5e9*e)/e/1e9;
    data_spectrum(data_no==no_)=S_c(E<5e9*e);
else
    data_no(end+1)=no_;
    data_energy(end+1,:)=E(E<5e9*e)/e/1e9;
    data_spectrum(end+1,:)=S_c(E<5e9*e);
end
%}


%{
Nini, 打开LWFA12数据分析的计算IP能谱_LWFA12(节点)

+[M函数](,M代码)
%}
## end
#1055, 1232:
"""
M代码:...
+[新建阅读窗口](,M代码)

"""

+计算全局能谱1(计算,能谱)->+[del](,+计算全局能谱1)...
->的(计算全局能谱1,M代码)...

->正在读取(记忆,_当前节点)...

->.(_文件,能谱)...
    ->的(_文件,地址)->的(_文件,X_shadows)->的(_文件,e_shadows)...
->的(_文件,序号)...

->根据(计算,_能谱仪)...
->的(_能谱仪,GasCell)...
    ->在(GasCell,空间点#o)...
->的(_能谱仪,磁铁)...
    ->在(磁铁,空间点#m)->的(磁铁,磁感应强度)->的(磁铁,磁场尺寸)...
->的(_能谱仪,fiducial1)...
    ->在(fiducial1,空间点#1)->的(fiducial1,线位置#1)...
->的(_能谱仪,fiducial2)...
    ->在(fiducial2,空间点#2)->的(fiducial2,线位置#2)...
->的(_能谱仪,IP1)...
    ->在(IP1,空间点#p)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],地址)...
    ->+[.](+[matlab],X_shadows)->+[.](+[matlab],e_shadows)...
->+[.]"no_"(+[matlab],序号)...

->+[.]"Cell00"(+[matlab],空间点#o)...
->+[.]"pos_m"(+[matlab],空间点#m)...
    ->+[.]"B0"(+[matlab],磁感应强度)->+[.]"size_m"(+[matlab],磁场尺寸)...
->+[.]"pos_f1"(+[matlab],空间点#1)->+[.]"f_1"(+[matlab],线位置#1)...
->+[.]"pos_f2"(+[matlab],空间点#2)->+[.]"f_2"(+[matlab],线位置#2)...
->+[.]"IP0"(+[matlab],空间点#p)...

->[]{
    []:->的(_文件,Cell校正)->Cell校正->+[.]"dCell_0"(+[matlab],Cell校正),
        ->+[.]"dCell_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->的(_文件,IP校正)->IP校正->+[.]"dIP_0"(+[matlab],IP校正),
        ->+[.]"dIP_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}



## end
#1056, 1927:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)
e0
保存:...
测试shY:...
+[新建阅读窗口](,保存)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow0=8001-e_shadows;
X_shadows0=8001-X_shadows;

ei=10;
%int32(e_shadow_i);
e_shadow0=e_shadows(ei);
sh0=8001-e_shadow0;
sel_range=sh0+(-20:20);

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);


% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);


% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
% a0=mean(a);
a0=a(ei);

%{
+[M函数](,互逆测试)
记住"Matlab"
%}

z_i=IPx;
% x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
% x_i=interp1(shadow0,shY,1:8000);
A=polyfit(shadow0,shY,1);
x_i=A(1)*(1:8000)+A(2);
x_i0=-x_i;
E=linspace(0.29,20,10000)*1e9*e;
I00=trapz(data_im);

%x_i=interp1(1:8000,x_i0,sel_range);
%I0=interp1(1:8000,I00,sel_range);
% [S,E_xi]=spectrum(I0,E,-a0,Cell(2),Cell(1),-B0,siz_m0,pos_m0(1),x_i,z_i);

%x_i=interp1(1:8000,x_i0,sh0);
%I0=interp1(1:8000,I00,sh0);
% E_xi=B0*e*c*siz_m0*(z_i-pos_m0(1))./(x_i-Cell(2)+a0*(z_i-Cell(1)));

shY1=interp1(1:8000,x_i0,shadow0);

E_xi=-B0*e*c*siz_m0*(z_i-pos_m0(1))./(shY'-Cell(2)-a*(z_i-Cell(1)));
E_xi=E_xi/e/1e9;

plot(E_xi,a,'-o',es,a,'-*')

%{
+[新建阅读窗口](,互逆测试)
+[M函数](,互逆测试)
%}
## end
#1057, 1344:
%{
记住"Matlab"
+[M函数](,测试shY)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,10);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);

%{
记住"Matlab"
Cell1,Cell
mean(Ma1)
mean(Ma)
Ma1,Ma
B1,B0
Fx_1,Fx
Fy_1,Fy
shX1,shX
shY1,shY
size(shY1)
+[M函数](,M代码)
%}

% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
bd_0=[IP(1),0.20];
bd_1=[IP(1),-0.20];
a0=mean(a);

z_i=IPx;
x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);

S=spectrum(I0,E,-a0,Cell(2),Cell(1),-B0,siz_m0,pos_m0(1),x_i,z_i);

x_p=1:8000;
I_s=interp1(x_p,I0,shadow0);
plot(x_p,I0,shadow0,I_s,'o')


%{
+[M函数](,测试shY)
%}
## end
#1058, 1608:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)

保存:...
+[新建阅读窗口](,保存)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows)*50e-6;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,10);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);

% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
bd_0=[IP(1),0.20];
bd_1=[IP(1),-0.20];
a0=mean(a);

z_i=pos_p(1);
x_i=linspace(-0.2,0.2,8000)+pos_p(2);
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);

S=spectrum(I0,E,-a0,Cell(2),Cell(1),-B0,siz_m0,pos_m0(1),x_i,z_i);


figure
subplot(2,2,1)
x=xo-0.05*ones(1,length(I));
y=ys3(J)+(x-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
plot(xo,yo,'o',xo3,yo3,'o',xf,yf,'o',xs,ys3,'o'...
    ,[xs(J(f1));x(f1)],[ys3(J(f1));y(f1)],'r'...
    ,[xs(J(f2));x(f2)],[ys3(J(f2));y(f2)],'b')

subplot(2,2,2)
plot(es,a,'o')

subplot(2,2,3)
plot(E/e0/1e9,S);

subplot(2,2,4)
plot(x_i,I0);
title(sprintf('No.%d',No))



%{
+[M函数](,M代码)
%}
## end
#1062, 2521:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)
e0
保存:...
测试shY:...
+[新建阅读窗口](,保存)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow0=8001-e_shadows;
X_shadows0=8001-X_shadows;

ei=int32(e_shadow_i);
e_shadow0=e_shadows(ei);
sh0=8001-e_shadow0;
sel_range=sh0+(-20:20);

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);


% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);


% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
% a0=mean(a);
a0=a(ei);

launch_angle=a0;

%{
+[M函数](,M代码)
记住"Matlab"
%}

z_i=IPx;
% x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
% x_i=interp1(shadow0,shY,1:8000);
A=polyfit(shadow0,shY,1);
x_i=A(1)*(1:8000)+A(2);
x_i0=x_i;
E=linspace(0.29,20,10000)*1e9*e;
I00=trapz(data_im);

x_i=x_i0;
I0=I00;
%x_i=interp1(1:8000,x_i0,sel_range);
%I0=interp1(1:8000,I00,sel_range);

S=spectrum(I0,E,a0,Cell(2),Cell(1),B0,siz_m0,pos_m0(1),x_i,z_i);
S_c=S/4.1e-3*e*e*1e9;

E=E(S_c~=0);
S_c=S_c(S_c~=0);


%{
Nini, 打开电子能谱的spectrum(节点)
记住"Matlab"
互逆测试:...
+[新建阅读窗口](,互逆测试)
+[M函数](,M代码)
%}

figure
subplot(2,2,1)
x=xo-0.05*ones(1,length(I));
y=ys3(J)+(x-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
plot(xo,yo,'o',xo3,yo3,'o',xf,yf,'o',xs,ys3,'o'...
    ,[xs(J(f1));x(f1)],[ys3(J(f1));y(f1)],'r'...
    ,[xs(J(f2));x(f2)],[ys3(J(f2));y(f2)],'b')

xlabel('x [m]')
ylabel('y [m]')
title('X-rays calibration')

subplot(2,2,2)
plot(es,a/1e-3,'o-')
xlabel('E [GeV]')
ylabel('\theta [mrad]')
title('Fiducial launch angles');

subplot(2,1,2)
plot(E/e/1e9,S_c/1e-12);
xlabel('E [GeV]')
ylabel('Density [pC/GeV]')
axis([min(E)/e/1e9,max(E)/e/1e9,0,1.2*max(S_c/1e-12)])

%{
+[M函数](,M代码)
%}

%{
subplot(2,2,4)
xs1=-shY;
yI1=interp1(x_i,I0,xs1);

plot(x_i,I0,xs1,yI1,'o');
%}


E_out=E;
I_out=S_c;



%{
Nini, 打开LWFA12数据分析的计算IP能谱_LWFA12(节点)

+[M函数](,M代码)
互逆测试:...
%}
## end
#1064, 1982:
"""
M代码:...
M代码2:...
+[新建阅读窗口](,M代码2)

保存:...

"""

+计算能谱2(计算,能谱)->+[del](,+计算能谱2)...
->的(计算能谱2,M代码)->的(计算能谱2,M代码2)...

->正在读取(记忆,_当前节点)...

->.(_性质,能谱)->_性质(,)...

->能谱#1(,_性质)->的(_文件,能谱#1)->的(_当前节点,_文件)...
    ->的(_文件,地址)->的(_文件,X_shadows)->的(_文件,e_shadows)...

->的(_文件,来源)->来源(,_能谱仪)...
->的(_能谱仪,GasCell)...
    ->在(GasCell,空间点#o)...
->的(_能谱仪,磁铁)...
    ->在(磁铁,空间点#m)->的(磁铁,磁感应强度)->的(磁铁,磁场尺寸)...
->的(_能谱仪,fiducial1)...
    ->在(fiducial1,空间点#1)->的(fiducial1,线位置#1)...
->的(_能谱仪,fiducial2)...
    ->在(fiducial2,空间点#2)->的(fiducial2,线位置#2)...
->的(_能谱仪,IP1)...
    ->在(IP1,空间点#p)...

->+[matlab](Matlab,)...
->+[.]"file_name"(+[matlab],地址)...
    ->+[.](+[matlab],X_shadows)->+[.](+[matlab],e_shadows)...

->+[.]"Cell00"(+[matlab],空间点#o)...
->+[.]"pos_m"(+[matlab],空间点#m)...
    ->+[.]"B0"(+[matlab],磁感应强度)->+[.]"size_m"(+[matlab],磁场尺寸)...
->+[.]"pos_f1"(+[matlab],空间点#1)->+[.]"f_1"(+[matlab],线位置#1)...
->+[.]"pos_f2"(+[matlab],空间点#2)->+[.]"f_2"(+[matlab],线位置#2)...
->+[.]"IP0"(+[matlab],空间点#p)...

->[]{
    []:->的(_文件,Cell校正)->Cell校正->+[o]"dCell_0"(+[matlab],Cell校正),
        ->+的(_文件,+Cell校正)->+Cell校正"0,0"->+[o]"dCell_0"(+[matlab],+Cell校正)
}...
->[]{
    []:->的(_文件,IP校正)->IP校正->+[o]"dIP_0"(+[matlab],IP校正),
        ->+的(_文件,+IP校正)->+IP校正"0,0"->+[o]"dIP_0"(+[matlab],+IP校正)
}...

->[]{
    []:->的(_性质,x)->x->+[o]"E_out"(+[matlab],x),
        ->+的(_性质,+x)->+[o]"E_out"(+[matlab],+x)
}...
->[]{
    []:->的(_性质,f)->f->+[o]"I_out"(+[matlab],f),
        ->+的(_性质,+f)->+[o]"I_out"(+[matlab],+f)
}...

->[]{
    []:->在(能谱#1,_位置)->_位置(,)...
        ->+[code](+[matlab],M代码)->+[.]"e_shadow_i"(+[matlab],_位置)...
    ->[]{
        []:->的(_文件,发射角)->发射角->在(发射角,_位置)...
            ->+[o]"launch_angle"(+[matlab],发射角),
        ->+的(_文件,+发射角)->+在(+发射角,_位置)...
            ->+[o]"launch_angle"(+[matlab],+发射角)
    },

    ->+[code](+[matlab],M代码2)->[]{
        []:->的(_文件,发射角)->发射角->+[o]"launch_angle"(+[matlab],发射角),
            ->+的(_文件,+发射角)->+发射角->+[o]"launch_angle"(+[matlab],+发射角)
    }
}



## end
#1067, 77:

计算全局能谱1:...
计算能谱2:...
将条目"计算全局能谱1"复制为条目"计算能谱2"
计算全局能谱1的"计算能谱"替换为"计算全局能谱1"



## end
#1070, 623:
"""
记住计算能谱(节点)

库:...
+[新建阅读窗口](,库)
保存:...

"""

+计算能谱(计算,能谱)->+[del](,+计算能谱)...
->的(计算能谱,库)...

->正在读取(记忆,_当前节点):

->[]{
    .(_文件,能谱)->_文件(,)...
        ->的(_文件,地址)->的(_文件,X_shadows)->的(_文件,e_shadows)...
        ->的(_文件,序号)...
    
    ->根据(计算,_能谱仪)->_能谱仪(,)...
        ->的(_能谱仪,GasCell)->的(_能谱仪,磁铁)...
        ->的(_能谱仪,fiducial1)->的(_能谱仪,fiducial2)...
        ->的(_能谱仪,IP1)...

    ->的(库,计算全局能谱1)->计算全局能谱1->+[做](计算,能谱)->+[code](+[做],计算全局能谱1)
},

->[]{
    .(_性质,能谱)->_性质(,)...
        ->能谱#1(,_性质)->的(_数据,能谱#1)->的(_当前节点,_数据)...
    ->的(_数据,来源)->来源(,_能谱仪)...

    ->的(库,计算能谱2)->计算能谱2->+[做](计算,能谱)->+[code](+[做],计算能谱2)
}


## end
#1073, 63:
有什么

二维背向:...
三维背向:...
+[修改标题]"二维背向"(,二维旋转)
二维背向的"朝向"替换为"背向"



## end
#1074, 4:
1267
## end
#1077, 337:
"""
操作:...
+[新建阅读窗口](,操作)
Nini, 打开三维场景(文件)
操作的"朝向"替换为"背向"

"""

+三维背向(,背向)->+[del](,+三维背向)...
->的(三维背向,操作)...

->背向(_物体,_方向)->_方向->_物体->[]{
    []:->朝向#1(_物体,方向)->方向,->+朝向(_物体,+方向)
}->朝向#1(_物体,方向)...

->[]{
    []:->在(_方向,空间点#2)->空间点#2->+[做](,背向)->+[code](+[做],操作),
    ->[is](_方向,临时文本)->临时文本->+[修改内容](临时文本,方向)
}...

->+[显示三维图形](,_物体)



## end
#1079, 359:
"""
库:...
Nini, 打开三维场景(文件)

保存:...

"""

+旋转(_物体,_角度)->+[del](,+旋转)...
->的(旋转,库)...

->[]:
    ->绕(+旋转,_原点)...
    ->[]{
        []:->[is](_原点,标记点)->+[调用词典名词](标记点,+[定义])->+[定义],
            ->[]
        }...
    ->+[旋转](_角度,_物体)->+相对(+[旋转],_原点)->+[del](,+相对)...
    ->+[显示PPT图形](,_物体),

->+[旋转](_角度,_物体)->+相对(+[旋转],_物体)->+[del](,+相对)...
    ->+[显示PPT图形](,_物体)
## end
#1080, 621:
"""
操作:...
操作的"朝向"替换为"背向"
Nini, 打开PPT(文件)

"""

+二维背向(,背向)->+[del](,+二维背向)...
->的(二维背向,操作)...

->背向(_物体,_方向)->_方向(,)...
->_物体->[]{
    []:->朝向#1(_物体,方向)->方向,
    ->+朝向(_物体,+方向)->+方向"0"
}...
->朝向#1(_物体,方向)->方向(,)...

->[python]"state=True"(Python,)->[]{
    []:->在(_方向,空间点#2)->空间点#2->+[做](,背向)->+[code](+[做],操作),
    ->[is](_方向,方向#0)->方向#0->+[修改内容](,方向)...
        ->+[.]"angle"([python],方向#0)...
        ->[python]"ans=angle[0]-180"(Python,+[修改内容]),
    ->[is](_方向,临时文本)->临时文本->+[修改内容]#3(,方向)...
        ->+[.]"angle"([python]#2,临时文本)...
        ->[python]#2"ans=angle[0]-180"(Python,+[修改内容]#3)
}...

->+[显示PPT图形](,_物体)


## end
#1083, 312:
"""
M代码:...
Nini, 打开三维场景的旋转(节点)
+[修改天使]

"""

+操作(,背向#0)->+[del](,+操作)...
->的(操作,M代码)...

->背向#0(_相机,_物体)->_相机->_物体(,)...
->在(_相机,空间点#1)->在(_物体,空间点#2)...
->朝向(_相机,方向)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"p0"(+[matlab],空间点#2)->+[.]"r0"(+[matlab],空间点#1)...
->+[o]"Eulers"(+[matlab],方向)







## end
#1085, 92:
%{
+[M函数](,M代码)
记住"Matlab"
%}


addpath('Matlab\space');

Eulers=camera_lookat(p0,r0,0);




## end
#1094, 359:
"""
库:...
Nini, 打开三维场景(文件)

保存:...

"""

+旋转(_物体,_角度)->+[del](,+旋转)...
->的(旋转,库)...

->[]:
    ->绕(+旋转,_原点)...
    ->[]{
        []:->[is](_原点,标记点)->+[调用词典名词](标记点,+[定义])->+[定义],
            ->[]
        }...
    ->+[旋转](_角度,_物体)->+相对(+[旋转],_原点)->+[del](,+相对)...
    ->+[显示PPT图形](,_物体),

->+[旋转](_角度,_物体)->+相对(+[旋转],_物体)->+[del](,+相对)...
    ->+[显示PPT图形](,_物体)
## end
#1095, 3:
958
## end
#1096, 3:
476
## end
#1097, 2:
38
## end
#1098, 3:
961
## end
#1099, 5:
58,58
## end
#1101, 355:
"""
Nini, 打开PPT(文件)
+[旋转]

"""

+二维旋转(,旋转)->+[del](,+二维旋转)...

->旋转(_物体,_角度)->_物体->_角度:
    ->绕(旋转,_原点)...
    ->[]{
        []:->[is](_原点,标记点)->+[调用词典名词](标记点,+[定义])->+[定义],
            ->[]
        }...
    ->+[旋转](_角度,_物体)->+相对(+[旋转],_原点)->+[del](,+相对)...
    ->+[显示PPT图形](,_物体),

->+[旋转](_角度,_物体)->+相对(+[旋转],_物体)->+[del](,+相对)...
    ->+[显示PPT图形](,_物体)
## end
#1102, 222:
%{
+[M函数](,M代码)
记住"Matlab"
%}

%zu=[zu0(2),-zu0(1),zu0(3)];
zu=zu0;

pt=pt-r0;
[px,py,pz]=rotation_3D(pt(1),pt(2),pt(3),zu,theta);
pt=[px,py,pz];
pt=pt+r0;
Eulers=rotation_Eulers(Eulers,zu,theta);
Eulers=real(Eulers);





## end
#1104, 386:
"""
M代码:...
Nini, 打开三维场景的旋转(节点)

"""

+操作(_物体,_角度)->+[del](,+操作)...
->的(操作,M代码)...

->方向(+操作,)->原点(+操作,)...
->在(_物体,空间点#2)->朝向(_物体,方向#2)...

->+[matlab]"addpath('Matlab\space')"(Matlab,)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"theta"(+[matlab],_角度)...
->+[o]"pt"(+[matlab],空间点#2)->+[o]"Eulers"(+[matlab],方向#2)...

->+[.]"r0"(+[matlab],原点)->+[.]"zu0"(+[matlab],方向)





## end
#1106, 556:
"""
操作:...
+[新建阅读窗口](,操作)

"""

+三维旋转(,旋转)->+[del](,+三维旋转)...
->的(三维旋转,操作)...

->旋转(_物体,_角度)->_角度(,)...
    ->_物体->在(_物体,空间点)...

->+方向"1,0,0"(+[做],)->[]{
    []:->沿(旋转,X方向)->X方向->+[修改内容]"0,1,0"(,+方向),
        ->沿(旋转,Y方向)->Y方向->+[修改内容]"1,0,0"(,+方向),
        ->沿(旋转,Z方向)->Z方向->+[修改内容]"0,0,1"(,+方向),
        ->沿(旋转,_物体1)->_物体1->朝向(_物体1,方向#1)->+[修改内容](方向#1,方向),
    ->[]
}...

->+原点(+[做],)->[]{
    []:->绕(旋转,_参考)->_参考->在(_参考,空间点#1)->+[修改内容](空间点#1,+原点),
        ->+[修改内容](空间点,+原点)
}...

->+[做](_物体,_角度)->+[code](+[做],操作)->+[显示三维图形](,_物体)...

->+[del](,+方向)



## end
#1109, 61:

二维旋转:...
三维旋转:...
将条目"二维旋转"复制为条目"三维旋转"
二维旋转的"旋转"替换为"二维旋转"



## end
#1112, 388:
"""
库:...
Nini, 打开三维场景(文件)
P代码:...

保存:...

"""

+旋转(_物体,_角度)...
->的(旋转,库)->的(旋转,P代码)...
->的(库,二维旋转)->的(库,三维旋转)...

->[]{
    []:->在(_物体,空间点)->空间点->+[code]([python],P代码)->[python](Python,)...
        ->+[做](,+旋转)->+[code](+[做],二维旋转),
    ->的(_物体,x)->x(,)...
        ->+[做](,+旋转)->+[code](+[做],二维旋转),
    ->的(_物体,X)->X(,)...
        ->+[做](,+旋转)->+[code](+[做],三维旋转)
}...

->+[del](,+旋转)



## end
#1114, 578:
"""
描述结构:...
库:...
Nini, 打开三维场景(文件)

保存:...

"""

+朝向(_物体,_方向)...
->的(朝向,库)->的(库,三维朝向)->的(库,二维朝向)...

->Matlab->[]{
    []:->+[.]"an"([matlab],_方向)->[matlab]"state=(length(an)==3)"(Matlab,)...
       ->+[做](,+朝向)->+[code](+[做],三维朝向),
    ->的(_物体,X)->X(,)...
       ->+[做](,+朝向)->+[code](+[做],三维朝向),
    ->的(_物体,x)->x(,)...
        ->+[做](,+朝向)->+[code](+[做],二维朝向),
    ->的(_方向,x#1)->x#1(,)...
        ->+[做](,+朝向)->+[code](+[做],二维朝向),
    ->的(_物体,_物体1)->_物体1->的(_物体1,X#2)...
        ->+[做](,+朝向)->+[code](+[做],三维朝向),

    ->+[做](,+朝向)->+[code](+[做],二维朝向)
}...

->+[del](,+朝向)



## end
#1115, 3:
958
## end
#1116, 3:
476
## end
#1117, 2:
38
## end
#1118, 3:
961
## end
#1119, 5:
58,58
## end
#1121, 472:
"""
操作:...
操作2:...
(朝向标记点)
Nini, 打开PPT(文件)

"""

+二维朝向(,朝向)->+[del](,+二维朝向)...
->的(二维朝向,操作)->的(二维朝向,操作2)...

->朝向(_物体,_方向)->_方向(,)...
->_物体->[]{
    []:->朝向#1(_物体,方向)->方向,
    ->+朝向(_物体,+方向)->+方向"0"
}...
->朝向#1(_物体,方向)->方向(,)...

->[]{
    []:->在(_方向,空间点#2)->空间点#2->+[做](,朝向)->+[code](+[做],操作),
    ->[is](_方向,标记点)->标记点->+[做](_物体,标记点)->+[code](+[做],操作2),
    ->[is](_方向,方向#0)->方向#0->+[修改内容](方向#0,方向),
    ->[is](_方向,临时文本)->临时文本->+[修改内容](临时文本,方向)
}...

->+[显示PPT图形](,_物体)


## end
#1122, 3:
958
## end
#1123, 3:
476
## end
#1124, 3:
553
## end
#1125, 3:
961
## end
#1126, 5:
27,27
## end
#1128, 90:
%{
+[M函数](,M代码)
记住"Matlab"
%}


addpath('Matlab\space');

Eulers=camera_lookat(r0,p0,0);


## end
#1130, 303:
"""
M代码:...
Nini, 打开三维场景的旋转(节点)

"""

+操作(,朝向#0)->+[del](,+操作)...
->的(操作,M代码)...

->朝向#0(_相机,_物体)->_相机->_物体(,)...
->在(_相机,空间点#1)->在(_物体,空间点#2)...
->朝向(_相机,方向)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"p0"(+[matlab],空间点#2)->+[.]"r0"(+[matlab],空间点#1)...
->+[o]"Eulers"(+[matlab],方向)






## end
#1132, 394:
"""
操作:...
+[新建阅读窗口](,操作)
Nini, 打开三维场景(文件)

"""

+三维朝向(,朝向)->+[del](,+三维朝向)...
->的(三维朝向,操作)...

->朝向(_物体,_方向)->_方向->_物体(,)...
    ->[]{
        []:->朝向(_物体,方向#1)->方向#1,->+朝向(_物体,+方向)->+方向
    }->朝向#1(_物体,方向)...

->[]{
    []:->在(_方向,空间点#2)->空间点#2->+[做](,朝向)->+[code](+[做],操作),
    ->[is](_方向,临时文本)->临时文本->+[修改内容](临时文本,方向),
    ->[is](_方向,方向#0)->方向#0->+[修改内容](方向#0,方向)
}...

->+[显示三维图形](,_物体)



## end
#1135, 58:

二维朝向:...
三维朝向:...
二维朝向的"旋转"替换为"朝向"

+[修改标题]"二维朝向"(,二维旋转)

## end
#1138, 259:
"""
描述结构:...
库:...
Nini, 打开三维场景(文件)

保存:...

"""

+朝向(_物体,_方向)...
->的(朝向,库)->的(朝向,描述结构)...

->+[code]([想],描述结构)->[想](_物体,_方向)...
->操作([想],)->[]{
    []=>的(操作,_操作)->_操作=>的(库,_条目)->[eq](_条目,_操作)...
        ->+[做](,+朝向)->+[code](+[做],_条目)
}...

->+[del](,+朝向)



## end
#1140, 105:
%{
记住"Matlab"
+[M函数](,M代码)
%}

if siz(1)~=size(value,1) || siz(2)~=size(value,2)
value=zeros(siz);
end



## end
#1142, 504:
"""
[eq](+[定义],定义)
M代码:...
Nini, 打开图形库的三维图形库(节点)

"""

+定义(_网格,网格)->+[del](,+定义)...
->的(定义,M代码)...

->[]{
    []:->的(_网格,尺寸)->尺寸,
        ->+的(_网格,+尺寸)->+尺寸"1,1"
}...
->[]{
    []:->的(_网格,数目)->数目,->+的(_网格,+数目)->+数目"10,10"
}...

->的(_网格,数目)...
->[]{
    []:->[==](,+定义),
        ->+[修改内容](,数目)->[m_text](网格,+[修改内容])
}...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"siz"(+[matlab],数目)...
->[]{
    []:->的(_网格,值)->值->+[o]"value"(+[matlab],值),
        ->+的(_网格,+值)->+[o]"value"(+[matlab],+值)
}



## end
#1144, 27:


定义:...
定义的"平面"替换为"网格"




## end
#1146, 143:
%{
+[M函数](,M代码)
%}

if length(siz)<2
    siz=[1,1];
end

X=[0,siz(1),siz(1),0,0]'-siz(1)/2;
Y=[0,0,siz(2),siz(2),0]'-siz(2)/2;
Z=[0,0,0,0,0]';

## end
#1148, 734:
"""
[eq](+[定义],定义)
M代码:...
Nini, 打开图形库的三维图形库(节点)

"""

+定义(_平面,平面)->+[del](,+定义)...
->的(定义,M代码)...

->[]{
    []:->的(_平面,类型)->类型->+[修改内容]"平面"(,类型),
        ->+的(_平面,+类型)->+类型"平面"
}...
->[]{
    []:->在(_平面,空间点)->空间点,
        ->+在(_平面,+空间点)->+空间点"0,0,0"
}...
->[]{
    []:->朝向(_平面,方向)->方向,
        ->+朝向(_平面,+方向)->+方向"0,0,0"
}...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"siz"(+[matlab],+[临时文本])->[m_text](平面,+[临时文本])...

->[]{
    []:->的(_平面,X)->X->+[o](+[matlab],X),
        ->+的(_平面,+X)->+[o](+[matlab],+X)
}...
->[]{
    []:->的(_平面,Y)->Y->+[o](+[matlab],Y),
        ->+的(_平面,+Y)->+[o](+[matlab],+Y)
}...
->[]{
    []:->的(_平面,Z)->Z->+[o](+[matlab],Z),
        ->+的(_平面,+Z)->+[o](+[matlab],+Z)
}...

->+[显示三维图形](,_平面)



## end
#1150, 28:


定义:...
定义的"立方体"替换为"平面"




## end
#1153, 165:
"""
M代码:...

"""

+网格(,网格)->+[del](,+网格)...
->的(网格#0,M代码)...

->.(_网格,网格)->的(_网格,值)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"value"(+[matlab],值)




## end
#1155, 205:
%{
+[M函数](,M代码)
记住"Matlab"
%}

figure
im_val=value;
im_val(value~=0)=255;
image(255-im_val)
colormap('gray')
set(gca,'YDir','normal')
axis equal
rectangle('Position',[0.5,0.5,size(value,2),size(value,1)])

## end
#1158, 75:

pt=[x+v,0];

disp(sprintf('Magnification: %.4e',M));


%{
+[M函数](,保存代码)
%}
## end
#1159, 114:

% %[标题]
p=[%空间点];
u=p(1)-(v+x);
rv=1/%焦距-1/u;
v=1/rv;
x=p(1);
if ~isnan(v/u)
    M=-M*v/u;
end
V=[V,v];
X=[X,x];

## end
#1160, 71:
%{
+[M函数](,保存代码)
%}

% %[标题]
p=[%空间点];
x=p(1);
v=0;

V=[];
X=[];
M=1;


## end
#1164, 28:

出发代码:...
传播代码:...
成像代码:...

## end
#1165, 854:
%{
+[M函数](,保存代码)
%}

% %[标题]
p=[-200.0, 0.0];
x=p(1);
v=0;

V=[];
X=[];
M=1;


% 入口
p=[0,0];
u=p(1)-(v+x);
rv=1/inf-1/u;
v=1/rv;
x=p(1);
if ~isnan(v/u)
    M=-M*v/u;
end
V=[V,v];
X=[X,x];

% L0
p=[0*150+100,0];
u=p(1)-(v+x);
rv=1/-100-1/u;
v=1/rv;
x=p(1);
if ~isnan(v/u)
    M=-M*v/u;
end
V=[V,v];
X=[X,x];

% L1
p=[1*150+100,0];
u=p(1)-(v+x);
rv=1/100-1/u;
v=1/rv;
x=p(1);
if ~isnan(v/u)
    M=-M*v/u;
end
V=[V,v];
X=[X,x];

% L2
p=[2*150+100,0];
u=p(1)-(v+x);
rv=1/100-1/u;
v=1/rv;
x=p(1);
if ~isnan(v/u)
    M=-M*v/u;
end
V=[V,v];
X=[X,x];

% L3
p=[3*150+100,0];
u=p(1)-(v+x);
rv=1/100-1/u;
v=1/rv;
x=p(1);
if ~isnan(v/u)
    M=-M*v/u;
end
V=[V,v];
X=[X,x];

% 出口
p=[4*150+100,0];
u=p(1)-(v+x);
rv=1/inf-1/u;
v=1/rv;
x=p(1);
if ~isnan(v/u)
    M=-M*v/u;
end
V=[V,v];
X=[X,x];

pt=[x+v,0];

disp(sprintf('Magnification: %.4e',M));


%{
+[M函数](,保存代码)
%}
## end
#1168, 1335:
"""
M代码:...
+[新建阅读窗口](,M代码)
Nini, 打开透镜设计的计算成像过程(节点)
计算像距:...

"""

+像距(计算,像距)->+[del](,+像距)...
->的(像距#o0,M代码)->的(像距#o0,计算像距)...
->的(计算像距,出发代码)->的(计算像距,传播代码)->的(计算像距,成像代码)...

->正在读取(记忆,_当前节点)...

->.(_望远镜,像距)->的(_望远镜,光路)...
    ->的(_望远镜,像)->像(,_像)...
    ->的(_望远镜,物)->物(,_物)->_物->在(_物,空间点#u)...

->+[临时文本]->[]{
    +[模板文本](出发代码,+[增加内容])...
    ->+[.](+[模板文本],空间点#u)...
    ->+[增加内容](,+[临时文本])
}...

->+[临时文本]#2->[]{
    []=>的(光路,_M)->_M=>在(_M,空间点)...
    ->+[修改内容](+[临时文本]#2,+[增加内容])...
    ->+[标题](_M,)->+[模板文本](传播代码,+[增加内容])...
    ->+[.](+[模板文本],空间点)->+[.](+[模板文本],+[标题])...
    ->+[增加内容](,+[临时文本]#2):
        ->的(_M,焦距)->+[.](+[模板文本],焦距),
        ->+[临时文本]#1"inf"->+[.]"焦距"(+[模板文本],+[临时文本]#1)
}->+[增加内容](+[临时文本]#2,+[临时文本])...

->+[增加内容](成像代码,+[临时文本])...

->+[修改内容](+[临时文本],M代码)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...

->[]{
    []:->在(_像,空间点#v)->空间点#v->+[o]"pt"(+[matlab],空间点#v),
        ->+在(_像,+空间点)->+[o]"pt"(+[matlab],+空间点)
}...

->[]{
    []:->的(_物,x)->x->的(_物,y)->y(,)...
        ->+[matlab]"x0=M*x;y0=M*y;"(Matlab,)...
        ->+[.](+[matlab],x)->+[.](+[matlab],y)->[]{

            []:->的(_像,x#v)->x#v->的(_像,y#v)->y#v(,)...
                ->+[o]"x0"(+[matlab],x#v)->+[o]"y0"(+[matlab],y#v),

            ->+的(_像,+x)->+的(_像,+y)...
                ->+[o]"x0"(+[matlab],+x)->+[o]"y0"(+[matlab],+y)
        }
}



## end
#1171, 18:

立方体:...
圆柱体:...


## end
#1173, 546:
%{
+[M函数](,立方体)
记住"Matlab"
Nini, 打开三维场景(文件)
Nini, 打开三维场景的显示三维场景(节点)
Nini, 打开光线传播(文件)
%}

addpath('Matlab\space');

siz1=[max(max(X1)),max(max(Y1)),max(max(Z1))];

x0=linspace(-siz0(1)/2,siz0(1)/2,size(value0,2));
y0=linspace(-siz0(2)/2,siz0(2)/2,size(value0,1));

[X0,Y0]=meshgrid(x0,y0);
Z0=zeros(size(X0));


[X,Y,Z]=transform_3D(pt0,Eulers0(1),Eulers0(2),Eulers0(3),X0,Y0,Z0);
[X,Y,Z]=Local_coordinates(X,Y,Z,pt1,Eulers1);

value0(X<=siz1(1)&X>=-siz1(1)&Y<=siz1(2)&Y>=-siz1(2)&Z<=siz1(3)&Z>=0)=1;



%{
set(gca,'YDir','normal')
+[M函数](,立方体)
%}
## end
#1175, 518:
%{
+[M函数](,圆柱体)
记住"Matlab"
Nini, 打开三维场景(文件)
Nini, 打开三维场景的显示三维场景(节点)
Nini, 打开光线传播(文件)
%}

addpath('Matlab\space');

siz1=[max(max(X1)),max(max(Z1))];

x0=linspace(-siz0(1)/2,siz0(1)/2,size(value0,2));
y0=linspace(-siz0(2)/2,siz0(2)/2,size(value0,1));

[X0,Y0]=meshgrid(x0,y0);
Z0=zeros(size(X0));


[X,Y,Z]=transform_3D(pt0,Eulers0(1),Eulers0(2),Eulers0(3),X0,Y0,Z0);
[X,Y,Z]=Local_coordinates(X,Y,Z,pt1,Eulers1);
R=sqrt(X.^2+Y.^2);

value0(R<=siz1(1)&Z<=siz1(2)&Z>=0)=1;




%{
set(gca,'YDir','normal')
+[M函数](,圆柱体)
%}
## end
#1177, 152:
"""
库:...
+[新建阅读窗口](,库)

测试:...

"""

+清空(,_文件)->+[del](,+清空)...
->+[临时文本]->的(清空,库):

->+[做](,_文件)->的(库,_类型)->[eq](_文件,_类型)...
    ->+[code](+[做],_类型)


## end
#1179, 18:


网格:...
标记点:...


## end
#1181, 165:
"""
M代码:...

"""

+网格(,网格)->+[del](,+网格)...
->的(网格#0,M代码)...

->.(_网格,网格)->的(_网格,值)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[o]"value0"(+[matlab],值)


## end
#1183, 51:
%{
+[M函数](,M代码)
%}

value0=zeros(size(value0));




## end
#1184, 1340:
%{
记住"Matlab"
+[M函数](,M代码2)

保存:
%}

p_x=1700:2200;
p_y=-20:20;

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow0=8001-e_shadows;
X_shadows0=8001-X_shadows;

ei=int32(e_shadow_i);
e_shadow0=e_shadows(ei);
sh0=8001-e_shadow0;
sel_range=int32(sh0+p_y);

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
L0=IPx-Cell(1);

% data
data0=imread(file_name);
data_im=[zeros(4000,2500),data0(:,end:-1:1)];
data_im=double(data_im);

data=data_im(p_x,sel_range);
I_y=trapz(data');
th_x=(p_x-2000)*50e-6/L0;

subplot(1,2,1);
plot(th_x/1e-3,I_y/trapz(I_y))
xlabel('\theta_x [mrad]')
ylabel('Intensity [a.u.]')

subplot(1,2,2)
surf(sel_range,p_x,data)
shading interp
view([0,90])
axis equal

%{
Nini, 打开LWFA12数据分析的计算IP能谱_LWFA12(节点)
记住"Matlab"
+[M函数](,M代码)
%}
## end
#1186, 1447:
"""
M代码:...
+[新建阅读窗口](,M代码)

"""

+计算能谱2(计算,能谱)->+[del](,+计算能谱2)...
->的(计算能谱2,M代码)...

->正在读取(记忆,_当前节点)...

->.(_性质,能谱)->_性质(,)...

->能谱#1(,_性质)->的(_文件,能谱#1)->的(_当前节点,_文件)...
    ->的(_文件,地址)->的(_文件,X_shadows)->的(_文件,e_shadows)...
    ->在(能谱#1,_位置)...

->的(_文件,来源)->来源(,_能谱仪)...
->的(_能谱仪,GasCell)...
    ->在(GasCell,空间点#o)...
->的(_能谱仪,磁铁)...
    ->在(磁铁,空间点#m)->的(磁铁,磁感应强度)->的(磁铁,磁场尺寸)...
->的(_能谱仪,fiducial1)...
    ->在(fiducial1,空间点#1)->的(fiducial1,线位置#1)...
->的(_能谱仪,fiducial2)...
    ->在(fiducial2,空间点#2)->的(fiducial2,线位置#2)...
->的(_能谱仪,IP1)...
    ->在(IP1,空间点#p)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],地址)...
    ->+[.](+[matlab],X_shadows)->+[.](+[matlab],e_shadows)...
    ->+[.]"e_shadow_i"(+[matlab],_位置)...

->+[.]"Cell00"(+[matlab],空间点#o)...
->+[.]"pos_m"(+[matlab],空间点#m)...
    ->+[.]"B0"(+[matlab],磁感应强度)->+[.]"size_m"(+[matlab],磁场尺寸)...
->+[.]"pos_f1"(+[matlab],空间点#1)->+[.]"f_1"(+[matlab],线位置#1)...
->+[.]"pos_f2"(+[matlab],空间点#2)->+[.]"f_2"(+[matlab],线位置#2)...
->+[.]"IP0"(+[matlab],空间点#p)...

->[]{
    []:->的(_文件,Cell校正)->Cell校正->+[.]"dCell_0"(+[matlab],Cell校正),
        ->+[.]"dCell_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->的(_文件,IP校正)->IP校正->+[.]"dIP_0"(+[matlab],IP校正),
        ->+[.]"dIP_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}...


->[]{
    []:->在(能谱#1,_位置)->_位置(,)...
        ->+[code](+[matlab],M代码)->+[.]"e_shadow_i"(+[matlab],_位置),
    ->+[code](+[matlab],M代码2)
}



## end
#1188, 2292:
%{
记住"Matlab"
+[M函数](,M代码2)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)
e0
保存:...
测试shY:...
+[新建阅读窗口](,保存)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow0=8001-e_shadows;
X_shadows0=8001-X_shadows;

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];
% IP=IP0+[0,0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);

dCell_0=[xo3,yo3]/1e-2-Cell00(1:2);
dIP_0=[0,IPy+dIPy]/1e-2-[0,IP0(2)];

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);


% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
a0=mean(a);

launch_angle=a0;

z_i=IPx;
% x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
% x_i=interp1(shadow0,shY,1:8000);
A=polyfit(shadow0,shY,1);
x_i=A(1)*(1:8000)+A(2);
x_i=x_i;
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);
% I0=I0(end:-1:1);

S=spectrum(I0,E,a0,Cell(2),Cell(1),B0,siz_m0,pos_m0(1),x_i,z_i);
E_range=E(S<max(S)*1e-3);
% E_range0=min(E_range);
E_range0=5e9*e;
S_c=S/4.1e-3*e*e*1e9;

%{
记住"Matlab"
+[M函数](,M代码)
%}

figure
subplot(2,2,1)
x=xo-0.05*ones(1,length(I));
y=ys3(J)+(x-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
plot(xo,yo,'o',xo3,yo3,'o',xf,yf,'o',xs,ys3,'o'...
    ,[xs(J(f1));x(f1)],[ys3(J(f1));y(f1)],'r'...
    ,[xs(J(f2));x(f2)],[ys3(J(f2));y(f2)],'b')

xlabel('x [m]')
ylabel('y [m]')
title('X-rays calibration')

subplot(2,2,2)
plot(es,a/1e-3,'o-')
xlabel('E [GeV]')
ylabel('\theta [mrad]')
title('Fiducial launch angles');

subplot(2,1,2)
plot(E/e/1e9,S_c/1e-12);
xlabel('E [GeV]')
ylabel('Density [pC/GeV]')
axis([0,1*E_range0/e/1e9,0,1.2*max(S_c/1e-12)])
%{
+[M函数](,M代码)
%}

E_out=E;
I_out=S_c;


%{
Nini, 打开LWFA12数据分析的计算IP能谱_LWFA12(节点)
no_
X_sh
+[M函数](,M代码2)
%}
## end
#1189, 1235:
"""
记住计算能谱(节点)

库:...
保存:...

"""

+计算能谱(计算,能谱)->+[del](,+计算能谱)...
->的(计算能谱,库)->的(计算能谱,M代码)...

->正在读取(记忆,_当前节点)...

->.(_文件,能谱)...
    ->的(_文件,地址)->的(_文件,X_shadows)->的(_文件,e_shadows)...
->的(_文件,序号)...

->根据(计算,_能谱仪)...
->的(_能谱仪,GasCell)...
    ->在(GasCell,空间点#o)...
->的(_能谱仪,磁铁)...
    ->在(磁铁,空间点#m)->的(磁铁,磁感应强度)->的(磁铁,磁场尺寸)...
->的(_能谱仪,fiducial1)...
    ->在(fiducial1,空间点#1)->的(fiducial1,线位置#1)...
->的(_能谱仪,fiducial2)...
    ->在(fiducial2,空间点#2)->的(fiducial2,线位置#2)...
->的(_能谱仪,IP1)...
    ->在(IP1,空间点#p)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],地址)...
    ->+[.](+[matlab],X_shadows)->+[.](+[matlab],e_shadows)...
->+[.]"no_"(+[matlab],序号)...

->+[.]"Cell00"(+[matlab],空间点#o)...
->+[.]"pos_m"(+[matlab],空间点#m)...
    ->+[.]"B0"(+[matlab],磁感应强度)->+[.]"size_m"(+[matlab],磁场尺寸)...
->+[.]"pos_f1"(+[matlab],空间点#1)->+[.]"f_1"(+[matlab],线位置#1)...
->+[.]"pos_f2"(+[matlab],空间点#2)->+[.]"f_2"(+[matlab],线位置#2)...
->+[.]"IP0"(+[matlab],空间点#p)...

->[]{
    []:->的(_文件,Cell校正)->Cell校正->+[.]"dCell_0"(+[matlab],Cell校正),
        ->+[.]"dCell_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->的(_文件,IP校正)->IP校正->+[.]"dIP_0"(+[matlab],IP校正),
        ->+[.]"dIP_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}



## end
#1190, 1608:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)

保存:...
+[新建阅读窗口](,保存)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows)*50e-6;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,10);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);

% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
bd_0=[IP(1),0.20];
bd_1=[IP(1),-0.20];
a0=mean(a);

z_i=pos_p(1);
x_i=linspace(-0.2,0.2,8000)+pos_p(2);
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);

S=spectrum(I0,E,-a0,Cell(2),Cell(1),-B0,siz_m0,pos_m0(1),x_i,z_i);


figure
subplot(2,2,1)
x=xo-0.05*ones(1,length(I));
y=ys3(J)+(x-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
plot(xo,yo,'o',xo3,yo3,'o',xf,yf,'o',xs,ys3,'o'...
    ,[xs(J(f1));x(f1)],[ys3(J(f1));y(f1)],'r'...
    ,[xs(J(f2));x(f2)],[ys3(J(f2));y(f2)],'b')

subplot(2,2,2)
plot(es,a,'o')

subplot(2,2,3)
plot(E/e0/1e9,S);

subplot(2,2,4)
plot(x_i,I0);
title(sprintf('No.%d',No))



%{
+[M函数](,M代码)
%}
## end
#1191, 1344:
%{
记住"Matlab"
+[M函数](,测试shY)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,10);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);

%{
记住"Matlab"
Cell1,Cell
mean(Ma1)
mean(Ma)
Ma1,Ma
B1,B0
Fx_1,Fx
Fy_1,Fy
shX1,shX
shY1,shY
size(shY1)
+[M函数](,M代码)
%}

% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
bd_0=[IP(1),0.20];
bd_1=[IP(1),-0.20];
a0=mean(a);

z_i=IPx;
x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);

S=spectrum(I0,E,-a0,Cell(2),Cell(1),-B0,siz_m0,pos_m0(1),x_i,z_i);

x_p=1:8000;
I_s=interp1(x_p,I0,shadow0);
plot(x_p,I0,shadow0,I_s,'o')


%{
+[M函数](,测试shY)
%}
## end
#1194, 2581:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)
e0
保存:...
测试shY:...
+[新建阅读窗口](,保存)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow0=8001-e_shadows
X_shadows0=8001-X_shadows

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);


% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);


% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
a0=mean(a);


z_i=IPx;
% x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
% x_i=interp1(shadow0,shY,1:8000);
A=polyfit(shadow0,shY,1);
x_i=A(1)*(1:8000)+A(2);
x_i=x_i;
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);
% I0=I0(end:-1:1);

S=spectrum(I0,E,a0,Cell(2),Cell(1),B0,siz_m0,pos_m0(1),x_i,z_i);
E_range=E(S<max(S)*1e-3);
% E_range0=min(E_range);
E_range0=5e9*e;
S_c=S/4.1e-3*e*e*1e9;

%{
记住"Matlab"
+[M函数](,M代码)
%}

figure
subplot(2,2,1)
x=xo-0.05*ones(1,length(I));
y=ys3(J)+(x-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
plot(xo,yo,'o',xo3,yo3,'o',xf,yf,'o',xs,ys3,'o'...
    ,[xs(J(f1));x(f1)],[ys3(J(f1));y(f1)],'r'...
    ,[xs(J(f2));x(f2)],[ys3(J(f2));y(f2)],'b')

xlabel('x [m]')
ylabel('y [m]')
title('X-rays calibration')

subplot(2,2,2)
plot(es,a/1e-3,'o-')
xlabel('E [GeV]')
ylabel('\theta [mrad]')
title('Fiducial launch angles');

subplot(2,1,2)
plot(E/e/1e9,S_c/1e-12);
xlabel('E [GeV]')
ylabel('Density [pC/GeV]')
axis([0,1*E_range0/e/1e9,0,1.2*max(S_c/1e-12)])
title(sprintf('No.%d',no_))
%{
+[M函数](,M代码)
%}

%{
subplot(2,2,4)
xs1=-shY;
yI1=interp1(x_i,I0,xs1);

plot(x_i,I0,xs1,yI1,'o');
%}

if ~exist("data_no")
    data_no=[];
    data_energy=[];
    data_spectrum=[];
end

if sum(data_no==no_)
    data_energy(data_no==no_)=E(E<5e9*e)/e/1e9;
    data_spectrum(data_no==no_)=S_c(E<5e9*e);
else
    data_no(end+1)=no_;
    data_energy(end+1,:)=E(E<5e9*e)/e/1e9;
    data_spectrum(end+1,:)=S_c(E<5e9*e);
end


%{
Nini, 打开LWFA12数据分析的计算IP能谱_LWFA12(节点)

+[M函数](,M代码)
%}
## end
#1196, 1232:
"""
M代码:...
+[新建阅读窗口](,M代码)

"""

+计算全局能谱1(计算,能谱)->+[del](,+计算全局能谱1)...
->的(计算全局能谱1,M代码)...

->正在读取(记忆,_当前节点)...

->.(_文件,能谱)...
    ->的(_文件,地址)->的(_文件,X_shadows)->的(_文件,e_shadows)...
->的(_文件,序号)...

->根据(计算,_能谱仪)...
->的(_能谱仪,GasCell)...
    ->在(GasCell,空间点#o)...
->的(_能谱仪,磁铁)...
    ->在(磁铁,空间点#m)->的(磁铁,磁感应强度)->的(磁铁,磁场尺寸)...
->的(_能谱仪,fiducial1)...
    ->在(fiducial1,空间点#1)->的(fiducial1,线位置#1)...
->的(_能谱仪,fiducial2)...
    ->在(fiducial2,空间点#2)->的(fiducial2,线位置#2)...
->的(_能谱仪,IP1)...
    ->在(IP1,空间点#p)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],地址)...
    ->+[.](+[matlab],X_shadows)->+[.](+[matlab],e_shadows)...
->+[.]"no_"(+[matlab],序号)...

->+[.]"Cell00"(+[matlab],空间点#o)...
->+[.]"pos_m"(+[matlab],空间点#m)...
    ->+[.]"B0"(+[matlab],磁感应强度)->+[.]"size_m"(+[matlab],磁场尺寸)...
->+[.]"pos_f1"(+[matlab],空间点#1)->+[.]"f_1"(+[matlab],线位置#1)...
->+[.]"pos_f2"(+[matlab],空间点#2)->+[.]"f_2"(+[matlab],线位置#2)...
->+[.]"IP0"(+[matlab],空间点#p)...

->[]{
    []:->的(_文件,Cell校正)->Cell校正->+[.]"dCell_0"(+[matlab],Cell校正),
        ->+[.]"dCell_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->的(_文件,IP校正)->IP校正->+[.]"dIP_0"(+[matlab],IP校正),
        ->+[.]"dIP_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}



## end
#1197, 1340:
%{
记住"Matlab"
+[M函数](,M代码2)

保存:
%}

p_x=1700:2200;
p_y=-20:20;

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow0=8001-e_shadows;
X_shadows0=8001-X_shadows;

ei=int32(e_shadow_i);
e_shadow0=e_shadows(ei);
sh0=8001-e_shadow0;
sel_range=int32(sh0+p_y);

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
L0=IPx-Cell(1);

% data
data0=imread(file_name);
data_im=[zeros(4000,2500),data0(:,end:-1:1)];
data_im=double(data_im);

data=data_im(p_x,sel_range);
I_y=trapz(data');
th_x=(p_x-2000)*50e-6/L0;

subplot(1,2,1);
plot(th_x/1e-3,I_y/trapz(I_y))
xlabel('\theta_x [mrad]')
ylabel('Intensity [a.u.]')

subplot(1,2,2)
surf(sel_range,p_x,data)
shading interp
view([0,90])
axis equal

%{
Nini, 打开LWFA12数据分析的计算IP能谱_LWFA12(节点)
记住"Matlab"
+[M函数](,M代码)
%}
## end
#1199, 1448:
%{
记住"Matlab"
+[M函数](,M代码2)

保存:...
%}

% p_x=1700:2200;
% p_y=-20:20;
p_x=1:4000;

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow0=8001-e_shadows;
X_shadows0=8001-X_shadows;

% ei=int32(e_shadow_i);
% e_shadow0=e_shadows(ei);
% sh0=8001-e_shadow0;
% sel_range=int32(sh0+p_y);
sel_range=1:8000;

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
L0=IPx-Cell(1);

% data
data0=imread(file_name);
data_im=[zeros(4000,2500),data0(:,end:-1:1)];
data_im=double(data_im);

data=data_im;
I_y=trapz(data');
th_x=(p_x-2000)*50e-6/L0;

subplot(1,2,1);
plot(th_x/1e-3,I_y/trapz(I_y))
xlabel('\theta_x [mrad]')
ylabel('Intensity [a.u.]')

subplot(1,2,2)
imshow(data/max(max(data)));
colormap('hot')

%surf(sel_range,p_x,data)
%shading interp
%view([0,90])
%axis equal


th_out=th_x;
I_out=I_y;


%{
Nini, 打开LWFA12数据分析的计算IP能谱_LWFA12(节点)
记住"Matlab"
+[M函数](,M代码2)
%}
## end
#1200, 1344:
%{
记住"Matlab"
+[M函数](,测试shY)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,10);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);

%{
记住"Matlab"
Cell1,Cell
mean(Ma1)
mean(Ma)
Ma1,Ma
B1,B0
Fx_1,Fx
Fy_1,Fy
shX1,shX
shY1,shY
size(shY1)
+[M函数](,M代码)
%}

% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
bd_0=[IP(1),0.20];
bd_1=[IP(1),-0.20];
a0=mean(a);

z_i=IPx;
x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);

S=spectrum(I0,E,-a0,Cell(2),Cell(1),-B0,siz_m0,pos_m0(1),x_i,z_i);

x_p=1:8000;
I_s=interp1(x_p,I0,shadow0);
plot(x_p,I0,shadow0,I_s,'o')


%{
+[M函数](,测试shY)
%}
## end
#1201, 1608:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)

保存:...
+[新建阅读窗口](,保存)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows)*50e-6;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,10);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);

% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
bd_0=[IP(1),0.20];
bd_1=[IP(1),-0.20];
a0=mean(a);

z_i=pos_p(1);
x_i=linspace(-0.2,0.2,8000)+pos_p(2);
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);

S=spectrum(I0,E,-a0,Cell(2),Cell(1),-B0,siz_m0,pos_m0(1),x_i,z_i);


figure
subplot(2,2,1)
x=xo-0.05*ones(1,length(I));
y=ys3(J)+(x-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
plot(xo,yo,'o',xo3,yo3,'o',xf,yf,'o',xs,ys3,'o'...
    ,[xs(J(f1));x(f1)],[ys3(J(f1));y(f1)],'r'...
    ,[xs(J(f2));x(f2)],[ys3(J(f2));y(f2)],'b')

subplot(2,2,2)
plot(es,a,'o')

subplot(2,2,3)
plot(E/e0/1e9,S);

subplot(2,2,4)
plot(x_i,I0);
title(sprintf('No.%d',No))



%{
+[M函数](,M代码)
%}
## end
#1204, 1455:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)
e0
保存:...
测试shY:...
+[新建阅读窗口](,保存)
%}

p_x=1700:2200;
p_y=-20:20;

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

shadow0=8001-e_shadows;
X_shadows0=8001-X_shadows;

ei=int32(e_shadow_i);
e_shadow0=e_shadows(ei);
sh0=8001-e_shadow0;
sel_range=int32(sh0+p_y);

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
L0=IPx-Cell(1);

% data
data0=imread(file_name);
data_im=[zeros(4000,2500),data0(:,end:-1:1)];
data_im=double(data_im);

data=data_im(p_x,sel_range);
I_y=trapz(data');
th_x=(p_x-2000)*50e-6/L0;

subplot(1,2,1);
plot(th_x/1e-3,I_y/trapz(I_y))
xlabel('\theta_x [mrad]')
ylabel('Intensity [a.u.]')

subplot(1,2,2)
surf(sel_range,p_x,data)
shading interp
view([0,90])
axis equal


th_out=th_x;
I_out=I_y;

%{
Nini, 打开LWFA12数据分析的计算IP能谱_LWFA12(节点)
记住"Matlab"
+[M函数](,M代码)
%}
## end
#1207, 1647:
"""
M代码:(局部发射角)...
M代码2:(全局发射角)...
+[新建阅读窗口](,M代码)
能谱

"""

+计算发射角分布2(计算,发射角分布)->+[del](,+计算发射角分布2)...
->的(计算发射角分布2,M代码)->的(计算发射角分布2,M代码2)...

->正在读取(记忆,_当前节点)...

->.(_性质,发射角分布)->_性质(,)...

->发射角分布#1(,_性质)->的(_文件,发射角分布#1)->的(_当前节点,_文件)...
    ->的(_文件,地址)->的(_文件,X_shadows)->的(_文件,e_shadows)...

->的(_文件,来源)->来源(,_能谱仪)...
->的(_能谱仪,GasCell)...
    ->在(GasCell,空间点#o)...
->的(_能谱仪,磁铁)...
    ->在(磁铁,空间点#m)->的(磁铁,磁感应强度)->的(磁铁,磁场尺寸)...
->的(_能谱仪,fiducial1)...
    ->在(fiducial1,空间点#1)->的(fiducial1,线位置#1)...
->的(_能谱仪,fiducial2)...
    ->在(fiducial2,空间点#2)->的(fiducial2,线位置#2)...
->的(_能谱仪,IP1)...
    ->在(IP1,空间点#p)...

->+[matlab](Matlab,)...
->+[.]"file_name"(+[matlab],地址)...
    ->+[.](+[matlab],X_shadows)->+[.](+[matlab],e_shadows)...

->+[.]"Cell00"(+[matlab],空间点#o)...
->+[.]"pos_m"(+[matlab],空间点#m)...
    ->+[.]"B0"(+[matlab],磁感应强度)->+[.]"size_m"(+[matlab],磁场尺寸)...
->+[.]"pos_f1"(+[matlab],空间点#1)->+[.]"f_1"(+[matlab],线位置#1)...
->+[.]"pos_f2"(+[matlab],空间点#2)->+[.]"f_2"(+[matlab],线位置#2)...
->+[.]"IP0"(+[matlab],空间点#p)...

->[]{
    []:->的(_文件,Cell校正)->Cell校正->+[.]"dCell_0"(+[matlab],Cell校正),
        ->+[.]"dCell_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}...

->[]{
    []:->的(_文件,IP校正)->IP校正->+[.]"dIP_0"(+[matlab],IP校正),
        ->+[.]"dIP_0"(+[matlab],+[临时文本])->+[临时文本]"0,0"
}...


->[]{
    []:->的(_性质,x)->x->+[o]"th_out"(+[matlab],x),
        ->+的(_性质,+x)->+[o]"th_out"(+[matlab],+x)
}...
->[]{
    []:->的(_性质,f)->f->+[o]"I_out"(+[matlab],f),
        ->+的(_性质,+f)->+[o]"I_out"(+[matlab],+f)
}...


->[]{
    []:->在(发射角分布#1,_位置)->_位置(,)...
        ->+[code](+[matlab],M代码)->+[.]"e_shadow_i"(+[matlab],_位置),
    ->+[code](+[matlab],M代码2)
}



## end
#1210, 134:

计算全局能谱1:...
计算发射角分布2:...
+[修改标题]"计算发射角分布2"(,计算能谱2)
将条目"计算全局能谱1"复制为条目"计算能谱2"
计算全局能谱1的"计算能谱"替换为"计算全局能谱1"
计算发射角分布2的"计算能谱"替换为"计算发射角分布"



## end
#1213, 320:
"""
记住发射角分布(节点)

库:...
+[新建阅读窗口](,库)
保存:...

"""

+发射角分布(计算,发射角分布)->+[del](,+发射角分布)...
->的(发射角分布#0,库)...

->正在读取(记忆,_当前节点):

->[]{
    .(_性质,发射角分布)->_性质(,)...
        ->发射角分布#1(,_性质)->的(_数据,发射角分布#1)->的(_当前节点,_数据)...
    ->的(_数据,来源)->来源(,_能谱仪)...

    ->的(库,计算发射角分布2)->计算发射角分布2->+[做](计算,发射角分布)->+[code](+[做],计算发射角分布2)
}


## end
#1215, 4:
1258
## end
#1218, 765:
%{
记住"Matlab"
+[M函数](,M代码)
Nini, 打开能谱仪模拟的计算电子能谱(节点)
Nini, 打开阴影形状的IP_ATM(节点)

保存:
%}

physics_constant;
addpath('Matlab\paper_spectrometer');

Cell0=Cell00;
IP=IP0;

Cell=Cell0(1:2)*1e-2;

B=B0;
D=size_m(1)*1e-2;
z_m=pos_m(1)*1e-2;

R=0.0125*2.54e-2/2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;
z_i=IPx;
x_i=linspace(-0.2,0.2,8000)+IPy;

E=1500e6;
DE=0.5*E;
t_0=0;
Dt=1e-3;

I_S=zeros(size(x_i));
for i=1:numel(Fy)
[~,I_s,I_0,I0]=IP_ATM(E*e,DE*e,t_0,Dt,Cell(2),Cell(1),B,D,z_m,R,-Fy(i),Fx(i),x_i,z_i);
I_S=I_S+I_0-I0+I_s;
end
I=I0+I_S;

plot(x_i,I);
% plot(x_i,I,x_i,I_s,x_i,I_0,x_i,I0)

%{
记住"Matlab"
+[M函数](,M代码)
%}
## end
#1220, 44:
https://utexas.app.box.com/file/855108479337
## end
#1221, 44:
%{
+[M函数](,M代码)
%}
figure
plot(t,real(E));


## end
#1223, 217:
"""
M代码:...
+[matlab]"clf"(Matlab,)

"""

+画函数分布(,_函数分布)->+[del](,+画函数分布)...
->的(画函数分布,M代码)...

->的(_函数分布,x)->的(_函数分布,f)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"t"(+[matlab],x)->+[.]"E"(+[matlab],f)

## end
#1226, 1135:
%{
记住"Matlab"
+[M函数](,互逆测试)

Nini, 打开能谱仪原理的spectrum(节点)
Nini, 打开阴影形状的IP_ATM(节点)
%}

physics_constant;
addpath('Matlab\paper_spectrometer');
file_name='output\spectrometer\LWFA11\IP\013965 SR 1 20 PMT500 - PSL Data.tiff';

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

Cell=Cell0(1:2)*1e-2;

B=B0;
D=size_m(1)*1e-2;
z_m=pos_m(1)*1e-2;

R=0.005*2.54e-2/2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;
z_i=IPx;
x_i=linspace(0.2,-0.2,8000)+IPy;

E=1500e6;
DE=0.5*E;
t_0=launch_angle;
Dt=0.4e-3;

%{
+[M函数](,互逆测试)
%}

S_E=@(E)interp1(E_1,I_1,E);
t=linspace(-4*Dt,4*Dt,100)+t_0;
f_t0=exp(-(t-t_0).^2/Dt^2);
%t=th_2;
%f_t0=I_2;

I_S=zeros(size(x_i));
for i=1
[~,I_s,I_0,I0]=IP_ATM_arb(S_E,t,f_t0,Cell(2),Cell(1),-B,D,z_m,R,Fy(i),Fx(i),x_i,z_i);
I_S=I_S+I_0-I0+I_s;
end
I=abs(I0+I_S);

%figure
clf
plot(x_i,I_d/max(I_d),x_i,I/max(I)*0.75)

%{
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);
plot(-I)
I_d=sum(data_im);
%}

%{
记住"Matlab"
+[M函数](,互逆测试)
%}
## end
#1228, 2124:
%{
记住"Matlab"
+[M函数](,M代码2)
Nini, 打开能谱仪模拟的计算电子能谱(节点)
Nini, 打开阴影形状的IP_ATM(节点)

保存:...

fiducial参数::https://utexas.app.box.com/file/855108479337
+[打开网页](,fiducial参数)

互逆测试:...
+[新建阅读窗口](,互逆测试)
%}

physics_constant;
addpath('Matlab\paper_spectrometer');
% file_name='output\spectrometer\LWFA11\IP\013965 SR 1 20 PMT500 - PSL Data.tiff';

Dei=40;
t_0=launch_angle;
% Dt=0.7e-3;

%{
e_shadow_i=9
E/e
x_i(Dei+1)
+[M函数](,M代码2)
%}

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

i=int32(e_shadow_i);
ei=8001-int32(e_shadows(i));

Cell=Cell0(1:2)*1e-2;

B=B0;
D=size_m(1)*1e-2;
z_m=pos_m(1)*1e-2;

R=0.005*2.54e-2/2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;
z_i=IPx;
x_i=linspace(0.2,-0.2,8000)+IPy+0.0001;
x_i=x_i(ei-Dei:ei+Dei);

%{
记住"Matlab"
+[M函数](,M代码2)
%}

S_E=@(E)interp1(E_1,I_1,E);
t=linspace(-4*Dt,4*Dt,100)+t_0;
f_t0=exp(-(t-t_0).^2/Dt^2);
%t=th_2;
%f_t0=I_2;

I_S=zeros(size(x_i));

[~,I_s,I_0,I0]=IP_ATM_arb(S_E,t,f_t0,Cell(2),Cell(1),-B,D,z_m,R,Fy(i),Fx(i),x_i,z_i);
E=-B*e*c*D*(z_i-z_m)./(x_i(Dei+1)-Cell(2)-t_0*(z_i-Cell(1)));
x_i(Dei+1)
I_S=I_S+abs(I_0)-abs(I0)+abs(I_s);

I=abs(I0)+I_S;

% data
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);
I_d=sum(data_im);
I_d=I_d(ei-Dei:ei+Dei);

i0=Dei+1;
C1=(I_d(end)-I_d(i0))/(I(end)-I(i0));
C2=I_d(i0)-I(i0)*C1;

% angle
I_th=data_im(:,ei);
% I_th=I_th-min(I_th);

L=z_i-Cell(2);
x_th=(1:4000)-2000;
x_th=x_th*50e-6/L;
x_th=x_th-x_th(I_th==max(I_th));


clf
subplot(1,2,1)
plot(x_i/1e-2,I_d,x_i/1e-2,I*C1+C2)
xlabel('x [cm]')
ylabel('Intensity [a.u.]')
title(sprintf('E=%.3f GeV',E/e/1e9))
legend('Experiment','Theory')

subplot(1,2,2)
plot(x_th/1e-3,I_th,(t-t_0)/1e-3,f_t0*max(I_th))
axis([-5*Dt/1e-3,5*Dt/1e-3,0,max(I_th)*1.3])
xlabel('\theta [mrad]')
ylabel('Intensity [a.u.]')
title(sprintf('\\Delta \\theta=%.2f mrad',Dt/1e-3))
legend('Vertical distribution','Gaussian shape')

%{
figure
plot(x_i,I_S)
plot(x_i,I_0,x_i,I0,x_i,I_s)
plot(x_i,I_s)
记住"Matlab"
+[M函数](,M代码2)
%}
## end
#1229, 4:
1248
## end
#1231, 4:
1250
## end
#1233, 4:
1252
## end
#1235, 4:
1254
## end
#1237, 4:
1258
## end
#1239, 4:
1258
## end
#1242, 192:
"""
+[设置结构](,保存)

"""

+执行词典动词(,_操作)->+[del](,+执行词典动词)...

->的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_词典)->的(_词典,动词)...
->的(动词,_词语)->[eq](_操作,_词语)...

->+[执行操作](_词语,_操作)


## end
#1243, 4:
1262
## end
#1245, 4:
1280
## end
#1248, 181:
"""
库:...

h=figure(1)

"""

+保存(,_词语)...
->的(保存,库)...

->到(+保存,_地址)->[]{
    []:->的(库,_条目)->_条目->[eq](_词语,_条目)...
        ->+[做](+保存,_地址)->+[code](+[做],_条目)
}...

->+[del](,+保存)



## end
#1250, 18:

曲线数据:...
变量:...


## end
#1252, 156:
"""
M代码(M函数):...

"""

+曲线数据(,_地址)->+[del](,+曲线数据)...
->的(曲线数据,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"file_name"(+[matlab],_地址)




## end
#1254, 486:
%{
figure;plot([1,2])
测试cell2str:...
测试读取:...
str2num(sprintf('[1,2]\n[2,3,5]'))
%}

Data='';

hs=get(gcf,'Children');
for i=1:length(hs)
    if strcmp(get(hs(i),'type'),'axes')
        hls=get(hs(i),'Children');
        for j=1:length(hls)
        Data=sprintf('%s%s\n',Data,mat2str(hls(j).XData));
        Data=sprintf('%s%s\n',Data,mat2str(hls(j).YData));
        end
    end
end
Data=Data(1:end-1)

fid=fopen(file_name,'w');
fprintf(fid,'%s',Data);
fclose(fid);


%{
+[M函数](,M代码)
%}
## end
#1257, 46:
%{
+[M函数](,测试cell2str)
%}

mat2str(Data{1})



## end
#1259, 159:
%{
fid=fopen(file_name,'r');
fscanf(fid,'%s')
fclose(fid)
Nini, 打开iFAST日志(文件)
%}

data_in=fileread(file_name);
a=regexp(data_in,'\n','split');
str2num(a{1});


## end
#1260, 4:
1291
## end
#1265, 194:
"""
M模板::ans=%变量;
M代码:...

"""

+变量(保存,_节点)->+[del](,+变量)...
->的(变量#0,M代码)->的(变量#0,M模板)...

->保存(,变量)->变量->+[模板文本](M模板,M代码)->+[.](+[模板文本],变量)...

->+[matlab](Matlab,_节点)->+[code](+[matlab],M代码)

## end
#1267, 8:
ans=%变量;
## end
#1269, 8:
ans=Yos;
## end
#1271, 160:
"""
库:...
+[新建阅读窗口](,库)
保存:...

"""

+代入(,_宾语)->+[del](,+代入)...
->的(代入,库)...

->到(+代入,_式子):
    ->的(_宾语,表达式)->+[公式结构代入](表达式,_式子),
    ->+[公式结构代入](_宾语,_式子)






## end
#1273, 323:
"""
库:...
+[修改天使]

"""

+记作(,_宾语)->+[del](,+记作)...
->的(记作,库)...

->为(+记作,_式子)...
->+[structure](compiler,+场景)->+[del](,+场景)...
->的(库,操作0)->+[code](+[structure],操作0)...
->+[.]"式子"(+[structure],_式子)...

->[]{
    []:->[is](_宾语,临时文本)->临时文本->+[.]"表达式"(+[structure],_宾语),
    ->的(_宾语,表达式)->表达式->+[.]"表达式"(+[structure],表达式)
}




## end
#1274, 4:
1305
## end
#1277, 53:
Nini, 打开公式结构(文件)

操作0:...
在操作0中, 将"公式内容"替换为"表达式#0"



## end
#1279, 351:
"""
Nini, "更新"是什么词性?

"""

表达式#0->式子:->公式(式子,)->的(式子,表达式)->+[修改内容](表达式#0,表达式),
->+公式(式子,)->+的(式子,+公式)->+的(式子,+表达式)->[m_text](表达式#0,+表达式);

的(式子,表达式#2)...
->+[删除结构](,表达式#2)->+[生成公式结构](表达式#2,表达式#2)...
->+[转换公式结构](,表达式#2)->+[更新公式起点](,表达式#2);

+[修改内容]"LaTeX"(,记忆)->的(式子,表达式#2)...
    ->的(表达式#2,起点)->起点(,_c)...
    ->+[算式](_c,+[修改内容]#0)->+[修改内容]#0(,式子)




## end
#1281, 13:


操作0:...




## end
#1283, 152:
"""


"""

的(式子,表达式)->+[公式代入2](内容,表达式);

+[修改内容]"LaTeX"(,记忆)->的(式子,表达式#2)...
    ->的(表达式#2,起点)->起点(,_c)...
    ->+[算式](_c,+[修改内容]#0)->+[修改内容]#0(,式子)




## end
#1285, 219:
"""
网页模板::$$%公式$$
Nini, 打开网页画板(文件)
+[H函数](,+[临时文本])

收集内容:...
收集内容2:...
+[H函数](,收集内容)

"""
+显示公式(,_公式)->+[del](,+显示公式)...
->的(显示公式,网页模板)->的(显示公式,收集内容)...

->+[模板文本](网页模板,收集内容)->+[.]"公式"(+[模板文本],_公式)...
->+[H函数](,收集内容)


## end
#1287, 7:
$$%公式$$
## end
#1290, 4:
1311
## end
#1292, 4:
1314
## end
#1294, 4:
1320
## end
#1297, 287:
"""
M代码:...

"""
+操作(,朝向)->+[del](,+操作)...
->的(操作,M代码)...

->朝向(_物体,_目标)...
    ->_物体->朝向#1(_物体,方向)->在(_物体,空间点#1)...
    ->_目标->在(_目标,空间点#2)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
    ->+[.]"p0"(+[matlab],空间点#2)->+[.]"r0"(+[matlab],空间点#1)...
    ->+[o]"angle"(+[matlab],方向)

## end
#1299, 114:
%{
+[M函数](,M代码)
%}

dr=p0-r0;
dr=dr/norm(dr);
angle=acosd(dr(1));
if dr(2)~=0
    angle=angle*sign(dr(2));
end




## end
#1302, 4:
1321
## end
#1304, 4:
1327
## end
#1307, 335:
"""
M代码:...
M代码1:...
收集参数:...

"""

+等高线图(,_函数)->+[del](,+等高线图)...
->的(等高线图,M代码)->的(等高线图,M代码1)...
->的(等高线图,收集参数)...

->+[matlab](Matlab,)->+[.]"f"(+[matlab],_函数):

->+[code]([想],收集参数)->[想](_函数,)...
    ->DX([想],长度)->DY([想],宽度)...
    ->+[.]"DX"(+[matlab],长度)->+[.]"DY"(+[matlab],宽度)->+[code](+[matlab],M代码1),
->+[code](+[matlab],M代码)


## end
#1309, 149:
%{
+[M函数](,M代码)
%}

x=1:size(f,2);
y=1:size(f,1);
[Y,X]=meshgrid(y,x);

if ~isempty(imag(f))
contourf(X,Y,abs(f))
else
contourf(X,Y,f)
end
axis equal
## end
#1310, 4:
1329
## end
#1312, 4:
1357
## end
#1315, 75:

波前传播:...
波前传播2:...
高斯波前:...

将条目"波前传播"复制为条目"波前传播2"
波前传播的"计算波前"替换为"波前传播"



## end
#1317, 844:
"""
M代码:...

"""

+高斯波前(,波前)->+[del](,+高斯波前)...
->的(高斯波前,M代码)...

->.(_波前1,波前)...
->波前#1(,_波前1)->的(_光束,波前#1)->_光束"高斯光束"...
    ->的(_光束,半径)->在(_光束,空间点#1)...
->在(波前#1,_平面)...
    ->的(_平面,X)->的(_平面,Y)->在(_平面,空间点#2)...

->[]{
    []:->朝向(_光束,方向#1)->方向#1,->+朝向(_光束,+方向)->+方向"0,0,0"
}->朝向(_光束,方向#1)...
->[]{
    []:->朝向(_平面,方向#2)->方向#2,->+朝向(_平面,+方向)->+方向"0,0,0"
}->朝向(_平面,方向#2)...

->+[matlab](Matlab,_波前1)->+[code](+[matlab],M代码)...
->+[.]"R"(+[matlab],半径)->+[.]"pt1"(+[matlab],空间点#1)->+[.]"eulers1"(+[matlab],方向#1)...
->+[.](+[matlab],X)->+[.](+[matlab],Y)...
->+[.]"pt2"(+[matlab],空间点#2)->+[.]"eulers2"(+[matlab],方向#2)...

->[]{
    []:->的(_光束,波长)->波长->+[.]"lm0"(+[matlab],波长),
    ->+[.]"lm0"(+[matlab],+[临时文本])->+[临时文本]"800e-9"
}...
->[]{
    []:->的(_波前,单位长度)->单位长度->+[.]"dx"(+[matlab],单位长度),
    ->+[.]"N"(+[matlab],+[临时文本])->+[临时文本]"100"
}



## end
#1319, 686:
%{
记住"Matlab"
+[M函数](,M代码)
Nini, 打开计算波前的WavefrontPropagation(节点)
记住"Matlab"
%}

physics_constant;
addpath('Matlab\optics');
addpath('Matlab\space');

lm0=800e-9;
f1=zeros(size(f0));
dx0=DX0/(size(f0,2)-1);
dy0=DY0/(size(f0,1)-1);

x0=linspace(-DX0/2,DX0/2,size(f0,2));
y0=linspace(-DY0/2,DY0/2,size(f0,1));
x1=linspace(-DX1/2,DX1/2,size(f1,2));
y1=linspace(-DY1/2,DY1/2,size(f1,1));

[Y0,X0]=meshgrid(y0,x0);
Z0=zeros(size(X0));
[Y1,X1]=meshgrid(y1,x1);
Z1=zeros(size(X1));

[X0,Y0,Z0]=transform_3D(pt0,Eulers0(1),Eulers0(2),Eulers0(3),X0,Y0,Z0);
[X1,Y1,Z1]=transform_3D(pt1,Eulers1(1),Eulers1(2),Eulers1(3),X1,Y1,Z1);

f1=WavefrontPropagation(X1,Y1,Z1,f0,X0,Y0,Z0,lm0,dx0,dy0);

%{

%}
## end
#1321, 664:
"""
M代码:...
+[新建阅读窗口](,M代码)

"""

+波前传播2(,波前)->+[del](,+波前传播2)...
->的(波前传播2,M代码)...

->.(_波前1,波前)->的(_波前1,源)->源(,_波前0)...
->波前#1(,_波前1)->在(波前#1,_平面1)...
    ->在(_平面1,空间点#1)->朝向(_平面1,方向#1)->的(_平面1,长度#1)->的(_平面1,宽度#1)...
->波前#0(,_波前0)->在(波前#0,_平面0)...
    ->在(_平面0,空间点#0)->朝向(_平面0,方向#0)->的(_平面0,长度#0)->的(_平面0,宽度#0)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"DX0"(+[matlab],长度#0)->+[.]"DY0"(+[matlab],宽度#0)->+[.]"f0"(+[matlab],_波前0)...
->+[.]"pt0"(+[matlab],空间点#0)->+[.]"Eulers0"(+[matlab],方向#0)...
->+[.]"DX1"(+[matlab],长度#1)->+[.]"DY1"(+[matlab],宽度#1)...
->+[.]"pt1"(+[matlab],空间点#1)->+[.]"Eulers1"(+[matlab],方向#1)...

->+[o]"f1"(+[matlab],_波前1)




## end
#1324, 196:
%{
+[M函数](,M代码1)
%}

x=linspace(-DX/2,DX/2,size(f,2));
y=linspace(-DY/2,DY/2,size(f,1));
[Y,X]=meshgrid(y,x);

if ~isempty(imag(f))
    contourf(X,Y,abs(f))
else
    contourf(X,Y,f)
end
axis equal
## end
#1326, 108:
"""


"""

+收集参数(_函数,)->_波前(,_函数)->在(_波前,_平面)...
->的(_平面,长度)->的(_平面,宽度)...
->+DX(+收集参数,长度)->+DY(+收集参数,宽度)



## end
#1327, 488:
%{
记住"Matlab"
+[M函数](,M代码)
Nini, 打开透镜波前的示意图场景(节点)
记住"Matlab"
%}

physics_constant;
addpath('Matlab\optics');
addpath('Matlab\space');

dx=abs(x0-x0(1));
dx=dx(dx~=0);
dx0=min(dx);

dy=abs(y0-y0(1));
dy=dy(dy~=0);
dy0=min(dy);

[Y0,X0]=meshgrid(y0,x0);
X0=X0+pt0(2);
Z0=pt0(1)*ones(size(X0));
[Y1,X1]=meshgrid(y1,x1);
X1=X1+pt1(2);
Z1=pt1(1)*ones(size(X1));

f1=WavefrontPropagation(X1,Y1,Z1,f0,X0,Y0,Z0,lm0,dx0,dy0);

%{
size(f0)
figure
surf(X1,Y1,real(f1))
shading interp
view([0,90])
%}
## end
#1329, 653:
"""
M代码:...

"""

+波前传播(,波前)->+[del](,+波前传播)...
->的(波前传播,M代码)...

->正在读取(记忆,_当前节点)...

->.(_波前1,波前)...
->波前#1(,_波前1)->当(到达,波前#1)->到达(_光束,_平面1)->_光束->_平面1(,)...
->离开(_光束,_平面0)->当(离开,波前#0)->波前#0(,_波前0)->_平面0(,)...

->的(_波前0,x#0)->的(_波前0,y#0)->的(_波前0,f#0)...
->在(_平面0,空间点#0)...
->的(_光束,波长)...
->的(_波前1,x#1)->的(_波前1,y#1)->的(_波前1,f#1)...
->在(_平面1,空间点#1)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"x0"(+[matlab],x#0)->+[.]"y0"(+[matlab],y#0)->+[.]"f0"(+[matlab],f#0)...
->+[.]"pt0"(+[matlab],空间点#0)->+[.]"lm0"(+[matlab],波长)...
->+[.]"x1"(+[matlab],x#1)->+[.]"y1"(+[matlab],y#1)...
->+[.]"pt1"(+[matlab],空间点#1)...

->+[o]"f1"(+[matlab],f#1)




## end
#1332, 3026:
def fun_并列短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        code,连词=fun_连词(code)
        if 连词!=None:
            code,并列短语=fun_并列短语(code)
            if 并列短语!=None:
                并列短语_0=NetP("并列短语")
                连词.m_db[1].con(形容词.m_db[1],并列短语.m_db[1])
                并列短语_0.m_db[1]=形容词.m_db[1]
                
                NetP('的').con(并列短语_0,形容词)
                NetP('的').con(并列短语_0,连词)
                NetP('的').con(并列短语_0,并列短语)
                return code,并列短语_0
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        code,连词=fun_连词(code)
        if 连词!=None:
            code,并列短语=fun_并列短语(code)
            if 并列短语!=None:
                并列短语_0=NetP("并列短语")
                连词.m_db[1].con(名词.m_db[1],并列短语.m_db[1])
                并列短语_0.m_db[1]=名词.m_db[1]
                
                NetP('的').con(并列短语_0,名词)
                NetP('的').con(并列短语_0,连词)
                NetP('的').con(并列短语_0,并列短语)
                return code,并列短语_0
    code=code_save
    
    code,名词_0=fun_名词(code)
    if 名词_0!=None:
        code,连词=fun_连词(code)
        if 连词!=None:
            code,名词_1=fun_名词(code)
            if 名词_1!=None:
                并列短语=NetP("并列短语")
                连词.m_db[1].con(名词_0.m_db[1],名词_1.m_db[1])
                并列短语.m_db[1]=名词_0.m_db[1]
                
                NetP('的').con(并列短语,名词_0)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,名词_1)
                return code,并列短语
    code=code_save
    
    code,形容词=fun_形容词(code)
    if 形容词!=None:
        code,连词=fun_连词(code)
        if 连词!=None:
            code,名词=fun_名词(code)
            if 名词!=None:
                并列短语=NetP("并列短语")
                连词.m_db[1].con(形容词.m_db[1],名词.m_db[1])
                并列短语.m_db[1]=形容词.m_db[1]
                
                NetP('的').con(并列短语,形容词)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,名词)
                return code,并列短语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        code,连词=fun_连词(code)
        if 连词!=None:
            code,形容词=fun_形容词(code)
            if 形容词!=None:
                并列短语=NetP("并列短语")
                连词.m_db[1].con(名词.m_db[1],形容词.m_db[1])
                并列短语.m_db[1]=名词.m_db[1]
                
                NetP('的').con(并列短语,名词)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,形容词)
                return code,并列短语
    code=code_save
    
    code,形容词_0=fun_形容词(code)
    if 形容词_0!=None:
        code,连词=fun_连词(code)
        if 连词!=None:
            code,形容词_1=fun_形容词(code)
            if 形容词_1!=None:
                并列短语=NetP("并列短语")
                连词.m_db[1].con(形容词_0.m_db[1],形容词_1.m_db[1])
                并列短语.m_db[1]=形容词_0.m_db[1]
                
                NetP('的').con(并列短语,形容词)
                NetP('的').con(并列短语,连词)
                NetP('的').con(并列短语,形容词)
                return code,并列短语
    code=code_save
    
    return code,None


## end
#1333, 4:
1351
## end
#1335, 4:
1357
## end
#1338, 1108:

def fun_状语(code):
    if code=="":
        return code,None
    code_save=code
    
    状语=NetP("状语")

    code,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        状语.m_db[1]=介宾短语.m_db[1]
        NetP('的').con(状语,介宾短语)
    else:
        code=code_save
        code,副词=fun_副词(code)
        if 副词!=None:
            状语.m_db[1]=副词.m_db[1]
            NetP('的').con(状语,副词)
        else:
            code=code_save
            code,形容词=fun_形容词(code)
            if 形容词!=None:
                状语.m_db[1]=形容词.m_db[1]
                NetP('的').con(状语,形容词)
            else:
                code=code_save
                code,代词=fun_代词(code)
                if 代词!=None:
                    状语.m_db[1]=代词.m_db[1]
                    NetP('的').con(状语,代词)
                else:
                    code=code_save
                    return code,None

    code_save=code
    code,状语1=fun_状语(code)

    code1,动词=fun_动词(code)
    if 状语1!=None and (动词!=None or code[0]=="被" or code[0]=="把"):
        状语.m_db[1].con(0,状语1.m_db[1])
        NetP('的').con(状语,状语1)
        return code,状语
    code=code_save
    
    return code,状语

## end
#1345, 4:
1363
## end
#1347, 95:
"""


"""

+画光束传播图(,_透镜组)->+[del](,+画光束传播图)...

->的(_透镜组,光线)->+[光束传播](光线,)->+[显示PPT场景](,_透镜组)


## end
#1349, 4:
1369
## end
#1352, 333:
"""
库:...
+[新建阅读窗口](,库)
保存:...

"""

+代入(,_宾语)->+[del](,+代入)...
->的(代入,库)...

->到(+代入,_式子)...
->+[structure](compiler,+场景)->+[del](,+场景)...
->的(库,操作0)->+[code](+[structure],操作0)...
->+[.]"式子"(+[structure],_式子)...

->[]{
    []:->[is](_宾语,临时文本)->临时文本->+[.]"内容"(+[structure],_宾语),
    ->的(_宾语,表达式)->表达式->+[.]"内容"(+[structure],表达式)
}



## end
#1353, 4:
1371
## end
#1356, 245:
"""
+[修改天使]
Nini, 打开公式分析器(文件)

"""

+代码结构变换(_代码,_输出)->+[del](,+代码结构变换)...

->的(_代码,起点)->起点(,块)...
->记忆->[]{
    []:->.(+代码结构变换,临时文本)->临时文本->+[修改内容](临时文本,记忆),
    ->[]
}...

->+[结构转代码]"程序"(,+[做])->+[做](块,_输出)...
->+[移除注释](_输出,_输出)->+[复制内容](,_输出)

## end
#1357, 4:
1381
## end
#1360, 1596:
"""
Nini, 打开图形库的原型库(节点)
Nini, 打开公式分析器的句子库(节点)
库:...
+[新建阅读窗口](,库)

"""

+转换(_物体,)->+[del](,+转换)...
->的(转换,库)...

->Matlab->_物体:

->从(+转换,线段)->为(+转换,圆形)->+[原型更新](+线段转圆形,_物体)...
    ->+[matlab]"hold on"(Matlab,)->+[更新图形](,_物体)->+[显示PPT图形](,_物体),

->[]{
    从(+转换,标记点)->标记点->为(+转换,圆形)->圆形(,)...
        ->+[调用词典名词](标记点,+[定义])->+[定义](,)...
        ->的(库,生成圆形)->生成圆形->+[做](标记点,_物体)->+[code](+[做],生成圆形)...
    ->+[matlab]"hold on"(Matlab,)->+[更新图形](,_物体)->+[显示PPT图形](,_物体)
},

->[]{
    [is](_物体,标记点)->标记点->为(+转换,圆形)->圆形(,)...
        ->+[调用词典名词](标记点,+[定义])->+[定义](,)...
        ->的(库,画圆形)->画圆形->+[做](圆形,标记点)->+[code](+[做],画圆形)
},

->[]{
    [is](_物体,标记点)->标记点->为(+转换,衍射环)->衍射环(,)...
        ->+[调用词典名词](标记点,+[定义])->+[定义](,)...
        ->的(库,画衍射环)->画衍射环->+[做](衍射环,标记点)->+[code](+[做],画衍射环)
},

->[]{
    [is](_物体,标记点)->标记点->为(+转换,变量)->变量(,)...
        ->+[调用词典名词](标记点,+[定义])->+[定义](,)...
        ->的(库,设置变量)->设置变量->+[做](标记点,变量)->+[code](+[做],设置变量)
},

->为(+转换,临时文本)->的(_物体,表达式)->[]{
    []:->[==]"LaTeX"(,临时文本)->+[复制内容](,_物体),
    ->+[算式结构转换](表达式,+[临时文本])->+[复制内容](,+[临时文本])...
        ->[m_text](临时文本,+[算式结构转换])
},

->为(+转换,Javascript)->[]{
    +[临时文本]:
        ->[词典名词](_物体,)->是(_物体,_名词)->_名词->的(_名词,匹配)...
            ->+[code]([想],匹配)->[想](,_物体)->是([想],块#0)...
        ->然后(块#0,块#01)->+[右连](然后,)...
            ->+[结构转JS代码]"程序"(,+[做]#0)->+[做]#0(块#0,+[临时文本])...
            ->+[移除注释](+[临时文本],+[临时文本])->+[复制内容](,+[临时文本])...
        ->+[右连](然后,块#01),
    
        ->的(_物体,起点)->起点(,块)...
            ->+[结构转JS代码]"程序"(,+[做])->+[做](块,+[临时文本])...
            ->+[移除注释](+[临时文本],+[临时文本])->+[复制内容](,+[临时文本])
}
## end
#1361, 4:
1383
## end
#1363, 4:
1384
## end
#1366, 355:
"""


"""

的(式子,表达式):
    ->的(表达式,起点)->起点(,_a)->_a,
    ->+[删除结构](,表达式)->+[生成公式结构](表达式,表达式)...
        ->+[转换公式结构](,表达式)->+[更新公式起点](,表达式);

的(式子,表达式)...
->的(表达式,起点)->起点(,_c)->+[算式]"表达式"(_c,+[修改内容])->+[修改内容](,表达式)...
    ->+[算式]"LaTeX"(_c,+[修改内容]#1)->+[修改内容]#1(,式子)->+[删除结构](,表达式)...
    ->+[生成公式结构](表达式,表达式)...
        ->+[转换公式结构](,表达式)->+[更新公式起点](,表达式)


## end
#1367, 4:
1425
## end
#1370, 195:
"""
M代码:...

"""

+图片(,_文件)->+[del](,+图片)...
->的(图片,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码):
    ->的(_文件,地址)->+[.]"file_name"(+[matlab],地址),
    ->+[.]"file_name"(+[matlab],_文件)




## end
#1372, 155:
%{
size(img)
max(sum(img))
clf
plot(sum(img))
%}

clf
img = imread(file_name);
image(img);
axis equal
axis image
set(gca,'YDir','normal')
colormap('hot')


## end
#1374, 165:
"""
+[修改天使]
M代码:...

"""

+Y投影图(,_图片)->+[del](,+Y投影图)...
->的(Y投影图,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码):
    ->[is](_图片,屏幕)->+[.]"n"(+[matlab],屏幕)



## end
#1376, 105:
%{
Nini, 
a=1
%}

figure(n)
im_data=get(gca,'Children');
F=im_data(end).CData;

figure;
plot(max(F')');


## end
#1378, 1419:

def fun_宾语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,定语=fun_定语(code)
    if 定语!=None:
        code,名词=fun_名词(code)
        code_del,动词=fun_动词(code)
        if 名词!=None and 动词!=None:
            宾语=NetP("宾语")
            宾语.m_db[1]=名词.m_db[1]
            
            # Karma(宾语.m_db[1])
            if 定语.m_db[1].m_name in dict_动词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            elif 定语.m_db[1].m_name in dict_副词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            else:
                定语.m_db[1].con(名词.m_db[1],0)
                #宾语.m_db[1].m_master.addKarma(定语.m_db[1].m_master,"从句")
            NetP('的').con(宾语,定语)
            NetP('的').con(宾语,名词)
            return code,宾语
    code=code_save
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        宾语=NetP("宾语")
        宾语.m_db[1]=并列短语.m_db[1]
        
        NetP('的').con(宾语,并列短语)
        return code,宾语
    code=code_save
    
    code,名词=fun_名词(code)
    if 名词!=None:
        宾语=NetP("宾语")
        宾语.m_db[1]=名词.m_db[1]
        
        # Karma(宾语.m_db[1])
        NetP('的').con(宾语,名词)
        return code,宾语
    code=code_save
    
    return code,None

## end
#1380, 1692:
"""
库:...
+[新建阅读窗口](,库)

测试:...

"""

+显示(,_文件)->+[del](,+显示)...
->+[临时文本]->的(显示,库):

->[is](_文件,标记点)->为(+显示,_图形)->+[做](+显示,标记点)...
    ->+[code](+[做],画标记点)->的(库,画标记点)->画标记点(,)...
    ->[m_name](+[临时文本],+[del])->+[del]#2(,+显示),

->[is](_文件,光谱)->.(_光谱,光谱)->+[做](,_光谱)...
    ->+[code](+[做],画光谱)->的(库,画光谱)->画光谱,

->[is](_文件,波包)->.(_波包,波包)->+[做](,_波包)...
    ->+[code](+[做],画波包)->的(库,画波包)->画波包,

->[is](_文件,FROG)->.(_FROG,FROG)->+[做](+显示,_FROG)...
    ->+[code](+[做],画FROG)->的(库,画FROG)->画FROG(,)...
    ->[m_name](+[临时文本],+[del])->+[del]#1(,+显示),

->[is](_文件,二维函数)->.(_二维函数,二维函数)->+[做](,_二维函数)...
    ->+[code](+[做],画二维函数)->的(库,画二维函数)->画二维函数,

->[is](_文件,截面分布)->.(_函数分布,截面分布)->+[做](,_函数分布)...
    ->+[code](+[做],画函数分布)->的(库,画函数分布)->画函数分布,

->[is](_文件,光束传播图)->.(_透镜组,光束传播图)->+[做](,_透镜组)...
    ->+[code](+[做],画光束传播图)->的(库,画光束传播图)->画光束传播图,

->[is](_文件,IP图像)->.(_IP,IP图像)->+[做](+显示,_IP)...
    ->+[code](+[做],画IP图像)->的(库,画IP图像)->画IP图像(,)...
    ->[m_name](+[临时文本],+[del])->+[del]#2(,+显示),

->在(+显示,_图形#js)->为(+显示,程序流程图)->+[做](_文件,_图形#js)...
    ->+[code](+[做],画流程图)->的(库,画流程图)->画流程图,

->为(+显示,公式)->+[做](,_文件)...
    ->+[code](+[做],显示公式)->的(库,显示公式)->显示公式,

->为(+显示,_类型0)->的(库,_类型)->[eq](_类型0,_类型)...
    ->+[做](+显示,_文件)->+[code](+[做],_类型),

->+[做](,_文件)->的(库,_类型)->[eq](_文件,_类型)...
    ->+[code](+[做],_类型),

->的(_文件,x)->+[matlab]"hold on"(Matlab,)->+[显示PPT图形](,_文件),

->的(_文件,地址)->+[做](,地址)...
    ->+[code](+[做],显示图片)->的(库,显示图片)->显示图片,

->[is](_文件,地址#1)->[]{
    +[显示文件图像](,_文件):
        ->在(+显示,_区域)->_区域->+在(+[显示文件图像],_区域)->+[del](,+在),
    ->[]
},

->[词典名词](_文件,)->是(_文件,_名词)...
    ->的(_名词,定义)...
    ->+[做](,_文件)->+点(+[做],)->+[del](,+点)->+[code](+[做],定义)...
->+[消息窗口](,_文件),

->+[消息窗口](,_文件)


## end
#1382, 269:
"""
保存:...
(删除了[词典名词], 因为以后只有Nini中的[专有名词]了)

"""

+复制(,_内容)->+[del](,+复制):

->到(+复制,_目标)->+[修改内容](_内容,_目标),

->[]{
    []:->[词典名词](_内容,)->是(_内容,_名词)...
        ->的(_名词,定义)...
        ->+[做](,_内容)->+点(+[做],)->+[del](,+点)->+[code](+[做],定义),
    ->[]
}...
->+[复制内容](,_内容)

## end
#1383, 431:
%{
记住"Matlab"
+[M函数](,M代码)
%}

figure
data0=imread(file_name);
data0=double(data0);
in=sum(data0);
in_x=1:size(in,2);

sh_x=shX;

plot(in_x,in)
hold on
Dxi=linspace(Dxi_range(1),Dxi_range(2),500);

shX
for i=1:size(sh_x,2)
sh_xi=sh_x(i)+Dxi;
sh_yi=interp1(in_x,in,sh_xi);
sh_x(i)=sh_xi(sh_yi==min(sh_yi));

plot(sh_xi,sh_yi,'r*')
end


sh_y=interp1(in_x,in,sh_x);

plot(in_x,in,sh_x,sh_y,'bo')
ans=sort(sh_x);



%{
+[M函数](,M代码)
%}
## end
#1385, 286:
"""
M代码:...

"""

+优化位置(优化,位置)->+[del](,+优化位置)...
->的(优化位置,M代码)...

->.(_影子,位置)->在(优化,范围)...
->根据(优化,_图像)->的(_图像,地址)...

->+[matlab](Matlab,_影子)->+[code](+[matlab],M代码)...
->+[.]"shX"(+[matlab],_影子)...
->+[.]"Dxi_range"(+[matlab],范围)->+[.]"file_name"(+[matlab],地址)...

->+[复制内容](,_影子)


## end
#1388, 387:
%{
+[M函数](,M代码2)
fig_data_2D(M函数):...
%}

addpath('Matlab\dataVis');
[f,x]=fig_data_2D(n);

if length(DXs)<2
    Dxs=[-50,50];
else
    Dxs=DXs;
end

Dxi=linspace(Dxs(1),Dxs(2),500);

sh_x=zeros(size(pos_x));
for i=1:length(pos_x)
sh_xi=pos_x(i)+Dxi;
sh_yi=interp1(x,f,sh_xi);
sh_x(i)=min(sh_xi(sh_yi==min(sh_yi)));
end

sh_y=interp1(x,f,sh_x);

figure(n);
hold on
plot(sh_x,sh_y,'bo')


## end
#1390, 10:
%{
地址::
%}
## end
#1393, 205:
%{
创建"Matlab\dataVis"
地址::Matlab\dataVis\fig_data_2D.m
+[保存M函数](,fig_data_2D)
%}

function [f,x]=fig_data_2D(n)

data=get(gca(n),'Children');
x=double(data(end).XData);
f=double(data(end).YData);

end





## end
#1396, 28:
Matlab\dataVis\fig_data_2D.m
## end
#1401, 262:
"""
库:...
+[新建阅读窗口](,库)

"""

+标记(,_词语)...
->的(标记,库)...

->[]{
    []:->到(+标记,_方法)->_方法->的(库,_条目)->_条目->[eq](_方法,_条目)...
        ->+[做](,+标记)->+[code](+[做],_条目),
    ->[is](_词语,屏幕)->的(库,标记屏幕)->标记屏幕(,)...
        ->+[做](,+标记)->+[code](+[做],标记屏幕)
}->+[del](,+标记)


## end
#1402, 4:
1523
## end
#1405, 321:
"""
库:...
+[新建阅读窗口](,库)

"""

+提取(,_宾语)->+[del](,+提取)...
->的(提取,库)...

->从(+提取,_式子):
->[is](_宾语,括号)->_括号(括号,)->名词(,_括号)->的(库,提取括号)...
    ->+[做](_式子,_括号)->+[code](+[做],提取括号),
->[is](_宾语,_re)->_re"和式|乘式|项"->的(库,提取公式)...
    ->+[做](_式子,_re)->+[code](+[做],提取公式)...
    ->[]{[]:->到(+提取,_式子2)->_式子2->+[.](+[做],_式子2),->[]}





## end
#1407, 193:
"""
库:...
+[新建阅读窗口](,库)

"""

+减去(_主语,_宾语)->+[del](,+减去)...
->的(减去,库)...

->在(+减去,_式子):
->[is](_宾语,_re)->_re"和式|乘式|项|式子"->的(库,减去公式)...
    ->+[做](_主语,_re)->+[code](+[做],减去公式)->+[.](+[做],_式子)



## end
#1409, 44:


提取公式:...
提取括号:...
将条目"提取公式"复制为条目"提取括号"




## end
#1411, 343:
"""
操作:...

"""

+提取括号(_式子,_项)->+[del](,+提取括号)...
->的(提取括号,操作)...

->+匹配结构(,_项)->+[生成公式结构](_项,+匹配结构)...
    ->+[转换公式结构](,+匹配结构)->+[更新公式起点](,+匹配结构)...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_式子)->+[.](+[structure],+匹配结构)...
    ->+[删除结构](,+匹配结构)->+[del](,+匹配结构)...
    ->+[删除结构](,+场景)->+[del](,+场景)


## end
#1413, 179:
"""


"""

匹配结构(,_式)->的(匹配结构,起点)->起点(,_起点)->的(式子,表达式)->的(表达式,_变量)...
    ->+[模板结构]([公式结构匹配],_起点)->[公式结构匹配](_变量,+描述结构)...
->+[del](,+描述结构)->的(+描述结构,括号)...
    ->+[公式结构拆括号](表达式,括号)

## end
#1416, 212:
"""


"""



匹配结构(,_式)->的(匹配结构,起点)->起点(,_起点)->的(式子,表达式)->的(表达式,_变量)...
    ->+[模板结构]([公式结构匹配],_起点)->[公式结构匹配](_变量,+描述结构)...
->+[公式结构提取](表达式,_变量)->[标题](_式,)->[m_text]([标题],+[公式结构提取])...
    ->+[del](,+描述结构)








## end
#1418, 343:
"""
操作:...

"""

+提取公式(_式子,_项)->+[del](,+提取公式)...
->的(提取公式,操作)...

->+匹配结构(,_项)->+[生成公式结构](_项,+匹配结构)...
    ->+[转换公式结构](,+匹配结构)->+[更新公式起点](,+匹配结构)...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_式子)->+[.](+[structure],+匹配结构)...
    ->+[删除结构](,+匹配结构)->+[del](,+匹配结构)...
    ->+[删除结构](,+场景)->+[del](,+场景)


## end
#1421, 78:


减去公式:...
+[修改标题]"减去公式"(,加上公式)
减去公式的"加上公式"替换为"减去公式"
将条目"提取公式"复制为条目"提取括号"





## end
#1423, 503:
"""
操作:...

"""

+减去公式(_标记项,_插入项)->+[del](,+减去公式)...
->的(减去公式,操作)...

->.(+减去公式,_式子)...

->+匹配结构(,_标记项)->+[生成公式结构](_标记项,+匹配结构)...
    ->+[转换公式结构](,+匹配结构)->+[更新公式起点](,+匹配结构)...
->+插入结构(,_插入项)->+[生成公式结构](_插入项,+插入结构)...
    ->+[转换公式结构](,+插入结构)->+[更新公式起点](,+插入结构)...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_式子)...
->+[.](+[structure],+匹配结构)->+[.](+[structure],+插入结构)...
    ->+[删除结构](,+匹配结构)->+[del](,+匹配结构)->+[del](,+插入结构)...
    ->+[删除结构](,+场景)->+[del](,+场景)



## end
#1425, 314:
"""


"""

的(匹配结构,起点)->起点(,_起点)->的(式子,表达式)->的(表达式,_变量)...
->的(插入结构,起点#2)->起点#2(,_插入起点)...
    ->+[模板结构]([公式结构匹配],_起点)->[公式结构匹配](_变量,+描述结构)...
->+[公式结构插入]"-"(_插入起点,_变量)...
    ->+场景(+[公式结构插入],表达式)->+[del](,+场景)...

->[]{
    []=>的(插入结构,_节点)->_节点=>+[有](表达式,_节点)
}...

->+[del](,起点#2)->+[del](,插入结构)->+[del](,+描述结构)


## end
#1426, 277:
"""
保存:...
Nini, 打开天书(文件)

"""

的(匹配结构,起点)->起点(,_起点)->的(式子,表达式)->的(表达式,_变量)...
->的(插入结构,起点#2)->起点#2(,_插入起点)...
    ->+[模板结构]([公式结构匹配],_起点)->[公式结构匹配](_变量,+描述结构)...
->+的(+目标,+乘以)->+乘以(_变量,_插入起点);

+[召唤星辰](目标,+定理);

的(目标,乘以)->+[del](,目标)->+[del](,乘以);
+[删除结构](,定理)->+[del](,定理);


## end
#1428, 503:
"""
操作:...

"""

+乘以公式(_标记项,_插入项)->+[del](,+乘以公式)...
->的(乘以公式,操作)...

->.(+乘以公式,_式子)...

->+匹配结构(,_标记项)->+[生成公式结构](_标记项,+匹配结构)...
    ->+[转换公式结构](,+匹配结构)->+[更新公式起点](,+匹配结构)...
->+插入结构(,_插入项)->+[生成公式结构](_插入项,+插入结构)...
    ->+[转换公式结构](,+插入结构)->+[更新公式起点](,+插入结构)...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_式子)...
->+[.](+[structure],+匹配结构)->+[.](+[structure],+插入结构)...
    ->+[删除结构](,+匹配结构)->+[del](,+匹配结构)->+[del](,+插入结构)...
    ->+[删除结构](,+场景)->+[del](,+场景)



## end
#1430, 78:


乘以公式:...
+[修改标题]"乘以公式"(,加上公式)
乘以公式的"加上公式"替换为"乘以公式"
将条目"提取公式"复制为条目"提取括号"





## end
#1432, 263:
"""
库:...
+[新建阅读窗口](,库)

"""

+乘以(_主语,_宾语)->+[del](,+乘以)...
->的(乘以,库)...

->在(+乘以,_式子):
->[is](_宾语,括号)->的(库,乘以括号)...
    ->+[做](_式子,_主语)->+[code](+[做],乘以括号),
->[is](_宾语,_re)->_re"和式|乘式|项|式子"->的(库,乘以公式)...
    ->+[做](_主语,_re)->+[code](+[做],乘以公式)->+[.](+[做],_式子)



## end
#1434, 118:
"""


"""

的(式子,表达式)->的(表达式,起点)->起点(,_b)...
    ->变量(,_x)->_x(,)...
->+[分式演算](_b,_x)->+场景(+[分式演算],表达式)->+[del](,+场景)


## end
#1436, 303:
"""
操作:...

"""

+整理公式(变量,_式子)->+[del](,+整理公式)...
->的(整理公式,操作)...

->+变量(,+x)->+[修改标题](,+x)->[m_text](变量,+[修改标题])...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_式子)->+[.](+[structure],+变量)...
    ->+[del](,+变量)->+[del](,+x)...
    ->+[删除结构](,+场景)->+[del](,+场景)



## end
#1438, 57:


整理公式:...
+[修改标题]"整理公式"(,除以公式)
整理公式的"除以公式"替换为"整理公式"





## end
#1440, 133:
"""
库:...
+[新建阅读窗口](,库)

"""

+整理(,_宾语)->+[del](,+整理)...
->的(整理,库)...

->根据(+整理,变量):
->的(库,整理公式)->+[做](变量,_宾语)->+[code](+[做],整理公式)



## end
#1442, 281:
"""
保存:...
Nini, 打开四则运算(文件)

"""


的(匹配结构,起点)->起点(,_起点)->的(式子,表达式)->的(表达式,_变量)...
->的(插入结构,起点#2)->起点#2(,_插入起点)...
    ->+[模板结构]([公式结构匹配],_起点)->[公式结构匹配](_变量,+描述结构)...
->+的(+目标,+加上)->+加上(_变量,_插入起点);

+[召唤星辰](目标,+定理);

的(目标,加上)->+[del](,目标)->+[del](,加上);
+[删除结构](,定理)->+[del](,定理);



## end
#1444, 518:
"""
操作:...
+[新建阅读窗口](,操作)

"""

+加上公式(_标记项,_插入项)->+[del](,+加上公式)...
->的(加上公式,操作)...

->.(+加上公式,_式子)...

->+匹配结构(,_标记项)->+[生成公式结构](_标记项,+匹配结构)...
    ->+[转换公式结构](,+匹配结构)->+[更新公式起点](,+匹配结构)...
->+插入结构(,_插入项)->+[生成公式结构](_插入项,+插入结构)...
    ->+[转换公式结构](,+插入结构)->+[更新公式起点](,+插入结构)...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_式子)...
->+[.](+[structure],+匹配结构)->+[.](+[structure],+插入结构)...
    ->+[删除结构](,+匹配结构)->+[del](,+匹配结构)->+[del](,+插入结构)...
    ->+[删除结构](,+场景)->+[del](,+场景)



## end
#1446, 66:


加上公式:...
加上括号:...
加上公式的"提取公式"替换为"加上公式"
将条目"提取公式"复制为条目"提取括号"





## end
#1448, 263:
"""
库:...
+[新建阅读窗口](,库)

"""

+加上(_主语,_宾语)->+[del](,+加上)...
->的(加上,库)...

->在(+加上,_式子):
->[is](_宾语,括号)->的(库,加上括号)...
    ->+[做](_式子,_主语)->+[code](+[做],加上括号),
->[is](_宾语,_re)->_re"和式|乘式|项|式子"->的(库,加上公式)...
    ->+[做](_主语,_re)->+[code](+[做],加上公式)->+[.](+[做],_式子)



## end
#1451, 350:
"""
操作:...

"""

+加上括号(_式子,_标记项)->+[del](,+加上括号)...
->的(加上括号,操作)...

->+匹配结构(,_标记项)->+[生成公式结构](_标记项,+匹配结构)...
    ->+[转换公式结构](,+匹配结构)->+[更新公式起点](,+匹配结构)...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_式子)->+[.](+[structure],+匹配结构)...
    ->+[删除结构](,+匹配结构)->+[del](,+匹配结构)...
    ->+[删除结构](,+场景)->+[del](,+场景)



## end
#1453, 209:
"""


"""

匹配结构(,_类型)...
->的(匹配结构,起点)->起点(,_起点)->的(式子,表达式)->的(表达式,_变量)...
    ->+[模板结构]([公式结构匹配],_起点)->[公式结构匹配](_变量,+描述结构)...
->+[公式结构加括号](表达式,_变量)...

->[标题](_类型,)->[m_text]([标题],+[公式结构加括号])->+[del](,+描述结构)


## end
#1455, 42:


函数曲线:...
标记屏幕:...
标记屏幕的"函数曲线"替换为"标记屏幕"


## end
#1457, 283:
"""
M代码:...
M代码2:...

"""

+函数曲线(,标记)->+[del](,+函数曲线)...
->的(函数曲线,M代码)->的(函数曲线,M代码2)...

->标记(,_坐标)->在(标记,屏幕)...
->+[matlab](Matlab,)...
->+[.]"pt_x"(+[matlab],_坐标)->+[.]"n"(+[matlab],屏幕)...

->[]{
    []:->[is](_坐标,标记点)->+[code](+[matlab],M代码2),
    ->+[code](+[matlab],M代码)
}






## end
#1459, 206:
%{
+[M函数](,M代码)
setRefPts(M函数):...
+[修改标题]"setRefPts"(,setRefPt)
Nini, 打开词典的fig_data_2D(节点)
%}

addpath('Matlab\dataVis');

[f,x]=fig_data_2D(n);
pt_y=interp1(x,f,pt_x);
figure(n)
setRefPts(pt_x,pt_y);





## end
#1461, 416:
%{
地址::Matlab\dataVis\setRefPts.m
+[保存M函数](,setRefPts)
%}

function setRefPts(pt_x,pt_y)
global refPts;
global refTexts;

if isvalid(refPts)
    delete(refPts);
    delete(refTexts);
end

hold on
refPts=plot(pt_x,pt_y,'o');
set(refPts,'MarkerEdgeColor','k');
set(refPts,'MarkerFaceColor','w');

text_N=cell(1,length(pt_x));
for i=1:length(pt_x)
text_N{i}=sprintf('%d',i);
end
refTexts=text(pt_x,pt_y,text_N);
end




## end
#1464, 26:
Matlab\dataVis\setRefPts.m
## end
#1471, 208:
%{
+[M函数](,M代码)
%}

%figure(n)
im_data=get(gca(n),'Children');
F=im_data(end).CData;
x=im_data(end).XData;

I=max(F);
if length(x)~=length(I)
    x=linspace(min(x),max(x),length(I));
end

figure;
plot(x,I);


## end
#1473, 165:
"""
+[修改天使]
M代码:...

"""

+X投影图(,_图片)->+[del](,+X投影图)...
->的(X投影图,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码):
    ->[is](_图片,屏幕)->+[.]"n"(+[matlab],屏幕)



## end
#1476, 150:
%{
+[M函数](,M代码2)
%}

addpath('Matlab\dataVis');

pt_x=refPts.XData;
[f,x]=fig_data_2D(n);
pt_y=interp1(x,f,pt_x);
figure(n)
setRefPts(pt_x,pt_y);





## end
#1478, 153:
"""
库:...
+[新建阅读窗口](,库)

"""

+设置(,_性质)...
->的(设置,库)...

->[]{
[]:->的(库,_条目)->_条目->[eq](_性质,_条目)...
    ->+[做](,+设置)->+[code](+[做],_条目)
}->+[del](,+设置)


## end
#1480, 12:

亮度:...





## end
#1482, 194:
"""
M代码:...

"""

+亮度(,设置)->+[del](,+亮度)...
->的(亮度,M代码)...

->设置(,_亮度)->屏幕(_亮度,)->为(设置,_数值)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"n"(+[matlab],屏幕)->+[.]"val"(+[matlab],_数值)


## end
#1484, 85:
%{
+[M函数](,M代码)
%}

im_fig=get(gca(n),'Children');
im_fig.CData=im_fig.CData*val;




## end
#1486, 201:
"""
M代码:...

"""

+矩形区域(,裁剪)->+[del](,+矩形区域)...
->的(矩形区域,M代码)...

->裁剪(,_区域)->标记点(_区域,)->在(裁剪,屏幕)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"n"(+[matlab],屏幕)->+[.]"pts"(+[matlab],标记点)



## end
#1488, 509:
%{
+[M函数](,M代码)
%}

kids=get(gca(n),'Children');
im_fig=kids(end);

x_f=im_fig.XData;
y_f=im_fig.YData;

if length(x_f)<=2
    [X,Y]=meshgrid(x_f(1):x_f(2),y_f(1):y_f(2));
else
    [X,Y]=meshgrid(x_f,y_f);
end
F=im_fig.CData;

xs=refPts.XData(pts);
ys=refPts.YData(pts);


[X1,Y1]=meshgrid(min(xs):max(xs),min(ys):max(ys));
F1=interp2(X,Y,F,X1,Y1);

figure
image(min(xs):max(xs),min(ys):max(ys),F1);
axis equal
axis image
set(gca,'YDir','normal')
colormap('hot')


clear X Y F X1 Y1 F1;




%{
+[M函数](,M代码)
%}
## end
#1490, 156:
"""
M代码:...

"""

+标记屏幕(,标记)->+[del](,+标记屏幕)...
->的(标记屏幕,M代码)...

->标记(,屏幕)...
->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"n"(+[matlab],屏幕)






## end
#1492, 337:
%{
Nini, 打开词典的addRefPt(节点)
%}

addpath('Matlab\photo');

global refPts;
global refTexts;

figure(n)
if isvalid(refPts)
delete(refPts);
delete(refTexts);
end

hold on
refPts=plot(nan,nan,'o');
set(refPts,'MarkerEdgeColor','k');
set(refPts,'MarkerFaceColor','w')

refTexts=text(nan,nan,'nan');
set(gcf,'WindowButtonDownFcn',@addRefPt);


;
## end
#1494, 3320:
%{
记住"Matlab"
+[M函数](,M代码)

Nini, 打开13975电子能谱的电子能谱(节点)
Nini, 打开能谱仪校正的calibrationIP(节点)
Nini, 打开能谱仪原理的spectrum(节点)

e0
保存:...
测试shY:...
+[新建阅读窗口](,保存)
%}

physics_constant;
addpath('Matlab\spectrometer');
addpath('Matlab\funcs');

%shadow0=8001-e_shadows;
%X_shadows0=8001-X_shadows;
shadow0=e_shadows;
X_shadows0=X_shadows;

Cell0=Cell00+[dCell_0,0];
IP=IP0+[dIP_0,0];

shadow=4001-shadow0/2;
Cell=Cell0(1:2)*1e-2;
Ma=[-1/2,1/2]*size_m(1)+pos_m(1);
Ma=Ma*1e-2;
Fx1=pos_f1(1)*1e-2;
Fx2=pos_f2(1)*1e-2;
Fy1=pos_f1(2)*1e-2;
Fy2=pos_f2(2)*1e-2;
IPx=IP(1)*1e-2;
IPy=IP(2)*1e-2;

shX=IPx*ones(size(shadow));
shY=(shadow-2000)*1e-4+IPy;

Fy=[f_1*1e-2+Fy1;f_2*1e-2+Fy2];
Fx=[Fx1*ones(size(f_1));Fx2*ones(size(f_2))];

% calibration
ys=(4000-X_shadows0)*50e-6+IPy;
xs=IPx*ones(size(ys));
xo=Cell(1);
yo=Cell(2);

[xo3,yo3,ys3,I,J,f1,f2,xf,yf]=calibrationIP(xo,yo,10e-3,10e-3,Fx,Fy,xs,ys,20);
dIPy=mean(ys3-ys);

% launch angle
Cell=[xo3,yo3,0];
shY=shY+dIPy;
[a,Fn,es,theta,energy]=DesignTool2(Cell,Ma,B0,Fx,Fy,shX,shY);


% image
data=imread(file_name);
data_im=[zeros(4000,2500),data(:,end:-1:1)];
data_im=double(data_im);

% spectrum
pos_m0=[mean(Ma),0];
siz_m0=diff(Ma);
dx=50e-6;
a0=mean(a);


z_i=IPx;
% x_i=linspace(-0.2,0.2,8000)+IPy+dIPy;
% x_i=interp1(shadow0,shY,1:8000);
A=polyfit(shadow0,shY,1);
x_i=A(1)*(1:8000)+A(2);
x_i=x_i;
E=linspace(0.29,20,10000)*1e9*e;
I0=trapz(data_im);
% I0=I0(end:-1:1);

S=spectrum(I0,E,a0,Cell(2),Cell(1),B0,siz_m0,pos_m0(1),x_i,z_i);
E_range=E(S<max(S)*1e-3);
% E_range0=min(E_range);
E_range0=5e9*e;
S_c=S/4.1e-3*e*e*1e9;

%{
figure;plot(x_i)
记住"Matlab"
+[M函数](,M代码)
%}

figure
subplot(2,2,1)
x=xo-0.05*ones(1,length(I));
y=ys3(J)+(x-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
plot(xo,yo,'o',xo3,yo3,'o',xf,yf,'o',xs,ys3,'o'...
    ,[xs(J(f1));x(f1)],[ys3(J(f1));y(f1)],'r'...
    ,[xs(J(f2));x(f2)],[ys3(J(f2));y(f2)],'b')

xlabel('x [m]')
ylabel('y [m]')
title('X-rays calibration')

subplot(2,2,2)
plot(es,a/1e-3,'o-')
xlabel('E [GeV]')
ylabel('\theta [mrad]')
title('Fiducial launch angles');

subplot(2,1,2)
plot(E/e/1e9,S_c/1e-12);
xlabel('E [GeV]')
ylabel('Density [pC/GeV]')
axis([0,1*E_range0/e/1e9,0,1.2*max(S_c/1e-12)])
title(sprintf('No.%d',no_))

%{
+[M函数](,M代码)
Nini, 打开能谱仪校正(文件)
%}


% collect data
xos=xo3;
yos=ys3(J)+(xos-xs(J)).*(yf(I)-ys3(J))./(xf(I)-xs(J));
yos=yos-mean(yos);
Yos=[Yos,yos];
figure(100);
hist(Yos/1e-6);
xlabel('e^{-1} source [um]')
title(sprintf('Total number: %d',numel(Yos)))

% collect angle distribution
a_y=zeros(1,length(shadow0));
I_y=data_im(:,int32(shadow0));
for i=1:length(shadow0)
a_y(i)=find(I_y(:,i)==max(I_y(:,i)));
end
a_y=(a_y-2000)*50e-6/(IPx-xo3);

a_x=a-mean(a);
a_y=a_y-mean(a_y);

figure
plot(es/e/1e9,a_x/1e-3,'-o',es/e/1e9,a_y/1e-3,'-o');
xlabel('E [GeV]');
ylabel('\Delta \theta [mrad]')
legend('\theta_x','\theta_y')
title(sprintf('No.%d',no_))

%{
+[M函数](,M代码)
subplot(2,2,4)
xs1=-shY;
yI1=interp1(x_i,I0,xs1);

plot(x_i,I0,xs1,yI1,'o');
%}

%{
if ~exist("data_no")
    data_no=[];
    data_energy=[];
    data_spectrum=[];
end

if sum(data_no==no_)
    data_energy(data_no==no_)=E(E<5e9*e)/e/1e9;
    data_spectrum(data_no==no_)=S_c(E<5e9*e);
else
    data_no(end+1)=no_;
    data_energy(end+1,:)=E(E<5e9*e)/e/1e9;
    data_spectrum(end+1,:)=S_c(E<5e9*e);
end
%}


%{
Nini, 打开LWFA12数据分析的计算IP能谱_LWFA12(节点)

+[M函数](,M代码)
%}
## end
#1495, 4:
1525
## end
#1501, 314:
"""


"""

的(匹配结构,起点)->起点(,_起点)->的(式子,表达式)->的(表达式,_变量)...
->的(插入结构,起点#2)->起点#2(,_插入起点)...
    ->+[模板结构]([公式结构匹配],_起点)->[公式结构匹配](_变量,+描述结构)...
->+[公式结构插入]"/"(_插入起点,_变量)...
    ->+场景(+[公式结构插入],表达式)->+[del](,+场景)...

->[]{
    []=>的(插入结构,_节点)->_节点=>+[有](表达式,_节点)
}...

->+[del](,起点#2)->+[del](,插入结构)->+[del](,+描述结构)


## end
#1503, 503:
"""
操作:...

"""

+除以公式(_标记项,_插入项)->+[del](,+除以公式)...
->的(除以公式,操作)...

->.(+除以公式,_式子)...

->+匹配结构(,_标记项)->+[生成公式结构](_标记项,+匹配结构)...
    ->+[转换公式结构](,+匹配结构)->+[更新公式起点](,+匹配结构)...
->+插入结构(,_插入项)->+[生成公式结构](_插入项,+插入结构)...
    ->+[转换公式结构](,+插入结构)->+[更新公式起点](,+插入结构)...

->+[structure](compiler,+场景)->+[code](+[structure],操作)...
->+[.]"式子"(+[structure],_式子)...
->+[.](+[structure],+匹配结构)->+[.](+[structure],+插入结构)...
    ->+[删除结构](,+匹配结构)->+[del](,+匹配结构)->+[del](,+插入结构)...
    ->+[删除结构](,+场景)->+[del](,+场景)



## end
#1505, 78:


除以公式:...
+[修改标题]"除以公式"(,加上公式)
除以公式的"加上公式"替换为"除以公式"
将条目"提取公式"复制为条目"提取括号"





## end
#1507, 263:
"""
库:...
+[新建阅读窗口](,库)

"""

+除以(_主语,_宾语)->+[del](,+除以)...
->的(除以,库)...

->在(+除以,_式子):
->[is](_宾语,括号)->的(库,除以括号)...
    ->+[做](_式子,_主语)->+[code](+[做],除以括号),
->[is](_宾语,_re)->_re"和式|乘式|项|式子"->的(库,除以公式)...
    ->+[做](_主语,_re)->+[code](+[做],除以公式)->+[.](+[做],_式子)



## end
#1509, 4:
1527
## end
#1511, 4:
1529
## end
#1513, 4:
1534
## end
#1515, 420:
"""
+[修改天使]
Nini, 打开公式分析器(文件)
Nini, 打开词典的条目(节点)

"""

+公式结构变换(_式,_输出)->+[del](,+公式结构变换)...

->的(_式,表达式)->[]{
    []:->的(表达式,起点)->起点(,_c)->_c,
    ->+记作(,_式)->+为(+记作,_式)->+[执行词典动词](,+记作)...
        ->+[del](,+记作)->+[del](,+为)
}...

->+[算式结构转换](表达式,+[临时文本])->+[复制内容](,+[临时文本])...
    ->记忆->[]{
        []:->短期(记忆,)->+[修改内容](+[临时文本],短期),
        ->+短期(记忆,)->+[修改内容](+[临时文本],+短期)
}->.(+公式结构变换,_类型)->[m_text](_类型,+[算式结构转换])


## end
#1517, 4:
1535
## end
#1519, 4:
1540
## end
#1521, 4:
1546
## end
#1524, 222:
$$\begin{cases}
\Delta E=100\\ E_{1}=2000\\ \Delta E=100\\ E_{2}=3000\\ f \left( E \right)=exp \left( -\left(E-E_{1}\right)^{2}/\Delta E^{2} \right)+exp \left( -\left(E-E_{2}\right)^{2}/\Delta E^{2} \right)
\end{cases}

$$
## end
#1530, 187:
"""
Nini, 打开天书(文件)
Nini, 打开动词(库)

"""
+封印(,_物体)->+[del](,+封印)...

->+[记录星辰](,_物体)...
->[]{
    []:->为(+封印,临时文本)->临时文本->[m_text](临时文本,+[记录星辰]),
    ->[标题](_物体,)->[m_text]([标题],+[记录星辰])
}


## end
#1533, 4:
1557
## end
#1536, 1173:

def fun_普通句(code):
    if code=="":
        return code,None
    code_save=code

    code1,介宾短语=fun_介宾短语(code)
    if 介宾短语!=None:
        if code1[0:2]==', ':
            code=code1[2:]
        else:
            介宾短语=None

    code1,主语=fun_主语(code)
    code1,谓语=fun_谓语(code1)
    if 谓语!=None:
        code=code1
    else:
        主语=None
        code,谓语=fun_谓语(code)

    code,宾语=fun_宾语(code)

    if 谓语==None:
        return code,None

    
    句子=NetP("句子")
    句子.m_db[1]=谓语.m_db[1]
    NetP('的').con(句子,谓语)
    

    if 介宾短语!=None:
        介宾短语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,介宾短语)
        NetP('的').con(谓语,介宾短语)

    if 主语!=None:
        谓语.m_db[1].con(主语.m_db[1],0)
        NetP('的').con(句子,主语)
        
    if 宾语!=None:
        谓语.m_db[1].con(0,宾语.m_db[1])
        NetP('的').con(句子,宾语)
        

    code1,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,副词)
        NetP('的').con(谓语,副词)
        return code1,句子

    code1,补语=fun_补语(code)
    if 补语!=None:
        补语.m_db[1].con(谓语.m_db[1],0)
        NetP('的').con(句子,补语)
        NetP('的').con(谓语,补语)
        return code1,句子


    return code,句子




## end
#1537, 4:
1556
## end
#1544, 287:
"""
M代码:...

"""
+操作(,背向)->+[del](,+操作)...
->的(操作,M代码)...

->背向(_物体,_目标)...
    ->_物体->朝向#1(_物体,方向)->在(_物体,空间点#1)...
    ->_目标->在(_目标,空间点#2)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
    ->+[.]"p0"(+[matlab],空间点#2)->+[.]"r0"(+[matlab],空间点#1)...
    ->+[o]"angle"(+[matlab],方向)

## end
#1546, 114:
%{
+[M函数](,M代码)
%}

dr=r0-p0;
dr=dr/norm(dr);
angle=acosd(dr(1));
if dr(2)~=0
    angle=angle*sign(dr(2));
end




## end
#1547, 4:
1557
## end
#1549, 4:
1567
## end
#1552, 320:
"""
保存:...

"""

的(匹配结构,起点)->起点(,_起点)->的(式子,表达式)->的(表达式,_变量)...
->的(插入结构,起点#2)->起点#2(,_插入起点)...
    ->+[模板结构]([公式结构匹配],_起点)->[公式结构匹配](_变量,+描述结构)...
->+[公式结构插入]"+"(_插入起点,_变量)...
    ->+场景(+[公式结构插入],表达式)->+[del](,+场景)...

->[]{
    []=>的(插入结构,_节点)->_节点=>+[有](表达式,_节点)
}...

->+[del](,起点#2)->+[del](,插入结构)->+[del](,+描述结构)


## end
#1554, 317:
"""
保存:

"""

的(匹配结构,起点)->起点(,_起点)->的(式子,表达式)->的(表达式,_变量)...
->的(插入结构,起点#2)->起点#2(,_插入起点)...
    ->+[模板结构]([公式结构匹配],_起点)->[公式结构匹配](_变量,+描述结构)...
->+[公式结构插入]"*"(_插入起点,_变量)...
    ->+场景(+[公式结构插入],表达式)->+[del](,+场景)...

->[]{
    []=>的(插入结构,_节点)->_节点=>+[有](表达式,_节点)
}...

->+[del](,起点#2)->+[del](,插入结构)->+[del](,+描述结构)


## end
#1555, 4:
1561
## end
#1561, 4:
1563
## end
#1569, 4:
1571
## end
#1575, 4:
1625
## end
#1578, 112:
"""
M代码:...

"""

+标记点(,标记点#0)->+[del](,+标记点)...
->的(标记点,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)


## end
#1580, 126:
%{
+[M函数](,M代码)
%}


global refPts;
global refTexts;
delete(refPts);
delete(refTexts);




%{
refPts
refTexts

+[M函数](,M代码)
%}
## end
#1582, 666:
%{
+[M函数](,M代码)

addRefPt_path(M函数):...
将addRefPt_path的"addRefPt_curve"替换为"addRefPt_path"
+[新建阅读窗口](,addRefPt_path)

%}


addpath('Matlab/photo');
figure(f_n);

global refPts;
global refTexts;
global refCurve;

if isempty(refPts) || ~isvalid(refPts)
    hold on
    refPts=plot(nan,nan,'o');
    set(refPts,'MarkerEdgeColor','k');
    set(refPts,'MarkerFaceColor','w');
end
if isempty(refCurve) || ~isvalid(refCurve)
    hold on
    refCurve=plot(nan,nan,'r--');
end
if isempty(refTexts) || ~sum(isvalid(refTexts))
    hold on
    refTexts=text(nan,nan,'nan');
end


set(gcf,'WindowButtonDownFcn',@addRefPt_path);
% set(gcf,'WindowButtonMotionFcn',@getRefPlane);




## end
#1584, 2:
曲线
## end
#1586, 1074:
%{
地址::Matlab\photo\addRefPt_path.m
+[保存M函数](,addRefPt_path)
参考::https://undocumentedmatlab.com/blog_old/figure-keypress-modifiers
+[打开网页](,参考)
%}

function addRefPt_path(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');
    if strcmp(cType,'alt')
        global refPts;
        global refCurve;
        global refTexts;
        x=get(refPts,'XData');
        y=get(refPts,'YData');

        if isnan(x(1))
            x(1)=pt(1,1);
            refTexts(1).Position=[pt(1,1),pt(1,2),0];
            refTexts(1).String='1';
        else
            x(end+1)=pt(1,1);
            refTexts(end+1)=text(pt(1,1),pt(1,2),sprintf('%d',length(x)));
            set(refTexts(end),'Color','k');
            %set(refTexts(end),'BackgroundColor','w');
        end
        
        if isnan(y(1))
            y(1)=pt(1,2);
        else
            y(end+1)=pt(1,2);
        end

        set(refPts,'XData',x);
        set(refPts,'YData',y);
        set(refCurve,'XData',x);
        set(refCurve,'YData',y);
    end

%    clipboard('copy', [x';y']);
end


## end
#1589, 28:
Matlab\photo\addRefPt_path.m
## end
#1593, 29:
Matlab\photo\addRefPt_curve.m
## end
#1596, 1274:
%{
地址::Matlab\photo\addRefPt_curve.m
+[保存M函数](,addRefPt_curve)
参考::https://undocumentedmatlab.com/blog_old/figure-keypress-modifiers
+[打开网页](,参考)
%}

function addRefPt_curve(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');
    if strcmp(cType,'alt')
        global refPts;
        global refCurve;
        global refTexts;
        x=get(refPts,'XData');
        y=get(refPts,'YData');

        if isnan(x(1))
            x(1)=pt(1,1);
            refTexts(1).Position=[pt(1,1),pt(1,2),0];
            refTexts(1).String='1';
        else
            x(end+1)=pt(1,1);
            refTexts(end+1)=text(pt(1,1),pt(1,2),sprintf('%d',length(x)));
            set(refTexts(end),'Color','k');
            %set(refTexts(end),'BackgroundColor','w');
        end
        
        if isnan(y(1))
            y(1)=pt(1,2);
        else
            y(end+1)=pt(1,2);
        end

        set(refPts,'XData',x);
        set(refPts,'YData',y);

        if length(x)>2
            t=1:length(x);
            ts=linspace(1,length(x),100);
            xs=interp1(t,x,ts,'spline');
            ys=interp1(t,y,ts,'spline');
            set(refCurve,'XData',xs);
            set(refCurve,'YData',ys);
        end
    end

%    clipboard('copy', [x';y']);
end


## end
#1598, 665:
%{
+[M函数](,M代码)

addRefPt_curve(M函数):...
将addRefPt_curve的"addRefPt"替换为"addRefPt_curve"
+[新建阅读窗口](,addRefPt_curve)

%}


addpath('Matlab/photo');
figure(f_n);

global refPts;
global refTexts;
global refCurve;

if isempty(refPts) || ~isvalid(refPts)
    hold on
    refPts=plot(nan,nan,'o');
    set(refPts,'MarkerEdgeColor','k');
    set(refPts,'MarkerFaceColor','w');
end
if isempty(refCurve) || ~isvalid(refCurve)
    hold on
    refCurve=plot(nan,nan,'r--');
end
if isempty(refTexts) || ~sum(isvalid(refTexts))
    hold on
    refTexts=text(nan,nan,'nan');
end


set(gcf,'WindowButtonDownFcn',@addRefPt_curve);
% set(gcf,'WindowButtonMotionFcn',@getRefPlane);




## end
#1603, 28:
Matlab\photo\modRefPt_path.m
## end
#1606, 715:
%{
地址::Matlab\photo\modRefPt_path.m
+[保存M函数](,modRefPt_path)
参考::https://undocumentedmatlab.com/blog_old/figure-keypress-modifiers
+[打开网页](,参考)
%}

function modRefPt_path(hObject,e,n)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');
    if strcmp(cType,'alt')
        global refPts;
        global refCurve;
        global refTexts;
        x=get(refPts,'XData');
        y=get(refPts,'YData');

        ri=n;
        x(ri(1))=pt(1,1);
        y(ri(1))=pt(1,2);
        refTexts(ri(1)).Position=[pt(1,1),pt(1,2),0];

        set(refPts,'XData',x);
        set(refPts,'YData',y);
        set(refCurve,'XData',x);
        set(refCurve,'YData',y);
    end

%    clipboard('copy', [x';y']);
end


## end
#1609, 332:
%{
+[M函数](,M代码_折线)

modRefPt_path(M函数):...
+[新建阅读窗口](,modRefPt)
将modRefPt的"modRefPt"替换为"modRefPt_path"
+[修改标题]"modRefPt_path"(,modRefPt)
%}


addpath('Matlab\photo');

global refPts;
global refTexts;

if isempty(refPts) || ~isvalid(refPts)
else
f=@(h,e)modRefPt_path(h,e,n);
set(gcf,'WindowButtonDownFcn',f);
end

%modRefPt(1,1)




## end
#1611, 23:
Matlab\photo\modRefPt.m
## end
#1614, 610:
%{
地址::Matlab\photo\modRefPt.m
+[保存M函数](,modRefPt)
参考::https://undocumentedmatlab.com/blog_old/figure-keypress-modifiers
+[打开网页](,参考)
%}

function modRefPt(hObject,e,n)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');
    if strcmp(cType,'alt')
        global refPts;
        global refTexts;
        x=get(refPts,'XData');
        y=get(refPts,'YData');

        ri=n;
        x(ri(1))=pt(1,1);
        y(ri(1))=pt(1,2);
        refTexts(ri(1)).Position=[pt(1,1),pt(1,2),0];

        set(refPts,'XData',x);
        set(refPts,'YData',y);
    end

    % clipboard('copy', [x';y']);
end


## end
#1617, 246:
%{
+[M函数](,M代码)

modRefPt(M函数):...
+[新建阅读窗口](,modRefPt)
%}


addpath('Matlab\photo');

global refPts;
global refTexts;

if isempty(refPts) || ~isvalid(refPts)
else
f=@(h,e)modRefPt(h,e,n);
set(gcf,'WindowButtonDownFcn',f);
end

%modRefPt(1,1)




## end
#1626, 245:
"""
M代码:...

"""
+操作2(_物体,标记点)->+[del](,+操作2)...
->的(操作2,M代码)...

->_物体->朝向#1(_物体,方向)->在(_物体,空间点#1)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
    ->+[.]"p_n"(+[matlab],标记点)->+[.]"r0"(+[matlab],空间点#1)...
    ->+[o]"angle"(+[matlab],方向)

## end
#1628, 157:
%{
+[M函数](,M代码)
%}

p0=[refPts.XData(p_n),refPts.YData(p_n)];

dr=p0-r0;
dr=dr/norm(dr);
angle=acosd(dr(1));
if dr(2)~=0
    angle=angle*sign(dr(2));
end




## end
#1632, 19:

state=len(pt)==2


## end
#1636, 668:
"""
+[P函数](,P代码)
记住"Python"
+[python]"print(str0)"(Python,)
+[python]"print(str1)"(Python,)
print(str0)
print(pat0)
print(sent)
print(code)

"""
import re

try:
    words=re.findall('%(\[[^\[^\]]*\])',pat0)
    pat1=re.sub('%\[段落[^\[^\]]*\]',r'([\\w\\W]+)',pat0)
    pat2=re.sub('%\[句子[^\[^\]]*\]',r'(.+)',pat1)
    pat=re.sub('%\[[^\[^\]]*\]',r'([\\w\\d_.\-/+]+)',pat2)
    
    name=re.search(pat,sent)
    str0=pat0
    str1=code
    for i in range(len(words)):
        str0=str0.replace('%'+words[i],name.group(i+1))
        str1=str1.replace('%'+words[i],name.group(i+1))
    
    ans=re.sub(str0,str1,sent)

except:
    print('Error in replace!')
    ans=sent



## end
#1638, 290:
"""
P代码(P函数):...

"""

+re替换(_更新,_原文)->+[del](,+re替换)...
->的(re替换,P代码)...

->.(+re替换,_节点)...
->+[python](Python,_节点)->+[code](+[python],P代码)...
->+[s]"sent"(+[python],_节点)...
->+[s]"code"(+[python],_更新)->+[s]"pat0"(+[python],_原文)...

=>m_readPtr(,_节点)->的(_b,m_readPtr)...
=>+[更新文本](_b,)




## end
#1641, 434:
"""
库:...

"""

+替换(,_原文)->+[del](,+替换)...
->的(替换,库)...
->的(库,re替换)->的(库,re替换2)...

->[]{
    [is](_原文,临时文本)->为(+替换,_更新)->_更新(,)...
        ->+[做](_更新,_原文):
            ->.(_文本,临时文本)->_文本(,)...
                ->+[code](+[做],re替换)->+[.](+[做],_文本)->+[del](,.),
            ->在(+替换,选中区域)->选中区域(,)...
                ->+[code](+[做],re替换2),
            ->在(+替换,_文本1)->_文本1(,)...
                ->+[code](+[做],re替换)->+[.](+[做],_文本1)

}



## end
#1643, 226:
"""


"""
+描述结构(,_位移)->+操作(+描述结构,)...

->+[.]"dr"([python],_位移)->[python]"ans=int(len(dr))"(Python,+维度)...
->[]{
    []:->[==]"1"(,+维度)->+的(+操作,+一维位移),
    ->[==]"2"(,+维度)->+的(+操作,+二维位移),
    ->[==]"3"(,+维度)->+的(+操作,+二维位移)
}


## end
#1645, 20:


二维位移:...
一维位移:...

## end
#1647, 125:
"""


"""

+二维位移(_目标,_起点)->+[del](,+二维位移)...
->.(+二维位移,_位移)...

->+[相对](_起点,_目标)->[m_text](_位移,+[相对])...
->+[显示PPT图形](,_目标)


## end
#1649, 106:
"""
+[修改天使]

"""

+一维位移(_目标,_起点)->+[del](,+一维位移)...
->.(+一维位移,_位移)...

->+距离(_目标,_起点)->[m_text](_位移,+距离)


## end
#1655, 264:
"""
P代码:...

保存:...

"""

+生成句子代码(_句子,_结构)->+[修改内容](+生成句子代码,+[临时文本])...
->+[del](,+生成句子代码)...
->的(生成句子代码,P代码)...

->+[导入句子分析函数](,)...
->+[python](Python,_结构)...
->+[code](+[python],P代码):
    ->_句子->+[.]"sent"(+[python],_句子),
    ->+[.]"sent"(+[python],+[临时文本])




## end
#1657, 95:
的(记忆,扶桑)->的(扶桑,词典)->的(词典,目录)...
->记忆#1(目录,)->的(记忆#1,条目)->条目(,_节点)->+[更新词典](,_节点)


生成表格:...




## end
#1659, 1670:
"""
+[P函数](,生成表格)
+[读取词典]

记住"Python"

print(dict_名词)
dict_动词
dict_形容词
dict_数量词
dict_副词
dict_介词
dict_代词
dict_连词
dict_助词
dict_标点

Nini, 打开LWFA2022(文件)

测试输出表格:...
+[P函数](,生成表格)

"""

import pandas as pd 

dict_words={}
list_words=[]
for word in dict_名词:
    list_words.append(word)
dict_words.update({"名词":list_words})

list_words=[]
for word in dict_动词:
    list_words.append(word)
dict_words.update({"动词":list_words})

list_words=[]
for word in dict_形容词:
    list_words.append(word)
dict_words.update({"形容词":list_words})

list_words=[]
for word in dict_数量词:
    list_words.append(word)
dict_words.update({"数量词":list_words})

list_words=[]
for word in dict_副词:
    list_words.append(word)
dict_words.update({"副词":list_words})

list_words=[]
for word in dict_介词:
    list_words.append(word)
dict_words.update({"介词":list_words})

list_words=[]
for word in dict_代词:
    list_words.append(word)
dict_words.update({"代词":list_words})

list_words=[]
for word in dict_连词:
    list_words.append(word)
dict_words.update({"连词":list_words})

list_words=[]
for word in dict_助词:
    list_words.append(word)
dict_words.update({"助词":list_words})

list_words=[]
for word in dict_标点:
    list_words.append(word)
dict_words.update({"标点":list_words})

max_len=0
for itm in dict_words:
    if len(dict_words[itm])>max_len:
        max_len = len(dict_words[itm])

dict_table={}
list_words=[]
for itm in dict_words:
    list_words=dict_words[itm][:]
    list_words+=[None]*(max_len-len(list_words))
    dict_table.update({itm:list_words})


tbl_out=pd.DataFrame(dict_table)
tbl_out.to_csv('C:\\Users\\cheng\\Dropbox\\Struct\\Structure1.2.1\\Nini\\文档\\伊甸园\\词典\\词典_0.csv',encoding='utf_8_sig')


## end
#1661, 344:
"""
创建"文档\伊甸园\词典"
+[打开]"文档\伊甸园\词典"

, columns =['room', 'time', 'title', 'talker', 'ins.']
print('类' in dict_名词)

"""

import pandas as pd 

for itm in dict_table:
    print(len(dict_table[itm]))

test=pd.DataFrame(dict_table)
test.to_csv('C:\\Users\\cheng\\Dropbox\\Struct\\Structure1.2.1\\Nini\\文档\\伊甸园\\词典\\test.csv',encoding='utf_8_sig')



## end
#1663, 123:
"""
P代码:...
+[新建阅读窗口](,P代码)
在'选择区域', 
将P代码的"none"替换为"None"

"""

+保存词典->+[del](,+保存词典)...
->的(保存词典,P代码)...

->+[P函数](,P代码)

## end
#1665, 1629:
"""
测试读取:...

"""

import pandas as pd
import platform

dict_words={}
list_words=[]
for word in dict_名词:
    list_words.append(word)
dict_words.update({"名词":list_words})

list_words=[]
for word in dict_动词:
    list_words.append(word)
dict_words.update({"动词":list_words})

list_words=[]
for word in dict_形容词:
    list_words.append(word)
dict_words.update({"形容词":list_words})

list_words=[]
for word in dict_数量词:
    list_words.append(word)
dict_words.update({"数量词":list_words})

list_words=[]
for word in dict_副词:
    list_words.append(word)
dict_words.update({"副词":list_words})

list_words=[]
for word in dict_介词:
    list_words.append(word)
dict_words.update({"介词":list_words})

list_words=[]
for word in dict_代词:
    list_words.append(word)
dict_words.update({"代词":list_words})

list_words=[]
for word in dict_连词:
    list_words.append(word)
dict_words.update({"连词":list_words})

list_words=[]
for word in dict_助词:
    list_words.append(word)
dict_words.update({"助词":list_words})

list_words=[]
for word in dict_标点:
    list_words.append(word)
dict_words.update({"标点":list_words})

max_len=0
for itm in dict_words:
    if len(dict_words[itm])>max_len:
        max_len = len(dict_words[itm])

dict_table={}
list_words=[]
for itm in dict_words:
    list_words=dict_words[itm][:]
    list_words+=[None]*(max_len-len(list_words))
    dict_table.update({itm:list_words})


tbl_out=pd.DataFrame(dict_table)

if platform.uname()[0]=='Linux':
    tbl_out.to_csv('文档/伊甸园/词典/词典_0.csv',encoding='utf_8_sig')
else:
    tbl_out.to_csv('C:\\Users\\cheng\\Dropbox\\Struct\\Structure1.2.1\\Nini\\文档\\伊甸园\\词典\\词典_0.csv',encoding='utf_8_sig')



## end
#1667, 251:
"""
测试读取:...

"""

import pandas as pd 

tbl_in=pd.read_csv('C:\\Users\\cheng\\Dropbox\\Struct\\Structure1.2.1\\Nini\\文档\\伊甸园\\词典\\词典_0.csv',encoding='utf-8')

print(tbl_in['名词'][0])
print(len(tbl_in['动词']))

for word in tbl_in['动词']:
    print(word)

## end
#1678, 251:
"""
测试读取:...

"""

import pandas as pd 

tbl_in=pd.read_csv('C:\\Users\\cheng\\Dropbox\\Struct\\Structure1.2.1\\Nini\\文档\\伊甸园\\词典\\词典_0.csv',encoding='utf-8')

print(tbl_in['名词'][0])
print(len(tbl_in['动词']))

for word in tbl_in['动词']:
    print(word)

## end
#1680, 1267:
"""
测试读取:...

"""

import pandas as pd 
import platform

if platform.uname()[0]=='Linux':
    tbl_in=pd.read_csv('文档/伊甸园/词典/词典_0.csv',encoding='utf-8')
else:
    # tbl_in=pd.read_csv('C:\\Users\\cheng\\Dropbox\\Struct\\Structure1.2.1\\Nini\\文档\\伊甸园\\词典\\词典_0.csv',encoding='utf-8')
    tbl_in=pd.read_csv('文档\\伊甸园\\词典\\词典_0.csv',encoding='utf-8')


dict_动词=set()
for word in tbl_in['动词']:
    if word!=None:
        dict_动词.update({word})

dict_名词=set()
for word in tbl_in['名词']:
    if word!=None:
        dict_名词.update({word})

dict_形容词=set()
for word in tbl_in['形容词']:
    if word!=None:
        dict_形容词.update({word})

dict_数量词=set()
for word in tbl_in['数量词']:
    if word!=None:
        dict_数量词.update({word})

dict_副词=set()
for word in tbl_in['副词']:
    if word!=None:
        dict_副词.update({word})

dict_介词=set()
for word in tbl_in['介词']:
    if word!=None:
        dict_介词.update({word})

dict_代词=set()
for word in tbl_in['代词']:
    if word!=None:
        dict_代词.update({word})

dict_连词=set()
for word in tbl_in['连词']:
    if word!=None:
        dict_连词.update({word})

dict_助词=set()
for word in tbl_in['助词']:
    if word!=None:
        dict_助词.update({word})

dict_标点=set()
for word in tbl_in['标点']:
    if word!=None:
        dict_标点.update({word})




## end
#1682, 123:
"""
P代码:...
+[新建阅读窗口](,P代码)
在'选择区域', 
将P代码的"none"替换为"None"

"""

+读取词典->+[del](,+读取词典)...
->的(读取词典,P代码)...

->+[P函数](,P代码)

## end
#1685, 40:
https://github.com/pwxcoo/chinese-xinhua
## end
#1689, 1681:

def fun_主语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,定语=fun_定语(code)
    if 定语!=None:
        code,名词=fun_名词(code)
        code_del,动词=fun_动词(code)
        if 名词!=None and 动词!=None:
            主语=NetP("主语")
            主语.m_db[1]=名词.m_db[1]
            
            # Karma(主语.m_db[1])
            if 定语.m_db[1].m_name in dict_动词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            elif 定语.m_db[1].m_name in dict_副词:
                if 定语.m_db[1].m_db[0]!=None:
                    定语.m_db[1].con(0,名词.m_db[1])
                else:
                    定语.m_db[1].con(名词.m_db[1],0)
            else:
                定语.m_db[1].con(名词.m_db[1],0)
            
            NetP('的').con(主语,定语)
            NetP('的').con(主语,名词)
            return code,主语
    code=code_save
    
    code,并列短语=fun_并列短语(code)
    if 并列短语!=None:
        if code[0]=='的':
            code=code[1:]
            code,名词=fun_名词(code)
            if 名词!=None:
                主语=NetP("主语")
                主语.m_db[1]=名词.m_db[1]
                
                NetP('的').con(主语,名词)
                return code,主语

        else:
            主语=NetP("主语")
            主语.m_db[1]=并列短语.m_db[1]
            
            # Karma(主语.m_db[1])
            NetP('的').con(主语,并列短语)
            return code,主语
    code=code_save

    code,名词=fun_名词(code)
    if 名词!=None:
        主语=NetP("主语")
        主语.m_db[1]=名词.m_db[1]
        
        # Karma(主语.m_db[1])
        NetP('的').con(主语,名词)
        return code,主语
    code=code_save

    return code,None

## end
#1691, 137:
"""
M代码:...

"""

+颜色(,_颜色)->+[del](,+颜色)...
->的(颜色,M代码)...

->+[matlab](Matlab,)->+[code](+[matlab],M代码)...
->+[.]"color"(+[matlab],_颜色)
## end
#1693, 139:
%{
Nini, 打开动词(库)
color/255
%}

figure
% set(gcf,'Color',[0,0,0])
if max(color)>1
set(gca,'Color',color/255)
else
set(gca,'Color',color)
end
## end
#1707, 967:
%{
地址::Matlab\photo\addRefPt.m
+[保存M函数](,addRefPt)
参考::https://undocumentedmatlab.com/blog_old/figure-keypress-modifiers
+[打开网页](,参考)
%}

function addRefPt(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');
    if strcmp(cType,'alt')
        global refPts;
        global refTexts;
        x=get(refPts,'XData');
        y=get(refPts,'YData');

        if isnan(x(1))
            x(1)=pt(1,1);
            refTexts(1).Position=[pt(1,1),pt(1,2),0];
            refTexts(1).String='1';
        else
            x(end+1)=pt(1,1);
            refTexts(end+1)=text(pt(1,1),pt(1,2),sprintf('%d',length(x)));
            set(refTexts(end),'Color','k');
            %set(refTexts(end),'BackgroundColor','w');
        end
        
        if isnan(y(1))
            y(1)=pt(1,2);
        else
            y(end+1)=pt(1,2);
        end

        set(refPts,'XData',x);
        set(refPts,'YData',y);
    end

    clipboard('copy', [x';y']);
end


## end
#1715, 561:
"""


"""

+描述结构(_物体,_方向)->+操作(+描述结构,)...

->Matlab->[]{
    []:->+[.]"an"([matlab],_方向)->[matlab]"state=(length(an)==3);"(Matlab,)...
       ->+三维朝向(_物体,_方向)->+的(+操作,+三维朝向),
    ->的(_物体,X)->X(,)...
       ->+三维朝向(_物体,_方向)->+的(+操作,+三维朝向),
    ->的(_物体,x)->x(,)...
       ->+二维朝向(_物体,_方向)->+的(+操作,+二维朝向),

    ->的(_方向,x#1)->x#1(,)...
       ->+二维朝向(_物体,_方向)->+的(+操作,+二维朝向),
    ->的(_方向,X#1)->X#1(,)...
       ->+三维朝向(_物体,_方向)->+的(+操作,+三维朝向),

    ->的(_物体,_物体1)->_物体1->的(_物体1,X#2)...
       ->+三维朝向(_物体,_方向)->+的(+操作,+三维朝向),

   ->+二维朝向(_物体,_方向)->+的(+操作,+二维朝向)
}



## end
#1717, 162:
运行指令"nautilus 文档/S应用/词典"

词性表::https://github.com/ssvivian/WebstersDictionary/blob/master/dictionary.json
+[打开网页](,词性表)

测试代码:...
+[新建阅读窗口](,测试代码)
测试parser:...



## end
#1719, 74:
https://github.com/ssvivian/WebstersDictionary/blob/master/dictionary.json
## end
#1722, 422:
"""
记住"Python"
+[P函数](,测试代码)

输出词典:...

"""

import json

f=open("文档/S应用/词典/WebstersDictionary-master/dictionary.json")
data=json.loads(f.read())
print(len(data))
print(data[0]['pos'],data[0]['word'])

dict_words=dict()
dict_words={'A':['B']}
for term in data:
    pos=term['pos']
    list_words=dict_words.get(term['pos'],[])
    list_words.append(term['word'])
    dict_words.update({pos:list_words})

print(dict_words)

## end
#1724, 622:
"""
记住"Python"
运行指令"nautilus 文档/S应用/词典/WebstersDictionary-master"
+[P函数](,输出词典)

"""

import json

f=open("文档/S应用/词典/WebstersDictionary-master/dictionary.json")
data=json.loads(f.read())
print(len(data))
print(data[0]['pos'],data[0]['word'])

dict_words=dict()
dict_words={'A':['B']}
for term in data:
    pos=term['pos']
    list_words=dict_words.get(term['pos'],[])
    list_words.append(term['word'])
    dict_words.update({pos:list_words})

print(dict_words)
data=dict_words
data['n.'].append('TABLE')

with open('文档/S应用/词典/data.json', 'w') as f:
    json.dump(data, f)


"""
print(dict_words['n.'])
+[P函数](,输出词典)

"""
## end
#1726, 493:
"""
测试:...
P代码:...
P代码2:...
P代码1:...
+[新建阅读窗口](,P代码1)

"""
+阅读英文(_句子,_结构)->+[del](,+阅读英文)...
->的(阅读英文,P代码)->的(阅读英文,P代码1)->的(阅读英文,P代码2)...

->+[python](Python,_结构)->+[code](+[python],P代码)...
->+[python]#2(Python,_结构)->+[code](+[python]#2,P代码2)...
->+[python]#1(Python,_结构)->+[code](+[python]#1,P代码1)...

->[]{
    []:->_句子->+[.]"code"(+[python]#1,_句子),
    ->+[临时文本]->+[.]"code"(+[python]#1,+[临时文本])...
        ->[m_text](+阅读英文,+[临时文本])
}...

->+[删除结构](,_结构)->+[导入节点](_结构,_结构)->+[显示星图](,_结构)



## end
#1728, 156:
"""
运行指令"nautilus 文档/S应用/词典/WebstersDictionary-master"
+[P函数](,测试)

"""

import json

f=open("文档/S应用/词典/data.json")
data=json.loads(f.read())
print(data)



## end
#1730, 2369:
"""
wordSOP_all()
记住"Python"
运行指令"nautilus 文档/S应用/词典/WebstersDictionary-master"
+[P函数](,P代码)
for tag_name in data:
    print(tag_name)
print(wordSOP_all('help'))
retur 
整理表格:...

"""

import json

f=open("文档/S应用/词典/data.json")
data=json.loads(f.read())
f=open("文档/S应用/词典/data_past.json")
dict_past=json.loads(f.read())
f=open("文档/S应用/词典/data_pastPart.json")
dict_pastPart=json.loads(f.read())

def wordSOP(word):
    WORD=word.upper()
    for tag_name in data:
        if tag_name!='n.' and WORD in data[tag_name]:
            return tag_name
    if WORD in data['n.']:
        return 'n.'
    return 'none'

def wordSOP_all(word):
    WORD=word.upper()
    tag_list=[]
    for tag_name in data:
        if WORD in data[tag_name]:
            tag_list.append(tag_name)
    return tag_list

def wordSOP_check(word,tag_name):
    WORD=word.upper()
    try:
        return WORD in data[tag_name]
    except:
        return False

def word_verb_tense(word,tense):
    WORD=word.upper()
    wORD=word.lower()
    if tense=='PrePart' and len(WORD)>2 and WORD[-3:]=='ING':
        if wordSOP_check(WORD[0:-3],'v.'):
            return True,word[0:-3]
        elif wordSOP_check(WORD[0:-4],'v.'):
            return True,word[0:-4]
        return False,''

    elif tense=='Past' or tense=='PastPart':
        if len(WORD)>1 and WORD[-2:]=='ED':
            if wordSOP_check(WORD[0:-2],'v.'):
                return True,word[0:-2]
            elif wordSOP_check(WORD[0:-1],'v.'):
                return True,word[0:-1]
            return False,''
        elif tense=='Past' and wORD in dict_past:
            return True,dict_past[wORD][0]
        elif wORD in dict_pastPart:
            return True,dict_pastPart[wORD][0]
        return False,''

    elif tense=='Trip' and len(WORD)>0 and WORD[-1:]=='S':
        if wordSOP_check(WORD[0:-1],'v.'):
            return True,word[0:-1]
        elif wordSOP_check(WORD[0:-3]+'Y','v.'):
            return True,word[0:-3]+'y'
        return False,''
    return False,''


"""
print('TABLE' in data['n.'])
print(data['n.'])
print(len(data['v.']),len(data['n.']))
print(word_verb_tense('runing','PrePart'))
print(word_verb_tense('had','PastPart'))
print(word_verb_tense('taught','Past'))
print(not word_verb_tense('flies','Trip')[0])
print(verbs["verbs"][0]['Past-simple'])
print(verbs["verbs"][0]['Past-simple'])
+[P函数](,P代码)

"""
## end
#1732, 3873:
"""
记住"Python"
print(wordSOP_all('red'))
print(wordSOP_all('the'))
print(wordSOP_all('apple'))
print(wordSOP_all('with'))
print(wordSOP_all('told'))
adv

"""

def parser_token_adj(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]

    [state,i,text]=word_pat_token(code,i,r'\w+')
    if not wordSOP_check(text,'a.') and not wordSOP_check(text,'pron.'):
        i=i0
        state=False
    pt0=NetP("adj",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("adj:",state)
        return [False,i0,None]
    else:
        print("adj:",state,pt0.info())
        return [True,i,pt0]


def parser_token_adv(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]

    [state,i,text]=word_pat_token(code,i,r'\w+')
    if not wordSOP_check(text,'adv.'):
        i=i0
        state=False
    pt0=NetP("adv",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("adv:",state)
        return [False,i0,None]
    else:
        print("adv:",state,pt0.info())
        return [True,i,pt0]


def parser_token_prep(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]

    [state,i,text]=word_pat_token(code,i,r'\w+')
    if not wordSOP_check(text,'prep.'):
        i=i0
        state=False
    pt0=NetP("prep",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("prep:",state)
        return [False,i0,None]
    else:
        print("prep:",state,pt0.info())
        return [True,i,pt0]




def parser_token_verbing(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]

    [state,i,text]=word_pat_token(code,i,r'\w+')
    if not word_verb_tense(text,'PrePart')[0]:
        i=i0
        state=False
    pt0=NetP("verbing",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("verbing:",state)
        return [False,i0,None]
    else:
        print("verbing:",state,pt0.info())
        return [True,i,pt0]



def parser_token_verben(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]

    [state,i,text]=word_pat_token(code,i,r'\w+')
    if not word_verb_tense(text,'PastPart')[0]:
        i=i0
        state=False
    pt0=NetP("verben",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("verben:",state)
        return [False,i0,None]
    else:
        print("verben:",state,pt0.info())
        return [True,i,pt0]



def parser_token_verb(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]

    [state,i,text]=word_pat_token(code,i,r'\w+')
    if not wordSOP_check(text,'v.') and not word_verb_tense(text,'Past')[0] and not word_verb_tense(text,'Trip')[0]:
        i=i0
        state=False
    pt0=NetP("verb",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("verb:",state)
        return [False,i0,None]
    else:
        print("verb:",state,pt0.info())
        return [True,i,pt0]

"""
print(wordSOP_all('I'))

"""

def parser_token_noun(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]

    [state,i,text]=word_pat_token(code,i,r'\w+')
    if not wordSOP_check(text,'n.') and not wordSOP_check(text,'pron.'):
        i=i0
        state=False
    pt0=NetP("noun",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("noun:",state)
        return [False,i0,None]
    else:
        print("noun:",state,pt0.info())
        return [True,i,pt0]


ans=parser_text2pts(code)




## end
#1734, 16220:
"""
+[P函数](,代码)
print('2'.replace('2','333'))

"""

import re
from body.bone import NetP
from tools import tools_basic

def word_pat_token(code,i,pat):
    text=''

#    pat=pat.replace('\\','\\\\')
    a=re.match(pat,code[i:])
    if a==None:
        state=False
    else:
        di=a.span()[1]
        output_txt=code[i:i+di]
        i+=di
        state=True
        text=output_txt
    
    return [state,i,text]


def parser_token_prep(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("prep",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("prep:",state)
        return [False,i0,None]
    else:
        print("prep:",state,pt0.info())
        return [True,i,pt0]

def parser_token_adv(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("adv",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("adv:",state)
        return [False,i0,None]
    else:
        print("adv:",state,pt0.info())
        return [True,i,pt0]

def parser_token_adj(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("adj",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("adj:",state)
        return [False,i0,None]
    else:
        print("adj:",state,pt0.info())
        return [True,i,pt0]

def parser_token_verb(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("verb",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("verb:",state)
        return [False,i0,None]
    else:
        print("verb:",state,pt0.info())
        return [True,i,pt0]

def parser_token_verben(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("verb",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("verben:",state)
        return [False,i0,None]
    else:
        print("verben:",state,pt0.info())
        return [True,i,pt0]

def parser_token_verbing(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("verb",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("verbing:",state)
        return [False,i0,None]
    else:
        print("verbing:",state,pt0.info())
        return [True,i,pt0]

def parser_token_noun(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("noun",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("noun:",state)
        return [False,i0,None]
    else:
        print("noun:",state,pt0.info())
        return [True,i,pt0]

def parser_token_have(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'have|has|had')
    pt0=NetP("have",text)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
        if state==True:
            i0=i
            state0=True
            list_new0=list_new[:]
            # list_new=[]
            [state,i,text]=word_pat_token(code,i,r'been')
            if state==False:
                i=i0
                list_new=list_new0
                state=True
                state0=False
            # else:
            #     list_new=list_new0+list_new
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("have:",state)
        return [False,i0,None]
    else:
        print("have:",state,pt0.info())
        return [True,i,pt0]

def parser_token_be(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'is|are|was|were|been|be')
    pt0=NetP("is",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("be:",state)
        return [False,i0,None]
    else:
        print("be:",state,pt0.info())
        return [True,i,pt0]

def parser_token_prd(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,pt0]=parser_token_be(code,i,list_new)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
        if state==True:
            [state,i,pt1]=parser_token_verbing(code,i,list_new)
            if state==True:
                pt1=NetP("ing").con(0,pt1)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
            if state==True:
                list_new.append(pt1)
    if state==False:
        i=i0
        list_new=list_new0
        [state,i,pt0]=parser_token_be(code,i,list_new)
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt1]=parser_token_verben(code,i,list_new)
                if state==True:
                    pt1=NetP("ed").con(0,pt1)
                if state==True:
                    pt1.con(pt0,0)
                else:
                    pt1=pt0
                if state==True:
                    list_new.append(pt1)
    if state==False:
        i=i0
        list_new=list_new0
        [state,i,pt0]=parser_token_have(code,i,list_new)
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt1]=parser_token_verben(code,i,list_new)
                if state==True:
                    pt1=NetP("has").con(0,pt1)
                if state==True:
                    pt1.con(pt0,0)
                else:
                    pt1=pt0
                if state==True:
                    list_new.append(pt1)
    if state==False:
        i=i0
        list_new=list_new0
        [state,i,pt0]=parser_token_verb(code,i,list_new)
        if state==True:
            pt0=NetP("do").con(0,pt0)
        if state==True:
            list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("prd:",state)
        return [False,i0,None]
    else:
        print("prd:",state,pt0.info())
        return [True,i,pt0]

def parser_token_tag2(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'[aA] |[aA]n |[tT]he ')
    pt0=NetP("the",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("tag2:",state)
        return [False,i0,None]
    else:
        print("tag2:",state,pt0.info())
        return [True,i,pt0]

def parser_token_tag(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,pt0]=parser_token_prep(code,i,list_new)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
        if state==True:
            [state,i,pt1]=parser_token_n_ph(code,i,list_new)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
    
    list_pt+=list_new

    if state==False:
        print("tag:",state)
        return [False,i0,None]
    else:
        print("tag:",state,pt0.info())
        return [True,i,pt0]

def parser_token_n_ph(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    i0=i
    state0=True
    list_new0=list_new[:]
    # list_new=[]
    [state,i,pt0]=parser_token_tag2(code,i,list_new)
    
    if state==False:
        i=i0
        list_new=list_new0
        state=True
        state0=False
    # else:
    #     list_new=list_new0+list_new
    if state==True:
        i1=i
        list_new1=list_new[:]
        [state,i,pt1]=parser_token_adj(code,i,list_new)
        if state==True:
            pt1.con(pt0,0)
        else:
            pt1=pt0
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt2]=parser_token_noun(code,i,list_new)
                if state==True:
                    pt2.con(pt1,0)
                else:
                    pt2=pt1
        if state==False:
            i=i1
            list_new=list_new1
            [state,i,pt1]=parser_token_noun(code,i,list_new)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
        
    if state0==False:
        pt0=pt1
    
    list_pt+=list_new

    if state==False:
        print("n_ph:",state)
        return [False,i0,None]
    else:
        print("n_ph:",state,pt0.info())
        return [True,i,pt0]

def parser_token_obj(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    i0=i
    state0=True
    list_new0=list_new[:]
    # list_new=[]
    [state,i,pt0]=parser_token_tag2(code,i,list_new)
    
    if state==False:
        i=i0
        list_new=list_new0
        state=True
        state0=False
    # else:
    #     list_new=list_new0+list_new
    if state==True:
        i1=i
        list_new1=list_new[:]
        [state,i,pt1]=parser_token_adj(code,i,list_new)
        if state==True:
            pt1.con(pt0,0)
        else:
            pt1=pt0
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt2]=parser_token_noun(code,i,list_new)
                if state==True:
                    pt2.con(pt1,0)
                else:
                    pt2=pt1
        if state==False:
            i=i1
            list_new=list_new1
            [state,i,pt1]=parser_token_noun(code,i,list_new)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
        
    if state0==False:
        pt0=pt1
    
    list_pt+=list_new

    if state==False:
        print("obj:",state)
        return [False,i0,None]
    else:
        print("obj:",state,pt0.info())
        return [True,i,pt0]

def parser_token_sbj(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    i0=i
    state0=True
    list_new0=list_new[:]
    # list_new=[]
    [state,i,pt0]=parser_token_tag2(code,i,list_new)
    
    if state==False:
        i=i0
        list_new=list_new0
        state=True
        state0=False
    # else:
    #     list_new=list_new0+list_new
    if state==True:
        i1=i
        list_new1=list_new[:]
        [state,i,pt1]=parser_token_adj(code,i,list_new)
        if state==True:
            pt1.con(pt0,0)
        else:
            pt1=pt0
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt2]=parser_token_noun(code,i,list_new)
                if state==True:
                    pt2.con(pt1,0)
                else:
                    pt2=pt1
        if state==False:
            i=i1
            list_new=list_new1
            [state,i,pt1]=parser_token_noun(code,i,list_new)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
        
    if state0==False:
        pt0=pt1
    
    list_pt+=list_new

    if state==False:
        print("sbj:",state)
        return [False,i0,None]
    else:
        print("sbj:",state,pt0.info())
        return [True,i,pt0]

def parser_token_sent1(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    i0=i
    state0=True
    list_new0=list_new[:]
    # list_new=[]
    [state,i,pt0]=parser_token_sbj(code,i,list_new)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
    
    if state==True:
        pt0=NetP("sbj").con(0,pt0)
    if state==False:
        i=i0
        list_new=list_new0
        state=True
        state0=False
    # else:
    #     list_new=list_new0+list_new
    if state==True:
        [state,i,pt1]=parser_token_prd(code,i,list_new)
        if state==True:
            pt1=NetP("prd").con(0,pt1)
        if state==True:
            pt1.con(pt0,0)
        else:
            pt1=pt0
        if state==True:
            i2=i
            state2=True
            list_new2=list_new[:]
            # list_new=[]
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt2]=parser_token_adv(code,i,list_new)
                if state==True:
                    pt2.con(pt1,0)
                else:
                    pt2=pt1
            
            if state==False:
                i=i2
                list_new=list_new2
                state=True
                state2=False
            # else:
            #     list_new=list_new2+list_new
            if state==True:
                i3=i
                state3=True
                list_new3=list_new[:]
                # list_new=[]
                [state,i,text]=word_pat_token(code,i,r' ')
                if state==True:
                    [state,i,pt3]=parser_token_obj(code,i,list_new)
                    if state==True:
                        pt3.con(pt2,0)
                    else:
                        pt3=pt2
                
                if state==True:
                    pt3=NetP("obj").con(0,pt3)
                if state==False:
                    i=i3
                    list_new=list_new3
                    state=True
                    state3=False
                # else:
                #     list_new=list_new3+list_new
                if state==True:
                    i4=i
                    state4=True
                    list_new4=list_new[:]
                    # list_new=[]
                    [state,i,text]=word_pat_token(code,i,r' ')
                    if state==True:
                        [state,i,pt4]=parser_token_tag(code,i,list_new)
                        if state==True:
                            pt4.con(pt3,0)
                        else:
                            pt4=pt3
                    
                    if state==True:
                        pt4=NetP("tag").con(0,pt4)
                    if state==False:
                        i=i4
                        list_new=list_new4
                        state=True
                        state4=False
                    # else:
                    #     list_new=list_new4+list_new
                    if state4==True:
                        list_new.append(pt4)
                if state3==False:
                    pt3=pt4
                if state3==True:
                    list_new.append(pt3)
            if state2==False:
                pt2=pt3
        if state==True:
            list_new.append(pt1)
    if state0==False:
        pt0=pt1
    if state0==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("sent1:",state)
        return [False,i0,None]
    else:
        print("sent1:",state,pt0.info())
        return [True,i,pt0]


def parser_text2pts(code):
    list_pt0=[]
    [state,i,pt]=parser_token_sent1(code,0,list_pt0)
    list_pt=[]
    for pt in list_pt0:
        if pt!=None:
                list_pt.append(pt)
    if state==False:
        return ''
    text=tools_basic.writeStdCode([],list_pt)
    return text

#text=parser_text2pts('A:B')
#print(text)



"""
[tT]
+[P函数](,代码)

"""
## end
#1736, 405:
Nini, 打开结构化文本(文件)

版本1:...
英文parser:...
代码:...
+[召唤星辰]"生成Parser代码"(英文parser,代码)
+[新建阅读窗口](,英文parser)
+[显示parser结构](英文parser,结构)
+[显示星图](,结构)

结构:...
+[阅读英文]"the man eats a red apple"(,结构)
+[阅读英文]"man eats apple"(,结构)
+[阅读英文]"I eat my apple in a beautiful room"(,结构)
+[阅读英文]"He starts the laser in the lab"(,结构)
+[阅读英文]"He turned on the light in the lab"(,结构)
+[阅读英文]"I eat"(,结构)
+[阅读英文]"A B C"(,+[临时文本])


## end
#1738, 523:
sent1:([sbj] \ ){sbj}? [prd]{prd} (\  [adv])? (\  [obj]){obj}? (\  [tag]){tag}?
sbj:[tag2]? ([adj] \  [noun]| [noun])
obj:[tag2]? ([adj] \  [noun]| [noun])
n_ph:[tag2]? ([adj] \  [noun]| [noun])
tag:[prep] \  [n_ph]
tag2:\[aA\]\|\[aA\]n\|\[tT\]he\ {the}
prd:[be] \  [verbing]{ing}| [be] \  [verben]{ed}| [have] \  [verben]{has}| [verb]{do}
be:is\|are\|was\|were\|been\|be{is}
have:have\|has\|had{have} \  been?
noun:\\w+{noun}
verbing:\\w+{verb}
verben:\\w+{verb}
verb:\\w+{verb}
adj:\\w+{adj}
adv:\\w+{adv}
prep:\\w+{prep}
## end
#1740, 16425:
"""
+[P函数](,代码)
print('2'.replace('2','333'))

"""

import re
from body.bone import NetP
from tools import tools_basic

def word_pat_token(code,i,pat):
    text=''

#    pat=pat.replace('\\','\\\\')
    a=re.match(pat,code[i:])
    if a==None:
        state=False
    else:
        di=a.span()[1]
        output_txt=code[i:i+di]
        i+=di
        state=True
        text=output_txt
    
    return [state,i,text]


def parser_token_prep(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("prep",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("prep:",state)
        return [False,i0,None]
    else:
        print("prep:",state,pt0.info())
        return [True,i,pt0]

def parser_token_adv(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("adv",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("adv:",state)
        return [False,i0,None]
    else:
        print("adv:",state,pt0.info())
        return [True,i,pt0]

def parser_token_adj(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("adj",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("adj:",state)
        return [False,i0,None]
    else:
        print("adj:",state,pt0.info())
        return [True,i,pt0]

def parser_token_verb(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("verb",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("verb:",state)
        return [False,i0,None]
    else:
        print("verb:",state,pt0.info())
        return [True,i,pt0]

def parser_token_verben(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("verb",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("verben:",state)
        return [False,i0,None]
    else:
        print("verben:",state,pt0.info())
        return [True,i,pt0]

def parser_token_verbing(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("verb",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("verbing:",state)
        return [False,i0,None]
    else:
        print("verbing:",state,pt0.info())
        return [True,i,pt0]

def parser_token_noun(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'\w+')
    pt0=NetP("noun",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("noun:",state)
        return [False,i0,None]
    else:
        print("noun:",state,pt0.info())
        return [True,i,pt0]

def parser_token_have(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'have|has|had')
    pt0=NetP("have",text)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
        if state==True:
            i0=i
            state0=True
            list_new0=list_new[:]
            # list_new=[]
            [state,i,text]=word_pat_token(code,i,r'been')
            if state==False:
                i=i0
                list_new=list_new0
                state=True
                state0=False
            # else:
            #     list_new=list_new0+list_new
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("have:",state)
        return [False,i0,None]
    else:
        print("have:",state,pt0.info())
        return [True,i,pt0]

def parser_token_be(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'is|are|was|were|been|be')
    pt0=NetP("is",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("be:",state)
        return [False,i0,None]
    else:
        print("be:",state,pt0.info())
        return [True,i,pt0]

def parser_token_prd(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,pt0]=parser_token_be(code,i,list_new)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
        if state==True:
            [state,i,pt1]=parser_token_verbing(code,i,list_new)
            if state==True:
                pt1=NetP("ing").con(0,pt1)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
            if state==True:
                list_new.append(pt1)
    if state==False:
        i=i0
        list_new=list_new0
        [state,i,pt0]=parser_token_be(code,i,list_new)
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt1]=parser_token_verben(code,i,list_new)
                if state==True:
                    pt1=NetP("ed").con(0,pt1)
                if state==True:
                    pt1.con(pt0,0)
                else:
                    pt1=pt0
                if state==True:
                    list_new.append(pt1)
    if state==False:
        i=i0
        list_new=list_new0
        [state,i,pt0]=parser_token_have(code,i,list_new)
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt1]=parser_token_verben(code,i,list_new)
                if state==True:
                    pt1=NetP("has").con(0,pt1)
                if state==True:
                    pt1.con(pt0,0)
                else:
                    pt1=pt0
                if state==True:
                    list_new.append(pt1)
    if state==False:
        i=i0
        list_new=list_new0
        [state,i,pt0]=parser_token_verb(code,i,list_new)
        if state==True:
            pt0=NetP("do").con(0,pt0)
        if state==True:
            list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("prd:",state)
        return [False,i0,None]
    else:
        print("prd:",state,pt0.info())
        return [True,i,pt0]

def parser_token_tag2(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,text]=word_pat_token(code,i,r'[aA]|[aA]n|[tT]he')
    pt0=NetP("the",text)
    if state==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("tag2:",state)
        return [False,i0,None]
    else:
        print("tag2:",state,pt0.info())
        return [True,i,pt0]

def parser_token_tag(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    [state,i,pt0]=parser_token_prep(code,i,list_new)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
        if state==True:
            [state,i,pt1]=parser_token_n_ph(code,i,list_new)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
    
    list_pt+=list_new

    if state==False:
        print("tag:",state)
        return [False,i0,None]
    else:
        print("tag:",state,pt0.info())
        return [True,i,pt0]

def parser_token_n_ph(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    i0=i
    state0=True
    list_new0=list_new[:]
    # list_new=[]
    [state,i,pt0]=parser_token_tag2(code,i,list_new)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
    
    if state==False:
        i=i0
        list_new=list_new0
        state=True
        state0=False
    # else:
    #     list_new=list_new0+list_new
    if state==True:
        i1=i
        list_new1=list_new[:]
        [state,i,pt1]=parser_token_adj(code,i,list_new)
        if state==True:
            pt1.con(pt0,0)
        else:
            pt1=pt0
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt2]=parser_token_noun(code,i,list_new)
                if state==True:
                    pt2.con(pt1,0)
                else:
                    pt2=pt1
        if state==False:
            i=i1
            list_new=list_new1
            [state,i,pt1]=parser_token_noun(code,i,list_new)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
        
    if state0==False:
        pt0=pt1
    
    list_pt+=list_new

    if state==False:
        print("n_ph:",state)
        return [False,i0,None]
    else:
        print("n_ph:",state,pt0.info())
        return [True,i,pt0]

def parser_token_obj(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    i0=i
    state0=True
    list_new0=list_new[:]
    # list_new=[]
    [state,i,pt0]=parser_token_tag2(code,i,list_new)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
    
    if state==False:
        i=i0
        list_new=list_new0
        state=True
        state0=False
    # else:
    #     list_new=list_new0+list_new
    if state==True:
        i1=i
        list_new1=list_new[:]
        [state,i,pt1]=parser_token_adj(code,i,list_new)
        if state==True:
            pt1.con(pt0,0)
        else:
            pt1=pt0
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt2]=parser_token_noun(code,i,list_new)
                if state==True:
                    pt2.con(pt1,0)
                else:
                    pt2=pt1
        if state==False:
            i=i1
            list_new=list_new1
            [state,i,pt1]=parser_token_noun(code,i,list_new)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
        
    if state0==False:
        pt0=pt1
    
    list_pt+=list_new

    if state==False:
        print("obj:",state)
        return [False,i0,None]
    else:
        print("obj:",state,pt0.info())
        return [True,i,pt0]

def parser_token_sbj(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    i0=i
    state0=True
    list_new0=list_new[:]
    # list_new=[]
    [state,i,pt0]=parser_token_tag2(code,i,list_new)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
    
    if state==False:
        i=i0
        list_new=list_new0
        state=True
        state0=False
    # else:
    #     list_new=list_new0+list_new
    if state==True:
        i1=i
        list_new1=list_new[:]
        [state,i,pt1]=parser_token_adj(code,i,list_new)
        if state==True:
            pt1.con(pt0,0)
        else:
            pt1=pt0
        if state==True:
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt2]=parser_token_noun(code,i,list_new)
                if state==True:
                    pt2.con(pt1,0)
                else:
                    pt2=pt1
        if state==False:
            i=i1
            list_new=list_new1
            [state,i,pt1]=parser_token_noun(code,i,list_new)
            if state==True:
                pt1.con(pt0,0)
            else:
                pt1=pt0
        
    if state0==False:
        pt0=pt1
    
    list_pt+=list_new

    if state==False:
        print("sbj:",state)
        return [False,i0,None]
    else:
        print("sbj:",state,pt0.info())
        return [True,i,pt0]

def parser_token_sent1(code,i,list_pt=None):
    i0=i
    if list_pt==None:
        list_pt=[]
    list_new=[]
    list_new0=list_new

    i0=i
    state0=True
    list_new0=list_new[:]
    # list_new=[]
    [state,i,pt0]=parser_token_sbj(code,i,list_new)
    if state==True:
        [state,i,text]=word_pat_token(code,i,r' ')
    
    if state==True:
        pt0=NetP("sbj").con(0,pt0)
    if state==False:
        i=i0
        list_new=list_new0
        state=True
        state0=False
    # else:
    #     list_new=list_new0+list_new
    if state==True:
        [state,i,pt1]=parser_token_prd(code,i,list_new)
        if state==True:
            pt1=NetP("prd").con(0,pt1)
        if state==True:
            pt1.con(pt0,0)
        else:
            pt1=pt0
        if state==True:
            i2=i
            state2=True
            list_new2=list_new[:]
            # list_new=[]
            [state,i,text]=word_pat_token(code,i,r' ')
            if state==True:
                [state,i,pt2]=parser_token_adv(code,i,list_new)
                if state==True:
                    pt2.con(pt1,0)
                else:
                    pt2=pt1
            
            if state==False:
                i=i2
                list_new=list_new2
                state=True
                state2=False
            # else:
            #     list_new=list_new2+list_new
            if state==True:
                i3=i
                state3=True
                list_new3=list_new[:]
                # list_new=[]
                [state,i,text]=word_pat_token(code,i,r' ')
                if state==True:
                    [state,i,pt3]=parser_token_obj(code,i,list_new)
                    if state==True:
                        pt3.con(pt2,0)
                    else:
                        pt3=pt2
                
                if state==True:
                    pt3=NetP("obj").con(0,pt3)
                if state==False:
                    i=i3
                    list_new=list_new3
                    state=True
                    state3=False
                # else:
                #     list_new=list_new3+list_new
                if state==True:
                    i4=i
                    state4=True
                    list_new4=list_new[:]
                    # list_new=[]
                    [state,i,text]=word_pat_token(code,i,r' ')
                    if state==True:
                        [state,i,pt4]=parser_token_tag(code,i,list_new)
                        if state==True:
                            pt4.con(pt3,0)
                        else:
                            pt4=pt3
                    
                    if state==True:
                        pt4=NetP("tag").con(0,pt4)
                    if state==False:
                        i=i4
                        list_new=list_new4
                        state=True
                        state4=False
                    # else:
                    #     list_new=list_new4+list_new
                    if state4==True:
                        list_new.append(pt4)
                if state3==False:
                    pt3=pt4
                if state3==True:
                    list_new.append(pt3)
            if state2==False:
                pt2=pt3
        if state==True:
            list_new.append(pt1)
    if state0==False:
        pt0=pt1
    if state0==True:
        list_new.append(pt0)
    
    list_pt+=list_new

    if state==False:
        print("sent1:",state)
        return [False,i0,None]
    else:
        print("sent1:",state,pt0.info())
        return [True,i,pt0]


def parser_text2pts(code):
    list_pt0=[]
    [state,i,pt]=parser_token_sent1(code,0,list_pt0)
    list_pt=[]
    for pt in list_pt0:
        if pt!=None:
                list_pt.append(pt)
    if state==False:
        return ''
    text=tools_basic.writeStdCode([],list_pt)
    return text

#text=parser_text2pts('A:B')
#print(text)



"""
+[P函数](,代码)

"""
## end
#1742, 178:
the#0"the "(,)
noun#1"man"(the#0,)
verb#2"eats"(,)
do#3""(,verb#2)
the#4"a "(prd#8,)
adj#5"red"(the#4,)
noun#6"apple"(adj#5,)
obj#7""(,the#4)
prd#8""(sbj#9,do#3)
sbj#9""(,the#0)

## end
#1748, 860:
"""
+[P函数](,整理表格)

"""
import json
f=open("文档/S应用/词典/verb_table.json")
verbs=json.loads(f.read())

list_word=verbs['verbs']
dict_past={}
dict_pastPart={}
for word in list_word:
    # print(word['Base'],word['Past-simple'],word['Past-Participle'])
    # dict_past.update({word['Past-simple']:[word['Base'],word['Past-simple'],word['Past-Participle']]})
    dict_past.update({word['Past-simple']:[word['Base'],word['Past-Participle']]})
    if word['Past-Participle']!='\u2026':
        dict_pastPart.update({word['Past-Participle']:[word['Base'],word['Past-simple']]})

with open('文档/S应用/词典/data_past.json', 'w') as f:
    json.dump(dict_past, f)
with open('文档/S应用/词典/data_pastPart.json', 'w') as f:
    json.dump(dict_pastPart, f)


"""
print(dict_past['would'][1]=='\u2026')
print(dict_pastPart)
print(list_word)
print('would' in dict_past)
+[P函数](,整理表格)

"""
## end
#1750, 31:
v1:(被动, 无介词)...
v2:...

保存:...

## end
#1752, 328:
sent1:([sbj] \ ){sbj}? [prd]{prd} (\  [obj]){obj}?
sbj:[adj] \  [noun]| [noun]
obj:[adj] \  [noun]| [noun]
prd:[be] \  [verbing]| [be] \  [verben]| [have] \  [verben]| [verb]
be:is\|are\|was\|were\|been\|be{is}
have:have\|has\|had{have} \  been?
noun:\\w+{noun}
verbing:\\w+{verb}
verben:\\w+{verb}
verb:\\w+{verb}
adj:\\w+{adj}
## end
#1754, 424:
sent1:([sbj] \ ){sbj}? [prd]{prd} (\  [adv])? (\  [obj]){obj}? (\ [tag]){tag}
sbj:[adj] \  [noun]| [noun]
obj:[adj] \  [noun]| [noun]
tag:[prep] \  [noun]
prd:[be] \  [verbing]{ing}| [be] \  [verben]{ed}| [have] \  [verben]{has}| [verb]{do}
be:is\|are\|was\|were\|been\|be{is}
have:have\|has\|had{have} \  been?
noun:\\w+{noun}
verbing:\\w+{verb}
verben:\\w+{verb}
verb:\\w+{verb}
adj:\\w+{adj}
adv:\\w+{adv}
prep:\\w+{prep}
## end
#1756, 482:
sent1:([sbj] \ ){sbj}? [prd]{prd} (\  [adv])? (\  [obj]){obj}? (\  [tag]){tag}?
sbj:[tag2]? ([adj] \  [noun]| [noun])
obj:[tag2]? ([adj] \  [noun]| [noun])
tag:[prep] \  [noun]
tag2:\[aA\]\|\[aA\]n\|\[tT\]he{the}
prd:[be] \  [verbing]{ing}| [be] \  [verben]{ed}| [have] \  [verben]{has}| [verb]{do}
be:is\|are\|was\|were\|been\|be{is}
have:have\|has\|had{have} \  been?
noun:\\w+{noun}
verbing:\\w+{verb}
verben:\\w+{verb}
verb:\\w+{verb}
adj:\\w+{adj}
adv:\\w+{adv}
prep:\\w+{prep}
## end
#1772, 849:

def fun_介宾短语(code):
    if code=="":
        return code,None
    code_save=code
    
    code,介词=fun_介词(code)
    code,宾语=fun_并列短语(code)
    介宾短语=NetP("介宾短语")
    if 宾语!=None and 介词!=None:
        介宾短语.m_db[1]=介词.m_db[1]
        介词.m_db[1].con(0,宾语.m_db[1])
        
        NetP('的').con(介宾短语,宾语)
        NetP('的').con(介宾短语,介词)
    else:
        code=code_save

        code,介词=fun_介词(code)
        code,宾语=fun_名词(code)
        介宾短语=NetP("介宾短语")
        if 宾语!=None and 介词!=None:
            介宾短语.m_db[1]=介词.m_db[1]
            介词.m_db[1].con(0,宾语.m_db[1])
            
            NetP('的').con(介宾短语,宾语)
            NetP('的').con(介宾短语,介词)
        else:
            code=code_save
            return code,None

    code,副词=fun_副词(code)
    if 副词!=None:
        副词.m_db[1].con(介词.m_db[1],0)
        NetP('的').con(介宾短语,副词)
    
    return code,介宾短语
## end
#1782, 159:
"""
M代码:...

"""

+添加曲线(屏幕,曲线)->+[del](,+添加曲线)...
->的(添加曲线,M代码)...

->+[matlab](Matlab,)->+[.]"f_n"(+[matlab],屏幕)...
->[]{
    []:->+[code](+[matlab],M代码)
}



## end
#1784, 423:
%{
+[M函数](,M代码)

addLine(M函数):...
get(gca,'XLim')
%}


addpath('Matlab/photo');
figure(f_n);

global refLine;
global refErase;
global refAxis;
global refOutput

refAxis=zeros(1,4);
refAxis(1:2)=get(gca,'XLim');
refAxis(3:4)=get(gca,'YLim');
axis equal

refErase=0.03*diff(refAxis(1:2));

if isempty(refLine) || ~isvalid(refLine)
    hold on
    refLine=plot(nan,nan,'k');
end


set(gcf,'WindowButtonDownFcn',@addLine);





## end
#1786, 542:
%{
地址::Matlab/photo/addLine.m
+[保存M函数](,addLine)

addLine2:...
addLine3:...
rmLine2:...
rmLine3:...
%}

function addLine(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');

    global refLine;
    global refOutput;

    refOutput=cType;
    if strcmp(cType,'alt')
        set(gcf,'WindowButtonMotionFcn',@addLine2);
        set(gcf,'WindowButtonUpFcn',@addLine3);
    elseif strcmp(cType,'extend')
        set(gcf,'WindowButtonMotionFcn',@rmLine2);
        set(gcf,'WindowButtonUpFcn',@rmLine3);
    end

end


## end
#1789, 22:
Matlab/photo/addLine.m
## end
#1791, 726:
%{
地址::Matlab/photo/addLine2.m
+[保存M函数](,addLine2)
%}

function addLine2(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');

    global refLine;
    global refAxis;

    refAxis=zeros(1,4);
    refAxis(1:2)=get(gca,'XLim');
    refAxis(3:4)=get(gca,'YLim');

    if strcmp(cType,'alt')
        global refLine;
        x=get(refLine,'XData');
        y=get(refLine,'YData');

        if isnan(x(1))
            x(1)=pt(1,1);
        else
            x(end+1)=pt(1,1);
        end
        
        if isnan(y(1))
            y(1)=pt(1,2);
        else
            y(end+1)=pt(1,2);
        end

        set(refLine,'XData',x);
        set(refLine,'YData',y);
        axis(refAxis);
    end

end


## end
#1793, 23:
Matlab/photo/addLine2.m
## end
#1798, 859:
%{
地址::Matlab/photo/addLine3.m
+[保存M函数](,addLine3)
%}

function addLine3(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');

    global refLine;
    global refAxis;

    refAxis=zeros(1,4);
    refAxis(1:2)=get(gca,'XLim');
    refAxis(3:4)=get(gca,'YLim');

    if strcmp(cType,'alt')
        global refLine;
        x=get(refLine,'XData');
        y=get(refLine,'YData');

        if isnan(x(1))
            x(1)=pt(1,1);
        else
            x(end+1)=pt(1,1);
        end
        
        if isnan(y(1))
            y(1)=pt(1,2);
        else
            y(end+1)=pt(1,2);
        end

        x(end+1)=nan;
        y(end+1)=nan;

        set(refLine,'XData',x);
        set(refLine,'YData',y);
        axis(refAxis);
    end
    set(gcf,'WindowButtonMotionFcn',@(h,e)0);
    set(gcf,'WindowButtonUpFcn',@(h,e)0);

end


## end
#1800, 23:
Matlab/photo/addLine3.m
## end
#1808, 708:
%{
地址::Matlab/photo/rmLine2.m
+[保存M函数](,rmLine2)
%}

function rmLine2(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');

    global refLine;
    global refErase;
    global refAxis;

    refAxis=zeros(1,4);
    refAxis(1:2)=get(gca,'XLim');
    refAxis(3:4)=get(gca,'YLim');
    refErase=0.03*diff(refAxis(1:2));

    r0=refErase;

    if strcmp(cType,'extend')
        global refLine;
        x=get(refLine,'XData');
        y=get(refLine,'YData');

        x0=pt(1,1);
        y0=pt(1,2);
        r=sqrt((x-x0).^2+(y-y0).^2);

        x(r<r0)=nan;
        y(r<r0)=nan;

        set(refLine,'XData',x);
        set(refLine,'YData',y);
%         axis(refAxis);
    end

end


## end
#1810, 796:
%{
地址::Matlab/photo/rmLine3.m
+[保存M函数](,rmLine3)
%}

function rmLine3(hObject,e)
    pt=get(gca,'CurrentPoint');
    cType=get(hObject,'SelectionType');

    global refLine;
    global refErase;
    global refAxis;

    refAxis=zeros(1,4);
    refAxis(1:2)=get(gca,'XLim');
    refAxis(3:4)=get(gca,'YLim');
    refErase=0.03*diff(refAxis(1:2));

    r0=refErase;

    if strcmp(cType,'extend')
        global refLine;
        x=get(refLine,'XData');
        y=get(refLine,'YData');

        x0=pt(1,1);
        y0=pt(1,2);
        r=sqrt((x-x0).^2+(y-y0).^2);

        x(r<r0)=nan;
        y(r<r0)=nan;

        set(refLine,'XData',x);
        set(refLine,'YData',y);
%         axis(refAxis);
    end
    set(gcf,'WindowButtonMotionFcn',@(h,e)0);
    set(gcf,'WindowButtonUpFcn',@(h,e)0);

end


## end
#1812, 22:
Matlab/photo/rmLine2.m
## end
#1814, 22:
Matlab/photo/rmLine3.m
## end
### 结束